import {
    describe as descrWithContext,
    expect,
    it as itWithContext,
    beforeEach,
    vi,
    assertType,
    expectTypeOf,
    beforeAll,
    afterEach,
} from "vitest";
import {
    decodeTx,
    makeTxOutput,
    NetworkParams,
    Tx,
    TxOutput,
} from "@helios-lang/ledger";
import {
    Capo,
    StellarTxnContext,
    parseCapoJSONConfig,
    CapoWithoutSettings,
    type ConfigFor,
    TxDescription,
    GenericSigner,
    SetupInfo,
    TxBatcher,
    colors
} from "@donecollectively/stellar-contracts";
const { blue } = colors

import { SubmitterRetryIntervals, TxSubmitMgr } from "../src/networkClients/TxSubmitMgr.js";

import {
    ADA,
    StellarTestContext,
    TestHelperState,
    addTestContext,
} from "../src/testing";
import { DefaultCapoTestHelper } from "../src/testing/DefaultCapoTestHelper";
import { expectTxnError } from "../src/testing/StellarTestHelper";
import { makeBlockfrostV0Client } from "@helios-lang/tx-utils";
import { UplcConsoleLogger } from "../src/UplcConsoleLogger";
// import { RoleDefs } from "../src/RolesAndDelegates";

type localTC = StellarTestContext<DefaultCapoTestHelper>;

const it = itWithContext<localTC>;
const fit = it.only;
const xit = it.skip; //!!! todo: update this when vitest can have skip<HeliosTestingContext>
//!!! until then, we need to use if(0) it(...) : (
// ... or something we make up that's nicer

const describe = descrWithContext<localTC>;
const bf = makeBlockfrostV0Client(
    "preprod",
    "preprod8IoaBd05Hl9xP3ptE44f42xtKvkKWHC4"
);
let networkParams: NetworkParams;
const retryIntervals : SubmitterRetryIntervals = {
    reconfirm: 140,
    submit: 200,
    confirm: 100,
    startup: 50,
    maximum: 1200,
};

let lastStatus: TxSubmitMgr["$$statusSummary"] = {} as any;
function logProgress(tsm: TxSubmitMgr) {
    tsm.$notifier.on("changed", (tsm) => {
        const diff = {};
        for (const [k, v] of Object.entries(tsm.$$statusSummary)) {
            if (lastStatus[k] !== v) {
                diff[k] = v;
            }
        }
        lastStatus = tsm.$$statusSummary;
        
        console.log("Updated tx submit status:", diff);
    });
}

let tx: Tx = undefined as any;
let tsm: TxSubmitMgr = undefined as any;
let mkSubmitMgr: () => {
    promise: Promise<any>;
    resolve: (x: any) => void;
    reject: (x: any) => void;
    tsm: TxSubmitMgr;
};
let timeout = 5000;

describe("TxSubmitMgr", async () => {
    beforeAll(async () => {
        if (!networkParams) networkParams = await bf.parameters;

        tx = decodeTx(testTx);
        tx.body.recover(bf);
    });

    beforeEach<localTC>(async (context) => {
        console.log(
            blue(
                "=====================================================================" +
                    "=====================================================================\n" +
                    "=====================================================================" +
                    "====================================================================="
            )
        );
        await addTestContext(
            context,
            DefaultCapoTestHelper,
            undefined,
            // fake helper state to get rid of the big helpful message
            {} as any
        );
        await context.h.delay(1);

        // this setup isn't good enough for most things, but
        // it's good enough for isolated testing of the tx submit mgr
        const miniSetup: SetupInfo = {
            network: bf,
            networkParams,
            isTest: true,
            isMainnet: false,
            txBatcher: new TxBatcher({
                submitters: {
                    blockfrost: bf,
                },
            }),
        } as any;
        // we shouldn't even need to touch the txBatcher
        // miniSetup.txBatcher.setup = miniSetup;

        mkSubmitMgr = () => {
            const logger = new UplcConsoleLogger();
            logger.logPrint("  -- testing tx submission --");

            let resolve, reject;
            const promise = new Promise((res, rej) => {
                resolve = res;
                reject = rej;
            });

            tsm = new TxSubmitMgr({
                name: "test",
                txd: {
                    tx,
                    description: "test tx",
                    id: "54321",
                    tcx: { logger } as any,
                    signedTxCborHex: testTx,
                    // depth: 0,
                    options: {
                        // onSubmitError: reject,
                    },
                    // stats: {
                    //     /** not used in the tx submit mgr obj */
                    // } as any,
                    // txCborHex: "unused",
                    txId: tx.id(),
                } as any,
                // setup: capo.setup,
                setup: miniSetup as any,
                submitter: bf,
                retryIntervals,
            });
            const timeoutId = setTimeout(() => {
                reject(new Error("timeout"));
            }, timeout);
            promise.then(
                () => {
                    clearTimeout(timeoutId);
                },
                () => {
                    // no worries, someone else will catch the error if important
                }
            );

            logProgress(tsm);

            return { tsm, promise, resolve, reject };
        };
    });
    afterEach(async() => {        
        tsm?.destroy();

        // await tsm?.delayed(10000);
    });

    it("submits a tx and confirms it", async (context: localTC) => {
        const { resolve, tsm, reject, promise } = mkSubmitMgr();

        vi.spyOn(tsm, "doSubmit").mockImplementation(async () => {
            return tx.id();
        });
        vi.spyOn(tsm, "confirmTx").mockImplementation(async () => {
            return true;
        });
        vi.spyOn(tsm, "isExpiryError").mockImplementation((problem) => {
            throw new Error(`there shouldn't be ANY errors`);
        });
        vi.spyOn(tsm, "isUnknownUtxoError").mockImplementation((problem) => {
            throw new Error(`there shouldn't be ANY errors`);
        });

        tsm.$notifier.on("state:entered", (tsm, state) => {
            if (state === "confirmed") {
                resolve(tsm);
            }
        });

        return promise;
    });

    it("tries hard to get confirmation, and resubmits with gradual backoff", async (context: localTC) => {
        timeout = 10000
        const { resolve, tsm, reject, promise } = mkSubmitMgr();

        let submitCount = 0;
        let confirmCount = 0;
        vi.spyOn(tsm, "doSubmit").mockImplementation(async () => {
            await tsm.delayed(1);
            if (submitCount > 3) {
                throw new Error("fake submit error");
            }
            submitCount++;
            return tx.id();
        });
        let mockedExpiryError = false;
        vi.spyOn(tsm, "isExpiryError").mockImplementation((problem) => {
            return mockedExpiryError;
        });
        vi.spyOn(tsm, "isUnknownUtxoError").mockImplementation((problem) => {
            return false;
        });

        vi.spyOn(tsm, "confirmTx").mockImplementation(async () => {
            confirmCount++;
            return false;
        });

        tsm.$notifier.on("state:entered", (tsm, state) => {
            if (state === "submitting") {
                // in a real life version of this scenario, we'd keep trying until the 
                // tx becomes expired or the user themselves gives up.  But here,
                // we can just resolve it after a few tries.
                if (submitCount > 3) {
                    //Now we simulate expiration of the tx:
                    mockedExpiryError = true;
                    vi.spyOn(tsm, "isTxExpired").mockImplementation(() => {
                        return true;
                    });
                }
                submitCount++;
            }
            if (state === "confirmed") {
                reject(new Error("shouldn't ever confirm"));
            }
            if (state === "failed") {
                resolve(tsm);
            }
        });
        let confirmBackoffs: number[] = [];

        tsm.$notifier.on("backoff", (tsm, interval, transition) => {
            if (transition === "confirming") {
                console.log("     --- will retry confirmation after", interval);
                confirmBackoffs.push(interval);
            }
        });

        return promise.then(() => {
            expect(submitCount).toBe(4);
            expect(confirmCount).toBeGreaterThan(6)
            // each time in te confirmation state has its own limited number of backoffs
            expect(confirmBackoffs.length).toBe(20);
            const firstBackoff = confirmBackoffs[0];
            const lastBackoff = confirmBackoffs[confirmBackoffs.length - 1];
            expect(lastBackoff, "backoff should be increasing significantly").toBeGreaterThan(firstBackoff * 2);

            expect(tsm.$state).toBe("failed");
        })
    });

    it("re-confirms a tx even if it seems to be expired", async (context: localTC) => {
        const { resolve, tsm, reject, promise } = mkSubmitMgr();

        vi.spyOn(tsm, "doSubmit").mockImplementation(async () => {
            debugger;
            await tsm.delayed(1);
            debugger;
            throw new Error("fake expired error");
        });
        vi.spyOn(tsm, "confirmTx").mockImplementation(async () => {
            await tsm.delayed(1);
            return true;
        });
        vi.spyOn(tsm, "isExpiryError").mockImplementation((problem) => {
            return problem.message.includes("fake expired error");
        });
        vi.spyOn(tsm, "isTxExpired").mockImplementation(() => {
            return true
        });
        vi.spyOn(tsm, "isUnknownUtxoError").mockImplementation((problem) => {
            return false;
        });
        tsm.$notifier.on("state:entered", (tsm, state) => {
            if (state === "confirmed") {
                resolve(tsm);
            }
        });

        return promise;
    });

    it("re-confirms a tx if it's already on-chain", async (context: localTC) => {
        const { resolve, tsm, reject, promise } = mkSubmitMgr();

        vi.spyOn(tsm, "doSubmit").mockImplementation(async () => {
            await tsm.delayed(1);
            throw new Error("fake submit error");
        });
        vi.spyOn(tsm, "isExpiryError").mockImplementation((problem) => {
            return false;
            return problem.message.includes("fake submit error");
        });
        vi.spyOn(tsm, "isUnknownUtxoError").mockImplementation((problem) => {
            // "already spent utxo"
            return problem.message.includes("fake submit error");
        });

        tsm.$notifier.on("state:entered", (tsm, state) => {
            if (state === "confirmed") {
                resolve(tsm);
            }
        });

        return promise;
    });

    it("acknoweldges permanent failure when the tx can't ever be valid", async (context: localTC) => {
        // timeout = 5000000
        const { resolve, tsm, reject, promise } = mkSubmitMgr();

        vi.spyOn(tsm, "doSubmit").mockImplementation(async () => {
            await tsm.delayed(1);
            throw new Error("bad txn error");
        });
        vi.spyOn(tsm, "confirmTx").mockImplementation(async () => {
            await tsm.delayed(1);
            debugger;
            return false;
        });
        vi.spyOn(tsm, "isExpiryError").mockImplementation((problem) => {
            return false;
        });
        vi.spyOn(tsm, "isUnknownUtxoError").mockImplementation((problem) => {
            return false;
        });
        tsm.$notifier.on("state:entered", (tsm, state) => {
            if (state === "failed") {
                resolve(tsm);
            }
        });

        return promise;
    });
});

const testTx =
    "";
