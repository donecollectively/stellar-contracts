{"version":3,"file":"HeliosScriptBundle.mjs","sources":["../src/helios/CachedHeliosProgram.ts","../src/UplcConsoleLogger.ts","../src/colors.ts","../src/utils.ts","../src/StellarTxnContext.ts","../src/diagnostics.ts","../src/delegation/jsonSerializers.ts","../src/helios/scriptBundling/HeliosScriptBundle.ts"],"sourcesContent":["import {\n    Program,\n    type CompileOptions,\n    type ProgramProps,\n} from \"@helios-lang/compiler\";\nimport type { Source } from \"@helios-lang/compiler-utils\";\nimport {\n    decodeUplcProgramV2FromCbor,\n    deserializeUplcSourceMap,\n    makeUplcSourceMap,\n    type UplcProgramV2,\n    type UplcSourceMapJsonSafe,\n} from \"@helios-lang/uplc\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\nimport { blake2b } from \"@helios-lang/crypto\";\nimport { extractName } from \"@helios-lang/compiler\";\n\nimport { textToBytes } from \"../HeliosPromotedTypes.js\";\nimport type { CompileOptionsForCachedHeliosProgram } from \"../HeliosPromotedTypes.js\";\n\nexport type CacheableProgramProps = ProgramProps & {\n    isTestnet: boolean; // non-optional\n    /**\n     * The cache key for the program. Defaults to the hash of the source code.\n     * If there is no source code, the cacheKey is required\n     */\n    cacheKey?: string;\n    /**\n     * The timeout, in milliseconds for waiting for another instance to finish compiling.\n     * The default timeout is 30 seconds.\n     */\n    timeout?: number;\n    /**\n     * The expected script hash for the program.  The compiled program is checked against\n     * this script hash, if provided.\n     */\n    expectedScriptHash?: string;\n    /**\n     * name of the script, which may be different from the name of the script's entry-point\n     * / main module\n     */\n    name?: string;\n};\n\ntype OptimizeOptions =\n    | false\n    | Omit<\n          Exclude<CompileOptions[\"optimize\"], boolean | undefined>,\n          \"iterSpecificOptions\" | \"commonSubExprCount\"\n      >;\n\n/**\n * @internal\n */\nexport type HeliosProgramCacheEntry = {\n    version: \"PlutusV2\" | \"PlutusV3\";\n    createdBy: string;\n    programElements: Record<string, string | Object>;\n    optimizeOptions: OptimizeOptions;\n    optimized?: UplcProgramV2; // | UplcProgramV3I;\n    unoptimized?: UplcProgramV2; //| UplcProgramV3I;\n    optimizedIR?: string;\n    unoptimizedIR?: string;\n    optimizedSmap?: UplcSourceMapJsonSafe;\n    unoptimizedSmap?: UplcSourceMapJsonSafe;\n};\n\n/**\n * @internal\n */\nexport type SerializedHeliosCacheEntry = {\n    version: \"PlutusV2\" | \"PlutusV3\";\n    createdBy: string;\n    programElements: Record<string, string | Object>;\n    optimizeOptions: OptimizeOptions;\n    optimized?: string;\n    unoptimized?: string;\n    optimizedIR?: string;\n    unoptimizedIR?: string;\n    optimizedSmap?: UplcSourceMapJsonSafe;\n    unoptimizedSmap?: UplcSourceMapJsonSafe;\n};\n\n/**\n * @internal\n */\nexport type DeployedProgramBundle = Pick<\n    SerializedHeliosCacheEntry,\n    | \"version\"\n    | \"programElements\"\n    | \"optimized\"\n    | \"unoptimized\"\n    | \"optimizedIR\"\n    | \"unoptimizedIR\"\n    | \"optimizedSmap\"\n    | \"unoptimizedSmap\"\n>;\n\n/**\n * @internal\n */\nexport type lockInfo<T> = {\n    lock: T;\n    release: () => void;\n};\n\n/**\n * @internal\n */\nexport type LockInfoForStrat<T extends CachedHeliosProgram> = Awaited<\n    ReturnType<T[\"acquireLock\"]>\n>;\n\nconst redirecToCorrectConstructor =\n    \"üê¢${this.id}: wrong direct use of new() constructor in CachedHeliosProgram; use forCurrentPlatform() instead\";\n\n/**\n * A Helios program that caches its compiled UPLC program.\n * @remarks\n * Only available in the node.js environment for now, by importing\n * HeliosProgramWithCacheAPI from the @stellar-contracts/HeliosProgramWithCacheAPI module.\n *\n * ### Feedback please?\n * Probably nobody ever sees this doc?  If you do, please let us know!\n * @public\n */\nexport class CachedHeliosProgram extends Program {\n    // static memoryCache = new Map<string, UplcProgramV2 | UplcProgramV3>();\n    props: CacheableProgramProps;\n    locks: Map<string, lockInfo<any>> = new Map();\n    programElements: Record<string, string | Object>;\n    cacheEntry: HeliosProgramCacheEntry | undefined;\n\n    sources: (Source | string)[];\n    static id: string =\n        globalThis?.id || Math.floor(Math.random() * 1000).toString();\n    id: string;\n\n    /**\n     * Creates a new CachedHeliosProgram.\n     * @remarks\n     * Expects the same arguments as the Helios {@link Program} constructor.\n     *\n     * Returns a Program subclass that also conforms to the CachedHeliosProgram interface.\n     *\n     * Use the {@link compileCached | compileCached()} method to compile the program.\n     * @public\n     */\n    constructor(mainSource: string | Source, props: CacheableProgramProps) {\n        super(mainSource, props);\n        this.sources = [mainSource, ...(props?.moduleSources || [])];\n        this.programElements = {};\n        this.id = this.subclass.id;\n        const effectiveProps = {\n            ...{\n                timeout: 30000,\n            },\n            ...(props || {}),\n        };\n        this.props = effectiveProps;\n\n        if (this.constructor === CachedHeliosProgram) {\n            throw new Error(redirecToCorrectConstructor);\n        }\n    }\n\n    /**\n     * Checks for the presence of a cache key, without attempting a lock.  Indicates\n     * whether the program is in the cache; if so, no lock is needed to read it.  Returns\n     * the cached program if found, or null if not found.  Must be implemented by each subclass\n     * as a platform-specific STATIC method.\n     */\n    static async ifCached(cacheKey: string): Promise<string | null> {\n        throw new Error(redirecToCorrectConstructor);\n    }\n\n    /**\n     * Acquires a lock for the given cache key.  Must be implemented by each subclass\n     * as a platform-specific STATIC method.  Blocks while waiting for the lock.  Returns\n     * the lock details or throws an error if the lock cannot be acquired.\n     * The method receives the cache key and the program properties, which includes\n     * the timeout to be used.\n     */\n    static async acquireLock(\n        cacheKey: string,\n        props: CacheableProgramProps\n    ): Promise<lockInfo<any>> {\n        throw new Error(redirecToCorrectConstructor);\n    }\n\n    /**\n     * Acquires a lock for the given cache key, but does not wait.  Must be implemented by each subclass\n     * as a platform-specific STATIC method.\n     */\n    static async acquireImmediateLock(\n        cacheKey: any,\n        props: CacheableProgramProps\n    ): Promise<lockInfo<any> | null> {\n        throw new Error(redirecToCorrectConstructor);\n    }\n\n    /**\n     * Stores a compiled UPLC program in the cache.  Must be implemented by each subclass\n     * as a platform-specific STATIC method.\n     */\n    static async cacheStore(\n        key: string,\n        value: string,\n        raw: HeliosProgramCacheEntry\n    ): Promise<void> {\n        throw new Error(redirecToCorrectConstructor);\n    }\n\n    static async initCacheFromBundle(\n        cacheEntries: Record<string, string | SerializedHeliosCacheEntry>\n    ): Promise<void> {\n        //!!! todo work on this more\n        for (const [key, value] of Object.entries(cacheEntries)) {\n            const found = await this.ifCached(key);\n            if (found) {\n                console.log(\n                    `üê¢${this.id}: duplicate key in compiler cache: ${key}`\n                );\n            }\n            if (\"string\" === typeof value) {\n                this.cacheStore(\n                    key,\n                    value,\n                    this.toHeliosProgramCacheEntry(JSON.parse(value))\n                );\n            } else {\n                const { version } = value;\n                if (version !== \"PlutusV2\" && version !== \"PlutusV3\") {\n                    console.log(\n                        `üê¢${this.id}: unknown version '${version}'' in compiler cache entry: ${key}; skipping`\n                    );\n                    continue;\n                }\n                try {\n                    programFromCacheEntry(value);\n                } catch (e: any) {\n                    console.log(e.message);\n                    console.log(\n                        `^^ üê¢${this.id}: error parsing CBOR program from cache entry: ${key}; skipping`\n                    );\n                    continue;\n                }\n\n                this.cacheStore(\n                    key,\n                    JSON.stringify(value),\n                    this.toHeliosProgramCacheEntry(value)\n                );\n            }\n        }\n    }\n\n    static toHeliosProgramCacheEntry(\n        value: SerializedHeliosCacheEntry\n    ): HeliosProgramCacheEntry {\n        throw new Error(\"todo\");\n    }\n\n    /**\n     * for vscode index view\n     * @internal\n     */\n    private async ______endStatics() {}\n\n    // hashObjectElements(obj: Record<string, string>): Record<string, string> {\n    //     return Object.fromEntries(\n    //         Object.entries(obj).map(([name, content]) => [\n    //             name,\n    //             bytesToHex(blake2b(textToBytes(content))),\n    //         ])\n    //     );\n    // }\n\n    /**\n     * transforms an object of strings, hashing its values\n     */\n    hashObjectEntries(obj: Record<string, string>): Record<string, string> {\n        return Object.fromEntries(\n            Object.entries(obj).map(([name, content]) => [\n                name,\n                bytesToHex(blake2b(textToBytes(content))),\n            ])\n        );\n    }\n\n    /**\n     * transforms an object of strings to a text representation in RFC822 \"headers\" style\n     */\n    objectToText(obj: Record<string, string | number | boolean>): string {\n        return Object.entries(obj)\n            .map(([name, content]) => `${name}: ${content}`)\n            .join(\"\\n\");\n    }\n\n    /**\n     * Builds an index of the source code hashes for the program elements\n     * (main script, other modules)\n     */\n    sourceHashIndex(): Record<string, string> {\n        return this.hashObjectEntries(\n            Object.fromEntries(\n                this.sources.map((s) => {\n                    const name =\n                        \"string\" === typeof s ? extractName(s) : s.name;\n                    const content = \"string\" === typeof s ? s : s.content;\n                    return [name, content];\n                })\n            )\n        );\n    }\n\n    /**\n     * Gathers the program elements needed for caching\n     */\n    gatherProgramElements(): Record<string, string | Object> {\n        return (this.programElements = {\n            ...this.sourceHashIndex(),\n            params: this.entryPoint.paramsDetails(),\n        });\n    }\n\n    computeInputsHash(options: CompileOptionsForCachedHeliosProgram): string {\n        const index = {\n            ...this.programElements,\n        };\n        const { params, ...otherElements } = index;\n        const elementsText = this.objectToText(otherElements as any);\n        const paramsContent = this.objectToText(params as any);\n        // let optimize: OptimizeOptions = options.optimize ?? {};\n        // if (true == optimize) optimize = {};\n        // const optimizeText =\n        // false == optimize ? \"unoptimized\" : this.objectToText(optimize);\n        const optimizeText = this.textOptimizeOptions(options);\n        const optimizeHash = bytesToHex(blake2b(textToBytes(optimizeText)));\n\n        const paramsHashText = this.objectToText(\n            this.hashObjectEntries({ params: paramsContent })\n        );\n        return bytesToHex(\n            blake2b(\n                textToBytes(\n                    elementsText +\n                        \"\\n\" +\n                        paramsHashText +\n                        \"\\n\" +\n                        optimizeHash +\n                        \"\\n\"\n                )\n            )\n        );\n    }\n\n    optimizeOptions(\n        options: CompileOptionsForCachedHeliosProgram\n    ): OptimizeOptions {\n        let optimize: OptimizeOptions =\n            true == options.optimize\n                ? {}\n                : (options.optimize as OptimizeOptions) ?? {};\n\n        return optimize;\n    }\n\n    textOptimizeOptions(options: CompileOptionsForCachedHeliosProgram): string {\n        let optimize = this.optimizeOptions(options);\n        if (false == optimize) return \"unoptimized\";\n        type justOptions = Exclude<OptimizeOptions, false>;\n        let o: justOptions = optimize as any;\n        return this.objectToText(\n            // sort the keys in optimize.\n            Object.fromEntries(\n                Object.entries(o).sort(([a], [b]) => a.localeCompare(b))\n            ) as justOptions\n        );\n    }\n\n    get preferredProgramName(): string {\n        return this.props.name || this.name;\n    }\n\n    getCacheKey(options: CompileOptionsForCachedHeliosProgram): string {\n        if (this.props.cacheKey) {\n            // for using ScriptHash as the caching key\n            return this.props.cacheKey;\n        }\n        const hashString = this.computeInputsHash(options);\n        const opt = false == options.optimize ? \"-unoptimized\" : \"\";\n\n        return `${this.preferredProgramName}${opt}-${hashString}`;\n    }\n\n    /**\n     * Compiles a Helios program to UPLC, with caching for performance\n     *\n     * ### Caching behavior\n     * This method seeks to quickly return a compiled version of the program, using\n     * a platform-specific cache (and lock) mechanism.\n     * #### Happy path\n     *  - if the program is found in the cache, it is immediately returned\n     * #### First compilation and cache-storage\n     *  - Otherwise, a lock is acquired and the program is compiled\n     *  - Once compiled, the cache entry is created for future use, and its lock is lifted\n     *\n     * #### When there is a compile already pending\n     *\n     * Once a Helios program starts compiling once, calling `compileCached()` on any\n     * instance of the same program with the same settings results in the same cache\n     * key.  This may occur in a different browser tab, service worker, node-js thread/worker,\n     * or a different node process.  In each case, the second `compileCached()` call:\n     *\n     *  - Issues a warning that it is waiting for another process to complete the compilation.\n     *  - waits up to 15 seconds (or the configured `timeout`) for a lock (indicating that\n     *    another instance is compiling the program already)\n     * - when the lock  is released, the compiled program is read from the cache, and returned.\n     *  - includes the unoptimized version of the UPLC program for logging\n     *\n     * #### When everything goes wrong\n     * If the process holding a lock doesn't succeed and doesn't release the lock, the\n     * lock goes stale automatically, and the lock fails (after the `timeout` period).  In\n     * this case, each instance of the program:\n     *\n     *   - makes a last attempt to compile the program\n     *   - If it fails, the local process will report the error normally, and no caching is done\n     *   - If it succeeds, the result is returned.\n     *   - it also tries to cache the result (if it can do so without delay)\n     *\n     *  - todo: measure the time cost of the \"has errors\" path.\n     *\n     * See Helios' {@link Program.compile} for more information about compiling Helios programs.\n     *\n     * import from stellar-contracts/CacheableProgramAPI in a node.js environment\n     * to access this method.  In the web environment, that import returns a different\n     * class with the same interface.\n     */\n    async compileWithCache(\n        optimizeOrOptions: boolean | CompileOptionsForCachedHeliosProgram\n    ): Promise<UplcProgramV2> {\n        // Promise<UplcProgramV2 | UplcProgramV3> {\n        const options: CompileOptionsForCachedHeliosProgram =\n            typeof optimizeOrOptions === \"boolean\"\n                ? { optimize: optimizeOrOptions }\n                : optimizeOrOptions;\n        const optimize = this.optimizeOptions(optimizeOrOptions as any);\n\n        const programElements = (this.programElements =\n            this.gatherProgramElements());\n\n        const cacheKey = this.getCacheKey(options);\n        // const cachedProgram = CachedHeliosProgram.memoryCache.get(cacheKey);\n\n        const fromCache = await this.getFromCache(cacheKey);\n        if (fromCache) {\n            // const programCount = fromCache.alt ? 2 : 1;\n            console.log(`üê¢${this.id}: ${cacheKey}: from cache`);\n            return fromCache;\n        }\n        // not in cache.  Get the lock; if we get it, then we compile.  If not, we wait\n        // for the lock to be released by another instance.\n        const weMustCompile = await this.acquireImmediateLock(cacheKey);\n        const otherInstanceIsCompiling = !weMustCompile;\n        if (otherInstanceIsCompiling) {\n            console.log(\n                `üê¢${this.id}: waiting for pending compile: ${cacheKey}`\n            );\n            try {\n                const cacheEntry = await this.waitForCaching(cacheKey);\n                const program = programFromCacheEntry(cacheEntry);        \n                this.cacheEntry = deserializeHeliosCacheEntry(cacheEntry);\n                debugger\n                return program\n            } catch (e) {\n                console.log(\n                    `üê¢${this.id}: Failed getting cache-awaited program with cacheKey: ${cacheKey}; will compile in-process`\n                );\n                // if this happens, there should be a lock in the locks map... vvvvv\n            }\n        }\n        // we either are delayed from a failed wait-for-cache (with pending lock)\n        // ... or we got an immediate lock\n        let lock = weMustCompile || this.locks.get(cacheKey);\n        if (!lock) {\n            throw new Error(\n                `we should have a lock one way or other at this point`\n            );\n        }\n\n        try {\n            console.log(\n                `üê¢${this.id}: compiling program with cacheKey: ${cacheKey}`\n            );\n            // slow!\n            const uplcProgram = this.compile(options);\n            const cacheEntry: HeliosProgramCacheEntry = {\n                version: \"PlutusV2\",\n                createdBy: this.id,\n                optimizeOptions: optimize,\n                programElements,\n            };\n\n            if (uplcProgram.alt) {\n                cacheEntry.unoptimized = uplcProgram.alt;\n                cacheEntry.unoptimizedIR = uplcProgram.alt.ir;\n                cacheEntry.unoptimizedSmap = makeUplcSourceMap({\n                    term: uplcProgram.alt.root,\n                }).toJsonSafe();\n\n                cacheEntry.optimized = uplcProgram;\n                cacheEntry.optimizedIR = uplcProgram.ir;\n                cacheEntry.optimizedSmap = makeUplcSourceMap({\n                    term: uplcProgram.root,\n                }).toJsonSafe();\n            } else {\n                const sourceMap = makeUplcSourceMap({ term: uplcProgram.root });\n                if (false == options.optimize) {\n                    cacheEntry.unoptimized = uplcProgram;\n                    cacheEntry.unoptimizedIR = uplcProgram.ir;\n                    cacheEntry.unoptimizedSmap = sourceMap.toJsonSafe();\n                } else {\n                    cacheEntry.optimized = uplcProgram;\n                    cacheEntry.optimizedIR = uplcProgram.ir;\n                    cacheEntry.optimizedSmap = sourceMap.toJsonSafe();\n                }\n            }\n            this.cacheEntry = cacheEntry;\n            this.storeInCache(cacheKey, cacheEntry);\n            return uplcProgram;\n        } catch (e: any) {\n            debugger;\n            console.log(\n                `üê¢${this.id}: compiler cache: throwing compile error: ${e.message} (not caching) (dbpa)`\n            );\n            this.releaseLock(cacheKey);\n            throw e;\n        }\n    }\n\n    async waitForCaching(\n        cacheKey: string\n    ): Promise<SerializedHeliosCacheEntry> {\n        // we won't get the lock very quickly, but it should come through as\n        // soon as the other process finishes.\n        return this.acquireLock(cacheKey).then(async (lock) => {\n            if (lock) {\n                const cached = await this.ifCached(cacheKey);\n                if (cached) {\n                    lock?.release();\n                    return cached;\n                }\n                // things aren't great if we get here.  But we got the lock, so we can\n                // use it to store the program in the cache.\n                this.locks.set(cacheKey, lock);\n                console.log(\n                    `üê¢${this.id}: waitForCaching: Lock acquired but no cache entry.  Storing lock in map`\n                );\n                throw new Error(\n                    `Lock acquired but no cache entry for ${cacheKey}; compute locally then release this.locks[key].`\n                );\n            }\n            throw new Error(\n                `Lock for ${cacheKey} not acquired; compute locally (and try to populate the cache if possible)`\n            );\n        });\n    }\n\n    async getFromCache(\n        cacheKey: string\n    ): Promise<undefined | UplcProgramV2 /* | UplcProgramV3 */> {\n        const cacheEntry = await this.ifCached(cacheKey);\n        if (cacheEntry) {\n            this.cacheEntry = deserializeHeliosCacheEntry(cacheEntry)\n            // debugger\n            return programFromCacheEntry(cacheEntry);\n        }\n        return undefined;\n    }\n\n    get subclass(): typeof CachedHeliosProgram {\n        return this.constructor as typeof CachedHeliosProgram;\n    }\n\n    static checkPlatform(): \"web\" | \"nodejs\" {\n        // determine if in-browser or using node.js\n        // thanks to https://gist.github.com/rhysburnie/498bfd98f24b7daf5fd5930c7f3c1b7b\n\n        // alt: consider this approach https://stackoverflow.com/a/31090240\n\n        // thuthy\n        var _nodejs: any =\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            process.versions.node;\n        if (_nodejs) {\n            _nodejs = {\n                version: process.versions.node,\n            };\n        }\n\n        // truthy\n        var _browser: any =\n            !_nodejs &&\n            (typeof window !== \"undefined\" || typeof self !== \"undefined\");\n        if (_browser) {\n            // _browser = {\n            //     window: false,\n            //     self: false,\n            //     $: false,\n            // };\n            if (typeof global === \"undefined\") {\n                if (typeof window !== \"undefined\") {\n                    global = window;\n                    _browser.window = true;\n                } else if (typeof self !== \"undefined\") {\n                    global = self;\n                    _browser.self = true;\n                }\n                // } else if (typeof $ !== \"undefined\") {\n                //     global = $;\n                //     _browser.$ = true;\n                // }\n            }\n        }\n\n        if (_nodejs) {\n            console.log(\"Node.js detected\");\n            return \"nodejs\";\n            // module.export = {\n            //     nodejs: _nodejs,\n            //     browser: _browser,\n            // };\n        }\n        console.log(\"Browser env detected\");\n        return \"web\";\n    }\n\n    /**\n     * for vscode index view\n     * @internal\n     */\n    async __vvv_______instanceToStatic() {}\n\n    async ifCached(\n        cacheKey: string\n    ): Promise<SerializedHeliosCacheEntry | null> {\n        const string = await this.subclass.ifCached(cacheKey);\n        if (string) {\n            try {\n                return JSON.parse(string) as SerializedHeliosCacheEntry;\n            } catch (e: any) {\n                console.log(\n                    `  -- üê¢${this.id}: cleaning up invalid cache entry for ${cacheKey}: ${e.message}`\n                );\n                // (cleanup implied by returning null)\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Acquires a lock for the given cache key, waiting according to the\n     * configured `timeout` for another instance to finish compiling.\n     *\n     * Throws an error if the timeout expires\n     */\n    async acquireLock(cacheKey: string) {\n        return this.subclass.acquireLock(cacheKey, this.props).then((lock) => {\n            this.locks.set(cacheKey, lock);\n            return lock;\n        });\n    }\n\n    /**\n     * Acquires a lock for the given cache key if it can do so immediately.\n     * Stores the lock in the instance's lock map.\n     */\n    async acquireImmediateLock(cacheKey: string) {\n        const lock = await this.subclass.acquireImmediateLock(\n            cacheKey,\n            this.props\n        );\n        if (lock) {\n            this.locks.set(cacheKey, lock);\n        }\n        return lock;\n    }\n\n    /**\n     * Stores a compiled UPLC program in the cache.\n     * Requires the lock to exist.\n     * Releases the lock after storing the program.\n     */\n    async storeInCache(\n        cacheKey: string,\n        value: HeliosProgramCacheEntry\n    ): Promise<void> {\n        if (!this.locks.has(cacheKey)) {\n            throw new Error(\n                `storeInCache: the lock for ${cacheKey} is not present`\n            );\n        }\n\n        return this.subclass\n            .cacheStore(\n                cacheKey,\n                stringifyCacheEntry(value),\n                value\n            )\n            .then(() => {\n                this.releaseLock(cacheKey);\n            });\n    }\n\n    /**\n     * Releases the lock for the given cache key.\n     * Removes the lock from the instance's lock map.\n     * Throws an error if the lock is not found.\n     */\n    releaseLock(cacheKey: string) {\n        const lock = this.locks.get(cacheKey);\n        if (lock) {\n            lock.release();\n            this.locks.delete(cacheKey);\n        } else {\n            throw new Error(`releaseLock: no lock found for ${cacheKey}`);\n        }\n    }\n}\n\nexport function stringifyCacheEntry(entry: HeliosProgramCacheEntry): string {\n    return JSON.stringify(\n        serializeCacheEntry(entry),\n        null,\n        2\n    );\n}\n\nexport function serializeCacheEntry(\n    entry: HeliosProgramCacheEntry): SerializedHeliosCacheEntry \n{\n    const { optimized, unoptimized } = entry;\n    return {\n        ...entry,\n        ...(optimized\n            ? { optimized: bytesToHex(optimized.toCbor()) }\n            : {}),\n        ...(unoptimized\n            ? { unoptimized: bytesToHex(unoptimized.toCbor()) }\n            : {}),\n    } as any;\n}\n\nexport function programFromCacheEntry(\n    fromCache: DeployedProgramBundle | SerializedHeliosCacheEntry\n): UplcProgramV2 {\n    //  | UplcProgramV3 {\n    // the program is a hex-string, accepted by both UplcProgramV2 and UplcProgramV3\n    const {\n        optimized,\n        optimizedIR,\n        unoptimized,\n        unoptimizedIR,\n        version,\n        optimizedSmap,\n        unoptimizedSmap,\n        // optimizeOptions,\n        // createdBy,\n        programElements\n    } = fromCache;\n    if (version !== \"PlutusV2\") throw new Error(`pv3supportpending`);\n    // TargetClass = version == \"PlutusV2\" ? UplcProgramV2 : UplcProgramV3;\n\n    const o = optimized\n        ? decodeUplcProgramV2FromCbor(optimized, {\n              ir: optimizedIR,\n              sourceMap: optimizedSmap,\n          })\n        : undefined;\n    const u = unoptimized\n        ? decodeUplcProgramV2FromCbor(unoptimized, {\n              ir: unoptimizedIR,\n              sourceMap: unoptimizedSmap,\n          })\n        : undefined;\n    if (o) {\n        if (u) {\n            return o.withAlt(u); // | UplcProgramV3;\n        }\n        return o;\n    }\n    if (!u) {\n        throw new Error(\n            `üê¢ No optimized or unoptimized program in cache entry: ${fromCache}`\n        );\n    }\n    return u;\n}\n\nexport function deserializeHeliosCacheEntry(\n    entry: SerializedHeliosCacheEntry\n): HeliosProgramCacheEntry {\n    const {\n        optimized,\n        optimizedIR,\n        unoptimized,\n        unoptimizedIR,\n        version,\n        optimizedSmap,\n        unoptimizedSmap,\n        optimizeOptions,\n        createdBy,\n        programElements\n    } = entry\n\n    return {\n        optimized: optimized ? decodeUplcProgramV2FromCbor(optimized) : undefined,\n        unoptimized: unoptimized ? decodeUplcProgramV2FromCbor(unoptimized) : undefined,\n        optimizedSmap: optimizedSmap || undefined, \n        //XXX it's already json-safe. deserializeUplcSourceMap(optimizedSmap).toJsonSafe() : undefined,\n        unoptimizedSmap: unoptimizedSmap || undefined,\n        //XXX it's already json-safe. deserializeUplcSourceMap(unoptimizedSmap).toJsonSafe(): undefined,\n        optimizeOptions,\n        version,\n        createdBy,\n        programElements,\n        optimizedIR,\n        unoptimizedIR,\n    };\n}\n","import type { Site } from \"@helios-lang/compiler-utils\";\nimport type { UplcLogger } from \"@helios-lang/uplc\";\n\nexport class UplcConsoleLogger implements UplcLogger {\n    didStart: boolean = false;\n    lines: string[] = [];\n    lastMessage: string = \"\";\n    lastReason?: \"build\" | \"validate\";\n    history: string[] = [];\n\n    constructor() {\n        this.logPrint = this.logPrint.bind(this);\n        // this.printlnFunction = this.printlnFunction.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    reset(reason: \"build\" | \"validate\") {\n        this.lastMessage = \"\";\n        this.lastReason = reason;\n        // console.log(\"    ---- resetting printer due to \" + reason);\n        // this.didStart = false;\n        if (reason == \"build\") {\n            // throw new Error(`unexpected`)\n            this.lines = [];\n            return;\n        }\n        if (reason == \"validate\") {\n            this.flush();\n            return;\n        }\n    }\n    // log(...msgs: string[]) {\n    //     return this.logPrint(...msgs);\n    // }\n    // error(...msgs: string[]) {\n    //     return this.logError(...msgs, \"\\n\");\n    // }\n\n    // logPrintLn(...msgs: string[]) {\n    //     return this.logPrint(...msgs, \"\\n\");\n    // }\n\n    logPrint(message: string, site?: Site) {\n        // if ( global.validating) debugger\n        // if (msg == \"no\") { debugger }\n        // if (this.lastReason && this.lastReason == \"validate\") {\n        //     debugger\n        // }\n        \n        if (\"string\" != typeof message) {\n            console.log(\"wtf\");\n        }\n        if (message && message.at(-1) != \"\\n\") {\n            message += \"\\n\";\n        }\n        this.lastMessage = message;\n        this.lines.push(message);\n        return this;\n    }\n    logError(message: string, stack? : Site) {\n        this.logPrint(\"\\n\");\n        this.logPrint(\n            \"-\".repeat((process?.stdout?.columns || 65) - 8)\n        );\n        this.logPrint(\"--- ‚ö†Ô∏è  ERROR: \" + message.trimStart() + \"\\n\");\n        this.logPrint(\n            \"-\".repeat((process?.stdout?.columns || 65) - 8) + \"\\n\"\n        );\n        // return this;\n    }\n    // printlnFunction(msg) {\n    //     console.log(\"                              ---- println\")\n    //     this.lines.push(msg);\n    //     this.lines.push(\"\\n\");\n    //     this.flushLines();\n    // }\n    toggler = 0;\n    toggleDots() {\n        this.toggler = 1 - this.toggler;\n    }\n    get isMine() {\n        return true;\n    }\n    resetDots() {\n        this.toggler = 0;\n    }\n    showDot() {\n        // ‚óå or ‚óè\n        const s = this.toggler ? \"‚îÇ   ‚îä \" : \"‚îÇ ‚óè ‚îä \";\n        this.toggleDots();\n        return s;\n    }\n\n    fullHistory() {\n        return this.history.join(\"\\n\");\n    }\n    formattedHistory: string[] = [];\n    fullFormattedHistory() {\n        return this.formattedHistory.join(\"\\n\")\n    }\n\n\n    flushLines(footerString?: string) {\n        // this.lines.push(this.accumulator.join(\"\"))\n        let content: string[] = [];\n        // get terminal width if available:\n        const terminalWidth = process?.stdout?.columns || 65;\n        const thisBatch = this.lines.join(\"\").trimEnd();\n        this.history.push(thisBatch);\n        if (!this.didStart) {\n            this.didStart = true;\n            content.push(\"‚ï≠‚îà‚îà‚îà‚î¨\" + \"‚îà\".repeat(terminalWidth - 5));\n            this.resetDots();\n        } else if (this.lines.length) {\n            content.push(\"‚îú‚îà‚îà‚îà‚îº\" + \"‚îà\".repeat(terminalWidth - 5));\n            this.resetDots();\n        }\n        for (const line of thisBatch.split(\"\\n\")) {\n            //\"‚îÇ\" or \"‚îä\" or \"‚îÜ\" or \"‚îá\" // unicode tiny  circle \"¬∑\"\n            content.push(`${this.showDot()}${line}`);\n        }\n        // adds a little extra space before the footer\n        content.push(this.showDot());\n        // feed extra space if needed for the dots to look consistent\n        if (!this.toggler) {\n            content.push(this.showDot());\n        }\n        if (footerString) {\n            // if (!this.toggler && abortMarker) {\n            //     content.push(this.showDot());\n            // }\n            content.push(footerString);\n            // if (abortMarker) {\n            //     content.push(abortMarker);\n            // }\n        }\n        const joined = content.join(\"\\n\");\n        this.formattedHistory.push(joined);\n        console.log(joined);\n        this.lines = [];\n    }\n    finish() {\n        this.flushLines(\n            \"‚ï∞‚îà‚îà‚îà‚î¥\" + \"‚îà\".repeat((process?.stdout?.columns || 65) - 5)\n        );\n        return this;\n    }\n    flush() {\n        if (this.lines.length) {\n            // console.log(\"    ---- flushing lines\");\n            if (this.lastMessage.at(-1) != \"\\n\") {\n                this.lines.push(\"\\n\");\n            }\n            this.flushLines();\n            //     \"‚ï∞,\"‚îà\"\n            // );\n        }\n        // console.log(\"‚ï∞ // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        return this;\n    }\n    flushError(message: string = \"\") {\n        // if (this.lastMsg == message) {\n        //     this.lines.pop();\n        // }\n        if (this.lastMessage.at(-1) != \"\\n\") {\n            this.lines.push(\"\\n\");\n        }\n        if (message.at(-1) == \"\\n\") {\n            message = message.slice(0, -1);\n        }\n        const terminalWidth = process?.stdout?.columns || 65;\n        if (message) this.logError(message);\n        if (this.lines.length) {\n            this.flushLines(\n                \"‚éΩ‚éº‚éª‚é∫‚éª‚é∫‚éº‚éº‚éª‚é∫‚éª‚éΩ‚éº‚é∫‚éª‚éª‚é∫‚éº‚éº‚éª‚é∫\".repeat((terminalWidth - 2) / 21)\n            );\n        }\n        // this.didStart = false;\n        return this;\n    }\n}\n","// local copy of picocolors.js\n// guards against supply chain attacks\n// original ISC license preserved:\n\n// ISC License\n\n// Copyright (c) 2021-2024 Oleksii Raspopov, Kostiantyn Denysov, Anton Verinov\n\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\nlet p = process || {}, argv = p.argv || [], env = p.env || {}\nlet isColorSupported =\n\t!(!!env.NO_COLOR || argv.includes(\"--no-color\")) &&\n\t(!!env.FORCE_COLOR || argv.includes(\"--color\") || \n        p.platform === \"win32\" || \n        (\n            true \n        //  && (p.stdout || {}).isTTY \n        // && env.TERM !== \"dumb\"\n        ) || \n        !!env.CI\n        )\n\nlet formatter = (open, close, replace = open) => {\n    const f = (input) => {\n\t\tlet string = \"\" + input, index = string.indexOf(close, open.length)\n\t\treturn ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close\n\t}\n    f.start = open\n    f.close = close\n    return f\n}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\", cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet f = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: f(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: f(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: f(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: f(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: f(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: f(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: f(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: f(\"\\x1b[9m\", \"\\x1b[29m\"),\n\n\t\tblack: f(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: f(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: f(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: f(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: f(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: f(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: f(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: f(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\n\t\tbgBlack: f(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: f(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: f(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: f(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: f(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: f(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: f(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: f(\"\\x1b[47m\", \"\\x1b[49m\"),\n\n\t\tblackBright: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tredBright: f(\"\\x1b[91m\", \"\\x1b[39m\"),\n\t\tgreenBright: f(\"\\x1b[92m\", \"\\x1b[39m\"),\n\t\tyellowBright: f(\"\\x1b[93m\", \"\\x1b[39m\"),\n\t\tblueBright: f(\"\\x1b[94m\", \"\\x1b[39m\"),\n\t\tmagentaBright: f(\"\\x1b[95m\", \"\\x1b[39m\"),\n\t\tcyanBright: f(\"\\x1b[96m\", \"\\x1b[39m\"),\n\t\twhiteBright: f(\"\\x1b[97m\", \"\\x1b[39m\"),\n\n\t\tbgBlackBright: f(\"\\x1b[100m\", \"\\x1b[49m\"),\n\t\tbgRedBright: f(\"\\x1b[101m\", \"\\x1b[49m\"),\n\t\tbgGreenBright: f(\"\\x1b[102m\", \"\\x1b[49m\"),\n\t\tbgYellowBright: f(\"\\x1b[103m\", \"\\x1b[49m\"),\n\t\tbgBlueBright: f(\"\\x1b[104m\", \"\\x1b[49m\"),\n\t\tbgMagentaBright: f(\"\\x1b[105m\", \"\\x1b[49m\"),\n\t\tbgCyanBright: f(\"\\x1b[106m\", \"\\x1b[49m\"),\n\t\tbgWhiteBright: f(\"\\x1b[107m\", \"\\x1b[49m\"),\n\t} as any\n}\n\nexport const colors : Colors = createColors()\n\n\nexport type Formatter = {\n    start: string;\n    end: string;\n} & ((input: string | number | null | undefined) => string);\n\nexport interface Colors {\n    isColorSupported: boolean;\n\n    reset: Formatter;\n    bold: Formatter;\n    dim: Formatter;\n    italic: Formatter;\n    underline: Formatter;\n    inverse: Formatter;\n    hidden: Formatter;\n    strikethrough: Formatter;\n\n    black: Formatter;\n    red: Formatter;\n    green: Formatter;\n    yellow: Formatter;\n    blue: Formatter;\n    magenta: Formatter;\n    cyan: Formatter;\n    white: Formatter;\n    gray: Formatter;\n\n    bgBlack: Formatter;\n    bgRed: Formatter;\n    bgGreen: Formatter;\n    bgYellow: Formatter;\n    bgBlue: Formatter;\n    bgMagenta: Formatter;\n    bgCyan: Formatter;\n    bgWhite: Formatter;\n\n    blackBright: Formatter;\n    redBright: Formatter;\n    greenBright: Formatter;\n    yellowBright: Formatter;\n    blueBright: Formatter;\n    magentaBright: Formatter;\n    cyanBright: Formatter;\n    whiteBright: Formatter;\n\n    bgBlackBright: Formatter;\n    bgRedBright: Formatter;\n    bgGreenBright: Formatter;\n    bgYellowBright: Formatter;\n    bgBlueBright: Formatter;\n    bgMagentaBright: Formatter;\n    bgCyanBright: Formatter;\n    bgWhiteBright: Formatter;\n}\n\n","import { isValidUtf8 } from \"@helios-lang/codec-utils\";\nimport type { uutPurposeMap } from \"./CapoTypes.js\";\nimport { textToBytes, type valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport {\n    makeAssets,\n    makeValue,\n    type Value,\n    type MintingPolicyHash,\n} from \"@helios-lang/ledger\";\n\n/**\n * Creates Value-creation entires for a list of uuts\n * @remarks\n *\n * returns a list of `entries` usable in Value's `[mph, entries[]]` tuple.\n * @param uuts - a list of {@link UutName}s or a {@link uutPurposeMap}\n * @public\n **/\nexport function mkUutValuesEntries(uuts: UutName[]): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(uuts: uutPurposeMap<any>): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[] {\n    const uutNs = Array.isArray(uuts) ? uuts : Object.values(uuts);\n    const uniqs: UutName[] = [];\n    for (const un of uutNs) {\n        if (!uniqs.includes(un)) uniqs.push(un);\n    }\n    return uniqs.map((uut) => mkValuesEntry(uut.name, BigInt(1)));\n}\n\n/**\n * Creates a tuple usable in a Value, converting token-name to byte-array if needed\n * @public\n **/\nexport function mkValuesEntry(\n    tokenName: string | number[],\n    count: bigint\n): valuesEntry {\n    const tnBytes = Array.isArray(tokenName)\n        ? tokenName\n        : textToBytes(tokenName);\n\n    // addrHint,  //moved to config\n    // reqdAddress,  // removed\n\n    return [tnBytes, count];\n}\n\n/**\n * construct a Value based on a token-name\n * @remarks\n *\n * A simpler version of the Value constructor to serve the\n * common case of a single, string-based token name.\n *\n * If you need the Value to contain its minUtx computed based\n * on network parameters, use the StellarContract's mkMinTv()\n * method instead.\n *\n * @param mph - policy-hash of the token\n * @param tokenName - string name of the token\n * @param count: number of the tokens to include in the value\n * @public\n **/\nexport function mkTv(\n    mph: MintingPolicyHash,\n    tokenName: string | number[],\n    count: bigint = 1n\n): Value {\n    const v = makeValue(\n        0,\n        makeAssets([[mph, [mkValuesEntry(tokenName, count)]]])\n    );\n    return v;\n}\n\n/**\n * Multiplies two numbers using integer math semantics for matching with Helios on-chain Real math\n *\n * @remarks\n * The numbers can be whole or fractional, with 6 decimal places of honored precision.\n * The result is rounded to 6 decimal places.\n * @todo - delegate this to a call into the on-chain version of same\n * @public\n */\nexport function realMul(a: number, b: number) {\n    const a2 = Math.trunc(1000000 * a);\n    const b2 = Math.trunc(1000000 * b);\n    const result1 = a2 * b2;\n    const result2 = result1 / 1_000_000_000_000;\n    if (debugRealMath) {\n        console.log(\"    ---- realMul\", a2, b2);\n        console.log(\"    ---- realMul result1\", result1);\n        console.log(\"    ---- realMul result2\", result2);\n    }\n    return result2;\n}\n\n/**\n * Divides two numbers using integer math semantics for matching with Helios on-chain Real math\n *\n * @remarks\n * The numbers can be whole or fractional, with 6 decimal places of honored precision.\n * The result is rounded to 6 decimal places.\n * @todo - delegate this to a call into the on-chain version of same\n * @public\n */\nexport function realDiv(a: number, b: number) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    const a2 = Math.trunc(1_000_000 * a);\n    const b2 = Math.trunc(1_000_000 * b);\n    const result1 = a2 / b;\n    // const result2 = toFixedReal(result1 / 1_000_000);\n    const result2 = Math.round(result1) / 1_000_000;\n    if (debugRealMath) {\n        console.log(\"    ---- realDiv\", a, \"/\", b);\n        console.log(\"    ---- realDiv\", a2);\n        console.log(\"    ---- realDiv result1\", result1);\n        console.log(\"    ---- realDiv result2\", result2);\n    }\n    return result2;\n}\n\n/**\n * Rounds a number to 6 decimal places, with correction for low-value floating-point\n * errors e.g. `(2.999999999) -> 3.0`\n * @public\n */\nexport function toFixedReal(n: number) {\n    return parseFloat((Math.floor(n * 1_000_000 + 0.1) / 1_000_000).toFixed(6));\n}\n/**\n * Temporarily enable debugRealMath for the duration of the callback\n * @internal\n */\nexport function debugMath<T extends number>(callback: () => T): T {\n    const old = debugRealMath;\n    debugRealMath = true;\n    const result = callback();\n    debugRealMath = old;\n    return result;\n}\n\nlet debugRealMath = false;\n\n\n\n/**\n * @public\n */\nexport class TxNotNeededError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"TxAlreadyPresentError\";\n    }\n}\n\n/**\n * @public\n */\nexport class AlreadyPendingError extends TxNotNeededError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"AlreadyPendingError\";\n    }\n}\n\n/**\n * @public\n */\nexport function checkValidUTF8(data: number[]) {\n  // quickly check, without throwing errors, for invalid UTF-8 sequences:\n  let i = 0;\n  while (i < data.length) {\n    if ((data[i] & 0x80) === 0x00) {\n      i++;\n    } else if ((data[i] & 0xE0) === 0xC0) {\n      if (i + 1 >= data.length || (data[i + 1] & 0xC0) !== 0x80) return false;\n      i += 2;\n    } else if ((data[i] & 0xF0) === 0xE0) {\n      if (i + 2 >= data.length || (data[i + 1] & 0xC0) !== 0x80 || (data[i + 2] & 0xC0) !== 0x80) return false;\n      i += 3\n    } else if ((data[i] & 0xF8) === 0xF0) {\n      if (i + 3 >= data.length || (data[i + 1] & 0xC0) !== 0x80 || (data[i + 2] & 0xC0) !== 0x80 || (data[i + 3] & 0xC0) !== 0x80) return false;\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n  // if it didn't fail above, fine - but still defer to isValidUtf8.  it CAN throw (and catch) an error,\n  // but the above checks are much likelier to return false with NO caught error.\n  return isValidUtf8(data);\n}\n\nexport {colors} from \"./colors.js\"","import {\n    dumpAny,\n    intWithGrouping,\n    lovelaceToAda,\n    txAsString,\n    utxosAsString,\n} from \"./diagnostics.js\";\nimport type { hasUutContext } from \"./CapoTypes.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type { ActorContext, SetupInfo } from \"./StellarContract.js\";\nimport { delegateLinkSerializer } from \"./delegation/jsonSerializers.js\";\nimport type { Cost, UplcData, UplcProgramV2 } from \"@helios-lang/uplc\";\nimport { UplcConsoleLogger } from \"./UplcConsoleLogger.js\";\nimport type { isActivity, SeedAttrs } from \"./ActivityTypes.js\";\nimport {\n    type TxBuilder,\n    type WalletHelper,\n    type Wallet,\n    makeTxBuilder,\n    makeWalletHelper,\n    makeTxChainBuilder,\n} from \"@helios-lang/tx-utils\";\nimport {\n    decodeTx,\n    makeAssets,\n    makeNetworkParamsHelper,\n    makeTx,\n    makeTxBody,\n    makeTxCertifyingRedeemer,\n    makeTxMintingRedeemer,\n    makeTxRewardingRedeemer,\n    makeTxSpendingRedeemer,\n    makeTxWitnesses,\n    makeValue,\n    type Address,\n    type NetworkParams,\n    type PubKeyHash,\n    type Tx,\n    type TxId,\n    type TxInput,\n    type TxOutput,\n    type Value,\n} from \"@helios-lang/ledger\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\nimport type { UtxoHelper } from \"./UtxoHelper.js\";\nimport type { IF_ISANY } from \"./helios/typeUtils.js\";\nimport type { Expand } from \"./helios/typeUtils.js\";\nimport { customAlphabet } from \"nanoid\";\nconst nanoid = customAlphabet(\"0123456789abcdefghjkmnpqrstvwxyz\", 12);\nimport { TxNotNeededError } from \"./utils.js\";\n\n/**\n * A txn context having a seedUtxo in its state\n * @public\n **/\nexport type hasSeedUtxo = StellarTxnContext<\n    anyState & {\n        seedUtxo: TxInput;\n    }\n>;\n\nexport type txBuiltOrSubmitted =\n    | \"built\"\n    | \"alreadyPresent\"\n    | \"signed\"\n    | \"submitted\";\nexport type resolvedOrBetter = \"resolved\" | txBuiltOrSubmitted;\n/**\n * @public\n */\nexport type TxDescription<\n    T extends StellarTxnContext,\n    PROGRESS extends\n        | \"buildLater!\"\n        | \"resolved\"\n        | \"alreadyPresent\"\n        | \"built\"\n        | \"signed\"\n        | \"submitted\",\n    TCX extends StellarTxnContext = IF_ISANY<T, StellarTxnContext<anyState>, T>,\n    otherProps extends Record<string, unknown> = {}\n> = {\n    description: string;\n    id: string;\n    parentId?: string;\n    depth: number;\n    moreInfo?: string;\n    optional?: boolean;\n    txName?: string;\n    tcx?: TCX | TxNotNeededError;\n    tx?: Tx;\n    stats?: BuiltTcxStats;\n    txCborHex?: string;\n    signedTxCborHex?: string;\n} & otherProps &\n    (PROGRESS extends \"alreadyPresent}\"\n        ? {\n              mkTcx: (() => TCX) | (() => Promise<TCX>);\n              tcx: TCX & { alreadyPresent: TxNotNeededError };\n          }\n        : PROGRESS extends resolvedOrBetter\n        ? {\n              mkTcx?: (() => TCX) | (() => Promise<TCX>) | undefined;\n              tcx: TCX;\n          }\n        : {\n              mkTcx: (() => TCX) | (() => Promise<TCX>);\n              tcx?: undefined;\n          }) &\n    (PROGRESS extends txBuiltOrSubmitted\n        ? {\n              tx: Tx;\n              txId?: TxId;\n              stats: BuiltTcxStats;\n              options: SubmitOptions;\n              txCborHex: string;\n          }\n        : {}) &\n    (PROGRESS extends \"signed\" | \"submitted\"\n        ? {\n              txId: TxId;\n              txCborHex: string;\n              signedTxCborHex: string;\n              walletTxId: TxId;\n          }\n        : {});\n\n/**\n * @public\n */\nexport type MultiTxnCallback<\n    T extends undefined | StellarTxnContext<any> = StellarTxnContext<any>,\n    TXINFO extends TxDescription<any, resolvedOrBetter, any> = TxDescription<\n        any,\n        \"resolved\"\n    >\n> =\n    | ((txd: TXINFO) => void)\n    | ((txd: TXINFO) => Promise<void>)\n    | ((txd: TXINFO) => T | false)\n    | ((txd: TXINFO) => Promise<T | false>);\n\n/**\n * A transaction context that includes additional transactions in its state for later execution\n * @remarks\n *\n * During the course of creating a transaction, the transaction-building functions for a contract\n * suite may suggest or require further transactions, which may not be executable until after the\n * current transaction is executed.  This type allows the transaction context to include such\n * future transactions in its state, so that they can be executed later.\n *\n * The future transactions can be executed using the {@link StellarTxnContext.queueAddlTxns}\n * helper method.\n * @public\n **/\nexport type hasAddlTxns<\n    TCX extends StellarTxnContext<anyState>,\n    existingStateType extends anyState = TCX[\"state\"]\n> = StellarTxnContext<\n    existingStateType & {\n        addlTxns: Record<string, TxDescription<any, \"buildLater!\">>;\n    }\n>;\n\nexport type otherAddlTxnNames<TCX extends StellarTxnContext<any>> = string &\n    TCX extends { state: { addlTxns: infer aTNs } }\n    ? keyof aTNs\n    : never;\n\n// type combinedAddlTxns<\n//     extraTxnName extends string,\n//     stateType extends anyState,\n//     existingTxns = stateType extends {addlTxns: any} ? stateType[\"addlTxns\"] : never,\n//     existingTxnNames extends string = string & keyof existingTxns\n// > = {\n//     addlTxns: {\n//         //prettier-ignore\n//         [txnName in (\n//             | extraTxnName\n//             | existingTxnNames\n//         )]: AddlTxInfo<any>\n//     }\n// } & stateType;\n\n//!!! if we could access the inputs and outputs in a building Tx,\n//  this might  not be necessary (unless it becomes a\n//   bigger-picture contextual container that serves various Stellar\n//   contract scripts with non-txn context for building a Tx)\n\n/**\n * A base state for a transaction context\n * @public\n **/\nexport interface anyState {\n    uuts: uutMap;\n}\n\n/**\n * A base state for a transaction context\n * @public\n **/\n// export type anyState = emptyState;\nexport type uutMap = Record<string, unknown>;\nexport const emptyUuts: uutMap = Object.freeze({});\n\n// type addInputArgs = Parameters<TxBuilder[\"spend\"]>;\ntype addRefInputArgs = Parameters<TxBuilder[\"refer\"]>;\n\ntype RedeemerArg = {\n    redeemer?: UplcData;\n};\n\nexport type TxDescriptionWithError = TxDescription<\n    any,\n    \"built\",\n    any,\n    {\n        error: string;\n    }\n>;\n\n/**\n * @public\n */\nexport type SubmitOptions = TxPipelineOptions & {\n    /**\n     * indicates additional signers expected for the transaction\n     */\n    signers?: Address[];\n    addlTxInfo?: Partial<\n        Omit<TxDescription<any, \"submitted\">, \"description\">\n    > & { description: string };\n    paramsOverride?: Partial<NetworkParams>;\n    /**\n     * useful most for test environment, so that a txn failure can be me marked\n     * as \"failing as expected\".  Not normally needed for production code.\n     */\n    expectError?: true;\n    /**\n     * Called when there is a detected error, before logging.  Probably only needed in test.\n     */\n    beforeError?: MultiTxnCallback<any, TxDescriptionWithError>;\n    /**\n     * Passed into the Helios TxBuilder's build()/buildUnsafe()\n     */\n    beforeValidate?: (tx: Tx) => MultiTxnCallback<any>;\n};\n\ntype MintUnsafeParams = Parameters<TxBuilder[\"mintPolicyTokensUnsafe\"]>;\ntype MintTokensParams = [\n    MintUnsafeParams[0],\n    MintUnsafeParams[1],\n    { redeemer: MintUnsafeParams[2] }\n];\n/**\n * Provides notifications for various stages of transaction submission\n */\ntype TxPipelineOptions = Expand<\n    TxSubmitCallbacks & {\n        fixupBeforeSubmit?: MultiTxnCallback;\n        whenBuilt?: MultiTxnCallback<any, TxDescription<any, \"built\">>;\n    }\n>;\n\nexport type TxSubmitCallbacks = {\n    onSubmitError?: MultiTxnCallback<\n        any,\n        TxDescription<any, \"built\", any, { error: string }>\n    >;\n    onSubmitted?: MultiTxnCallback<any, TxDescription<any, \"submitted\">>;\n};\n\ntype BuiltTcx = {\n    tx: Tx;\n} & BuiltTcxStats;\n\ntype BuiltTcxStats = {\n    willSign: PubKeyHash[];\n    walletMustSign: boolean;\n    wallet: Wallet;\n    wHelper: WalletHelper<any>;\n    costs: {\n        total: Cost;\n        [key: string]: Cost;\n    };\n};\n\nexport type FacadeTxnContext<S extends anyState = anyState> = hasAddlTxns<\n    StellarTxnContext<S>\n> & {\n    isFacade: true;\n};\n\n/**\n * Transaction-building context for Stellar Contract transactions\n * @remarks\n *\n * Uses same essential facade as Helios Tx.\n *\n * Adds a transaction-state container with strong typing of its contents,\n * enabling transaction-building code to use type-sensitive auto-complete\n * and allowing Stellar Contracts library code to require transaction contexts\n * having known states.\n *\n * Retains reflection capabilities to allow utxo-finding utilities to exclude\n * utxo's already included in the contract.\n *\n * @typeParam S - type of the context's `state` prop\n * @public\n **/\nexport class StellarTxnContext<S extends anyState = anyState> {\n    id: string = nanoid(5);\n    inputs: TxInput[] = [];\n    collateral?: TxInput;\n    outputs: TxOutput[] = [];\n    feeLimit?: bigint;\n    state: S;\n    allNeededWitnesses: (Address | PubKeyHash)[] = [];\n    otherPartySigners: PubKeyHash[] = [];\n    parentTcx?: StellarTxnContext<any>;\n    childReservedUtxos: TxInput[] = [];\n    parentId: string = \"\";\n    alreadyPresent: TxNotNeededError | undefined = undefined;\n    depth = 0;\n    declare setup: SetupInfo;\n    // submitOptions?: SubmitOptions\n    txb: TxBuilder;\n    txnName: string = \"\";\n    withName(name: string) {\n        this.txnName = name;\n        return this;\n    }\n\n    get wallet() {\n        return this.setup.actorContext.wallet!;\n    }\n\n    get uh(): UtxoHelper {\n        return this.setup.uh!;\n    }\n\n    get networkParams(): NetworkParams {\n        return this.setup.networkParams;\n    }\n\n    get actorContext(): ActorContext<any> {\n        return this.setup.actorContext;\n    }\n    /**\n     * Provides a lightweight, NOT complete, serialization for presenting the transaction context\n     * @remarks\n     * Serves rendering of the transaction context in vitest\n     * @internal\n     */\n    toJSON() {\n        return {\n            kind: \"StellarTxnContext\",\n            state: !!this.state\n                ? `{${Object.keys(this.state).join(\", \")}}`\n                : undefined,\n            inputs: `[${this.inputs.length} inputs]`,\n            outputs: `[${this.outputs.length} outputs]`,\n            isBuilt: !!this._builtTx,\n            hasParent: !!this.parentTcx,\n            //@ts-expect-error\n            addlTxns: this.state.addlTxns\n                ? [\n                      //@ts-expect-error\n                      ...Object.keys(this.state.addlTxns || {}),\n                  ]\n                : undefined,\n        };\n    }\n\n    logger = new UplcConsoleLogger();\n    constructor(\n        setup: SetupInfo,\n        state: Partial<S> = {},\n        parentTcx?: StellarTxnContext<any>\n    ) {\n        if (parentTcx) {\n            console.warn(\n                \"Deprecated use of 'parentTcx' - use includeAddlTxn() instead\" +\n                    \"\\n  ... setup.txBatcher.current holds an in-progress utxo set for all 'parent' transactions\"\n            );\n            throw new Error(`parentTcx used where? `);\n        }\n        Object.defineProperty(this, \"setup\", {\n            enumerable: false,\n            value: setup,\n        });\n        Object.defineProperty(this, \"_builtTx\", {\n            enumerable: false,\n            writable: true,\n        });\n\n        const isMainnet = setup.isMainnet;\n        this.isFacade = undefined;\n\n        if (\"undefined\" == typeof isMainnet) {\n            throw new Error(\n                \"StellarTxnContext: setup.isMainnet must be defined\"\n            );\n        }\n        this.txb = makeTxBuilder({\n            isMainnet,\n        });\n        // const { uuts = { ...emptyUuts }, ...moreState } = state;\n        //@ts-expect-error\n        this.state = {\n            ...state,\n            uuts: state.uuts || { ...emptyUuts },\n        };\n\n        const currentBatch = this.currentBatch;\n        const hasOpenBatch = currentBatch?.isOpen;\n        if (!currentBatch || currentBatch.isConfirmationComplete) {\n            this.setup.txBatcher.rotate(this.setup.chainBuilder);\n        }\n\n        if (!this.setup.isTest && !this.setup.chainBuilder) {\n            if (currentBatch.chainBuilder) {\n                // backfills the chainbuilder from the one auto-populated\n                // during `get TxBatcher.current()`\n                this.setup.chainBuilder = currentBatch.chainBuilder;\n            } else {\n                this.setup.chainBuilder = makeTxChainBuilder(\n                    this.setup.network\n                );\n            }\n        }\n\n        if (parentTcx) {\n            debugger;\n            throw new Error(`parentTcx used where? `);\n        }\n        this.parentTcx = parentTcx;\n    }\n\n    isFacade: true | false | undefined;\n    facade(this: StellarTxnContext): hasAddlTxns<this> & { isFacade: true } {\n        if (this.isFacade === false)\n            throw new Error(`this tcx already has txn material`);\n        if (this.parentTcx)\n            throw new Error(`no parentTcx allowed for tcx facade`);\n\n        const t: hasAddlTxns<this> = this as any;\n        t.state.addlTxns = t.state.addlTxns || {};\n        t.isFacade = true;\n        return this as any;\n    }\n    noFacade(situation: string) {\n        if (this.isFacade)\n            throw new Error(\n                `${situation}: ${\n                    this.txnName || \"this tcx\"\n                } is a facade for nested multi-tx`\n            );\n        this.isFacade = false;\n    }\n\n    withParent(tcx: StellarTxnContext<any>) {\n        this.noFacade(\"withParent\");\n        this.parentTcx = tcx;\n        return this;\n    }\n\n    get actorWallet() {\n        return this.actorContext.wallet;\n    }\n\n    dump(tx?: Tx): string;\n    dump(): Promise<string>;\n    dump(tx?: Tx): string | Promise<string> {\n        const t = tx || this.builtTx;\n        if (t instanceof Promise) {\n            return t.then((tx) => {\n                return txAsString(tx, this.setup.networkParams);\n            });\n        }\n        return txAsString(t, this.setup.networkParams);\n    }\n\n    includeAddlTxn<\n        TCX extends StellarTxnContext<anyState>,\n        RETURNS extends hasAddlTxns<TCX> = TCX extends hasAddlTxns<any>\n            ? TCX\n            : hasAddlTxns<TCX>\n    >(\n        this: TCX,\n        txnName: string,\n        txInfoIn: Omit<\n            TxDescription<any, \"buildLater!\">,\n            \"id\" | \"depth\" | \"parentId\"\n        > & {\n            id?: string;\n        }\n    ): RETURNS {\n        const txInfo: TxDescription<any, \"buildLater!\"> = {\n            ...(txInfoIn as any),\n        };\n        if (!txInfo.id)\n            txInfo.id =\n                //@ts-expect-error - the tcx is never there,\n                // but including the fallback assignment here for\n                // consistency about the policy of syncing to it.\n                txInfo.tcx?.id || nanoid(5);\n\n        txInfo.parentId = this.id;\n\n        txInfo.depth = (this.depth || 0) + 1;\n        const thisWithMoreType: RETURNS = this as any;\n        if (\"undefined\" == typeof this.isFacade) {\n            throw new Error(\n                `to include additional txns on a tcx with no txn details, call facade() first.\\n` +\n                    `   ... otherwise, add txn details first or set isFacade to false`\n            );\n        }\n        // if (thisWithMoreType.state.addlTxns?.[txnName]) {\n        //     debugger\n        //     throw new Error(\n        //         `addlTxns['${txnName}'] already included in this transaction:\\n` +\n        //             Object.keys(thisWithMoreType.state.addlTxns).map(\n        //                 (k) => ` ‚Ä¢ ${k}`\n        //             ).join(\"\\n\")\n        //     );\n        // }\n        thisWithMoreType.state.addlTxns = {\n            ...(thisWithMoreType.state.addlTxns || {}),\n            [txInfo.id]: txInfo,\n        };\n        return thisWithMoreType;\n    }\n\n    /**\n     * @public\n     */\n    get addlTxns(): Record<string, TxDescription<any, \"buildLater!\">> {\n        //@ts-expect-error\n        return this.state.addlTxns || {};\n    }\n\n    mintTokens(...args: MintTokensParams): StellarTxnContext<S> {\n        this.noFacade(\"mintTokens\");\n        const [policy, tokens, r = { redeemer: undefined }] = args;\n        const { redeemer } = r;\n        if (this.txb.mintPolicyTokensUnsafe) {\n            this.txb.mintPolicyTokensUnsafe(policy, tokens, redeemer);\n        } else {\n            //@ts-expect-error\n            this.txb.mintTokens(policy, tokens, redeemer);\n        }\n\n        return this;\n    }\n\n    getSeedAttrs<TCX extends hasSeedUtxo>(this: TCX): SeedAttrs {\n        this.noFacade(\"getSeedAttrs\");\n        // const { seedUtxo } = this.state;  // bad api-extractor!\n        const seedUtxo = this.state.seedUtxo;\n        // const { txId, utxoIdx: seedIndex } = seedUtxo.id; // ugh, api-extractor!\n        return { txId: seedUtxo.id.txId, idx: BigInt(seedUtxo.id.index) };\n    }\n\n    reservedUtxos(): TxInput[] {\n        this.noFacade(\"reservedUtxos\");\n        return this.parentTcx\n            ? this.parentTcx.reservedUtxos()\n            : ([\n                  ...this.inputs,\n                  this.collateral,\n                  ...this.childReservedUtxos,\n              ].filter((x) => !!x) as TxInput[]);\n    }\n\n    utxoNotReserved(u: TxInput): TxInput | undefined {\n        if (this.collateral?.isEqual(u)) return undefined;\n        if (this.inputs.find((i) => i.isEqual(u))) return undefined;\n        return u;\n    }\n\n    addUut<T extends string, TCX extends StellarTxnContext>(\n        this: TCX,\n        //!!! todo: type this more strongly by adding strong typing to the UutName itself?\n        uutName: UutName,\n        ...names: T[]\n    ): hasUutContext<T> & TCX {\n        this.noFacade(\"addUut\");\n        this.state.uuts = this.state.uuts || {};\n\n        for (const name of names) {\n            this.state.uuts[name] = uutName;\n        }\n\n        return this as hasUutContext<T> & TCX;\n    }\n\n    addState<TCX extends StellarTxnContext, K extends string, V>(\n        this: TCX,\n        key: K,\n        value: V\n    ): StellarTxnContext<{ [keyName in K]: V } & anyState> & TCX {\n        this.noFacade(\"addState\");\n        //@ts-expect-error\n        this.state[key] = value;\n        return this as StellarTxnContext<{ [keyName in K]: V } & anyState> &\n            TCX;\n    }\n\n    addCollateral(collateral: TxInput) {\n        this.noFacade(\"addCollateral\");\n        console.warn(\"explicit addCollateral() should be unnecessary unless a babel payer is covering it\")\n        \n        if (!collateral.value.assets.isZero()) {\n            throw new Error(\n                `invalid attempt to add non-pure-ADA utxo as collateral`\n            );\n        }\n        this.collateral = collateral;\n\n        this.txb.addCollateral(collateral);\n        return this;\n    }\n    getSeedUtxoDetails(this: hasSeedUtxo): SeedAttrs {\n        this.noFacade(\"getSeedUtxoDetails\");\n        const seedUtxo = this.state.seedUtxo;\n        return {\n            txId: seedUtxo.id.txId,\n            idx: BigInt(seedUtxo.id.index),\n        };\n    }\n\n    _txnTime?: Date;\n    /**\n     * Sets a future date for the transaction to be executed, returning the transaction context.  Call this before calling validFor().\n     *\n     * @remarks Returns the txn context.\n     * Throws an error if the transaction already has a txnTime set.\n     *\n     * This method does not itself set the txn's validity interval.  You MUST combine it with\n     * a call to validFor(), to set the txn's validity period.  The resulting transaction will\n     * be valid from the moment set here until the end of the validity period set by validFor().\n     *\n     * This can be used anytime to construct a transaction valid in the future.  This is particularly useful\n     * during test scenarios to verify time-sensitive behaviors.\n     *\n     * In the test environment, the network wil normally be advanced to this date\n     * before executing the transaction, unless a different execution time is indicated.\n     * Use the test helper's `submitTxnWithBlock(txn, {futureDate})` or `advanceNetworkTimeForTx()` methods, or args to\n     * use-case-specific functions that those methods.\n     */\n    futureDate<TCX extends StellarTxnContext<S>>(this: TCX, date: Date) {\n        this.noFacade(\"futureDate\");\n        if (this._txnTime) {\n            throw new Error(\n                \"txnTime already set; cannot set futureDate() after txnTime\"\n            );\n        }\n\n        const d = new Date(\n            Number(this.slotToTime(this.timeToSlot(BigInt(date.getTime()))))\n        );\n        // time emoji: ‚è∞\n        console.log(\"  ‚è∞‚è∞ setting txnTime to \", d.toString());\n        this._txnTime = d;\n        return this;\n    }\n\n    assertNumber(obj, msg = \"expected a number\") {\n        if (obj === undefined || obj === null) {\n            throw new Error(msg);\n        } else if (typeof obj == \"number\") {\n            return obj;\n        } else {\n            throw new Error(msg);\n        }\n    }\n\n    /**\n     * Calculates the time (in milliseconds in 01/01/1970) associated with a given slot number.\n     * @param slot - Slot number\n     */\n    slotToTime(slot: bigint): bigint {\n        let secondsPerSlot = this.assertNumber(\n            this.networkParams.secondsPerSlot\n        );\n\n        let lastSlot = BigInt(this.assertNumber(this.networkParams.refTipSlot));\n        let lastTime = BigInt(this.assertNumber(this.networkParams.refTipTime));\n\n        let slotDiff = slot - lastSlot;\n\n        return lastTime + slotDiff * BigInt(secondsPerSlot * 1000);\n    }\n\n    /**\n     * Calculates the slot number associated with a given time.\n     * @param time - Milliseconds since 1970\n     */\n    timeToSlot(time: bigint): bigint {\n        let secondsPerSlot = this.assertNumber(\n            this.networkParams.secondsPerSlot\n        );\n\n        let lastSlot = BigInt(this.assertNumber(this.networkParams.refTipSlot));\n        let lastTime = BigInt(this.assertNumber(this.networkParams.refTipTime));\n\n        let timeDiff = time - lastTime;\n\n        return (\n            lastSlot +\n            BigInt(Math.round(Number(timeDiff) / (1000 * secondsPerSlot)))\n        );\n    }\n\n    /**\n     * Identifies the time at which the current transaction is expected to be executed.\n     * Use this attribute in any transaction-building code that sets date/time values\n     * for the transaction.\n     * Honors any futureDate() setting or uses the current time if none has been set.\n     */\n    get txnTime() {\n        if (this._txnTime) return this._txnTime;\n        const now = Date.now();\n        const recent = now - 180_000;\n        const d = new Date(\n            Number(this.slotToTime(this.timeToSlot(BigInt(recent))))\n        );\n        // time emoji: ‚è∞\n        console.log(\"‚è∞‚è∞setting txnTime to \", d.toString());\n        return (this._txnTime = d);\n    }\n\n    _txnEndTime?: Date;\n    get txnEndTime() {\n        if (this._txnEndTime) return this._txnEndTime;\n        throw new Error(\"call [optional: futureDate() and] validFor(durationMs) before fetching the txnEndTime\")\n    }\n        \n   /**\n     * Sets an on-chain validity period for the transaction, in miilliseconds\n     *\n     * @remarks if futureDate() has been set on the transaction, that\n     * date will be used as the starting point for the validity period.\n     *\n     * Returns the transaction context for chaining.\n     *\n     * @param durationMs - the total validity duration for the transaction.  On-chain\n     *  checks using CapoCtx `now(granularity)` can enforce this duration\n     */\n    validFor<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        durationMs: number\n    ): TCX {\n        this.noFacade(\"validFor\");\n        const startMoment = this.txnTime.getTime();\n\n        // if the desired duration is greater  the current validity period,\n        //   DO NOT constraint the validity period further.\n        // If the current validity period is greater than the desired duration,\n        //   we SHOULD constrain the tx validity to this more restrictive duration.\n        this._validityPeriodSet = true;\n        this.txb\n            .validFromTime(new Date(startMoment))\n            .validToTime(new Date(startMoment + durationMs));\n\n        return this;\n    }\n    _validityPeriodSet = false;\n    txRefInputs: TxInput[] = [];\n    /**\n     * adds a reference input to the transaction context\n     * @remarks\n     *\n     * idempotent version of helios addRefInput()\n     *\n     * @public\n     **/\n    addRefInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        input: TxInput<any>,\n        refScript?: UplcProgramV2\n    ) {\n        this.noFacade(\"addRefInput\");\n        if (!input) throw new Error(`missing required input for addRefInput()`);\n\n        if (this.txRefInputs.find((v) => v.id.isEqual(input.id))) {\n            console.warn(\"suppressing second add of refInput\");\n            return this;\n        }\n        if (this.inputs.find((v) => v.id.isEqual(input.id))) {\n            console.warn(\n                \"suppressing add of refInput that is already an input\"\n            );\n            return this;\n        }\n        this.txRefInputs.push(input);\n\n        //@ts-expect-error private field\n        const v2sBefore = this.txb.v2Scripts;\n        if (refScript) {\n            //@ts-expect-error on private method\n            this.txb.addV2RefScript(refScript);\n        }\n\n        this.txb.refer(input);\n        //@ts-expect-error private field\n        const v2sAfter = this.txb.v2Scripts;\n\n        // const t2 = this.txb.witnesses.scripts.length;\n        // if (t2 > t) {\n        if (v2sAfter.length > v2sBefore.length) {\n            console.log(\"       --- addRefInput added a script to tx.scripts\");\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated - use addRefInput() instead.\n     */\n    addRefInputs<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...args: addRefInputArgs\n    ) {\n        throw new Error(`deprecated`);\n    }\n\n    addInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        input: TxInput,\n        r?: isActivity\n    ): TCX {\n        this.noFacade(\"addInput\");\n        if (r && !r.redeemer) {\n            console.log(\"activity without redeemer tag: \", r);\n            throw new Error(\n                `addInput() redeemer must match the isActivity type {redeemer: ‚Äπactivity‚Ä∫}\\n`\n                // JSON.stringify(r, delegateLinkSerializer)\n            );\n        }\n\n        //@ts-expect-error probing for pubKeyHash\n        if (input.address.pubKeyHash)\n            this.allNeededWitnesses.push(input.address);\n        this.inputs.push(input);\n        if (this.parentTcx) {\n            this.parentTcx.childReservedUtxos.push(input);\n        }\n        try {\n            this.txb.spendUnsafe(input, r?.redeemer);\n        } catch (e: any) {\n            // console.log(\"failed adding input to txn: \", dumpAny(this));\n            debugger;\n            throw new Error(\n                `addInput: ${e.message}` +\n                    \"\\n   ...TODO: dump partial txn from txb above.  Failed TxInput:\\n\" +\n                    dumpAny(input)\n            );\n        }\n\n        return this;\n    }\n\n    addOutput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        output: TxOutput\n    ): TCX {\n        this.noFacade(\"addOutput\");\n        try {\n            this.txb.addOutput(output);\n            this.outputs.push(output);\n        } catch (e: any) {\n            console.log(\n                \"Error adding output to txn: \\n\" +\n                    \"  | inputs:\\n  | \" +\n                    utxosAsString(this.inputs, \"\\n  | \") +\n                    \"\\n  | \" +\n                    (dumpAny(this.outputs) as string)\n                        .split(\"\\n\")\n                        .join(\"\\n  |   \") +\n                    \"\\n... in context of partial tx above: failed adding output: \\n  |  \",\n                dumpAny(output),\n                \"\\n\" + e.message,\n                \"\\n   (see thrown stack trace below)\"\n            );\n            e.message =\n                `addOutput: ${e.message}` + \"\\n   ...see logged details above\";\n            throw e;\n        }\n\n        return this;\n    }\n\n    attachScript(...args: Parameters<TxBuilder[\"attachUplcProgram\"]>) {\n        throw new Error(\n            `use addScriptProgram(), increasing the txn size, if you don't have a referenceScript.\\n` +\n                `Use <capo>.txnAttachScriptOrRefScript() to use a referenceScript when available.`\n        );\n    }\n\n    /**\n     * Adds a UPLC program to the transaction context, increasing the transaction size.\n     * @remarks\n     * Use the Capo's `txnAttachScriptOrRefScript()` method to use a referenceScript\n     * when available. That method uses a fallback approach adding the script to the\n     * transaction if needed.\n     */\n    addScriptProgram(...args: Parameters<TxBuilder[\"attachUplcProgram\"]>) {\n        this.noFacade(\"addScriptProgram\");\n        this.txb.attachUplcProgram(...args);\n\n        return this;\n    }\n\n    wasModified() {\n        //@ts-expect-error private method\n        this.txb.wasModified();\n    }\n\n    _builtTx?: Tx | Promise<Tx>;\n    get builtTx() {\n        this.noFacade(\"builtTx\");\n        if (!this._builtTx) {\n            throw new Error(`can't go building the tx willy-nilly`);\n            return (this._builtTx = this.build().then(({ tx }) => {\n                return (this._builtTx = tx);\n            }));\n        }\n        return this._builtTx;\n    }\n\n    async addSignature(wallet: Wallet) {\n        this.noFacade(\"addSignature\");\n        const builtTx = await this.builtTx;\n        const sig = await wallet.signTx(builtTx);\n\n        builtTx.addSignature(sig[0]);\n    }\n\n    hasAuthorityToken(authorityValue: Value) {\n        return this.inputs.some(i => i.value.isGreaterOrEqual(authorityValue))\n    }\n\n    async findAnySpareUtxos(): Promise<TxInput[] | never> {\n        this.noFacade(\"findAnySpareUtxos\");\n        const mightNeedFees = 3_500_000n; // lovelace this.ADA(3.5);\n\n        const toSortInfo = this.uh.mkUtxoSortInfo(mightNeedFees);\n        const notReserved =\n            this.utxoNotReserved.bind(this) || ((u: TxInput) => u);\n\n        const uh = this.uh;\n        return uh\n            .findActorUtxo(\n                \"spares for tx balancing\",\n                notReserved,\n                {\n                    wallet: this.wallet,\n                    dumpDetail: \"onFail\",\n                },\n                \"multiple\"\n            )\n            .then(async (utxos) => {\n                if (!utxos) {\n                    throw new Error(\n                        `no utxos found for spares for tx balancing.  We can ask the user to send a series of 10, 11, 12, ... ADA to themselves or do it automatically`\n                    );\n                }\n\n                const allSpares = utxos\n                    .map(toSortInfo)\n                    .filter(uh.utxoIsSufficient)\n                    .sort(uh.utxoSortSmallerAndPureADA);\n\n                if (allSpares.reduce(uh.reduceUtxosCountAdaOnly, 0) > 0) {\n                    return allSpares\n                        .filter(uh.utxoIsPureADA)\n                        .map(uh.sortInfoBackToUtxo);\n                }\n                return allSpares.map(uh.sortInfoBackToUtxo);\n            });\n    }\n\n    async findChangeAddr(): Promise<Address> {\n        this.noFacade(\"findChangeAddr\");\n        // const {\n        //     actorContext: { wallet },\n        // } = this; // ugh, api-extractor!\n        const wallet = this.actorContext.wallet;\n        if (!wallet) {\n            throw new Error(\n                `‚ö†Ô∏è  ${this.constructor.name}: no this.actorContext.wallet; can't get required change address!`\n            );\n        }\n        let unused = (await wallet.unusedAddresses).at(0);\n        if (!unused) unused = (await wallet.usedAddresses).at(-1);\n        if (!unused)\n            throw new Error(\n                `‚ö†Ô∏è  ${this.constructor.name}: can't find a good change address!`\n            );\n        return unused;\n    }\n\n    /**\n     * Adds required signers to the transaction context\n     * @remarks\n     * Before a transaction can be submitted, signatures from each of its signers must be included.\n     * \n     * Any inputs from the wallet are automatically added as signers, so addSigners() is not needed\n     * for those.\n     */\n    async addSigners(...signers: PubKeyHash[]) {\n        this.noFacade(\"addSigners\");\n        \n        this.allNeededWitnesses.push(...signers);\n    }\n\n    async build(\n        this: StellarTxnContext<any>,\n        {\n            signers = [],\n            addlTxInfo = {\n                description: this.txnName ? \": \" + this.txnName : \"\",\n            },\n            beforeValidate,\n            paramsOverride,\n            expectError,\n        }: {\n            signers?: Address[];\n            addlTxInfo?: Pick<TxDescription<any, \"buildLater!\">, \"description\">;\n            beforeValidate?: (tx: Tx) => Promise<any> | any;\n            paramsOverride?: Partial<NetworkParams>;\n            expectError?: boolean;\n        } = {}\n    ): Promise<BuiltTcx> {\n        this.noFacade(\"build\");\n        console.timeStamp?.(`submit() txn ${this.txnName}`);\n        console.log(\"tcx build() @top\");\n\n        if (!this._validityPeriodSet) {\n            this.validFor(12 * 60 * 1000); // 12 minutes\n            // this.validFor(12 * 60 * 1000 * 60 * 24); // 12 days\n        }\n        let { description } = addlTxInfo;\n        if (description && !description.match(/^:/)) {\n            description = \": \" + description;\n        }\n        const {\n            actorContext: { wallet },\n        } = this;\n\n        let walletMustSign = false;\n        let tx: Tx;\n\n        const logger = this.logger;\n        if (wallet || signers.length) {\n            console.timeStamp?.(`submit(): findChangeAddr()`);\n            const changeAddress = await this.findChangeAddr();\n\n            console.timeStamp?.(`submit(): findAnySpareUtxos()`);\n            const spares = await this.findAnySpareUtxos();\n\n            const willSign = [...signers, ...this.allNeededWitnesses]\n                .map((addrOrPkh) => {\n                    if (addrOrPkh.kind == \"PubKeyHash\") {\n                        return addrOrPkh;\n                    } else if (addrOrPkh.kind == \"Address\") {\n                        if (addrOrPkh.era == \"Shelley\") {\n                            return addrOrPkh.spendingCredential.kind == \"PubKeyHash\"\n                                ? addrOrPkh.spendingCredential\n                                : undefined;\n                        } else {\n                            return undefined;\n                        }\n                    } else {\n                        return undefined;\n                    }\n                })\n                .filter((pkh) => !!pkh)\n                .flat(1) as PubKeyHash[];\n            console.timeStamp?.(`submit(): addSIgners()`);\n            this.txb.addSigners(...willSign);\n            const wHelper = wallet && makeWalletHelper(wallet);\n            const othersMustSign: PubKeyHash[] = [];\n            // determine whether we need to request signing from wallet.\n            // may involve adding signers to the txn\n            if (wallet && wHelper) {\n                for (const a of willSign) {\n                    if (await wHelper.isOwnAddress(a)) {\n                        walletMustSign = true;\n                    } else {\n                        othersMustSign.push(a);\n                    }\n                }\n                this.otherPartySigners = othersMustSign;\n                // if any inputs from the wallet were added as part of finalizing,\n                // add the wallet's signature to the txn\n                const inputs = this.txb.inputs;\n                if (!inputs) throw new Error(`no inputs in txn`);\n                for (const input of inputs) {\n                    if (!(await wHelper.isOwnAddress(input.address))) continue;\n                    this.allNeededWitnesses.push(input.address);\n                    walletMustSign = true;\n\n                    //@ts-expect-error on type-probe\n                    const pubKeyHash = input.address.pubKeyHash;\n\n                    if (pubKeyHash) {\n                        this.txb.addSigners(pubKeyHash);\n                    } else {\n                        //!!! todo: deal with \"native-script\" by traversing its\n                        //  struct and seeking the pubKeyHashes (or? other witnesses)\n                        //  that may be needed for signing.  That, or include the\n                        //  native-script information alongside the otherPartySigners,\n                        //  maybe as otherPartyScriptSigners or something.  The\n                        //  batch-submit-controller could take over the responsibility\n                        //  for finding signatures satisfactory for those.\n                    }\n                }\n            } else {\n                console.warn(\n                    \"txn build: no wallet/helper available for txn signining (debugging breakpoint available)\"\n                );\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n            }\n            let capturedCosts: {\n                total: Cost;\n                [key: string]: Cost;\n            } = {\n                total: { cpu: 0n, mem: 0n },\n                slush: { cpu: 0n, mem: 0n },\n            };\n\n            const inputValues = this.inputs\n                .map((i) => i.value.assets)\n                .reduce((a, b) => a.add(b), makeAssets());\n            const outputValues = this.outputs\n                .map((o) => o.value.assets)\n                .reduce((a, b) => a.add(b), makeAssets());\n            const mintValues = this.txb.mintedTokens;\n            const netTxAssets = inputValues\n                .add(mintValues)\n                .subtract(outputValues);\n            if (!netTxAssets.isZero()) {\n                console.log(\n                    \"tx imbalance=\" + dumpAny(netTxAssets, this.networkParams)\n                );\n            }\n            try {\n                // the transaction can fail validation without throwing an error\n                tx = await this.txb.buildUnsafe({\n                    changeAddress,\n                    spareUtxos: spares,\n                    networkParams: {\n                        ...this.networkParams,\n                        ...paramsOverride,\n                    },\n                    logOptions: logger,\n                    beforeValidate,\n                    modifyExBudget: (txi, purpose, index, costs) => {\n                        capturedCosts[`${purpose} @${1 + index}`] = {\n                            ...costs,\n                        };\n\n                        // todo: use Ogmios API to just get the exact costs\n                        //   ... and report here when there is a diff.\n                        // Meanwhile, add a small amount (0.05 ADA) of padding\n                        //   ... to the computed costs, per involved script\n\n                        // temp? - + ~0.06 ada = 1.2x 0.05\n                        // const cpuSlush = 0n // BigInt(350_000_000n); // ~25k lovelace\n                        // const memSlush = 0n // BigInt(430_000n); // ~25k lovelace\n\n                        // without this, we **sometimes** get problems having enough\n                        // exBudget to cover the way the haskell node computes the\n                        // per-script execution costs.  Prevents \"out of budget\" errors\n                        // during script execution:\n                        const cpuSlush = BigInt(350_000_000n); // ~25k lovelace\n                        const memSlush = BigInt(430_000n); // ~25k lovelace\n\n                        //... but doesn't suffice to just add per-script slush:\n                        // this approach leads to escalating \"expected/actual fee\" messaging\n                        // const cpuSlush = BigInt( 350_000_000n * 13n / 10n); // ~25k lovelace/0.025 ADA\n                        // const memSlush = BigInt(430_000n * 13n / 10n); // ~25k lovelace/0.025 ADA\n\n                        capturedCosts.slush.cpu += cpuSlush;\n                        capturedCosts.slush.mem += memSlush;\n                        costs.cpu += cpuSlush;\n                        costs.mem += memSlush;\n\n                        capturedCosts.total.cpu += costs.cpu;\n                        capturedCosts.total.mem += costs.mem;\n                        if (\"minting\" == purpose) purpose = \"minting \";\n                        return costs;\n                    },\n                });\n                this._builtTx = tx;\n\n                this.txb.validToTime;\n\n                //!!! todo: come back to this later.  Blockfrost's endpoint for this\n                // seems to have some issues.  Ogmios itself seems to be fine.\n                //\n                // //@ts-expect-error on type-probe\n                // if (this.setup.network.evalTx) {\n                //     const partialTx = undoFeesFrom(tx)\n                //     console.log(bytesToHex(partialTx.toCbor()))\n                //     //@ts-expect-error on type-probe\n                //     const evalResult = await this.setup.network.evalTx(\n                //         partialTx\n                //     );\n                //     debugger\n                // }\n            } catch (e: any) {\n                // buildUnsafe shouldn't throw errors.\n\n                e.message +=\n                    \"; txn build failed (debugging breakpoint available)\\n\" +\n                    (netTxAssets.isZero()\n                        ? \"\"\n                        : \"tx imbalance=\" +\n                          dumpAny(netTxAssets, this.networkParams)) +\n                    `  inputs: ${dumpAny(this.inputs)}\\n` +\n                    `  outputs: ${dumpAny(this.outputs)}\\n` +\n                    `  mint: ${dumpAny(this.txb.mintedTokens)}\\n` +\n                    `  refInputs: ${dumpAny(this.txRefInputs)}\\n`;\n\n                logger.logError(`txn build failed: ${e.message}`);\n                if (tx!) logger.logPrint(dumpAny(tx!) as string);\n\n                logger.logError(\n                    `  (it shouldn't be possible for buildUnsafe to be throwing errors!)`\n                );\n                logger.flushError();\n\n                throw e;\n            }\n\n            if (tx.hasValidationError) {\n                const e = tx.hasValidationError;\n\n                //@ts-expect-error accessing the stack of something that might be a string instead\n                let heliosStack = e.stack?.split(\"\\n\") || undefined;\n                // locate the first TxImpl line in the stack trace.\n                // include it but remove remaining trace lines.\n                // heliosStack = heliosStack?.slice(\n                //     0, heliosStack.findIndex(l => l.match(/TxImpl/)) + 2\n                // ) || \"\"\n                // locate any lines like \"<helios>@at <anonymous>, [mkTv=<fn>, tvCharter=<fn>, mustFindInputRedeemer=<fn>, fromCip68Wrapper=<fn>, RelativeDelegateLink::tvAuthorityToken=<fn>, RelativeDelegateLink::acAuthorityToken=<fn>, RelativeDelegateLink::validatesUpdatedSettings=<fn>, RelativeDelegateLink::hasDelegateInput=<fn>, RelativeDelegateLink::hasValidOutput=<fn>, DelegateInput::genericDelegateActivity=<fn>], src/CapoHelpers.hl:761:9:0\"\n                // and transform it to a multi-line, indented function trace with the\n                // square-bracketed items indented to indicate the scope of the function they're provided to\n                heliosStack = heliosStack?.map((line: string) => {\n                    if (line.match(/<helios>@at/)) {\n                        line = line\n                            .replace(\n                                /<helios>@at /,\n                                \"   ... in helios function \"\n                            )\n                            .replace(\n                                /, \\[(.*)\\],/,\n                                (_, bracketed) => ``\n                                // ` with scope [\\n        ${\n                                //     bracketed.replace(/, /g, \",\\n        \")\n                                // }\\n      ]`\n                            );\n                    }\n                    return line;\n                });\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n                const scriptContext =\n                    \"string\" == typeof e ? undefined : e.scriptContext;\n                logger.logError(\n                    `tx validation failure: \\n  ‚ùå ${\n                        //@ts-expect-error\n                        tx.hasValidationError.message || tx.hasValidationError\n                    }\\n` + (heliosStack?.join(\"\\n\") || \"\")\n                );\n                logger.flush();\n                // TODO: notify the currentBatch and let it reveal the script-context\n                // and tx-cbor.  KEEP THE console LOGGING for now ALSO.\n\n                const ctxCbor = scriptContext?.toCbor();\n                const cborHex = ctxCbor ? bytesToHex(ctxCbor) : \"\";\n                if (!expectError) {\n                    console.log(\n                        cborHex\n                            ? \"------------------- failed ScriptContext as cbor-hex -------------------\\n\" +\n                                  cborHex +\n                                  \"\\n\"\n                            : \"\",\n                        \"------------------- failed tx as cbor-hex -------------------\\n\" +\n                            bytesToHex(tx.toCbor()),\n                        \"\\n------------------^ failed tx details ^------------------\\n\" +\n                            \"(debugging breakpoint available)\"\n                    );\n                }\n            }\n\n            // tx.body.fee = tx.body.fee + BigInt(250_000n); // 25k lovelace\n            return {\n                tx,\n                willSign,\n                walletMustSign,\n                wallet,\n                wHelper,\n                costs: capturedCosts,\n            };\n        } else {\n            throw new Error(\"no 'actorContext.wallet'; can't make  a txn\");\n        }\n    }\n    log(...msgs: string[]) {\n        if (msgs.length > 1) {\n            debugger;\n            throw new Error(`no multi-arg log() calls`);\n        }\n        this.logger.logPrint(msgs[0]);\n        return this;\n    }\n    flush() {\n        this.logger.flush();\n        return this;\n    }\n    finish() {\n        this.logger.finish();\n        return this;\n    }\n\n    /**\n     * Submits the current transaction and any additional transactions in the context.\n     * @remarks\n     * To submit only the current transaction, use the `submit()` method.\n     *\n     * Uses the TxBatcher to create a new batch of transactions.  This new batch\n     * overlays a TxChainBuilder on the current network-client, using that facade\n     * to provide utxos for chained transactions in the batch.\n     *\n     * The signers array can be used to add additional signers to the transaction, and\n     * is passed through to the submit() for the current txn only; it is not used for\n     * any additional transactions.\n     *\n     * The beforeSubmit, onSubmitted callbacks are used for each additional transaction.\n     *\n     * beforeSubmit can be used to notify the user of the transaction about to be submitted,\n     * and can also be used to add additional signers to the transaction or otherwise modify\n     * it (by returning the modified transaction).\n     *\n     * onSubmitted can be used to notify the user that the transaction has been submitted,\n     * or for logging or any other post-submission processing.\n     */\n    async submitAll(this: StellarTxnContext<any>, options: SubmitOptions = {}) {\n        const currentBatch = this.currentBatch;\n        const hasOpenBatch = currentBatch?.isOpen;\n        // if (hasOpenBatch) {\n        //     console.warn(\n        //         `‚ö†Ô∏è  submitAll(): detected overlapping txn batches... \\n` +\n        //             `  ... that MIGHT be a developer error on our part.\\n` +\n        //             `  ... or, you might need to add your transaction to an existing batch \\n` +\n        //             `      (use otherTcx.includeAddlTxn(...))\\n` +\n        //             `  ... or, you might need to ensure you're waiting for an existing batch \\n` +\n        //             `      to finish (monitor setup.txBatcher.current for batch:confirmed)\\n` +\n        //             `\\nFinally, you might have an advanced use-case for building multiple \\n` +\n        //             `independent batches of transactions that don't need tx chaining between them. \\n\\n` +\n        //             `Please be welcome to log an issue with the project's support desk, \\n` +\n        //             `... and we'll see what we can do to help.`\n        //         );\n        //     throw new Error(`can't submitAll() with an existing open tx batch (wait for the existing batch to finish first`);\n        // }\n\n        //!!! remove because it's already done in the constructor?\n        // debugger\n        // if (!currentBatch || currentBatch.isConfirmationComplete) {\n        //     this.setup.txBatcher.rotate(this.setup.chainBuilder);\n        // }\n\n        // if (!this.setup.isTest && !this.setup.chainBuilder) {\n        //     if (currentBatch.chainBuilder) {\n        //         // backfills the chainbuilder from the one auto-populated\n        //         // during `get TxBatcher.current()`\n        //         this.setup.chainBuilder = currentBatch.chainBuilder;\n        //     } else {\n        //         this.setup.chainBuilder = makeTxChainBuilder(\n        //             this.setup.network\n        //         );\n        //     }\n        // }\n        //!!! ^^^ remove?\n\n        return this.buildAndQueueAll(options).then(() => {\n            return true;\n            //            return currentBatch.$signAndSubmitAll().then(() => true);\n        });\n    }\n\n    /**\n     * augments a transaction context with a type indicator\n     * that it has additional transactions to be submitted.\n     * @public\n     * @remarks\n     * The optional argument can also be used to include additional\n     * transactions to be chained after the current transaction.\n     */\n    withAddlTxns<TCX extends StellarTxnContext<anyState>>(\n        this: TCX,\n        addlTxns: Record<string, TxDescription<any, \"buildLater!\">> = {}\n    ): hasAddlTxns<TCX> {\n        //@ts-expect-error\n        this.state.addlTxns = this.state.addlTxns || {};\n\n        for (const [name, txn] of Object.entries(addlTxns)) {\n            this.includeAddlTxn(name, txn);\n        }\n        return this as any;\n    }\n\n    async buildAndQueueAll(\n        this: StellarTxnContext<any>,\n        options: SubmitOptions = {}\n    ) {\n        const {\n            addlTxInfo = {\n                description: this.txnName\n                    ? \": \" + this.txnName\n                    : \"‚Äπunnamed tx‚Ä∫\",\n                id: this.id,\n                tcx: this,\n            },\n            ...generalSubmitOptions\n        } = options;\n        if (options.paramsOverride) {\n            console.warn(\n                \"‚ö†Ô∏è  paramsOverride can be useful for extreme cases \\n\" +\n                    \"of troubleshooting tx execution by submitting an oversized tx \\n\" +\n                    \"with unoptimized contract scripts having diagnostic print/trace calls\\n\" +\n                    \"to a custom preprod node having overloaded network params, thus allowing \\n\" +\n                    \"such a transaction to be evaluated end-to-end by the Haskell evaluator using \\n\" +\n                    \"the cardano-node's script-budgeting mini-protocol.\\n\\n\" +\n                    \"This will cause problems for regular transactions (such as requiring very large collateral)\" +\n                    \"Be sure to remove any params override if you're not dealing with \\n\" +\n                    \"one of those very special situations. \\n\"\n            );\n            debugger;\n        }\n\n        if (this.isFacade == false) {\n            return this.buildAndQueue({\n                ...generalSubmitOptions,\n                addlTxInfo,\n            }).then(() => {\n                if (this.state.addlTxns) {\n                    // this gives early registration of nested txns from top-level txns\n                    console.log(\n                        `üéÑ‚õÑüéÅ ${this.id}   -- B&QA - registering addl txns`\n                    );\n                    return this.queueAddlTxns(options).then(() => {\n                        return true;\n                    });\n\n                    // .then((x) => {\n                    //     return this.currentBatch.$signAndSubmitAll()\n                    //     // this.setup.chainBuilder = undefined;\n                    //     // return x;\n                    // });\n                }\n            });\n        } else if (this.state.addlTxns) {\n            if (this.isFacade) {\n                this.currentBatch.$txInfo(this.id)?.transition(\"isFacade\");\n            }\n\n            // this gives early registration of nested txns from top-level txns\n            console.log(\n                `üéÑ‚õÑüéÅ ${this.id}   -- B&QA - registering txns in facade`\n            );\n            return this.queueAddlTxns(generalSubmitOptions).then(() => {\n                return true;\n            });\n        }\n        console.warn(`‚ö†Ô∏è  submitAll(): no txns to queue/submit`, this);\n        throw new Error(\n            `unreachable? -- nothing to do for submitting this tcx`\n        );\n    }\n\n    get currentBatch() {\n        return this.setup.txBatcher.current;\n    }\n\n    /**\n     * Submits only the current transaction.\n     * @remarks\n     * To also submit additional transactions, use the `submitAll()` method.\n     */\n    async buildAndQueue(\n        this: StellarTxnContext<any>,\n        submitOptions: SubmitOptions = {}\n    ) {\n        let {\n            signers = [],\n            addlTxInfo,\n            paramsOverride,\n            expectError,\n            beforeError,\n            beforeValidate,\n            whenBuilt,\n            fixupBeforeSubmit,\n            onSubmitError,\n            onSubmitted,\n        } = submitOptions;\n\n        // console.log(\"buildAndQueue with setup\", this.setup);\n        this.noFacade(\"submit\");\n        if (!addlTxInfo) {\n            debugger;\n            throw new Error(`expecting addlTxInfo to be passed`);\n            addlTxInfo = {\n                description: this.txnName\n                    ? \": \" + this.txnName\n                    : \"‚Äπunnamed tx‚Ä∫\",\n                id: nanoid(5),\n                tcx: this,\n            };\n        }\n        const {\n            logger,\n            setup: { network },\n        } = this;\n        const {\n            tx,\n            willSign,\n            walletMustSign,\n            wallet,\n            wHelper,\n            costs = {\n                total: { cpu: 0n, mem: 0n },\n            },\n        } = await this.build({\n            signers,\n            paramsOverride,\n            addlTxInfo,\n            beforeValidate,\n            expectError,\n        });\n        let { description, id } = addlTxInfo;\n        if (!id) {\n            id = addlTxInfo.id = this.id;\n        }\n        const addlTxInfo2: TxDescription<any, \"buildLater!\"> = {\n            ...addlTxInfo,\n        } as any;\n\n        const txStats = {\n            costs: costs,\n            wallet: wallet,\n            walletMustSign,\n            wHelper,\n            willSign,\n        };\n        const errMsg =\n            tx.hasValidationError && tx.hasValidationError.toString();\n        if (errMsg) {\n            // console.log(`submit(): FAILED tx.validate(): ${errMsg}`);\n            // console.profileEnd?.(\"tx.validate()\");\n            // @ts-ignore\n            // if (console.profileEnd) {\n            //     debugger;\n            // }\n\n            logger.logPrint(`‚ö†Ô∏è  txn validation failed: ${errMsg}\\n`);\n            logger.logPrint(this.dump(tx));\n            this.emitCostDetails(tx, costs);\n            logger.flush();\n            logger.logError(`FAILED submitting tx: ${description}`);\n            logger.logPrint(errMsg);\n            if (expectError) {\n                logger.logPrint(\n                    `\\n\\nüí£üéâ üí£üéâ üéâ üéâ transaction failed (as expected)`\n                );\n            }\n\n            const txErrorDescription: TxDescriptionWithError = {\n                ...addlTxInfo2,\n                tcx: this,\n                error: errMsg,\n                tx,\n                stats: txStats,\n                options: submitOptions,\n                txCborHex: bytesToHex(tx.toCbor()),\n            };\n            this.currentBatch.txError(txErrorDescription);\n\n            let errorHandled;\n            if (beforeError) {\n                errorHandled = await beforeError(txErrorDescription);\n            }\n            logger.flushError();\n            if (\n                errMsg.match(\n                    /multi:Minting: only dgData activities ok in mintDgt/\n                )\n            ) {\n                console.log(\n                    `‚ö†Ô∏è  mint delegate for multiple activities should be given delegated-data activities, not the activities of the delegate`\n                );\n            }\n            if (!errorHandled) {\n                debugger;\n                throw new Error(errMsg);\n            }\n        }\n        // const elapsed = t2 - t1;\n        // console.log(\n        //     // stopwatch emoji: ‚è±\n        //     `          :::::::::: ‚è± tx validation time: ${elapsed}ms ‚è±`\n        // );\n        // result: validations for non-trivial txns can take ~800+ ms\n        //  - validations with simplify:true, ~250ms - but ...`\n        //    ... with elided error messages that don't support negative-testing very well\n        for (const pkh of willSign) {\n            if (!pkh) continue;\n            if (tx.body.signers.find((s) => pkh.isEqual(s))) continue;\n            throw new Error(\n                `incontheeivable! all signers should have been added to the builder above`\n            );\n        }\n\n        const txDescr: TxDescription<any, \"built\"> = {\n            ...addlTxInfo2,\n            tcx: this,\n            tx,\n            txId: tx.id(),\n            options: submitOptions,\n            stats: txStats,\n            txCborHex: bytesToHex(tx.toCbor()),\n        };\n        const { currentBatch } = this;\n        const txState = currentBatch.$txStates[id];\n\n        logger.logPrint(`tx transcript: ${description}\\n`);\n        logger.logPrint(this.dump(tx));\n        this.emitCostDetails(tx, costs);\n        logger.flush();\n\n        // hands off wallet signing & tx-completion to the batcher.\n        console.timeStamp?.(`tx: add to current-tx-batch`);\n        currentBatch.$addTxns(txDescr);\n        this.setup.chainBuilder?.with(txDescr.tx);\n        await whenBuilt?.(txDescr);\n    }\n    emitCostDetails(tx: Tx, costs: { total: Cost; [key: string]: Cost }) {\n        const { logger } = this;\n        const {\n            maxTxExCpu,\n            maxTxExMem,\n            maxTxSize,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxSize = maxTxSize,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxExMem = maxTxExMem,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxExCpu = maxTxExCpu,\n            exCpuFeePerUnit,\n            exMemFeePerUnit,\n            txFeePerByte,\n            txFeeFixed,\n        } = this.networkParams;\n        const oMaxSize: number = origMaxTxSize;\n        const oMaxMem: number = origMaxTxExMem;\n        const oMaxCpu: number = origMaxTxExCpu;\n\n        const { total, ...otherCosts } = costs;\n        const txSize = tx.calcSize();\n        const txFeeCalc = Number(tx.calcMinFee(this.networkParams));\n        const txFee = tx.body.fee;\n\n        const cpuFee = BigInt((Number(total.cpu) * exCpuFeePerUnit).toFixed(0));\n        const memFee = BigInt((Number(total.mem) * exMemFeePerUnit).toFixed(0));\n        const sizeFee = BigInt(txSize * txFeePerByte);\n        const nCpu = Number(total.cpu);\n        const nMem = Number(total.mem);\n        let refScriptSize = 0;\n        for (const anyInput of [...tx.body.inputs, ...tx.body.refInputs]) {\n            const refScript = anyInput.output.refScript;\n            if (refScript) {\n                const scriptSize = refScript.toCbor().length;\n                refScriptSize += scriptSize;\n            }\n        }\n        let multiplier = 1.0;\n        let refScriptsFee = 0n;\n        let refScriptsFeePerByte = this.networkParams.refScriptsFeePerByte;\n        let refScriptCostDetails: string[] = [];\n        const tierSize = 25600;\n        let alreadyConsumed = 0;\n        for (\n            let tier = 0;\n            tier * tierSize < refScriptSize;\n            tier += 1, multiplier *= 1.2\n        ) {\n            const topOfThisTier = (1 + tier) * tierSize;\n            const consumedThisTier = Math.min(\n                tierSize,\n                refScriptSize - alreadyConsumed\n            );\n            alreadyConsumed += consumedThisTier;\n            const feeThisTier = Math.round(\n                consumedThisTier * multiplier * refScriptsFeePerByte\n            );\n            refScriptsFee += BigInt(feeThisTier);\n            refScriptCostDetails.push(\n                `\\n      -- refScript tier${\n                    1 + tier\n                } (${consumedThisTier} √ó ${multiplier}) √ó${refScriptsFeePerByte} = ${lovelaceToAda(\n                    feeThisTier\n                )}`\n            );\n        }\n\n        // for (let i = 0; i < refScriptSize; i += 25600, multiplier *= 1.2) {\n        //     const chunkSize = Math.min(25600, refScriptSize - i)\n        //     const feeThisChunk = chunkSize * multiplier * refScriptsFeePerByte\n        //     refScriptsFee += BigInt(feeThisChunk)\n        //     refScriptCostDetails.push(\n        //         `\\n      -- refScript tier${i} (${chunkSize} bytes) √ó ${multiplier} = ${lovelaceToAda(feeThisChunk)}`\n        //     )\n        // }\n        const fixedTxFeeBigInt = BigInt(txFeeFixed);\n\n        const remainderUnaccounted =\n            txFee -\n            cpuFee -\n            memFee -\n            sizeFee -\n            fixedTxFeeBigInt -\n            refScriptsFee;\n\n        if (nCpu > oMaxCpu || nMem > oMaxMem || txSize > oMaxSize) {\n            logger.logPrint(\n                \"üî•üî•üî•üî•  THIS TX EXCEEDS default (overridden in test env) limits on network params  üî•üî•üî•üî•\\n\" +\n                    `  -- cpu ${intWithGrouping(nCpu)} = ${(\n                        (100 * nCpu) /\n                        oMaxCpu\n                    ).toFixed(1)}% of ${intWithGrouping(\n                        oMaxCpu\n                    )} (patched to ${intWithGrouping(maxTxExCpu)})\\n` +\n                    `  -- mem ${nMem} = ${((100 * nMem) / oMaxMem).toFixed(\n                        1\n                    )}% of ${intWithGrouping(\n                        oMaxMem\n                    )} (patched to ${intWithGrouping(maxTxExMem)})\\n` +\n                    `  -- tx size ${intWithGrouping(txSize)} = ${(\n                        (100 * txSize) /\n                        oMaxSize\n                    ).toFixed(1)}% of ${intWithGrouping(\n                        oMaxSize\n                    )} (patched to ${intWithGrouping(maxTxSize)})\\n`\n            );\n        }\n        const scriptBreakdown =\n            Object.keys(otherCosts).length > 0\n                ? `\\n    -- per script (with % blame for actual costs):` +\n                  Object.entries(otherCosts)\n                      .map(\n                          ([key, { cpu, mem }]) =>\n                              `\\n      -- ${key}: cpu ${lovelaceToAda(\n                                  Number(cpu) * exCpuFeePerUnit\n                              )} = ${(\n                                  (Number(cpu) / Number(total.cpu)) *\n                                  100\n                              ).toFixed(1)}%, mem ${lovelaceToAda(\n                                  Number(mem) * exMemFeePerUnit\n                              )} = ${(\n                                  (Number(mem) / Number(total.mem)) *\n                                  100\n                              ).toFixed(1)}%`\n                      )\n                      .join(\"\")\n                : \"\";\n\n        logger.logPrint(\n            `costs: ${lovelaceToAda(txFee)}` +\n                `\\n  -- fixed fee = ${lovelaceToAda(txFeeFixed)}` +\n                `\\n  -- tx size fee = ${lovelaceToAda(sizeFee)}` +\n                ` (${intWithGrouping(txSize)} bytes = ${(\n                    Number((1000 * txSize) / oMaxSize) / 10\n                ).toFixed(1)}% of tx size limit)` +\n                `\\n  -- refScripts fee = ${lovelaceToAda(refScriptsFee)}` +\n                refScriptCostDetails.join(\"\") +\n                `\\n  -- scripting costs` +\n                `\\n    -- cpu units ${intWithGrouping(total.cpu)}` +\n                ` = ${lovelaceToAda(cpuFee)}` +\n                ` (${(\n                    Number((1000n * total.cpu) / BigInt(oMaxCpu)) / 10\n                ).toFixed(1)}% of cpu limit/tx)` +\n                `\\n    -- memory units ${intWithGrouping(total.mem)}` +\n                ` = ${lovelaceToAda(memFee)}` +\n                ` (${(\n                    Number((1000n * total.mem) / BigInt(oMaxMem)) / 10\n                ).toFixed(1)}% of mem limit/tx)` +\n                scriptBreakdown +\n                `\\n  -- remainder ${lovelaceToAda(\n                    remainderUnaccounted\n                )} unaccounted-for`\n        );\n    }\n\n    /**\n     * Executes additional transactions indicated by an existing transaction\n     * @remarks\n     *\n     * During the off-chain txn-creation process, additional transactions may be\n     * queued for execution.  This method is used to register those transactions,\n     * along with any chained transactions THEY may trigger.\n     *\n     * The TxBatcher and batch-controller classes handle wallet-signing\n     * and submission of the transactions for execution.\n     * @public\n     **/\n    async queueAddlTxns(\n        this: hasAddlTxns<any>,\n        pipelineOptions?: TxPipelineOptions\n    ) {\n        const { addlTxns } = this.state;\n        if (!addlTxns) return;\n\n        // return this.submitTxns(Object.values(addlTxns), callback);\n        return this.submitTxnChain({\n            ...pipelineOptions,\n            txns: Object.values(addlTxns),\n        });\n    }\n\n    /**\n     * Resolves a list of tx descriptions to full tcx's, without handing any of their\n     * any chained/nested txns.\n     * @remarks\n     * if submitEach is provided, each txn will be submitted as it is resolved.\n     * If submitEach is not provided, then the network must be capable of tx-chaining\n     * use submitTxnChain() to submit a list of txns with chaining\n     */\n    async resolveMultipleTxns(\n        txns: TxDescription<any, \"buildLater!\">[],\n        pipelineOptions?: TxPipelineOptions\n    ) {\n        //         as [\n        //         string,\n        //         TxDescription<any, \"buildLater!\">\n        //     ][]\n\n        for (const [txName, addlTxInfo] of Object.entries(txns)) {\n            const { id } = addlTxInfo;\n            let txTracker = this.currentBatch.$txInfo(id);\n            if (!txTracker) {\n                this.currentBatch.$addTxns(addlTxInfo);\n                txTracker = this.currentBatch.$txInfo(id);\n            }\n        }\n        /* yield to allow rendering */\n        await new Promise((res) => setTimeout(res, 5));\n\n        for (const [txName, addlTxInfo] of Object.entries(txns)) {\n            const { id, depth, parentId } = addlTxInfo;\n            let txTracker = this.currentBatch.$txInfo(id);\n\n            txTracker.$transition(\"building\");\n            /* yield to allow rendering */\n            await new Promise((res) => setTimeout(res, 5));\n\n            // IS resolving.  WILL BE resolved\n            const txInfoResolved: TxDescription<any, \"resolved\"> =\n                addlTxInfo as any;\n            const { txName, description } = txInfoResolved;\n            let alreadyPresent: TxNotNeededError | undefined = undefined;\n            console.log(\"  -- before: \" + description);\n            const tcx = (\n                \"function\" == typeof addlTxInfo.mkTcx\n                    ? await (async () => {\n                          console.log(\n                              \"  creating TCX just in time for: \" + description\n                          );\n\n                          const tcx = await addlTxInfo.mkTcx();\n                          tcx.parentId = parentId || \"\";\n                          tcx.depth = depth;\n                          if (id) {\n                              this.currentBatch.changeTxId(id, tcx.id);\n                              txInfoResolved.id = tcx.id;\n                          } else {\n                              addlTxInfo.id = tcx.id;\n                              console.warn(\n                                  `expected id to be set on addlTxInfo; falling back to JIT-generated id in new tcx`\n                              );\n                          }\n                          return tcx;\n                      })().catch((e) => {\n                          if (e instanceof TxNotNeededError) {\n                              alreadyPresent = e;\n                              const tcx = new StellarTxnContext(\n                                  this.setup\n                              ).withName(\n                                  `addlTxInfo already present: ${description}`\n                              );\n                              tcx.alreadyPresent = alreadyPresent;\n                              return tcx;\n                          }\n                          throw e;\n                      })\n                    : (() => {\n                          console.log(\n                              \"  ---------------- warning!!!! addlTxInfo is already built!\"\n                          );\n                          debugger;\n                          throw new Error(\" unreachable - right?\");\n                          return addlTxInfo.tcx;\n                      })()\n            ) as StellarTxnContext;\n            if (\"undefined\" == typeof tcx) {\n                throw new Error(\n                    `no txn provided for addlTx ${txName || description}`\n                );\n            }\n            txInfoResolved.tcx = tcx;\n            if (tcx.alreadyPresent) {\n                console.log(\n                    \"  -- tx effects are already present; skipping: \" +\n                        txName || description\n                );\n                this.currentBatch.$addTxns(txInfoResolved);\n                continue;\n            }\n\n            const replacementTcx =\n                (pipelineOptions?.fixupBeforeSubmit &&\n                    ((await pipelineOptions.fixupBeforeSubmit(\n                        txInfoResolved\n                    )) as typeof replacementTcx | boolean)) ||\n                tcx;\n            if (false === replacementTcx) {\n                console.log(\"callback cancelled txn: \", txName);\n                continue;\n            }\n            if (replacementTcx !== true && replacementTcx !== tcx) {\n                console.log(\n                    `callback replaced txn ${txName} with a different txn: `,\n                    dumpAny(replacementTcx)\n                );\n            }\n\n            // if the callback returns true or void, we execute the txn as already resolved.\n            // if it returns an alternative txn, we use that instead.\n            const effectiveTcx: StellarTxnContext =\n                true === replacementTcx ? tcx : replacementTcx || tcx;\n            // console.log(\"   -- submitTxns: -> txn: \", txName, description);\n            // console.log(\"   ----> effective tx\", effectiveTcx);\n\n            txInfoResolved.tcx = effectiveTcx;\n\n            //!!! was just buildAndQueue, but that was executing\n            // in \"breadth-first\" order (good for registration)\n            //    (i.e. in consecutive layers of discovered txns)\n            // ... instead of executing depth-first (good for tx-chaining).\n            // We want all txns to be registered as soon as they're\n            //   known to be a tx to be made.  But for each such tx,\n            //   we want its chained txns to be executed BEFORE moving on\n            //   to build any of those other registered txns.\n\n            // //@ts-expect-error\n            // if (this.setup.stopped) return;\n            // if (description == \"+ on-chain refScript: minter\") {\n            //     //@ts-expect-error\n            //     this.setup.stopped = true\n            //     break\n            // }\n            await effectiveTcx.buildAndQueueAll({\n                ...pipelineOptions,\n                addlTxInfo: txInfoResolved,\n            });\n            // console.log(\"   -- submitTxns: <- txn: \", txName, description);\n            // m oved into submit()\n            // if (callbacks?.onSubmitted) {\n            // console.log(\"   -- submitTxns: triggering onSubmit callback\");\n            // await callbacks.onSubmitted(txInfoResolved);\n            // console.log(\"   -- submitTxns: onSubmitted callback completed\");\n            // }\n        }\n    }\n\n    /**\n     * To add a script to the transaction context, use `attachScript`\n     *\n     * @deprecated - invalid method name; use `addScriptProgram()` or capo's `txnAttachScriptOrRefScript()` method\n     **/\n    addScript() {}\n\n    async submitTxnChain(\n        options: {\n            txns?: TxDescription<any, \"buildLater!\">[];\n        } & TxPipelineOptions = {\n            //@ts-expect-error because the type of this context doesn't\n            //   guarantee the presence of addlTxns.  But it might be there!\n            txns: this.state.addlTxns || [],\n        }\n    ) {\n        //@ts-expect-error on probing for a maybe-undefined entry:\n        const addlTxns = this.state.addlTxns;\n\n        const { txns, onSubmitError } = options;\n        const newTxns: TxDescription<any, \"buildLater!\">[] =\n            txns || addlTxns || [];\n        let chainedTxns: TxDescription<any, \"buildLater!\">[] = [];\n\n        const txChainSubmitOptions: TxPipelineOptions = {\n            onSubmitError,\n            // txns,  // see newTxns\n            fixupBeforeSubmit: (txinfo) => {\n                //   ... in regular execution environment, this is a no-op by default\n                options.fixupBeforeSubmit?.(txinfo);\n            },\n            whenBuilt: async (txinfo) => {\n                const { id: parentId, tx } = txinfo;\n                const stackedPromise = options.whenBuilt?.(txinfo);\n                const more: Record<string, TxDescription<any, \"buildLater!\">> =\n                    //@ts-expect-error on optional prop\n                    txinfo.tcx.state.addlTxns || {};\n                console.log(\"  ‚úÖ \" + txinfo.description);\n                const moreTxns = Object.values(more);\n\n                for (const nested of moreTxns) {\n                    nested.parentId = parentId;\n                }\n                console.log(\n                    `üéÑ‚õÑüéÅ ${parentId}   -- registering nested txns ASAP`\n                );\n                this.currentBatch.$addTxns(moreTxns);\n\n                /* yield to allow rendering */\n                await new Promise((res) => setTimeout(res, 5));\n\n                // if (moreTxns.length) {\n                //     // gathers the next layer of txns to be resolved & built\n                //     chainedTxns.push(...moreTxns);\n                //     console.log(\n                //         \" + chained txns: \\n\" +\n                //             moreTxns\n                //                 .map((t) => `   üü© ${t.description}\\n`)\n                //                 .join(\"\")\n                //     );\n                // }\n                return stackedPromise;\n            },\n            onSubmitted: (txinfo) => {\n                //@ts-expect-error triggering the test-network-emulator's tick\n                //   ... in regular execution environment, this is a no-op by default\n                this.setup.network.tick?.(1);\n            },\n        };\n        let chainDepth = 0;\n        const isolatedTcx = new StellarTxnContext(this.setup);\n        console.log(\"üêùüòæüêªü¶Ä\");\n        isolatedTcx.id = this.id;\n        console.log(\n            \"at d=0: submitting addl txns: \\n\" +\n                newTxns.map((t) => `  üü© ${t.description}\\n`).join(\"\")\n        );\n\n        const t = isolatedTcx.resolveMultipleTxns(\n            newTxns,\n            txChainSubmitOptions\n        );\n\n        const allPromises = [] as Promise<any>[];\n        chainDepth = 0;\n        allPromises.push(t);\n\n        await t;\n        return;\n        while (chainedTxns.length) {\n            const nextChain: typeof chainedTxns = [];\n            chainDepth++;\n\n            for (const { tcx } of chainedTxns) {\n                // if (tcx.state) {\n                //     debugger\n                // } else {\n                //     const { addlTxns: nestedAddlTxns } = (tcx.state || {}) as {\n                //         addlTxns?: Record<\n                //             string,\n                //             TxDescription<any, \"buildLater!\">\n                //         >;\n                //     };\n                //     if (!nestedAddlTxns) continue;\n                //     nextChain.push(...Object.values(nestedAddlTxns));\n                // }\n            }\n            console.log(\n                ` üêûüêûüêûüêû submitting ${chainedTxns.length} transactions at depth ${chainDepth}`\n            );\n            console.log(\n                chainedTxns.map((t) => `  üü© ${t.description}\\n`).join(\"\")\n            );\n            const thisBatch = chainedTxns;\n            chainedTxns = [];\n\n            const isolatedTcx = new StellarTxnContext(this.setup);\n            isolatedTcx.id = this.id;\n\n            const t = isolatedTcx.resolveMultipleTxns(\n                thisBatch,\n                txChainSubmitOptions\n            );\n            allPromises.push(t);\n            await t;\n            console.log(\n                \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSubmitted transactions at depth \" +\n                    chainDepth\n            );\n            chainedTxns = nextChain;\n        }\n        return Promise.all(allPromises);\n    }\n}\n\n// /**\n//  * Given a fully built transaction, returns a new transaction with the fees removed\n//  * @remarks\n//  * The result is suitable for submission to Ogmios' tx-evaluation endpoint\n//  * that uses Haskell's CEK interpreter to give us the costs for the transaction.\n//  *\n//  * TODO: use this to cross-check Helios' CEK budgeting and ensure we\n//  * make a txn that will be accepted by the network\n//  */\n// export function undoFeesFrom(\n//     t: Tx,\n//     { isValid: validity = true }: { isValid?: boolean } = {}\n// ): Tx {\n//     const tb = t.body;\n//     const pTxB = makeTxBody({\n//         dcerts: tb.dcerts,\n//         fee: BigInt(0),\n//         minted: tb.minted,\n//         refInputs: tb.refInputs,\n//         inputs: tb.inputs,\n//         outputs: tb.outputs,\n//         signers: tb.signers,\n//         withdrawals: tb.withdrawals,\n//         collateral: tb.collateral,\n//         collateralReturn: tb.collateralReturn,\n//         firstValidSlot: tb.firstValidSlot,\n//         lastValidSlot: tb.lastValidSlot,\n//         metadataHash: tb.metadataHash,\n//         scriptDataHash: tb.scriptDataHash,\n//         totalCollateral: tb.totalCollateral,\n//     });\n\n//     const txW = makeTxWitnesses({\n//         ...t.witnesses,\n//         redeemers: t.witnesses.redeemers.map((r) => {\n//             switch (r.kind) {\n//                 case \"TxCertifyingRedeemer\":\n//                     return makeTxCertifyingRedeemer(r.dcertIndex, r.data);\n//                 case \"TxMintingRedeemer\":\n//                     return makeTxMintingRedeemer(r.policyIndex, r.data);\n//                 case \"TxSpendingRedeemer\":\n//                     return makeTxSpendingRedeemer(r.inputIndex, r.data);\n//                 case \"TxRewardingRedeemer\":\n//                     return makeTxRewardingRedeemer(r.withdrawalIndex, r.data);\n//             }\n//         }),\n//     });\n//     return makeTx(pTxB, txW, validity, t.metadata);\n// }\n","import type { ErrorMap } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport {\n    makeByteArrayData,\n    type ByteArrayData,\n    type UplcProgramV2,\n} from \"@helios-lang/uplc\";\nimport {\n    uplcDataSerializer,\n    abbreviatedDetail,\n    abbreviatedDetailBytes,\n} from \"./delegation/jsonSerializers.js\";\nimport {\n    type Value,\n    type Address,\n    type Tx,\n    type TxId,\n    type TxInput,\n    type TxOutput,\n    type TxOutputId,\n    type NetworkParams,\n    type Assets,\n    type MintingPolicyHash,\n    type TxRedeemer,\n    type TxOutputDatum,\n    makeAddress,\n    makeNetworkParamsHelper,\n} from \"@helios-lang/ledger\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\nimport {\n    bytesToText,\n    textToBytes,\n    type InlineDatum,\n} from \"./HeliosPromotedTypes.js\";\nimport type { UtxoDisplayCache } from \"./StellarContract.js\";\n\n/**\n * converts a hex string to a printable alternative, with no assumptions about the underlying data\n * @remarks\n *\n * Unlike Helios' bytesToText, hexToPrintable() simply changes printable characters to characters,\n * and represents non-printable characters in '‚ÄπXX‚Ä∫' format.\n * @param hexStr - hex input\n * @public\n **/\nexport function hexToPrintableString(hexStr: string) {\n    let result = \"\";\n    for (let i = 0; i < hexStr.length; i += 2) {\n        let hexChar = hexStr.substring(i, i + 2);\n        let charCode = parseInt(hexChar, 16);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += String.fromCharCode(charCode);\n        } else {\n            result += `‚Äπ${hexChar}‚Ä∫`;\n        }\n\n        // todo decode utf8 parts using bytesToText(...substring...)\n        // int         required_len;\n        // if (key[0] >> 7 == 0)\n        //     required_len = 1;\n        // else if (key[0] >> 5 == 0x6)\n        //     required_len = 2;\n        // else if (key[0] >> 4 == 0xE)\n        //     required_len = 3;\n        // else if (key[0] >> 5 == 0x1E)\n        //     required_len = 4;\n        // else\n        //     return (0);\n        // return (strlen(key) == required_len && chars_are_folow_uni(key + 1));\n    }\n    return result;\n}\n\n/**\n * Displays a token name in a human-readable form\n * @remarks\n * Recognizes CIP-68 token names and displays them in a special format.\n * @param nameBytesOrString - the token name, as a string or byte array\n * @public\n */\nexport function displayTokenName(nameBytesOrString: string | number[]) {\n    // check if it is a cip-68 token name by inspecting the first 4 bytes.  If they don't match the cip-68 pattern, display using stringToPrintableString.\n    // if it has a cip-68 tag in the first 4 bytes, show the cip-68 tag as `‚Äπcip68/{tag}‚Ä∫` and append the rest of the token name as a string.\n    // inspect the first 4 bytes by:\n    //  - converting them to hex\n    //  - checking if the first and last nibbles are 0's (if not, then it is not a cip-68 token name)\n    //  - removing the first and last nibbles, shifting the hex string to the left by 1 nibble to get a 2-byte tag and 1 byte of checksum\n    //  - separating the cip-68 tag from the checksum\n    //  - parsing the cip-68 tag as a number (parseInt(numHex, 16))\n\n    let nameString = \"\";\n    let cip68Tag = \"\";\n    let cip68TagHex = \"\";\n    let checksum = \"\";\n    let tagBytes = \"\";\n    let nameBytesHex = \"\";\n    let nameBytesString = \"\";\n    let isCip68 = false;\n    if (typeof nameBytesOrString === \"string\") {\n        // convert the bytes of the string to hex\n        nameBytesHex = Buffer.from(textToBytes(nameBytesOrString)).toString(\n            \"hex\"\n        );\n        nameString = nameBytesOrString;\n    } else {\n        nameBytesHex = Buffer.from(nameBytesOrString).toString(\"hex\");\n        nameString = stringToPrintableString(nameBytesOrString);\n    }\n    // check if the first 4 bytes are a cip-68 token name\n    if (nameBytesHex.length >= 8) {\n        // check if the first and last nibbles are 0's\n        if (\n            nameBytesHex.substring(0, 1) === \"0\" &&\n            nameBytesHex.substring(7, 8) === \"0\"\n        ) {\n            // remove the first and last nibbles\n            cip68TagHex = nameBytesHex.substring(1, 5);\n            checksum = nameBytesHex.substring(5, 7);\n\n            // separate the cip-68 tag from the checksum\n            cip68Tag = parseInt(cip68TagHex, 16).toString();\n            nameString = stringToPrintableString(nameBytesOrString.slice(4));\n\n            // TODO: check the crc-8 checksum of the tag\n            isCip68 = true;\n        }\n    }\n    if (isCip68) {\n        nameString = `‚Äπcip68/${cip68Tag}‚Ä∫${nameString}`;\n    } else {\n        nameString = stringToPrintableString(nameBytesOrString);\n    }\n    return nameString;\n}\n\n/**\n * Presents a string in printable form, even if it contains non-printable characters\n *\n * @remarks\n * Non-printable characters are shown in '‚ÄπXX‚Ä∫' format.\n * @public\n */\nexport function stringToPrintableString(str: string | number[]) {\n    if (\"string\" != typeof str) {\n        // use a TextEncoder to identify if it is a utf8 string\n        try {\n            return new TextDecoder(\"utf-8\", { fatal: true }).decode(\n                new Uint8Array(str as number[])\n            );\n        } catch (e) {\n            // if it is not a utf8 string, fall back to printing what's printable and showing hex for other bytes\n            str = Buffer.from(str as number[]).toString(\"hex\");\n        }\n    }\n    let result = \"\";\n    for (let i = 0; i < str.length; i++) {\n        let charCode = str.charCodeAt(i);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += str[i];\n        } else {\n            result += `‚Äπ${charCode.toString(16)}‚Ä∫`;\n        }\n    }\n    return result;\n}\n\n/**\n * Converts an array of [ policyId, ‚Äπtokens‚Ä∫ ] tuples for on-screen presentation\n * @remarks\n *\n * Presents policy-ids with shortened identifiers, and shows a readable & printable\n * representation of token names even if they're not UTF-8 encoded.\n * @public\n **/\nexport function assetsAsString(\n    a: Assets,\n    joiner = \"\\n    \",\n    showNegativeAsBurn?: \"withBURN\",\n    mintRedeemers?: Record<number, string>\n) {\n    const assets = a.assets;\n    return (\n        assets?.map(([policyId, tokenEntries], index) => {\n            let redeemerInfo = mintRedeemers?.[index] || \"\";\n            if (redeemerInfo) {\n                redeemerInfo = `\\n        r = ${redeemerInfo} `;\n            }\n            const tokenString = tokenEntries\n                .map(([nameBytes, count]: [number[], bigint]) => {\n                    // const nameString =  hexToPrintableString(nameBytes.hex);\n                    const nameString = displayTokenName(nameBytes);\n\n                    const negWarning =\n                        count < 1n\n                            ? showNegativeAsBurn\n                                ? \"üî• \"\n                                : \" ‚ö†Ô∏è NEGATIVE‚ö†Ô∏è\"\n                            : \"\";\n                    const burned =\n                        count < 1\n                            ? showNegativeAsBurn\n                                ? \"- BURN üî• \"\n                                : \"\"\n                            : \"\";\n                    return `${negWarning} ${count}√óüí¥ ${nameString} ${burned}`;\n                })\n                .join(\"+\");\n            return `‚¶ë${policyIdAsString(\n                policyId\n            )} ${tokenString} ${redeemerInfo}‚¶í`;\n        }) || []\n    ).join(joiner);\n}\n\n/**\n * Converts a MintingPolicyHash to a printable form\n * @public\n **/\nexport function policyIdAsString(p: MintingPolicyHash) {\n    const pIdHex = p.toHex();\n    const abbrev = abbreviatedDetail(pIdHex);\n    return `üè¶ ${abbrev}`;\n}\n\n/**\n * Converts lovelace to approximate ADA, in consumable 3-decimal form\n * @public\n **/\nexport function lovelaceToAdaOld(l: bigint | number) {\n    const asNum = parseInt(l.toString());\n    const ada =\n        (asNum && `${(Math.round(asNum / 1000) / 1000).toFixed(3)} ADA`) || \"\";\n    return ada;\n}\n\nexport function lovelaceToAda(lovelace: bigint | number): string {\n    const asNum = parseInt(lovelace.toString());\n    // input: 6004000 should output 6_004.000\n    // input: 700396001000 should output 700_396.001\n    // input: 400202 should output 0.400_202\n    const whole = Math.floor(asNum / 1_000_000).toFixed(0);\n    let fraction = (asNum % 1_000_000).toFixed(0); // \"\"\n    fraction = fraction.padStart(6, \"0\");\n    const wholeWithSeparators = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"_\");\n    let fractionWithSeparators = fraction\n        .replace(/(\\d{3})(?=\\d)/g, \"$1_\")\n        .replace(/^-/, \"\"); // remove leading - if any\n    return `${wholeWithSeparators}.${fractionWithSeparators} ADA`;\n}\n\nexport function intWithGrouping(i : bigint | number) {\n    const whole = Math.floor(Number(i)).toFixed(0);\n    const fraction = Math.abs(Number(i) - Math.floor(Number(i))).toFixed(0);\n    const wholeWithSeparators = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"_\");\n    const fractionWithSeparators = fraction\n        .replace(/(\\d{3})(?=\\d)/g, \"$1_\")\n    return `${wholeWithSeparators}.${fractionWithSeparators}`;\n}\n/**\n * Converts a Value to printable form\n * @public\n **/\nexport function valueAsString(v: Value) {\n    const ada = lovelaceToAda(v.lovelace);\n    const assets = assetsAsString(v.assets);\n    return [ada, assets].filter((x) => !!x).join(\" + \");\n}\n\n/**\n * Converts a Tx to printable form\n * @public\n **/\nexport function txAsString(tx: Tx, networkParams?: NetworkParams): string {\n    const outputOrder = [\n        [\"body\", \"inputs\"],\n        [\"body\", \"minted\"],\n        [\"body\", \"outputs\"],\n        [\"body\", \"refInputs\"],\n        [\"witnesses\", \"redeemers\"],\n        [\"body\", \"signers\"],\n        [\"witnesses\", \"v2refScripts\"],\n        [\"witnesses\", \"v2scripts\"],\n        [\"witnesses\", \"nativeScripts\"],\n        [\"body\", \"collateral\"],\n        [\"body\", \"collateralReturn\"],\n        [\"body\", \"scriptDataHash\"],\n        [\"body\", \"metadataHash\"],\n        [\"witnesses\", \"signatures\"],\n        [\"witnesses\", \"datums\"],\n        [\"body\", \"lastValidSlot\"],\n        [\"body\", \"firstValidSlot\"],\n        [\"body\", \"fee\"],\n    ];\n\n    let details = \"\";\n    if (!networkParams) {\n        console.warn(\n            new Error(`dumpAny: no networkParams; can't show txn size info!?!`)\n        );\n    }\n\n    const networkParamsHelper = networkParams\n        ? makeNetworkParamsHelper(networkParams)\n        : undefined;\n\n    // const d = tx.dump();\n    const seenRedeemers = new Set();\n\n    const allRedeemers = tx.witnesses.redeemers as any;\n    let hasIndeterminate = false;\n    const inputRedeemers: Record<\n        string | number,\n        { r?: TxRedeemer; display: string }\n    > = Object.fromEntries(\n        allRedeemers\n            .map((x: TxRedeemer, index: number) => {\n                // debugger;\n                if (x.kind != \"TxSpendingRedeemer\") return undefined;\n                // if (!(\"inputIndex\" in x)) return undefined;\n                const { inputIndex } = x;\n                const isIndeterminate = inputIndex == -1;\n                if (isIndeterminate) hasIndeterminate = true;\n                const inpIndex = isIndeterminate ? `‚Äπunk${index}‚Ä∫` : inputIndex;\n                if (!x.data) debugger;\n                const showData = x.data.rawData\n                    ? uplcDataSerializer(\"\", x.data.rawData)\n                    : x.data?.toString() || \"‚Äπno data‚Ä∫\";\n                return [inpIndex, { r: x, display: showData }];\n            })\n            .filter((x) => !!x)\n    );\n    if (hasIndeterminate)\n        inputRedeemers[\"hasIndeterminate\"] = {\n            r: undefined,\n            display: \"‚Äπunk‚Ä∫\",\n        };\n\n    const mintRedeemers = Object.fromEntries(\n        allRedeemers\n            .map((x) => {\n                if (\"TxMintingRedeemer\" != x.kind) return undefined;\n                if (\"number\" != typeof x.policyIndex) {\n                    debugger;\n                    throw new Error(`non-mint redeemer here not yet supported`);\n                }\n                if (!x.data) debugger;\n\n                const showData =\n                    (x.data.rawData\n                        ? uplcDataSerializer(\"\", x.data.rawData)\n                        : x.data?.toString() || \"‚Äπno data‚Ä∫\") +\n                    \"\\n\" +\n                    bytesToHex(x.data.toCbor());\n\n                return [x.policyIndex, showData];\n            })\n            .filter((x) => !!x)\n    );\n\n    //!!! todo: improve interface of tx so useful things have a non-private api\n    //!!! todo: get back to type-safety in this diagnostic suite\n    for (const [where, x] of outputOrder) {\n        let item = tx[where][x];\n        let skipLabel = false;\n        if (Array.isArray(item) && !item.length) continue;\n\n        if (!item) continue;\n        if (\"inputs\" == x) {\n            item = `\\n  ${item\n                .map((x: TxInput, i) => {\n                    const { r, display } =\n                        inputRedeemers[i] ||\n                        inputRedeemers[\"hasIndeterminate\"] ||\n                        {};\n                    if (!display && x.datum?.data) debugger;\n                    tx;\n                    if (r) seenRedeemers.add(r);\n                    return txInputAsString(\n                        x,\n                        /* unicode blue arrow right -> */ \"‚û°Ô∏è  \" + `@${1 + i} `,\n                        i,\n                        display // || \"‚Äπfailed to find redeemer info‚Ä∫\"\n                    );\n                })\n                .join(\"\\n  \")}`;\n        }\n        if (\"refInputs\" == x) {\n            item = `\\n  ${item\n                .map((x) => txInputAsString(x, \"‚ÑπÔ∏è  \"))\n                .join(\"\\n  \")}`;\n        }\n        if (\"collateral\" == x) {\n            //!!! todo: group collateral with inputs and reflect it being spent either way,\n            //     IFF it is also a tx `input`\n            //!!! todo: move collateral to bottom with collateralReturn,\n            //     IFF it is not part of the tx `inputs`\n            item = item.map((x) => txInputAsString(x, \"üî™\")).join(\"\\n    \");\n        }\n        if (\"minted\" == x) {\n            if (!item.assets.length) {\n                continue;\n            }\n            item = `\\n   ‚ùáÔ∏è  ${assetsAsString(\n                item,\n                \"\\n   ‚ùáÔ∏è  \",\n                \"withBURN\",\n                mintRedeemers\n            )}`;\n        }\n        if (\"outputs\" == x) {\n            item = `\\n  ${item\n                .map((x, i) =>\n                    txOutputAsString(\n                        x,\n                        \"üîπ\" /* <-- unicode blue bullet */ + `${i} <-`\n                    )\n                )\n                .join(\"\\n  \")}`;\n        }\n        if (\"firstValidSlot\" == x || \"lastValidSlot\" == x) {\n            if (networkParamsHelper) {\n                const slotTime = new Date(networkParamsHelper.slotToTime(item));\n                const timeDiff = (slotTime.getTime() - Date.now()) / 1000;\n                // format timeDiff with explicit plus or minus sign:\n                const sign = timeDiff > 0 ? \"+\" : \"-\";\n                const timeDiffString =\n                    sign + Math.abs(timeDiff).toFixed(1) + \"s\";\n\n                item = `${item} ${slotTime.toLocaleDateString()} ${slotTime.toLocaleTimeString()} (now ${timeDiffString})`;\n            }\n        }\n\n        if (\"signers\" == x) {\n            item = item.map((x) => {\n                const hex = x.toHex();\n                return `üîë#${hex.slice(0, 6)}‚Ä¶${hex.slice(-4)}`;\n            });\n        }\n\n        if (\"fee\" == x) {\n            item = lovelaceToAda(item);\n\n            // tx.profileReport.split(\"\\n\")[0];\n            // todo: find profile info and restore it here\n        }\n\n        if (\"collateralReturn\" == x) {\n            skipLabel = true;\n            item = `  ${txOutputAsString(\n                item,\n                `0  <- ‚ùì`\n            )} conditional: collateral change (returned in case of txn failure)`;\n        }\n        if (\"scriptDataHash\" == x) {\n            item = bytesToHex(item);\n        }\n\n        if (\"datums\" == x && !Object.entries(item || {}).length) continue;\n        if (\"signatures\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                const addr = makeAddress(true, s.pubKeyHash);\n                const hashHex = s.pubKeyHash.toHex();\n                return `üñäÔ∏è ${addrAsString(addr)} = üîë‚Ä¶${hashHex.slice(-4)}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"redeemers\" == x) {\n            if (!item) continue;\n\n            //!!! todo: augment with mph when that's available from the Activity.\n            item = item.map((x) => {\n                // console.log(\"redeemer keys\", ...[ ...Object.keys(x2) ], x2.dump());\n                // const isIndeterminate = x.inputIndex == -1;\n                // if (isIndeterminate) indeterminateRedeemerDetails = true;\n                // debugger\n                // const indexInfo = isIndeterminate\n                //     ? `spend txin #‚Äπtbd‚Ä∫`\n                // if (x.kind == \"TxSpendingRedeemer\") {\n                //     debugger\n                // }\n                const indexInfo =\n                    x.kind == \"TxMintingRedeemer\"\n                        ? `minting policy ${x.policyIndex}`\n                        : `spend txin ‚û°Ô∏è  @${1 + x.inputIndex}`;\n\n                const showData = seenRedeemers.has(x)\n                    ? \"(see above)\"\n                    : x.data.fromData\n                    ? uplcDataSerializer(\"\", x.data.fromData)\n                    : x.data.toString();\n                return `üèß  ${indexInfo} ${showData}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"v2Scripts\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                try {\n                    const mph = s.mintingPolicyHash.toHex();\n                    // debugger\n                    return `üè¶ ${mph.slice(0, 8)}‚Ä¶${mph.slice(-4)} (minting): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                } catch (e) {\n                    const vh = s.validatorHash;\n\n                    const vhh = vh.toHex();\n                    const addr = makeAddress(true, vh);\n                    // debugger\n                    return `üìú ${vhh.slice(0, 8)}‚Ä¶${vhh.slice(\n                        -4\n                    )} (validator at ${addrAsString(addr)}): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                }\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"v2RefScripts\" == x) {\n            item = `${item.length} - see refInputs`;\n            // todo: @helios give us refScripts outside of dump(), which only shows us hex.\n        }\n\n        if (!item) continue;\n        details += `${skipLabel ? \"\" : \"  \" + x + \": \"}${item}\\n`;\n    }\n    try {\n        details += `  txId: ${tx.id().toHex()}`;\n        if (networkParams) details += `  \\n\\nsize: ${tx.toCbor().length} bytes`;\n    } catch (e) {\n        details = details + `(Tx not yet finalized!)`;\n        if (networkParams) details += `\\n  - NOTE: can't determine txn size\\n`;\n    }\n    return details;\n}\n\n/**\n * Converts a TxInput to printable form\n * @remarks\n *\n * Shortens address and output-id for visual simplicity; doesn't include datum info\n * @public\n **/\nexport function txInputAsString(\n    x: TxInput,\n    prefix = \"-> \",\n    index?: number,\n    redeemer?: string\n): string {\n    const { output: oo } = x;\n    const redeemerInfo = redeemer ? `\\n    r = ${redeemer}` : \" ‚Äπno redeemer‚Ä∫\";\n    const datumInfo =\n        oo.datum?.kind == \"InlineTxOutputDatum\" ? datumSummary(oo.datum) : \"\";\n\n    return `${prefix}${addrAsString(x.address)}${showRefScript(\n        oo.refScript as any\n    )} ${valueAsString(x.value)} ${datumInfo} = üìñ ${txOutputIdAsString(\n        x.id\n    )}${redeemerInfo}`;\n}\n\n/**\n * Converts a list of UTxOs to printable form\n * @remarks\n *\n * ... using {@link utxoAsString}\n * @public\n **/\nexport function utxosAsString(\n    utxos: TxInput[],\n    joiner = \"\\n\",\n    utxoDCache?: UtxoDisplayCache\n): string {\n    return utxos.map((u) => utxoAsString(u, \" üíµ\", utxoDCache)).join(joiner);\n}\n/**\n * Converts a TxOutputId to printable form\n * @public\n */\nexport function txOutputIdAsString(x: TxOutputId, length = 8): string {\n    return (\n        txidAsString(x.txId, length) +\n        \"üîπ\" /* <-- unicode blue bullet */ +\n        `#${x.index}`\n    );\n}\n\n/**\n * Converts a TxId to printable form\n * @remarks\n *\n * ... showing only the first 6 and last 4 characters of the hex\n * @public\n **/\nexport function txidAsString(x: TxId, length = 8): string {\n    const tid = x.toHex();\n    return `${tid.slice(0, length)}‚Ä¶${tid.slice(-4)}`;\n}\n\n/**\n * converts a utxo to printable form\n * @remarks\n *\n * shows shortened output-id and the value being output, plus its datum\n * @internal\n **/\nexport function utxoAsString(\n    x: TxInput,\n    prefix = \"üíµ\",\n    utxoDCache?: UtxoDisplayCache\n): string {\n    return ` üìñ ${txOutputIdAsString(x.id)}: ${txOutputAsString(\n        x.output,\n        prefix,\n        utxoDCache,\n        x.id\n    )}`;\n}\n\n/**\n * converts a Datum to a printable summary\n * @remarks\n *\n * using shortening techniques for the datumHash\n * @public\n **/\nexport function datumSummary(d: TxOutputDatum | null | undefined): string {\n    if (!d) return \"\"; //\"‚Äπno datum‚Ä∫\";\n\n    // debugger\n    const dh = d.hash.toHex();\n    const dhss = `${dh.slice(0, 8)}‚Ä¶${dh.slice(-4)}`;\n    if (d.kind == \"InlineTxOutputDatum\") {\n        const attachedData = d.data.rawData;\n        if (attachedData) {\n            return `\\n    d‚Äπinline:${dhss} - ${\n                uplcDataSerializer(\"\", attachedData) //.slice(1,-1)\n            }=${d.toCbor().length} bytes‚Ä∫`;\n        } else {\n            return `d‚Äπinline:${dhss} - ${d.toCbor().length} bytes‚Ä∫`;\n        }\n    }\n    return `d‚Äπhash:${dhss}‚Ä¶‚Ä∫`;\n}\n// /**\n//  * @internal\n//  */\n// export function datumExpanded(d: Datum | null | undefined): string {\n//     if (!d) return \"\";\n//     if (!d.isInline()) return \"\";\n//     const data = bytesToHex(d.data?.toCbor());\n//     return `\\n    d = ${data}`;\n// }\n\n/**\n * Displays a short summary of any provided reference script\n * @remarks\n *\n * detailed remarks\n * @param ‚ÄπpName‚Ä∫ - descr\n * @typeParam ‚ÄπpName‚Ä∫ - descr (for generic types)\n * @public\n **/\nexport function showRefScript(rs?: UplcProgramV2 | null) {\n    if (!rs) return \"\";\n    const hash = rs.hash();\n    const hh = bytesToHex(hash);\n    const size = rs.toCbor().length;\n    const rshInfo = `${hh.slice(0, 8)}‚Ä¶${hh.slice(-4)}`;\n    return ` ‚ÄπüìÄ refScriptüìú ${rshInfo}: ${size} bytes‚Ä∫ +`;\n}\n\n/**\n * Converts a txOutput to printable form\n * @remarks\n *\n * including all its values, and shortened Address.\n * @public\n **/\nexport function txOutputAsString(\n    x: TxOutput,\n    prefix = \"<-\",\n    utxoDCache?: UtxoDisplayCache,\n    txoid?: TxOutputId\n): string {\n    if (utxoDCache && !txoid) {\n        throw new Error(\n            `txOutputAsString: must provide txoid when using cache`\n        );\n    }\n    let cache = utxoDCache?.get(txoid!);\n    if (cache) {\n        return `‚ôªÔ∏è ${cache} (same as above)`;\n    }\n    cache = `${prefix} ${addrAsString(x.address)}${showRefScript(\n        x.refScript as any\n    )} ${valueAsString(x.value)}`;\n    utxoDCache?.set(txoid!, cache);\n\n    return `${cache} ${datumSummary(x.datum)}`;\n}\n\n/**\n * Renders an address in shortened bech32 form, with prefix and part of the bech32 suffix\n * @remarks\n * @param address - address\n * @public\n **/\nexport function addrAsString(address: Address): string {\n    const bech32 = address.toString();\n    // const uplc = address.toUplcData?.();\n    // const hex = bytesToHex(uplc.toCbor());\n    return `${bech32.slice(0, 14)}‚Ä¶${bech32.slice(-4)}`;\n    // + ` = `+abbreviatedDetailBytes(\"‚Äπcbor:\", uplc.toCbor(), 99)+\"‚Ä∫\"\n}\n\n/**\n * Converts an Errors object to a string for onscreen presentation\n * @public\n **/\nexport function errorMapAsString(em: ErrorMap, prefix = \"  \") {\n    return Object.keys(em)\n        .map((k) => `in field ${prefix}${k}: ${JSON.stringify(em[k])}`)\n        .join(\"\\n\");\n}\n\n/**\n * Converts a list of ByteArrays to printable form\n * @remarks\n *\n * ... using {@link hexToPrintableString}\n * @public\n **/\nexport function byteArrayListAsString(\n    items: ByteArrayData[],\n    joiner = \"\\n  \"\n): string {\n    return (\n        \"[\\n  \" +\n        items.map((ba) => byteArrayAsString(ba)).join(joiner) +\n        \"\\n]\\n\"\n    );\n}\n\n/**\n * Renders a byteArray in printable form, assuming it contains (mostly) text\n * @remarks\n *\n * Because it uses {@link hexToPrintableString | hexToPrintableString()}, it will render any non-printable\n * characters using ‚Äπhex‚Ä∫ notation.\n * @param ba - the byte array\n * @public\n **/\nexport function byteArrayAsString(ba: ByteArrayData): string {\n    return hexToPrintableString(ba.toHex());\n}\n\n/**\n * Converts any (supported) input arg to string\n * @remarks\n *\n * more types to be supported TODO\n * @public\n **/\nexport function dumpAny(\n    x:\n        | undefined\n        | Tx\n        | StellarTxnContext\n        | Address\n        | MintingPolicyHash\n        | Value\n        | Assets\n        | TxOutputId\n        | TxOutput\n        | TxOutput[]\n        | TxInput\n        | TxInput[]\n        | TxId\n        | number[]\n        | ByteArrayData\n        | ByteArrayData[],\n    networkParams?: NetworkParams,\n    forJson = false\n) {\n    if (\"undefined\" == typeof x) return \"‚Äπundefined‚Ä∫\";\n    //@ts-expect-error probing type \n    if (x?.kind == \"Assets\") {\n        return `assets: ${assetsAsString(x as Assets)}`;\n    }\n    if (Array.isArray(x)) {\n        if (!x.length) return \"‚Äπempty array‚Ä∫\";\n\n        const firstItem = x[0];\n        if (\"number\" == typeof firstItem) {\n            return (\n                \"num array: \" +\n                byteArrayListAsString([makeByteArrayData(x as number[])])\n            );\n        }\n        if (firstItem.kind == \"TxOutput\") {\n            return (\n                \"tx outputs: \\n\" +\n                (x as TxOutput[]).map((txo: TxOutput) => txOutputAsString(txo)).join(\"\\n\")\n            );\n        }\n\n        if (firstItem.kind == \"TxInput\") {\n            return \"utxos: \\n\" + utxosAsString(x as TxInput[]);\n        }\n\n        //@ts-expect-error on this type probe\n        if (firstItem.kind == \"ByteArrayData\") {\n            return (\n                \"byte array:\\n\" + byteArrayListAsString(x as ByteArrayData[])\n            );\n        }\n\n        if (\"object\" == typeof firstItem) {\n            // debugger;\n            if (firstItem instanceof Uint8Array) {\n                return \"byte array: \" + byteArrayAsString(firstItem);\n            }\n            return (\n                `[` +\n                x\n                    .map((item) => JSON.stringify(item, betterJsonSerializer))\n                    .join(\", \") +\n                `]`\n            );\n        }\n\n        console.log(\"firstItem\", firstItem);\n        throw new Error(\n            `dumpAny(): unsupported array type: ${typeof firstItem}`\n        );\n    }\n\n    if (\"bigint\" == typeof x) {\n        return (x as bigint).toString();\n    }\n    if (x instanceof StellarTxnContext) {\n        debugger;\n        throw new Error(`use await build() and dump the result instead.`);\n    }\n\n    const xx = x;\n\n    if (x.kind == \"TxOutput\") {\n        return txOutputAsString(x as TxOutput);\n    }\n\n    if (xx.kind == \"Tx\") {\n        return txAsString(xx, networkParams);\n    }\n\n    if (xx.kind == \"TxOutputId\") {\n        return txOutputIdAsString(xx);\n    }\n\n    if (xx.kind == \"TxId\") {\n        return txidAsString(xx);\n    }\n\n    if (xx.kind == \"TxInput\") {\n        return utxoAsString(xx);\n    }\n    if (xx.kind == \"Value\") {\n        return valueAsString(xx);\n    }\n    if (xx.kind == \"Address\") {\n        return addrAsString(xx);\n    }\n    if (xx.kind == \"MintingPolicyHash\") {\n        return policyIdAsString(xx);\n    }\n    if (forJson) return xx;\n\n    if (\"object\" == typeof x) {\n        return `{${Object.entries(x)\n            .map(([k, v]) => `${k}: ${dumpAny(v as any, networkParams)}`)\n            .join(\",\\n\")}}`;\n    }\n    debugger;\n    return \"dumpAny(): unsupported type or library mismatch\";\n}\n\n/**\n * @public\n */\nexport const betterJsonSerializer = (key, value) => {\n    return dumpAny(value, undefined, true);\n};\n\nif (\"undefined\" == typeof window) {\n    globalThis.peek = dumpAny;\n} else {\n    //@ts-expect-error\n    window.peek = dumpAny;\n}\n","import { bytesToHex } from \"@helios-lang/codec-utils\";\nimport { encodeBech32 } from \"@helios-lang/crypto\";\nimport { type Address, type AssetClass } from \"@helios-lang/ledger\";\nimport { type MintingPolicyHash } from \"@helios-lang/ledger\";\nimport { bytesToText } from \"../HeliosPromotedTypes.js\";\nimport {\n    txOutputIdAsString,\n    valueAsString,\n    assetsAsString,\n    policyIdAsString,\n    displayTokenName,\n} from \"../diagnostics.js\";\nimport type { ByteArrayData, IntData } from \"@helios-lang/uplc\";\nimport { checkValidUTF8 } from \"../utils.js\";\n\n/**\n * toJSON adapter for delegate links\n * @remarks\n * used for on-chain serialization of contract config details\n * @internal\n **/\nexport function delegateLinkSerializer(key: string, value: any) {\n    if (typeof value === \"bigint\") {\n        return value.toString();\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        return bytesToHex(value);\n    } else if (value?.kind == \"Address\") {\n        return value.toString();\n    } else if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value);\n    }\n    if (\"capo\" == key) return undefined;\n    if (\"uh\" == key) return '\"‚Äπutxo helper‚Ä∫\"';\n    if (\"capoBundle\" == key) return '\"‚Äπcapo bundle‚Ä∫\"';\n\n    return value; // return everything else unchanged\n}\n\n/**\n *  this is NOT a jsonifier, but it emits nice-looking info onscreen when used with JSON.stringify (in arg2)\n * @public\n */\nexport function uplcDataSerializer(key: string, value: any, depth = 0) {\n    const indent = \"    \".repeat(depth);\n    const outdent = \"    \".repeat(Math.max(0, depth - 1));\n\n    if (typeof value === \"bigint\") {\n        return `big‚Äπ${value.toString()}n‚Ä∫`;\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        // return `‚Äπbytes‚Äπ${value.length}‚Ä∫=${bytesToHex(value)}‚Ä∫`;\n        return abbreviatedDetailBytes(`bytes‚Äπ${value.length}‚Ä∫`, value, 40);\n    } else if (\"string\" == typeof value) {\n        return `'${value}'`; // JSON.stringify(value, null, 4);\n    } else if (value === null) {\n        return `‚Äπnull‚Ä∫`;\n    } else if (\"undefined\" == typeof value) {\n        return `‚Äπund‚Ä∫`;\n    } else if (value.kind == \"Address\") {\n        const a = value as Address;\n        const cbor = a.toCbor();\n        // const b = decodeAddress(cbor)\n        return (\n            `‚Äπ${abbrevAddress(value)}‚Ä∫ = ` +\n            abbreviatedDetailBytes(`cbor‚Äπ${cbor.length}‚Ä∫:`, cbor, 99)\n        );\n    } else if (value.kind == \"ValidatorHash\") {\n        return abbreviatedDetailBytes(\n            `script‚Äπ${value.bytes.length}‚Ä∫`,\n            value.bytes\n        );\n    } else if (value.kind == \"MintingPolicyHash\") {\n        const v: MintingPolicyHash = value;\n        return `mph‚Äπ${policyIdAsString(v)}‚Ä∫`;\n        // .toHex())}‚Ä∫`;\n    } else if (value.kind == \"TxOutputId\") {\n        return `‚Äπtxoid:${txOutputIdAsString(value, 8)}‚Ä∫`;\n    }\n    if (value.rawData) {\n        return uplcDataSerializer(key, value.rawData, Math.max(depth, 3));\n    }\n    if (value.kind == \"int\") {\n        const v: IntData = value;\n        return `IntData‚Äπ${v.value}‚Ä∫`;\n    }\n    if (value.kind == \"bytes\") {\n        const v = value as ByteArrayData;\n        return abbreviatedDetailBytes(\n            `ByteArray‚Äπ${v.bytes.length}‚Ä∫`,\n            v.bytes,\n            40\n        );\n    }\n    if (value.kind == \"Value\") {\n        return valueAsString(value);\n    }\n    if (value.kind == \"Assets\") {\n        return `assets:‚Äπ${assetsAsString(value)}‚Ä∫`;\n    }\n    if (value.kind == \"AssetClass\") {\n        const ac = value as AssetClass;\n        return `assetClass:‚Äπ${policyIdAsString(ac.mph)} ${displayTokenName(\n            ac.tokenName\n        )}}‚Ä∫`;\n    }\n    if (value.kind)\n        console.log(\"info: no special handling for KIND = \", value.kind);\n\n    if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value);\n    } else if (\"number\" == typeof value) {\n        return value.toString();\n    } else if (value instanceof Map) {\n        return `map‚Äπ${value.size}‚Ä∫: { ${uplcDataSerializer(\n            \"\",\n            Object.fromEntries(value.entries()),\n            Math.max(depth, 3)\n        )}    }`;\n    } else if (Array.isArray(value) && value.length == 0) {\n        return \"[]\";\n    } else if (\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"number\")\n    ) {\n        return `${abbreviatedDetailBytes(`bytes‚Äπ${value.length}‚Ä∫`, value, 40)}`;\n        // } else if (value.toString) {\n        //     return value.toString();\n    } else if (Array.isArray(value)) {\n        const inner = value.map((v) =>\n            uplcDataSerializer(\"\", v, Math.max(depth + 1, 3))\n        );\n        let extraNewLine = \"\";\n        let usesOutdent = \"\";\n        const multiLine = inner\n            .map((s) => {\n                const hasNewline = s.trim().includes(\"\\n\");\n                if (s.length > 40) {\n                    extraNewLine = \"\\n\";\n                    usesOutdent = outdent;\n                    return `${indent}${s}`;\n                } else {\n                    // console.log(\"length, hasNewline = \", s.length, hasNewline)\n                }\n                return s;\n            })\n            .join(`, ${extraNewLine}`);\n        // console.log(\"array uses newline/outdent\", {extraNewLine, usesOutdent});\n\n        return `[ ${extraNewLine}${multiLine}${extraNewLine}${usesOutdent} ]`;\n    }\n\n    if (!value) {\n        return JSON.stringify(value);\n    }\n    const keys = Object.keys(value);\n    if (keys.length == 0) {\n        return key ? \"\" : \"{}\";\n    }\n    if (keys.length == 1) {\n        const singleKey = keys[0];\n        const thisValue = value[singleKey];\n        let inner = uplcDataSerializer(\"\", thisValue, Math.max(depth, 3)) || \"\";\n        if (Array.isArray(thisValue)) {\n            if (!inner.length) {\n                inner = \"[ ‚Äπempty list‚Ä∫ ]\";\n            }\n        } else {\n            if (inner.length) inner = `{ ${inner} }`;\n        }\n        let s = `${singleKey}: ${inner}`;\n        // if (key) return `**1k** ${key}: ${s}`\n        return s;\n    }\n    let extraNewLine = \"\";\n    let usesOutdent = \"\";\n    let s = keys.map(\n        (k) =>\n            `${indent}${k}: ${\n                uplcDataSerializer(k, value[k], Math.max(depth + 1, 2))\n                //    JSON.stringify(value[k], datumSerializer, 4)\n                // }`).join(`,\\nz${indent}`);\n            }`\n    );\n    const multiLineItems = s.map((s) => {\n        if (s.length < 40 && !s.includes(\"\\n\")) {\n            return `${s}`;\n        } else {\n            extraNewLine = \"\\n\";\n            usesOutdent = outdent;\n            return `${s}`;\n        }\n        return s;\n    });\n    const multiLine = multiLineItems.join(`, ${extraNewLine}`);\n    s = `${multiLine}${extraNewLine}${usesOutdent}`;\n\n    if (key) return `{${extraNewLine}${s}}`;\n    return `\\n${s}`;\n}\n/**\n * short version of address for compact display\n * @public\n */\nexport function abbrevAddress(address: Address) {\n    return abbreviatedDetail(address.toString(), 12, false);\n}\n\n/**\n * short representation of bytes for compact display\n * @public\n */\nexport function abbreviatedDetailBytes(\n    prefix: string,\n    value: number[],\n    initLength = 8\n) {\n    const hext = bytesToHex(value);\n    const Len = value.length;\n    const text = checkValidUTF8(value)\n        ? ` ‚Äπ\"${abbreviatedDetail(bytesToText(value), initLength)}\"‚Ä∫`\n        : ``;\n\n    if (value.length <= initLength) return `${prefix}${hext}${text}`;\n    const checksumString = encodeBech32(\"_\", value).slice(-4);\n    return `${prefix}${hext.slice(0, initLength)}‚Ä¶ ‚Äπ${checksumString}‚Ä∫${text}`;\n}\n\n/**\n * short version of hex string for compact display\n * @internal\n */\nexport function abbreviatedDetail(\n    hext: string,\n    initLength = 8,\n    countOmitted: boolean = false\n) {\n    if (process?.env?.EXPAND_DETAIL) {\n        return hext;\n    } else {\n        if (hext.length <= initLength) return hext;\n        const omittedCount = countOmitted ? hext.length - initLength - 4 : 0;\n        let omittedString = countOmitted ? `‚Äπ‚Ä¶${omittedCount}‚Ä¶‚Ä∫` : \"‚Ä¶\";\n        if (countOmitted && omittedCount < omittedString.length) {\n            omittedString = hext.slice(initLength, -4);\n        }\n        return `${hext.slice(0, initLength)}${omittedString}${hext.slice(-4)}`;\n    }\n}\n","import type { DataType, Program } from \"@helios-lang/compiler\";\nimport type { Source } from \"@helios-lang/compiler-utils\";\nimport {\n    makeUplcProgramV2,\n    type UplcData,\n    type UplcProgramV2,\n    type UplcProgramV3,\n    type UplcSourceMapJsonSafe,\n} from \"@helios-lang/uplc\";\nimport { decodeUplcProgramV2FromCbor } from \"@helios-lang/uplc\";\n// import { decodeUplcProgramV3FromCbor } from \"@helios-lang/uplc\";\n\nimport { HeliosProgramWithCacheAPI } from \"@donecollectively/stellar-contracts/HeliosProgramWithCacheAPI\";\n\nimport type { CapoHeliosBundle } from \"./CapoHeliosBundle.js\";\nimport type {\n    configBaseWithRev,\n    HeliosOptimizeOptions,\n    SetupInfo,\n    SetupOrMainnetSignalForBundle,\n    StellarBundleSetupDetails,\n    UplcRecord,\n} from \"../../StellarContract.js\";\nimport type { anyUplcProgram, CompileOptionsForCachedHeliosProgram } from \"../../HeliosPromotedTypes.js\";\nimport type {\n    CapoBundleClass,\n    HeliosBundleClassWithCapo,\n    HeliosBundleTypes,\n} from \"../HeliosMetaTypes.js\";\nimport {\n    programFromCacheEntry,\n    serializeCacheEntry,\n    type DeployedProgramBundle,\n} from \"../CachedHeliosProgram.js\";\nimport type {\n    DeployedScriptDetails,\n    RequiredDeployedScriptDetails,\n} from \"../../configuration/DeployedScriptConfigs.js\";\nimport { bytesToHex, equalsBytes, hexToBytes } from \"@helios-lang/codec-utils\";\nimport { makeCast } from \"@helios-lang/contract-utils\";\nimport { uplcDataSerializer } from \"../../delegation/jsonSerializers.js\";\nimport {\n    makeMintingPolicyHash,\n    makeValidatorHash,\n    type ValidatorHash,\n} from \"@helios-lang/ledger\";\nimport { environment } from \"../../environment.js\";\n\n/**\n * @internal\n */\nexport const defaultNoDefinedModuleName = \"‚Äπdefault-needs-override‚Ä∫\";\n\n/**\n * @public\n */\nexport const placeholderSetupDetails = {\n    setup: {\n        isMainnet: \"mainnet\" === environment.CARDANO_NETWORK,\n        isPlaceholder: \"for abstract bundleClass\",\n    },\n};\n\n/**\n * Base class for any Helios script bundle\n * @remarks\n * See also {@link CapoHeliosBundle} and {@link CapoDelegateBundle}\n * and {@link DelegatedDataBundle} for specialized bundle types\n * @public\n */\nexport abstract class HeliosScriptBundle {\n    /**\n     * an indicator of a Helios bundle that is intended to be used as a Capo contract\n     * @remarks\n     * the CapoHeliosBundle class overrides this to true.\n     * @internal\n     */\n    static isCapoBundle = false;\n    abstract requiresGovAuthority: boolean;\n    /**\n     * set to true if the bundle depends on having a deployed capo's configuration details\n     * @public\n     */\n    static needsCapoConfiguration = false;\n\n    /**\n     * an opt-in indicator of abstractness\n     * @remarks\n     * Subclasses that aren't intended for instantiation can set this to true.\n     *\n     * Subclasses that don't set this will not be treated as abstract.\n     * @public\n     */\n    static isAbstract?: boolean | undefined = undefined;\n\n    /**\n     * Constructs a base class for any Helios script bundle,\n     * given the class for an application-specific CapoHeliosBundle.\n     * @remarks\n     * The resulting class provides its own CapoHeliosBundle instance\n     * for independent use (specifically, for compiling this bundle using\n     * the dependency libraries provided by the Capo bundle).\n     */\n    //\n    //     * NOTE: the following is NOT needed for efficiency, and not implemented\n    //     *, as the Capo\n    //     * bundle referenced above should never need to be compiled via\n    //     * `this.capoBundle.program`.\n    //     *\n    //     * XXX - For application runtime purposes, it can ALSO accept a\n    //     * XXX - CapoHeliosBundle instance as a constructor argument,\n    //     * XXX - enabling lower-overhead instantiation and re-use across\n    //     * XXX - various bundles used within a single Capo,\n    //     */\n    static usingCapoBundleClass<CB extends CapoBundleClass>(\n        c: CB\n    ): HeliosBundleClassWithCapo {\n        //@ts-expect-error returning a subclass without concrete implementations\n        // of the abstract members; hopefully the subclass will error if they're missing\n        const cb = new c(placeholderSetupDetails);\n\n        abstract class aCapoBoundBundle extends HeliosScriptBundle {\n            capoBundle = cb;\n            constructor(\n                setupDetails: StellarBundleSetupDetails<any> = placeholderSetupDetails\n            ) {\n                super(setupDetails);\n            }\n\n            isConcrete = true;\n        }\n\n        return aCapoBoundBundle as HeliosBundleClassWithCapo &\n            typeof aCapoBoundBundle;\n    }\n\n    static create<THIS extends typeof HeliosScriptBundle>(\n        this: THIS,\n        setupDetails: StellarBundleSetupDetails<any> = placeholderSetupDetails\n    ) {\n        //@ts-expect-error creating instance of abstract class\n        const created = new this(setupDetails);\n\n        created.init(setupDetails);\n        return created;\n    }\n    abstract scriptParamsSource: \"config\" | \"bundle\" | \"mixed\";\n    capoBundle?: CapoHeliosBundle;\n    isConcrete = false;\n\n    /**\n     * optional attribute explicitly naming a type for the datum\n     * @remarks\n     * This can be used if needed for a contract whose entry point uses an abstract\n     * type for the datum; the type-bridge & type-gen system will use this data type\n     * instead of inferrring the type from the entry point.\n     */\n    datumTypeName?: string;\n\n    /**\n     * optional attribute explicitly naming a type for the redeemer\n     * @remarks\n     * This can be used if needed for a contract whose entry point uses an abstract\n     * type for the redeemer; the type-bridge & type-gen system will use this data type\n     * instead of inferring the type from the entry point.\n     */\n    redeemerTypeName: string = \"\";\n    isMainnet: boolean;\n    _program: HeliosProgramWithCacheAPI | undefined = undefined;\n    previousOnchainScript: {\n        validatorHash: number[];\n        uplcProgram: anyUplcProgram;\n    } | undefined = undefined;\n    _progIsPrecompiled = false;\n    setup: SetupOrMainnetSignalForBundle;\n    configuredUplcParams: UplcRecord<any> | undefined = undefined;\n    configuredParams: any | undefined = undefined;\n    preCompiled?: {\n        [variant: string]: RequiredDeployedScriptDetails<any, \"json\">;\n    };\n    alreadyCompiledScript: anyUplcProgram | undefined;\n\n    constructor(\n        setupDetails: StellarBundleSetupDetails<any> = placeholderSetupDetails\n    ) {\n        // this.devReloadModules()\n        // if (setupDetails) debugger;\n        this.setup = setupDetails.setup;\n        this.isMainnet = this.setup.isMainnet;\n\n        if (this.setup && \"undefined\" === typeof this.isMainnet) {\n            debugger;\n            throw new Error(\n                `${this.constructor.name}: setup.isMainnet must be defined (debugging breakpoint available)`\n            );\n        }\n    }\n\n    get hasAnyVariant() {\n        return true;\n    }\n    _didInit = false;\n    debug = false;\n    scriptHash?: number[] | undefined;\n\n    init(setupDetails: StellarBundleSetupDetails<any>) {\n        const {\n            deployedDetails,\n            params,\n            params: { delegateName, variant = \"singleton\" } = {},\n            setup,\n            previousOnchainScript\n        } = setupDetails;\n        const { config, programBundle } = deployedDetails || {};\n        if (previousOnchainScript) {\n            this.previousOnchainScript = previousOnchainScript;\n            this.scriptHash = previousOnchainScript.uplcProgram.hash();\n                // \"string\" === typeof deployedDetails?.scriptHash\n                //     ? hexToBytes(deployedDetails.scriptHash)\n                //     : deployedDetails?.scriptHash;\n            return;\n        }\n\n        if (this.scriptParamsSource === \"config\") {\n            if (programBundle) {\n            //     if (!scriptHash)\n            //         throw new Error(\n            //     `${this.constructor.name}: missing deployedDetails.scriptHash`\n            // );\n            \n                // debugger; // do we need to cross-check config <=> params ?\n                this.configuredParams = config;\n                this.configuredUplcParams = this.paramsToUplc(config);\n                this.preCompiled = {\n                    singleton: {programBundle, config },\n                };\n            } else if (params) {\n                if (this.preCompiled) {\n                    const thisVariant = this.preCompiled[variant];\n                    if (!thisVariant) {\n                        const msg = `${this.constructor.name}: no precompiled variant '${variant}'`;\n                        console.warn(\n                            `${msg}\\n  -- available variants: ${Object.keys(\n                                this.preCompiled\n                            ).join(\", \")}`\n                        );\n                        console.log(\n                            \"configured variant should be in scriptBundle's 'params'\"\n                        );\n                        throw new Error(msg);\n                    }\n                    this._selectedVariant = variant;\n                    const preConfig = thisVariant.config;\n                    preConfig.rev = BigInt(preConfig.rev);\n\n                    if (preConfig.capoMph?.bytes) {\n                        preConfig.capoMph = makeMintingPolicyHash(\n                            preConfig.capoMph.bytes\n                        );\n                    }\n                    const uplcPreConfig = this.paramsToUplc(preConfig);\n                    // omits delegateName from the strict checks\n                    //  ... it's provided by the bundle, which the\n                    //  ... off-chain wrapper class may not have access to.\n                    const {\n                        params: { delegateName, ...params },\n                    } = setupDetails;\n                    const uplcRuntimeConfig = this.paramsToUplc(params);\n                    let didFindProblem: string = \"\";\n                    for (const k of Object.keys(uplcPreConfig)) {\n                        const runtime = uplcRuntimeConfig[k];\n                        // skips past any runtime setting that was not explicitly set\n                        if (!runtime) continue;\n                        const pre = uplcPreConfig[k];\n                        if (!runtime.isEqual(pre)) {\n                            if (!didFindProblem) {\n                                console.warn(\n                                    `${this.constructor.name}: config mismatch between pre-config and runtime-config`\n                                );\n                                didFindProblem = k;\n                            }\n                            console.warn(\n                                `‚Ä¢ ${k}:  pre-config: `,\n                                preConfig[k] || (pre.rawData ?? pre),\n                                ` at runtime:`,\n                                params[k] || (runtime.rawData ?? runtime)\n                            );\n                        }\n                    }\n                    if (didFindProblem) {\n                        throw new Error(\n                            `runtime-config conflicted with pre-config (see logged details) at key ${didFindProblem}`\n                        );\n                    }\n                }\n                this.configuredParams = setupDetails.params;\n                this.configuredUplcParams = this.paramsToUplc(\n                    setupDetails.params\n                );\n            } else if (!setup.isPlaceholder) {\n                throw new Error(\n                    `${this.constructor.name}: scriptParamsSource=config, but no program bundle, no script params`\n                );\n            }\n        } else if (this.scriptParamsSource == \"mixed\") {\n            debugger;\n            const {params} = setupDetails\n            \n            if (this.configuredParams) {\n                debugger;\n                throw new Error(\n                    `unreachable: configuredParameters used without deployedDetails? (dbpa)`\n                );\n            }\n        } else if (this.scriptParamsSource == \"bundle\") {\n            // the bundle has its own built-in params\n\n            // temp singleton\n            const selectedVariant = \"singleton\";\n            this.configuredParams =\n                this.getPreconfiguredVariantParams(selectedVariant);\n            if (this.configuredParams) {\n                this.configuredUplcParams =\n                    this.getPreconfiguredUplcParams(selectedVariant);\n            }\n        } else {\n            throw new Error(`unknown scriptParamsSource: ${this.scriptParamsSource}`);\n        }\n        this._didInit = true;\n    }\n\n    get isPrecompiled() {\n        return !!this.preCompiled\n    }\n\n    getPreCompiledBundle(variant: string) {\n        const foundVariant = this.preCompiled?.[variant];\n        if (!foundVariant) {\n            throw new Error(\n                `${this.constructor.name}: variant ${variant} not found in preCompiled scripts`\n            );\n        }\n\n        return foundVariant.programBundle;\n    }\n\n    getPreconfiguredVariantParams(variantName: string) {\n        const p = this.variants?.[variantName] || this.params;\n        return p;\n    }\n\n    getPreconfiguredUplcParams(\n        variantName: string\n    ): UplcRecord<any> | undefined {\n        const p = this.getPreconfiguredVariantParams(variantName);\n        if (!p) return undefined;\n        return this.paramsToUplc(p);\n    }\n\n    withSetupDetails(details: StellarBundleSetupDetails<any>): this {\n        if (details.setup.isPlaceholder) {\n            debugger;\n            throw new Error(\n                `unexpected use of placeholder setup for helios script bundle (debugging breakpoint available)`\n            );\n        }\n        //@ts-expect-error with dynamic creation\n        const created = new this.constructor(details) as this;\n        created.init(details);\n        return created;\n    }\n\n    // these should be unnecessary if we arrange the rollup plugin\n    // ... to watch the underlying helios files for changes that would affect the bundle\n    // checkDevReload() {\n    //     const env = process.env.NODE_ENV;\n    //     if (env !== \"test\" && env !== \"development\") {\n    //         console.log(\"disabling module reloading in non-dev environment\");\n    //         return\n    //     }\n    //     this.reloadModule(this.main);\n    //     for (const module of this.modules) {\n    //         this.reloadModule(module)\n    //     }\n    // }\n    // reloadModule(module: HeliosModuleSrc) {\n    //     // treat module.name as a filename.\n    //     // check if it can be opened as a file.\n    //     // reassign module.content to the file's contents.\n\n    //     if (existsSync(module.name)) {\n    //         console.log(`bundle module load: ${module.name}`);\n    //         const newContent = readFileSync(module.name, \"utf8\");\n    //         if (module.content !== newContent) {\n    //             console.log(`‚ôªÔ∏è module reload: ${module.name}`);\n    //             module.content = newContent;\n    //         }\n    //     }\n    // }\n\n    get params() {\n        return undefined as any;\n    }\n    /**\n     * The known variants of this contract script, with any contract\n     * parameters applicable to each variant.  By default, there is a\n     * singleton variant that uses the result of `get params()`.\n     */\n    get variants(): { [variantName: string]: any } {\n        return { singleton: this.params };\n    }\n\n    get main(): Source {\n        throw new Error(\n            `${this.constructor.name}: get main() must be implemented in subclass`\n        );\n    }\n\n    /**\n     * A list of modules always available for import to Capo-hosted policy scripts\n     * @public\n     */\n    implicitIncludedCapoModules() : string[]{\n        return [\n            \"CapoMintHelpers\",\n            \"CapoDelegateHelpers\",\n            \"StellarHeliosHelpers\",\n            \"CapoHelpers\",\n        ];\n    }\n\n    /**\n     * specifies a list module names to be included in the compilation of this script\n     * @remarks\n     * Only used in bundles created with `HeliosScriptBundle.usingCapoBundleClass()` or\n     * `CapoDelegateBundle.usingCapoBundleClass()`.\n     *\n     * Each of these module-names MUST be provided by the CapoHeliosBundle used for\n     * this script bundle (in its `get modules()`).  CapoMintHelpers, CapoDelegateHelpers,\n     * StellarHeliosHelpers and CapoHelpers are always available for import to the\n     * policy script, and the module names you list here will be added to that list.\n     *\n     * These module names will then be available for `import { ... }` statements in your helios script.\n     *\n     * ### Beware of Shifting Sands\n     *\n     * If you include any modules provided by other scripts in your project, you should\n     * be aware that any material changes to those scripts will change your delegate's validator,\n     * resulting in a need to deploy new script contracts.  This is why it's important to only include\n     * modules that are relatively stable, or whose changes SHOULD trigger a new deployment\n     * for this script.\n     *\n     * When you can use isolation techniques including abstract data definitions and/or granular\n     * code-modularization, you can reduce the incidence of such changes while ensuring that needed\n     * upgrades are easy to manage.\n     * @public\n     */\n    includeFromCapoModules(): string[] {\n        return [];\n    }\n\n    /**\n     * Computes a list of modules to be provided to the Helios compiler\n     * @remarks\n     * includes any explicit `modules` from your script bundle, along with any\n     * modules, provided by your Capo and listed by name in your\n     * `includeFromCapoModules()` method.\n     * @public\n     */\n    getEffectiveModuleList() {\n        if (!this.capoBundle) {\n            return [...this.modules];\n        }\n\n        return [...this.resolveCapoIncludedModules(), ...this.modules];\n    }\n\n    resolveCapoIncludedModules() {\n        const includeList = [\n            ...this.implicitIncludedCapoModules(),\n            ...this.includeFromCapoModules(),\n        ];\n\n        const unsatisfiedIncludes = new Set(includeList);\n        const capoModules =this.capoBundle!.modules\n        if (!capoModules) {\n            throw new Error(`${this.capoBundle!.constructor.name}: no modules() list defined`)\n        }\n        const capoIncludedModules = capoModules.filter((x) => {\n            const mName = x.moduleName!;\n            const found = includeList.includes(mName);\n            unsatisfiedIncludes.delete(mName);\n            return found;\n        });\n\n        if (unsatisfiedIncludes.size) {\n            throw new Error(\n                `${\n                    this.displayName\n                }: includeFromCapoModules() includes modules not provided by the Capo:\\n ${Array.from(\n                    unsatisfiedIncludes\n                )\n                    .map((m) => `   ‚Ä¢ ${m}\\n`)\n                    .join(\"\\n\")}`\n            );\n        }\n\n        return capoIncludedModules;\n    }\n\n    logModuleDetails() {\n        const capoIncludedModules = this.resolveCapoIncludedModules();\n\n        function moduleDetails(m: Source) {\n            const pInfo = m.project ? ` [in ${m.project}]/` : \"\";\n            return `    ‚Ä¢ ${m.moduleName}${pInfo}${m.name} (${m.content.length} chars)`;\n        }\n\n        console.log(\n            `\\nModules in ${this.displayName}:\\n` +\n                ` ‚Ä¢ includeFromCapoModules(): ${this.includeFromCapoModules().join(\n                    \", \"\n                )}\\n` +\n                ` ‚Ä¢ implicit Capo modules:    ${this.implicitIncludedCapoModules().join(\n                    \", \"\n                )}\\n` +\n                ` ‚Ä¢ modules from Capo: \\n${capoIncludedModules\n                    .map(moduleDetails)\n                    .join(\"\\n\")}\\n` +\n                ` ‚Ä¢ get modules() (${this.modules.length}): \\n${this.modules\n                    .map(moduleDetails)\n                    .join(\"\\n\")}`\n        );\n    }\n\n    /**\n     * lists any helios modules owned by & needed for this script bundle.\n     * @remarks\n     * Modules listed here should (imported from their .hl files as helios Source objects.\n     *\n     * Any modules shared ***from other script bundles in your project*** should instead be\n     * added to your Capo's `modules`, and named in your `includeFromCapoModules()` method.\n     *\n     * Any of these modules needed by ***other script bundles*** in your project may also be\n     * listed in your Capo's `modules`.\n     */\n    get modules(): Source[] {\n        return [];\n    }\n\n    get displayName() {\n        return this.moduleName || this.program.name;\n    }\n    get bridgeClassName() {\n        const mName = this.displayName;\n        return `${mName}DataBridge`;\n    }\n\n    /**\n     * indicates whether the script should be optimized.\n     * @remarks\n     * Defaults to the general optimize setting provided by the factoryArgs.\n     * Override to force optimization on or off.\n     */\n    get optimize() : HeliosOptimizeOptions | boolean | undefined {\n        return this.setup!.optimize ?? true;\n    }\n\n    get moduleName() {\n        return this.constructor.name\n            .replace(/Bundle/, \"\")\n            .replace(/Helios/, \"\");\n        defaultNoDefinedModuleName; // overridden in subclasses where relevant\n    }\n\n    _selectedVariant?: string;\n    withVariant(vn: string) {\n        if (!this.variants) {\n            throw new Error(\n                `variants not defined for ${this.constructor.name}`\n            );\n        }\n        const foundVariant = this.variants[vn] ?? this.preCompiled?.[vn];\n        if (!foundVariant) {\n            throw new Error(\n                `${this.constructor.name}: variant ${vn} not found in variants()`\n            );\n        }\n        if (this._selectedVariant) {\n            throw new Error(\n                `we aren't sharing variants on a single bundle instance, right?`\n            );\n        }\n\n        this._selectedVariant = vn;\n        return this;\n    }\n\n    previousCompiledScript() {\n        const { uplcProgram, validatorHash } = this.previousOnchainScript || {};\n        if (!uplcProgram) return undefined;\n        if (!validatorHash) return undefined;\n\n        const actualHash = uplcProgram.hash();\n        if (!equalsBytes(validatorHash, actualHash)) {\n            throw new Error(\n                `script hash mismatch: ${bytesToHex(\n                    validatorHash\n                )} != ${bytesToHex(actualHash)}`\n            );\n        }\n\n        return uplcProgram\n    }\n\n        /**\n     * resolves the compiled script for this class with its provided\n     * configuration details\n     * @remarks\n     * The configuration details & pre-compiled script may be injected by\n     * the HeliosRollupBundler or by compiling the script with provided\n     * params (in tests or during a first deployment of a Capo)\n     *\n     * When the asyncOk flag is not present, returns or fails synchronously.\n     * With the asyncOk flag, returns synchronously if the script is already\n     * compiled, or returns a Promise that resolves to the compiled script.\n     */\n    compiledScript(): anyUplcProgram;\n    compiledScript(asyncOk: true): anyUplcProgram | Promise<anyUplcProgram>;\n    compiledScript(asyncOk?: true): anyUplcProgram | Promise<anyUplcProgram> {\n        const {\n            configuredUplcParams: params,\n            setup,\n            previousOnchainScript,\n            program,\n        } = this;\n\n        if (this.alreadyCompiledScript) {\n            return this.alreadyCompiledScript;\n        }\n\n        if (this.isPrecompiled) {\n            const { singleton } = this.preCompiled!;\n            if (singleton && !this._selectedVariant) {\n                this.withVariant(\"singleton\");\n            }\n            const bundleForVariant = this.preCompiled?.[this._selectedVariant!];\n            if (!bundleForVariant) {\n                throw new Error(\n                    `${this.constructor.name}: variant ${this._selectedVariant} not found in preCompiled`\n                );\n            }\n            if (bundleForVariant) {\n                const p = (this.alreadyCompiledScript = programFromCacheEntry(\n                    bundleForVariant.programBundle\n                ));\n                return p;\n            }\n        } else {\n            if (!params || !setup) {\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n                // theoretically only here for type-narrowing\n                throw new Error(\n                    `${this.constructor.name}: missing required params or setup for compiledScript() (debugging breakpoint available)`\n                );\n            }\n\n        }\n        console.warn(\n            `${this.constructor.name}: compiling helios script.  This could take 30s or more... `\n        );\n\n        // falls back to actually compiling the program.\n        // on server side, this comes with caching for performance.\n        // on the browser, there's not (currently) a cache.  It's intended\n        // that the preCompiled= settings\n        // will usually be available, so the cases where this is needed on the browser\n        // side should be rare (from .hlb's params() or variants())\n        // or only used in special cases of capo deployment (with its configuredScriptDetails)\n        const t = new Date().getTime();\n        const rawValues: Record<string, any> = {};\n        if (params) {\n            for (const [p, v] of Object.entries(params)) {\n                program.changeParam(p, v);\n                rawValues[p] = v.rawData;\n            }\n        }\n\n        const net = this.isMainnet ? \"mainnet\" : \"testnet\";\n        console.log(\n            `(${net}) ${this.moduleName} with params:\\n`,\n            Object.fromEntries(\n                Object.entries(program.entryPoint.paramsDetails()).map(\n                    ([k, uplcVal]) => {\n                        return [k, [uplcVal, rawValues[k]?.toString()].flat()];\n                    }\n                )\n            )\n        );\n\n        return program\n            .compileWithCache({\n                optimize: this.optimize,\n            })\n            .then((uplcProgram) => {\n                //     // optimize: {\n                //     //     keepTracing: true,\n                //     //     factorizeCommon: false,\n                //     //     inlineSimpleExprs: false,\n                //     //     flattenNestedFuncExprs: false,\n                //     //     removeUnusedArgs: false,\n                //     //     replaceUncalledArgsWithUnit: false,\n                //     //     inlineErrorFreeSingleUserCallExprs: false,\n                //     //     inlineSingleUseFuncExprs: false,\n                //     // },\n                //     withAlt: true,\n                // });\n                this.alreadyCompiledScript = uplcProgram;\n                const scriptHash = bytesToHex(uplcProgram.hash());\n                console.log(\n                    `compiled in ${new Date().getTime() - t}ms -> ${scriptHash}`\n                );\n                // if (globalThis.document) {\n                //     console.log({\n                //         uplcProgram,\n                //         cbor: bytesToHex(uplcProgram.toCbor()),\n                //     });\n                // }\n                return uplcProgram;\n            });\n    }\n\n    get preBundledScript() {\n        if (!this.isPrecompiled) return undefined;\n        const { singleton } = this.preCompiled!;\n        if (singleton && !this._selectedVariant) {\n            this.withVariant(\"singleton\");\n        }\n        const bundleForVariant = this.preCompiled?.[this._selectedVariant!];\n        if (!bundleForVariant) {\n            throw new Error(\n                `${this.constructor.name}: variant ${this._selectedVariant} not found in preCompiled`\n            );\n        }\n        return programFromCacheEntry(bundleForVariant.programBundle);\n    }\n\n    async getSerializedProgramBundle() {\n        const compiledScript = await this.compiledScript();\n        const cacheEntry = this.program.cacheEntry;\n        if (!cacheEntry) throw new Error(`missing cacheEntry`);\n        const serializedCacheEntry = serializeCacheEntry(cacheEntry);\n        const {\n            programElements,\n            version,\n            optimizeOptions,\n            optimized,\n            unoptimized,\n            optimizedIR,\n            unoptimizedIR,\n            optimizedSmap,\n            unoptimizedSmap,\n        } = serializedCacheEntry;\n        return {\n            scriptHash: bytesToHex(compiledScript.hash()),\n            programBundle: {\n                programElements,\n                version,\n                optimized,\n                unoptimized,\n                optimizedIR,\n                unoptimizedIR,\n                optimizedSmap,\n                unoptimizedSmap,\n            },\n        };\n    }\n\n    decodeAnyPlutusUplcProgram(\n        version: \"PlutusV2\" | \"PlutusV3\",\n        cborHex: string,\n        ir?: string,\n        sourceMap?: UplcSourceMapJsonSafe,\n        alt?: anyUplcProgram\n    ) {\n        if (version === \"PlutusV2\") {\n            if (alt && alt.plutusVersion != \"PlutusScriptV2\") {\n                throw new Error(\n                    `expected alt script to have matching Plutus V2, not ${alt.plutusVersion}`\n                );\n            }\n            return decodeUplcProgramV2FromCbor(cborHex, {\n                ir: ir,\n                sourceMap: sourceMap,\n                alt: alt as UplcProgramV2,\n            });\n        } else if (version === \"PlutusV3\") {\n            throw new Error(`Plutus V3 not yet supported`);\n            // if (alt && alt.plutusVersion != \"PlutusScriptV3\") {\n            //     throw new Error(`expected alt script to have matching Plutus V3, not ${alt.plutusVersion}`);\n            // }\n            // return decodeUplcProgramV3FromCbor(cborHex, {\n            //     ir: ir,\n            //     sourceMap: sourceMap,\n            //     alt: alt as UplcProgramV3\n            // });\n        } else {\n            throw new Error(`unexpected Plutus version ${version}`);\n        }\n    }\n\n    /**\n     * provides a temporary indicator of mainnet-ness, while not\n     * requiring the question to be permanently resolved.\n     */\n    isDefinitelyMainnet() {\n        return this.isMainnet ?? false;\n    }\n\n    // _pct: number = 0\n    get program(): HeliosProgramWithCacheAPI {\n        if (this._program) {\n            // bust through pre-cached version if the\n            // fundmental settings are changed\n            if (\n                this.isPrecompiled != this._progIsPrecompiled ||\n                this.setup?.isMainnet !== this.isMainnet\n            ) {\n                console.warn(\"busting program cache\");\n                this._program = undefined;\n            } else {\n                return this._program;\n            }\n        }\n        const isMainnet = this.setup?.isMainnet ?? false;\n        const isTestnet = !isMainnet;\n\n        const ts1 = Date.now();\n        let mName = this.moduleName;\n        if (mName === defaultNoDefinedModuleName) {\n            mName = \"\";\n        }\n        const moduleSources = this.getEffectiveModuleList();\n\n        if (!isTestnet) {\n            debugger;\n        }\n        try {\n            const p = new HeliosProgramWithCacheAPI(this.main, {\n                isTestnet,\n                moduleSources,\n                name: mName, // it will fall back to the program name if this is empty\n            });\n            this._program = p;\n            this._progIsPrecompiled = this.isPrecompiled;\n\n            // Hi!  Are you investigating a duplicate load of the same module?\n            //  üî•üî•üî•  thanks! you're saving people 100ms at a time!\n            console.log(\n                `üì¶ ${mName}: loaded & parsed ${\n                    this.isPrecompiled ? \"with\" : \"without\"\n                } pre-compiled program: ${Date.now() - ts1}ms`\n                // new Error(`stack`).stack\n            );\n            return p;\n        } catch (e: any) {\n            // !!! probably this stuff needs to move to compileWithScriptParams()\n            if (e.message.match(/invalid parameter name/)) {\n                debugger;\n                throw new Error(\n                    e.message +\n                        `\\n   ... this typically occurs when your StellarContract class (${this.constructor.name})` +\n                        \"\\n   ... can be missing a getContractScriptParams() method \" +\n                        \"\\n   ... to map from the configured settings to contract parameters\"\n                );\n            }\n            const [unsetConst, constName] =\n                e.message.match(/used unset const '(.*?)'/) || [];\n            if (unsetConst) {\n                console.log(e.message);\n                throw new Error(\n                    `${this.constructor.name}: missing required script param '${constName}' in static getDefaultParams() or getContractScriptParams()`\n                );\n            }\n            if (!e.site) {\n                console.error(\n                    `unexpected error while compiling helios program (or its imported module) \\n` +\n                        `> ${e.message}\\n` +\n                        `(debugging breakpoint available)\\n` +\n                        `This likely indicates a problem in Helios' error reporting - \\n` +\n                        `   ... please provide a minimal reproducer as an issue report for repair!\\n\\n` +\n                        e.stack.split(\"\\n\").slice(1).join(\"\\n\")\n                );\n                try {\n                    debugger;\n                    // debugger'ing?  YOU ARE AWESOME!\n                    //  reminder: ensure \"pause on caught exceptions\" is enabled\n                    //  before playing this next line to dig deeper into the error.\n\n                    const try2 = new HeliosProgramWithCacheAPI(this.main, {\n                        isTestnet,\n                        moduleSources,\n                        name: mName, // it will fall back to the program name if this is empty\n                    });\n\n                    // const script2 = new Program(codeModule, {\n                    //     moduleSources: modules,\n                    //     isTestnet: this.setup.isTest,\n                    // });\n                    // console.log({ params });\n                    // if (params) {\n                    //     for (const [p, v] of Object.entries(params || {})) {\n                    //         script2.changeParam(p, v);\n                    //     }\n                    //     script2.compile();\n                    // }\n                    console.warn(\"NOTE: no error thrown on second attempt\");\n                } catch (sameError) {\n                    // entirely expected it would throw the same error\n                    // throw sameError;\n                }\n                // throw e;\n            }\n            debugger;\n            const [_, notFoundModule] =\n                e.message.match(/module '(.*)' not found/) || [];\n            if (notFoundModule) {\n                this.logModuleDetails();\n                console.log(\n                    `${this.constructor.name} module '${notFoundModule}' not found; see module details above`\n                );\n            }\n            if (!e.site) {\n                console.warn(\n                    \"error thrown from helios doesn't have source site info; rethrowing it\"\n                );\n                throw e;\n            }\n            const moduleName2 = e.site.file; // moduleName? & filename ? :pray:\n            const errorModule = [this.main, ...moduleSources].find(\n                (m) => m.name == moduleName2\n            );\n\n            // const errorModule = [codeModule, ...modules].find(\n            //     (m) => (m as any).name == moduleName\n            // );\n\n            const {\n                project,\n                moduleName,\n                name: srcFilename = \"‚Äπunknown path to module‚Ä∫\",\n                moreInfo,\n            } = errorModule || {};\n            let errorInfo: string = \"\";\n\n            if (!HeliosProgramWithCacheAPI.checkFile(srcFilename)) {\n                const indent = \" \".repeat(6);\n                errorInfo = project\n                    ? `\\n${indent}Error found in project ${project}:${srcFilename}\\n` +\n                      `${indent}- in module ${moduleName}:\\n${moreInfo}\\n` +\n                      `${indent}  ... this can be caused by not providing correct types in a module specialization,\\n` +\n                      `${indent}  ... or if your module definition doesn't include a correct path to your helios file\\n`\n                    : `\\n${indent}WARNING: the error was found in a Helios file that couldn't be resolved in your project\\n` +\n                      `${indent}  ... this can be caused if your module definition doesn't include a correct path to your helios file\\n` +\n                      `${indent}  ... (possibly in mkHeliosModule(heliosCode, \\n${indent}    \"${srcFilename}\"\\n${indent})\\n`;\n            }\n\n            const { startLine, startColumn } = e.site;\n            const t = new Error(errorInfo);\n            const modifiedStack = t.stack!.split(\"\\n\").slice(1).join(\"\\n\");\n            debugger;\n            const additionalErrors = (e.otherErrors || []).slice(1).map(\n                (oe) =>\n                    `       |         ‚ö†Ô∏è  also: ${\n                        // (oe.message as string).replace(e.site.file, \"\")}`);\n                        oe.site.file == e.site.file\n                            ? oe.site\n                                  .toString()\n                                  .replace(e.site.file + \":\", \"at \") +\n                              \": \" +\n                              oe.originalMessage\n                            : oe.site.toString() + \" - \" + oe.originalMessage\n                    }`\n            );\n            const addlErrorText = additionalErrors.length\n                ? [\"\", ...additionalErrors, \"       v\"].join(\"\\n\")\n                : \"\";\n            t.message = `${e.kind}: ${\n                this.constructor.name\n            }\\n${e.site.toString()} - ${\n                e.originalMessage\n            }${addlErrorText}\\n${errorInfo}`;\n\n            t.stack =\n                `${this.constructor.name}: ${\n                    e.message\n                }\\n    at ${moduleName2} (${srcFilename}:${1 + startLine}:${\n                    1 + startColumn\n                })\\n` + modifiedStack;\n\n            throw t;\n        }\n    }\n\n    isHeliosScriptBundle() {\n        return true;\n    }\n\n    addTypeProxies() {\n        // const typeGenerator = new BundleTypeGenerator(this);\n        // const { activityTypeDetails, datumTypeDetails } = typeGenerator;\n        // this.Activity = new ActivityMaker(this);\n        // if (datumTypeDetails) {\n        //     this.readDatum = new DataReader(datumTypeDetails);\n        // }\n    }\n\n    effectiveDatumTypeName() {\n        return (\n            this.datumTypeName ||\n            this.locateDatumType()?.name ||\n            \"‚Äπunknown datum-type name‚Ä∫\"\n        );\n    }\n\n    locateDatumType(): DataType | undefined {\n        let datumType: DataType | undefined;\n        // let datumTypeName: string | undefined;\n\n        const program = this.program;\n        const programName = program.name;\n        const argTypes = program.entryPoint.mainArgTypes;\n        const argCount = argTypes.length;\n        if (argCount === 2) {\n            datumType = argTypes[0];\n            // datumTypeName = argTypes[0].name;\n        }\n\n        if (this.datumTypeName) {\n            datumType =\n                program.entryPoint.userTypes[programName][this.datumTypeName];\n            if (!datumType) {\n                throw new Error(\n                    `${this.constructor.name}.datumTypeName=\\`${this.datumTypeName}\\` not found in userTypes of script program ${programName}`\n                );\n            }\n        }\n\n        return datumType;\n    }\n\n    locateRedeemerType(): DataType {\n        const program = this.program;\n        const argTypes = program.entryPoint.mainArgTypes;\n        const argCount = argTypes.length;\n\n        let redeemerType: DataType;\n        if (argCount === 2) {\n            redeemerType = argTypes[1];\n        } else {\n            redeemerType = argTypes[0];\n        }\n\n        if (this.redeemerTypeName) {\n            const programName = program.name;\n            redeemerType =\n                program.entryPoint.userTypes[programName][\n                    this.redeemerTypeName\n                ];\n            if (!redeemerType) {\n                throw new Error(\n                    `${this.constructor.name}.redeemerTypeName=\\`${this.redeemerTypeName}\\` not found in userTypes of script program ${programName}`\n                );\n            }\n        }\n\n        return redeemerType;\n    }\n\n    get includeEnums() : string[] {\n        return []\n    }\n\n    getTopLevelTypes(): HeliosBundleTypes {\n        const types = {\n            datum: this.locateDatumType(),\n            redeemer: this.locateRedeemerType(),\n        };\n\n        const program = this.program;\n        const { userTypes } = program;\n        const { mainModule } = program.entryPoint;\n        const mainTypes = userTypes[mainModule.name.value];\n        for (const [typeName, type] of Object.entries(mainTypes)) {\n            const s = type.toSchema();\n            if (s.kind == \"struct\") {\n                types[typeName] = type;\n            }\n            if (s.kind == \"enum\" && this.includeEnums.includes(typeName)) {\n                types[typeName] = type;\n            }\n        }\n\n        if (userTypes.specializedDelegate) {\n            const specializationName = this.moduleName;\n            const specializationTypes = userTypes[specializationName];\n            if (!specializationTypes) {\n                console.log(\n                    \"NOTE: the module name for the delegate policy script must match bundle's moduleName\"\n                );\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n                throw new Error(\n                    `specialization types not found for ${this.moduleName} in program ${program.name} (debugging breakpoint available)`\n                );\n            }\n            for (const [typeName, type] of Object.entries(\n                specializationTypes\n            )) {\n                const s = type.toSchema();\n                if (s.kind == \"struct\") {\n                    types[typeName] = type;\n                }\n                if (s.kind == \"enum\" && this.includeEnums.includes(typeName)) {\n                    types[typeName] = type;\n                }\n            }\n        }\n\n        return types;\n    }\n\n    paramsToUplc<ConfigType extends configBaseWithRev>(\n        params: Record<string, any>\n    ): UplcRecord<ConfigType> {\n        const namespace = this.program.name;\n        const { paramTypes } = this.program;\n\n        return Object.fromEntries(\n            Object.entries(params)\n                .map(([paramName, data]) => {\n                    const fullName = `${namespace}::${paramName}`;\n                    // console.log(\"  -- param\", fullName);\n                    const thatType = paramTypes[fullName];\n                    if (!thatType) {\n                        // group the params by namespace to produce a list of:\n                        //   \"namespace::{ ... paramNames ... }\"\n                        //   \"namespace2::{ ... paramNames ... }\"\n                        const availableParams = Object.entries(\n                            paramTypes\n                        ).reduce((acc, [k, v]) => {\n                            const [ns, name] = k.split(\"::\");\n                            if (!acc[ns]) acc[ns] = [];\n                            acc[ns].push(name);\n                            return acc;\n                        }, {} as Record<string, string[]>);\n                        // if (Array.isArray(data)) {\n                        //     // probably it's wrong to categorically reject arrays,\n                        //     // but if you have this problem, please let us know and we'll help you resolve it.\n                        //     throw new Error(\n                        //         `invalid script-parameter '${paramName}' in namespace '${namespace}' \\n` +\n                        //             `  ... expected single value, got array`\n                        //     );\n                        // }\n\n                        // throw an error showing all the namespaces and all the short params in each\n                        const availableScriptParams = Object.entries(\n                            availableParams\n                        )\n                            .map(\n                                ([ns, names]) =>\n                                    `  ${ns}::{${names.join(\", \")}}`\n                            )\n                            .join(\"\\n\");\n                        // console.log(\"availableScriptParams\", availableScriptParams);\n                        if (paramName == \"0\") {\n                            throw new Error(\n                                `numeric param name is probably wrong`\n                            );\n                        }\n                        if ((paramName = \"addrHint\")) {\n                            // silently ignore this one\n                            return undefined;\n                        }\n                        throw new Error(\n                            `invalid script-parameter '${paramName}' in namespace '${namespace}' \\n` +\n                                `  ... expected one of: ${availableScriptParams}`\n                        );\n                    }\n                    return [\n                        fullName,\n                        this.typeToUplc(thatType, data, `params[${fullName}]`),\n                    ];\n                })\n                .filter((x) => !!x)\n        ) as UplcRecord<ConfigType>;\n    }\n\n    typeToUplc(type: DataType, data: any, path: string = \"\"): UplcData {\n        const schema = type.toSchema();\n        if (!this.setup) {\n            debugger;\n        }\n        const isMainnet = this.setup!.isMainnet;\n        if (\"undefined\" == typeof isMainnet) {\n            throw new Error(\n                `${this.constructor.name}: isMainnet must be defined in the setup`\n            );\n        }\n        const cast = makeCast(schema, {\n            isMainnet,\n            unwrapSingleFieldEnumVariants: true,\n        });\n        return cast.toUplcData(data, path);\n    }\n}\n"],"names":["textToBytes","tx","txName","tcx","t","x","bytesToText","extraNewLine","usesOutdent","multiLine","s","delegateName","params"],"mappings":"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"}