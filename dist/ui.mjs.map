{"version":3,"file":"ui.mjs","sources":["../src/ui/Button.tsx","../src/ui/ClientSideOnly.tsx","../src/ui/inPortal.tsx","../src/ui/Progress.tsx","../src/ui/assets/ellipse.svg","../src/ui/DashboardTemplate.tsx","../src/ui/TxBatchViewer.tsx","../src/ui/TxBatchUI.tsx","../src/ui/CapoDappProvider.tsx","../src/ui/CharterStatus.tsx","../src/ui/PendingTxn.tsx","../src/ui/ShowFailedActivity.tsx"],"sourcesContent":["import React, { type MouseEventHandler } from \"react\";\nimport clsx from \"clsx\";\n\nconst styles = {\n    primary: {\n        className:\n            \"not-prose rounded-md bg-blue-700 py-2 px-4 \" +\n            \"text-sm font-semibold text-slate-900 \" +\n            \"border border-solid border-blue-600/50 \" +\n            \"text-neutral-200 \" +\n            \"hover:bg-blue-500 \" +\n            \"focus:outline-none focus-visible:outline-2 \" +\n            \"focus-visible:outline-offset-2 focus-visible:outline-blue-500 \" +\n            \"active:bg-blue-500\",\n    },\n    secondary: {\n        className:\n            \"not-prose rounded-md bg-blue-900 py-2 px-4 text-sm font-medium \" +\n            \"border border-solid border-blue-700/50 \" +\n            \"text-neutral-400 hover:bg-slate-700 \" +\n            \"disabled:bg-slate-700 disabled:border-blue-900 \" +\n            \"focus:outline-none focus-visible:outline-2 \" +\n            \"focus-visible:outline-offset-2 focus-visible:outline-white/50 \" +\n            \"active:text-slate-400\",\n    },\n    \"secondary-sm\": {\n        className:\n            \"not-prose rounded-md bg-blue-900 px-2 text-sm \" +\n            \"border border-solid border-blue-700/50 \" +\n            \"text-neutral-400 hover:bg-slate-700 \" +\n            \"disabled:bg-slate-700 disabled:border-blue-900 \" +\n            \"focus:outline-none focus-visible:outline-2 \" +\n            \"focus-visible:outline-offset-2 focus-visible:outline-white/50 \" +\n            \"active:text-slate-400\",\n    },\n};\n\ntype SpecialButtonProps = (\n    | React.ComponentPropsWithoutRef<\"button\">\n    | React.ComponentPropsWithoutRef<\"a\">\n) & {\n    variant?: \"primary\" | \"secondary\" | \"secondary-sm\";\n    href?: string;\n};\n\ninterface propsType {\n    children: any;\n    style?: Record<string, any>;\n    variant?: \"primary\" | \"secondary\" | \"secondary-sm\";\n    onClick: MouseEventHandler<any>;\n    className?: string;\n    href?: string;\n}\n\n/**\n * A button component\n * @remarks\n * Expects tailwind.\n * \n * @public\n */\nexport const Button = function (props: SpecialButtonProps) {\n    let {\n        variant = \"primary\",\n        style = {},\n        children,\n        className,\n        href,\n        ...moreProps\n    } = props;\n\n    const s = styles[variant];\n    className = clsx(s.className, className);\n    \n    if (href) {\n        const aprops = {\n            children,\n            href,\n            className,\n            style,\n            ...moreProps,\n        } as React.ComponentPropsWithoutRef<\"a\">;\n        return <a {...aprops} />;\n    }\n    \n    const bprops = {\n        children,\n        className,\n        style,\n        ...moreProps,\n    } as React.ComponentPropsWithoutRef<\"button\">;\n    return <button {...bprops} />;\n};\n","// A class-based implementation of ClientSideOnly that avoids React hooks \n// to prevent \"Invalid hook call\" errors when multiple React instances exist\n\nimport * as React from 'react';\n\ninterface ClientSideOnlyProps {\n  children: React.ReactNode | null;\n}\n\ninterface ClientSideOnlyState {\n  isClient: boolean;\n}\n\n/**\n * A React component wrapper that only renders its contents on the client side.\n * @remarks\n * Works with Next.js or any other SSR framework that do not trigger componentDidMount\n * @public\n */\nexport class ClientSideOnly extends React.Component<ClientSideOnlyProps, ClientSideOnlyState> {\n  constructor(props: ClientSideOnlyProps) {\n    super(props);\n    // Start with isClient = false\n    this.state = { isClient: false };\n  }\n\n  componentDidMount() {\n    // After mounting (which only happens client-side), set isClient to true\n    this.setState({ isClient: true });\n  }\n\n  render() {\n    // If we're not on the client yet, render an empty div\n    if (!this.state.isClient) {\n      return React.createElement('div', { suppressHydrationWarning: true });\n    }\n    \n    // Otherwise, render the children\n    return React.createElement(\n      'div', \n      { suppressHydrationWarning: true },\n      this.props.children\n    );\n  }\n}\n\n","import React, { useState, type ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { ClientSideOnly } from \"./ClientSideOnly.js\";\n\n/**\n * Directs react contents into a portal, with simple interface and automatic fallback\n * @public\n */\nexport function InPortal(props: {\n    domId: string;\n    fallbackLocation?: \"top\" | \"bottom\" | \"none\";\n    fallbackHelp?: string;\n    fallbackComponent?: React.ComponentType<any>;\n    delay?: number;\n    maxRetries?: number;\n    children: ReactNode;\n}) {\n    const {\n        domId,\n        fallbackLocation = \"none\",\n        fallbackHelp,\n        delay = 150,\n        maxRetries = 1,\n        children,\n        fallbackComponent : FallbackComponent,\n    } = props;\n    \n    const childrenAsNode = children as React.ReactNode;\n\n    if (\"undefined\" == typeof window) return <ClientSideOnly children={childrenAsNode} />;\n    const [renderCount, updateRenderCount] = useState(1);\n    const reRender = () => updateRenderCount(renderCount + 1);\n\n    let foundPortalTarget = document?.getElementById(domId);\n    const fallbackId =\n        fallbackLocation == \"none\" ? \"\" : `fallbackPortal-${domId}`;\n    if (!foundPortalTarget && fallbackLocation == \"none\") {\n        throw new Error(\n            `domId not found: ${domId} ; use \\`fallbackLocation=\"top | bottom\"\\` for magic portal creation if desired`\n        );\n    }\n    let fallbackPortalHost =\n        foundPortalTarget || document.getElementById(fallbackId);\n    if (foundPortalTarget) {\n        return createPortal(\n            <ClientSideOnly children={childrenAsNode} />,\n            foundPortalTarget\n        );\n    } else if (fallbackPortalHost) {\n        if (FallbackComponent) {\n            return createPortal(\n                <ClientSideOnly children={<FallbackComponent>{childrenAsNode}</FallbackComponent>} />,\n                fallbackPortalHost\n            );\n        }\n        return createPortal(\n            <ClientSideOnly children={childrenAsNode} />,\n            fallbackPortalHost\n        );\n    }\n\n    const tryOnceOrAgain = renderCount == 1 ? true : renderCount < maxRetries;\n\n    if (tryOnceOrAgain)\n        setTimeout(() => {\n            if (\n                document.getElementById(domId) ||\n                (fallbackId && document.getElementById(fallbackId))\n            ) {\n                reRender();\n                return;\n            }\n\n            if (!fallbackId && renderCount > maxRetries) {\n                console.log(\n                    fallbackHelp ||\n                        `no explicit fallbackLocation provided and the target portal-id '${domId}' is not available`\n                );\n                console.log(\n                    \"if you need more time to render the target portal, you can add a delay=‹ms› prop greater than 150 (ms) that will be tried up to 10x\"\n                );\n                console.error(\n                    `<inPortal>: max retries exceeded while waiting for explicit portal.  Can't show UI details for portal ${domId}`\n                );\n                return;\n            }\n            if (renderCount > maxRetries) {\n                // shouldn't be reachable\n                console.error(\n                    `<inPortal>: max retries exceeded without expected fallback portal; Can't show UI details for portal ${domId}`\n                );\n                return;\n            }\n            console.warn(\n                `domId not available: ${domId} ; creating ${fallbackId}\\n` +\n                    `if your app needs more time to render the target portal, you can add a delay=‹ms› prop` +\n                    (fallbackHelp ? `\\n  ${fallbackHelp}` : \"\")\n            );\n\n            const someDiv = document.createElement(\"div\");\n            someDiv.id = fallbackId;\n            someDiv.style.width = \"100%\";\n            someDiv.style.border = \"2px dashed purple\";\n            if (fallbackLocation == \"top\") {\n                document.body.prepend(someDiv);\n            } else {\n                document.body.appendChild(someDiv);\n                someDiv.style.position = \"fixed\";\n                someDiv.style.zIndex = \"9999\";\n                someDiv.style[fallbackLocation] = \"0\";\n            }\n            reRender();\n        }, delay);\n\n    return <ClientSideOnly children={null} />;\n}\n","\"use client\";\nimport React from \"react\";\n\n\n/**\n * Props for the progress bar\n * @public\n */\ninterface ProgressProps {\n    /**\n     * The percentage of progress (0-100)\n     */\n    progressPercent: number\n    children: React.ReactNode;\n}\n\n/**\n * A progress bar\n * @public\n */\nexport const Progress = ({ children, progressPercent }: ProgressProps ) => {\n    // a random but persistent number for element id, called only once.\n    const [myId] = React.useState(() => {\n        return (42424242 * Math.random()).toString(36).substring(7)\n    });\n    const concreteIndicatorProps = progressPercent ? {\n        value: progressPercent,\n        max: 100,\n    } : {}\n\n    return (\n        <div>\n            {/* <div aria-busy=\"true\" aria-describedby=\"progress-bar\"></div> */}\n            <label htmlFor={`progress-bar-${myId}`}>{children}</label>\n            <div className=\"progress progress-striped h-3\">\n                <progress\n                    className=\"progress-bar\"\n                    {...concreteIndicatorProps}\n                    id={`progress-bar-${myId}`}\n                    aria-label=\"Content loading…\"\n                >...busy... /* only for lame old browsers */</progress>\n            </div>\n        </div>\n    );\n};\n","var img = \"data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg width='693' height='1115' viewBox='0 0 693 1115' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cg opacity='0.1' filter='url(%23filter0_f_2041_227)'%3e%3ccircle cx='82' cy='504' r='267' fill='%23B44795'/%3e%3c/g%3e%3cdefs%3e%3cfilter id='filter0_f_2041_227' x='-529' y='-107' width='1222' height='1222' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'%3e%3cfeFlood flood-opacity='0' result='BackgroundImageFix'/%3e%3cfeBlend mode='normal' in='SourceGraphic' in2='BackgroundImageFix' result='shape'/%3e%3cfeGaussianBlur stdDeviation='172' result='effect1_foregroundBlur_2041_227'/%3e%3c/filter%3e%3c/defs%3e%3c/svg%3e\";\n  export default img;","import React from \"react\";\nimport ellipse from \"./assets/ellipse.svg\";\n\n/**\n * A template for a dashboard layout\n * @remarks\n * Expects tailwind.\n * @public\n */\nexport function DashboardTemplate(props: {\n    title: string;\n    children: React.ReactNode;\n}) {\n    return (\n        <div className=\"relative my-4 mx-8 flex w-full flex-col gap-10\">\n            <img\n                alt=\"blurred background\"\n                height={260}\n                width={260}\n                src={ellipse}\n                className=\"size-40 absolute -left-44 top-20 -z-10 h-96 w-96 overflow-hidden bg-black/20 opacity-50 blur-[344px]\"\n            />\n            <img\n                alt=\"blurred background\"\n                height={260}\n                width={260}\n                src={ellipse}\n                className=\"size-40 absolute -right-44 top-20 -z-10 h-96 w-96 overflow-hidden bg-black/20 opacity-50 blur-[344px]\"\n            />\n            <div className=\"self-start text-2xl font-semibold\">\n                <h3>{props.title}</h3>\n            </div>\n            {props.children}\n        </div>\n    );\n}\n\n/**\n * A row for a dashboard layout\n * @remarks\n * Expects tailwind.\n * @public\n */\nexport function DashboardRow(props: {\n    title?: string;\n    children: React.ReactNode;\n}) {\n    return (\n        <div>\n            {props.title && (\n                <h4 className=\"text-lg font-semibold\">{props.title}</h4>\n            )}\n            <div className=\"grid grid-cols-3 gap-x-4 rounded-3xl\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\n/**\n * A summary area for a dashboard layout\n * @remarks\n * Children should be <li> elements or <DashSummaryItem> elements, and are displayed as a grid.\n * \n * Expects tailwind.\n * @public\n */\nexport function DashboardSummary(props: {\n    title: string;\n    children: React.ReactNode;\n}) {\n    return (\n        <div className=\"bg-background/20 col-span-1 flex h-full flex-col items-start justify-between rounded-3xl border border-white/10 p-6\">\n            <h5 className=\"text-lg\">{props.title}</h5>\n            <ul className=\"grid w-full grid-cols-2 grid-rows-3 gap-4\">\n                {props.children}\n            </ul>\n        </div>\n    );\n}\n\n/**\n * A summary item for a dashboard layout\n * @remarks\n * \n * The first child becomes a low-level (h6) heading\n * \n * Other children are displayed as-is.\n * \n * Expects tailwind.\n * @public\n */\nexport function DashSummaryItem(props: {\n    title: string;\n    children: React.ReactNode;\n}) {\n    const firstChild = Array.isArray(props.children)\n        ? props.children[0]\n        : props.children;\n    const otherChildren = Array.isArray(props.children)\n        ? props.children.slice(1)\n        : [];\n    return (\n        <li>\n            <span className=\"inline-flex items-baseline gap-x-1\">\n                <h6 className=\"text-2xl leading-[30px]\">{firstChild}</h6>\n                {otherChildren}\n            </span>\n            <p className=\"text-sm font-light leading-[17px] opacity-90\">\n                {props.title}\n            </p>\n        </li>\n    );\n}\n\n/**\n * A highlights area for a dashboard layout\n * @remarks\n * children should be <li> elements\n * \n * Expects tailwind.\n * @public\n */\nexport function DashboardHighlights(props: {\n    title?: string;\n    className?: string;\n    colSpan?: string;\n    footer?: string | React.ReactNode;\n    children: React.ReactNode;\n}) {\n    const { title, className = \"\", colSpan = \"2\", footer, children } = props;\n    const colSpanClasses = [\n        undefined,\n        undefined,\n        \"col-span-2\",\n        \"col-span-3\",\n        \"col-span-4\",\n        \"col-span-5\",\n        \"col-span-6\",\n        \"col-span-7\",\n        \"col-span-8\",\n        \"col-span-9\",\n        \"col-span-10\",\n    ];\n    const normalClasses =\n        \"flex flex-col justify-between p-3 px-4 bg-background/20 h-full \" +\n        \"rounded-2xl border border-white/10\";\n    const titleMarkup = title ? <h5 className=\"text-lg\">{title}</h5> : null;\n    const footerContent = footer ? (\n        <div className=\"flex flex-row w-full justify-between mt-auto\">\n            <div className=\"text-sm text-gray-500 flex-1 text-right\">\n                {footer}\n            </div>\n        </div>\n    ) : null;\n    return (\n        <div\n            key=\"dash-highlight-box\"\n            className={`${className} ${colSpanClasses[colSpan]} ${normalClasses}`}\n        >\n            {titleMarkup}\n            <ul className=\"grid w-full grid-cols-3 gap-4\">{children}</ul>\n            {footerContent}\n        </div>\n    );\n}\n\n/**\n * A highlight item for a dashboard layout, using a smallish box with vertical (columnar) flex\n * @remarks\n * \n * Add a className to provide additional style.\n * \n * Expects tailwind.\n * @public\n */\nexport function DashHighlightItem(props: {\n    title?: string;\n    button?: string;\n    onClick?: () => void;\n    titleClassName?: string;\n    className?: string;\n    style?: React.CSSProperties;\n    children: React.ReactNode;\n    footer?: string | React.ReactNode;\n}) {\n    const {\n        title,\n        button,\n        onClick,\n        titleClassName = \"text-lg\",\n        children,\n        className = `rounded-lg border border-(--color-border)/20 bg-(--color-card)/50 text-(--color-card-foreground) p-2`,\n        style = {},\n        footer,\n    } = props;\n    const firstChild = Array.isArray(children) ? children[0] : children;\n    const otherChildren = Array.isArray(children) ? children.slice(1) : [];\n    return (\n        <li className={`flex flex-col h-full ${className}`} style={style}>\n            <div className=\"flex-none\">\n                <h6 className=\"text-md leading-[15px]\">{firstChild}</h6>\n                <div className=\"text-sm\">{otherChildren}</div>\n            </div>\n            <div\n                id=\"labelAndButton\"\n                className={`${titleClassName} mt-auto gap-y-1 text-right justify-end`}\n            >\n                {title}\n                {button && (\n                    <ActionButton {...{ onClick }}>{button}</ActionButton>\n                )}\n            </div>\n            {footer && (\n                <Softlight className=\"text-right text-sm italic text-gray-400\">\n                    {footer}\n                </Softlight>\n            )}\n        </li>\n    );\n}\n\n/**\n * A button that is styled to look like a primary action button\n * @remarks\n * Choose a size= or use \"md\" as the default.\n * \n * Add a className to provide additional style.\n * \n * Expects tailwind.\n * @public\n */\nexport function ActionButton(props: {\n    className?: string;\n    onClick?: () => void;\n    size?: \"xs\" | \"sm\" | \"md\" | \"lg\";\n    children: React.ReactNode;\n}) {\n    const { children, onClick, className = \"\", size = \"md\" } = props;\n    return (\n        <button\n            onClick={onClick}\n            className={`${className} bg-(--color-primary) text-(--color-primary-foreground) text-${size} rounded-${size} cursor-pointer px-2 py-1`}\n        >\n            {children}\n        </button>\n    );\n}\n\n/**\n * A column for the dashboard layout\n * @remarks\n * Expects tailwind.\n * \n * @public\n */\nexport function Column(props: {\n    widthPercent: number;\n    children: React.ReactNode;\n}) {\n    const { widthPercent, children } = props;\n    return (\n        <div\n            className={`flex flex-col ${\n                widthPercent ? \"w-\" + widthPercent.toString() : \"\"\n            } p-8`}\n        >\n            {children}\n        </div>\n    );\n}\n\n/**\n * shows its content in the theme color of the accent foreground\n * @remarks\n * Allows for any as=‹htmlTag› to be used instead of the default <p> tag.\n * \n * Add a className to provide additional style.\n * \n * Expects tailwind.\n * @public\n */\nexport function Highlight(props: {\n    as?: keyof JSX.IntrinsicElements;\n    className?: string;\n    children: React.ReactNode;\n}) {\n    const { as: As = \"p\", className = \"\", children } = props;\n    return (\n        <As\n            className={`${className} text-(--color-accent-foreground) text-[13px] font-normal`}\n        >\n            {children}\n        </As>\n    );\n}\n\n/**\n * shows its content in a softened version of the theme color of the accent foreground\n * @remarks\n * Allows for any as=‹htmlTag› to be used instead of the default <p> tag.\n * \n * Add a className to provide additional style.\n * \n * Expects tailwind.\n * @public\n */\nexport function Lowlight(props: {\n    as?: keyof JSX.IntrinsicElements;\n    className?: string;\n    children: React.ReactNode;\n}) {\n    const { as: As = \"div\", className = \"\", children } = props;\n    return (\n        <As\n            className={`${className} text-(--color-accent-foreground) font-normal opacity-50`}\n        >\n            {children}\n        </As>\n    );\n}\n\n/**\n * shows its content in a softened version of the theme color of the accent foreground\n * @remarks\n * Allows for any as=‹htmlTag› to be used instead of the default <span> tag.\n * \n * Add a className to provide additional style.\n * \n * Expects tailwind.\n * @public\n */\nexport function Softlight(props: {\n    as?: keyof JSX.IntrinsicElements;\n    className?: string;\n    children: React.ReactNode;\n}) {\n    const { as = \"span\", children, className = \"\" } = props;\n    const As = as as keyof JSX.IntrinsicElements;\n\n    return (\n        <As className={`${className} font-normal opacity-50`}>{children}</As>\n    );\n}\n","import type {\n    ResolveablePromise,\n    TxDescription,\n    TxSubmissionTracker,\n    StellarTxnContext,\n} from \"@donecollectively/stellar-contracts\"\nimport {\n    BatchSubmitController,\n    dumpAny,\n} from \"@donecollectively/stellar-contracts\"\nimport type { Tx } from \"@helios-lang/ledger\"\nimport { decodeTx } from \"@helios-lang/ledger\"\nimport * as React from \"react\"\nimport {\n    ActionButton,\n    Highlight,\n    Lowlight,\n    Softlight,\n    DashboardRow,\n    DashboardHighlights,\n    DashHighlightItem,\n} from \"./DashboardTemplate.js\"\n\n/**\n * Shows a master/detail view of the tx batch\n * @remarks\n * Includes a list of txns on the left\n * \n * Shows the details of the selected txn on the right\n * \n * Shows a summary of the batch status at the top\n * @public\n */\nexport function TxBatchViewer({\n    batch,\n    initialId,\n}: {\n    batch: BatchSubmitController\n    initialId?: string\n}) {\n    const [selectedId, setSelectedId] = React.useState<string | undefined>(\n        initialId\n    )\n    const [selectedTx, setSelectedTx] = React.useState<Tx | undefined>()\n    const [txMgr, setTxMgr] = React.useState<TxSubmissionTracker | undefined>()\n    const [gen, setGen] = React.useState(0)\n\n    const renderNow = React.useMemo(() => () => setGen((g) => g + 1), [])\n\n    React.useEffect(() => {\n        if (!selectedId) return\n        const tx = batch.$txStates[selectedId]\n        if (!tx) return\n        setTxMgr(tx)\n    }, [selectedId, batch])\n\n    React.useEffect(() => {\n        if (!txMgr?.txd.tx) return\n        const tx = txMgr.txd.tx\n        if (typeof tx === \"string\") {\n            setSelectedTx(decodeTx(tx))\n        } else {\n            setSelectedTx(tx)\n        }\n    }, [txMgr])\n\n    React.useEffect(() => {\n        batch.$txChanges.on(\"txAdded\", renderNow)\n        batch.$txChanges.on(\"statusUpdate\", renderNow)\n        return () => {\n            batch.$txChanges.off(\"txAdded\", renderNow)\n            batch.$txChanges.off(\"statusUpdate\", renderNow)\n        }\n    }, [batch, renderNow])\n\n    return (\n        <div className=\"border-1 border-(--color-card) flex w-full flex-row gap-2 rounded-md drop-shadow-md\">\n            <ShowTxList\n                batch={batch}\n                initialId={initialId}\n                renderNow={renderNow}\n                selectedId={selectedId}\n                setSelectedId={setSelectedId}\n            />\n            {(() => {\n                const indicateSelectedTx = selectedId\n                    ? \"border-s-4 border-s-brand-orange/20\"\n                    : \"\"\n\n                const cardStyle =\n                    \"bg-(--color-card) text-(--color-card-foreground)\"\n\n                if (!selectedId) {\n                    return (\n                        <div\n                            className={`${indicateSelectedTx} ${cardStyle} w-9/12 rounded-md border border-white/10 p-2`}\n                        >\n                            <Softlight>\n                                Select a transaction to view details\n                            </Softlight>\n                        </div>\n                    )\n                }\n\n                if (!txMgr) {\n                    return (\n                        <div\n                            className={`${indicateSelectedTx} ${cardStyle} w-9/12 rounded-md border border-white/10 p-2`}\n                        >\n                            <Softlight>\n                                Loading transaction details...\n                            </Softlight>\n                        </div>\n                    )\n                }\n\n                return (\n                    <div\n                        className={`${indicateSelectedTx} z-3 ${cardStyle} w-9/12 rounded-md border border-white/10 p-2`}\n                    >\n                        <ShowTxDescription txTracker={txMgr} tx={selectedTx} />\n                    </div>\n                )\n            })()}\n        </div>\n    )\n}\n\nfunction ShowTxList({\n    batch,\n    initialId,\n    renderNow,\n    selectedId,\n    setSelectedId,\n}: {\n    batch: BatchSubmitController\n    initialId?: string\n    renderNow: () => void\n    selectedId: string | undefined\n    setSelectedId: (id: string | undefined) => void\n}) {\n    const { $allTxns } = batch\n    const byId = {} as Record<string, TxDescription<any, any>>\n\n    return (\n        <div className=\"z-4 flex w-3/12 flex-col gap-0\">\n            {batch.$allTxns.map((txTracker) => {\n                return (\n                    <ShowSingleTx\n                        key={txTracker.txd.id}\n                        {...{ txTracker, selectedId, setSelectedId }}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nconst ShowSingleTx = (props: {\n    txTracker: TxSubmissionTracker\n    selectedId?: string\n    setSelectedId: (id: string | undefined) => void\n}) => {\n    const { txTracker, selectedId, setSelectedId } = props\n    const { $state, txSubmitters, txd } = txTracker\n    let {\n        id,\n        txName,\n        description,\n        tcx,\n        tx,\n        moreInfo,\n        depth = 0,\n        parentId,\n    } = txd\n    if (!txName) {\n        txName = description\n        description = \"\"\n    }\n    const submitterStates = Object.values(txSubmitters)\n        .map((s) => s.$$statusSummary)\n        .join(\", \")\n\n    const isCurrent = id == selectedId\n    const countNested = txd.tcx?.addlTxns\n        ? Object.keys(txd.tcx.addlTxns).length\n        : 0\n\n    // Calculate depth for indentation\n    const XindentClass = [\"pl-0\", \"pl-2\", \"pl-4\", \"pl-6\", \"pl-8\", \"pl-10\"][\n        depth\n    ]\n\n    const indentClass = [\n        \"border-s-0\",\n        \"border-s-6\",\n        \"border-s-12\",\n        \"border-s-18\",\n        \"border-s-24\",\n    ][depth]\n\n    const innerMarginClass = [\"ml-0\", \"ml-1\", \"ml-3\", \"ml-5\", \"ml-7\", \"ml-9\"][\n        depth\n    ]\n    const outerMarginClass = depth ? \"ml-2\" : \"ml-0\"\n\n    // Visual indicator for nested transactions\n    const nestedIndicator = depth\n        ? `${indentClass} border-(--color-accent-foreground)/30`\n        : \"\"\n\n    // <Softlight>{submitterStates}</Softlight>\n    // {countNested > 0 && (\n    //     <Lowlight>\n    //         {countNested} nested txns\n    //     </Lowlight>\n    // )}\n    const indicateSelectedTx = isCurrent\n        ? \"text-bold rounded-md border-e-0 -mr-5 pe-6 z-3\"\n        : \"cursor-pointer opacity-55\"\n\n    return (\n        <div\n            key={id}\n            onClick={isCurrent ? undefined : () => setSelectedId(id)}\n            className={`${outerMarginClass}`}\n            // className={`${indentClass}`}\n        >\n            <div className={`${nestedIndicator} pl-2`}>\n                <div\n                    key={id}\n                    title={txd.txName || txd.description}\n                    // button={isCurrent ? undefined : \"Select\"}\n                    className={`${innerMarginClass} bg-(--color-card) text-(--color-card-foreground) flex min-h-[0.66in] flex-row rounded-md border border-white/10 p-2 text-sm ${indicateSelectedTx}`}\n                >\n                    <div className={`w-8/12`}>\n                        {txName ? (\n                            <>\n                                <b>{txName}</b>\n                                <br />\n                                <div className=\"ml-2 opacity-50\">\n                                    {description}\n                                </div>\n                                <div className=\"ml-2 opacity-50\">\n                                    {submitterStates}\n                                </div>\n                            </>\n                        ) : (\n                            description\n                        )}\n                    </div>\n\n                    <div className={`w-1/12 text-right`}>\n                        {$state == \"building\" && (\n                            <>\n                                <svg\n                                    aria-hidden=\"true\"\n                                    className=\"h-5 w-5 animate-spin fill-blue-600 text-gray-200 dark:text-gray-600\"\n                                    viewBox=\"0 0 100 101\"\n                                    fill=\"none\"\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                >\n                                    <path\n                                        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n                                        fill=\"currentColor\"\n                                    />\n                                    <path\n                                        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n                                        fill=\"currentFill\"\n                                    />\n                                </svg>\n                                <span className=\"sr-only\">Loading...</span>\n                            </>\n                        )}\n                    </div>\n                    <div className={`w-3/12 text-right`}>\n                        {$state}\n                        <br />\n                        {!!countNested ? <>+{countNested} nested</> : \"\"}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction ShowTxDescription({\n    txTracker,\n    tx,\n}: {\n    txTracker: TxSubmissionTracker\n    tx?: Tx\n}) {\n    const { $state, txSubmitters, id, txd } = txTracker\n    const { tcx, txCborHex, signedTxCborHex } = txd\n\n    // Add tab state management\n    const availableTabs = {\n        transcript: true,\n        structure: true,\n        diagnostics: true,\n    }\n    const [tab, setTab] =\n        React.useState<keyof typeof availableTabs>(\"transcript\")\n\n    // Add state for signed transaction\n    const [signedTx, setSignedTx] = React.useState<Tx | undefined>()\n\n    // Decode signed transaction when available\n    React.useEffect(() => {\n        if (!signedTxCborHex) return\n\n        try {\n            const decodedTx = decodeTx(signedTxCborHex)\n            setSignedTx(decodedTx)\n        } catch (e) {\n            console.error(\"Failed to decode signed transaction:\", e)\n        }\n    }, [signedTxCborHex])\n\n    return (\n        <div className=\"flex flex-col gap-2 \">\n            <div className=\"flex flex-row justify-between\">\n                {/* Sign & Submit button */}\n                <div className=\"basis-1/9\">\n                    {tx && txTracker && tcx && !tcx.isFacade && (\n                        <ActionButton\n                            className=\"mt-2 self-start\"\n                            onClick={() => txTracker.$signAndSubmit?.()}\n                        >\n                            Sign&nbsp;&amp;&nbsp;Submit\n                        </ActionButton>\n                    )}\n                </div>\n                <div className=\"ml-4 flex-grow self-start\">\n                    <Highlight className=\"text-xl\">\n                        {txd.txName || txd.description}\n                    </Highlight>\n                    {txd.txName && txd.description && (\n                        <div className=\"text-md display-inline ml-4 opacity-50\">\n                            {txd.description}\n                        </div>\n                    )}\n                    {txd.moreInfo && (\n                        <div className=\"text-brand-orange/66 ml-8 text-sm italic\">\n                            {txd.moreInfo}\n                        </div>\n                    )}\n                </div>\n                <div>\n                    <Lowlight className=\"float-right\">{$state}</Lowlight>\n                    <br />\n                    <div id=\"tab-selector\">\n                        {Object.keys(availableTabs).map((key) => {\n                            const isSelected = key === tab\n                            const selectedTabClass = isSelected\n                                ? \"rounded-t-md bg-(--color-card) text-(--color-card-foreground) border-x-1 border-t-3 border-(--color-border)/50\"\n                                : \" rounded-t-md bg-(--color-secondary)/70 text-(--color-secondary-foreground)\"\n                            return (\n                                <button\n                                    key={key}\n                                    className={`${selectedTabClass} ml-1 px-2 py-1 text-sm`}\n                                    onClick={() =>\n                                        setTab(\n                                            key as keyof typeof availableTabs\n                                        )\n                                    }\n                                >\n                                    {key}\n                                </button>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n\n            {/* Tab content */}\n            <div className=\"-mt-2 border-t border-white/10 pt-1\">\n                {/* Transcript tab */}\n                {tab === \"transcript\" && (\n                    <>\n                        <div className=\"flex flex-col gap-1\">\n                            {Object.entries(txSubmitters).map(\n                                ([key, submitter]) => (\n                                    <div\n                                        key={key}\n                                        className=\"flex flex-row justify-between rounded-md border border-white/10 p-2\"\n                                    >\n                                        <div className=\"w-1/3\">\n                                            <h4 className=\"text-sm font-semibold\">\n                                                {key}\n                                            </h4>\n                                        </div>\n                                        <div className=\"w-2/3\">\n                                            <Lowlight>{`${submitter.$$statusSummary.status} - ${submitter.$$statusSummary.currentActivity}`}</Lowlight>\n                                            <div className=\"text-xs\">\n                                                <pre>\n                                                    {JSON.stringify(\n                                                        submitter.$$statusSummary,\n                                                        null,\n                                                        2\n                                                    )}\n                                                </pre>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            )}\n                        </div>\n\n                        {tcx?.logger?.formattedHistory && (\n                            <code>\n                                <pre className=\"mt-4 max-h-[90vh] overflow-auto bg-neutral-200 text-xs text-black\">\n                                    {tcx.logger.formattedHistory?.map((line1) =>\n                                        line1?.split(\"\\n\").map((line2) => {\n                                            let prefix:\n                                                    | React.ReactNode\n                                                    | string = <></>,\n                                                rest: React.ReactNode | string =\n                                                    <></>\n                                            /*.replaceAll(\"\", \"<span className=font-formal\")*/\n                                            ;[prefix, rest] = line2.split(\n                                                \"❗\",\n                                                2\n                                            )\n                                            if (rest) {\n                                                let size = \"\"\n                                                if (\n                                                    (rest as string).match(\n                                                        /^\\s+\\.\\.\\./\n                                                    )\n                                                ) {\n                                                    rest = (rest as string).replace(\n                                                        /^\\s+\\.\\.\\.\\s+/,\n                                                        \"…\"\n                                                    )\n                                                    size = \"text-[1.35em] -ml-2\"\n                                                }\n                                                rest = (\n                                                    <span\n                                                        className={`text-[1.6em] font-formal -ml-5 font-bold`}\n                                                    >\n                                                        ❗\n                                                        <span\n                                                            className={`${size}`}\n                                                        >\n                                                            {rest}\n                                                        </span>\n                                                    </span>\n                                                )\n                                            } else {\n                                                prefix = (\n                                                    <span className=\"text-gray-600\">\n                                                        {prefix}\n                                                    </span>\n                                                )\n                                            }\n                                            return (\n                                                <>\n                                                    {prefix} {rest}\n                                                    <br />{\" \"}\n                                                </>\n                                            )\n                                        })\n                                    )}\n                                </pre>\n                            </code>\n                        )}\n                    </>\n                )}\n\n                {/* Structure tab */}\n                {tab === \"structure\" && tx && (\n                    <>\n                        <h4 className=\"text-sm\">\n                            Unsigned Tx:{\" \"}\n                            {tx.id?.()?.toString?.() || \"Unknown ID\"}\n                        </h4>\n\n                        <code className=\"text-sm\">\n                            <pre className=\"font-formal text-[1.30em]/4.5 tracking-wide max-h-[80vh] overflow-auto\">\n                                {dumpAny(tx, txTracker.setup.networkParams)}\n                            </pre>\n                            {txCborHex && (\n                                <div className=\"mt-2 text-xs\">\n                                    CBOR Hex:{\" \"}\n                                    <span className=\"break-all\">\n                                        {txCborHex}\n                                    </span>\n                                </div>\n                            )}\n                        </code>\n                    </>\n                )}\n\n                {/* Diagnostics tab */}\n                {tab === \"diagnostics\" && (\n                    <>\n                        {signedTx ? (\n                            <>\n                                <h3>Signed Tx</h3>\n                                <h4>\n                                    {signedTx.id?.()?.toString?.() ||\n                                        \"Unknown ID\"}\n                                </h4>\n\n                                <code className=\"text-xs\">\n                                    <pre className=\"max-h-64 overflow-auto\">\n                                        {dumpAny(\n                                            signedTx,\n                                            txTracker.setup.networkParams\n                                        )}\n                                    </pre>\n                                    {signedTxCborHex ? (\n                                        <div className=\"mt-2\">\n                                            CBOR Hex:{\" \"}\n                                            <span className=\"break-all\">\n                                                {signedTxCborHex.length / 2}{\" \"}\n                                                bytes: <br />\n                                                {signedTxCborHex}\n                                            </span>\n                                        </div>\n                                    ) : (\n                                        <div>‹not yet signed›</div>\n                                    )}\n                                </code>\n                            </>\n                        ) : (\n                            <div>Not yet signed</div>\n                        )}\n                    </>\n                )}\n            </div>\n\n            {/* Nested Transactions section (shown in all tabs) */}\n            {txd.tcx?.addlTxns && Object.keys(txd.tcx.addlTxns).length > 0 && (\n                <div className=\"mt-4 flex flex-col gap-1 border-t border-white/10 pt-4\">\n                    <Softlight>Nested Transactions:</Softlight>\n                    {Object.entries(txd.tcx.addlTxns).map(([key, tx]) => (\n                        <div\n                            key={key}\n                            className=\"flex flex-row justify-between\"\n                        >\n                            <Lowlight>{key}</Lowlight>\n                            <Lowlight>{tx.id}</Lowlight>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    )\n}\n","import { BatchSubmitController } from \"@donecollectively/stellar-contracts\";\nimport React from \"react\";\nimport { useCapoDappProvider } from \"./CapoDappProvider.js\";\nimport { TxBatchViewer } from \"./TxBatchViewer.js\";\n\nexport function TxBatchUI() {\n    const provider = useCapoDappProvider();\n    const capo = provider?.capo;\n\n    const [currentBatch, setTxBatch] = React.useState<BatchSubmitController>();\n    const [initialId, setInitialId] = React.useState<string | undefined>(\n        undefined\n    );\n\n    React.useEffect(\n        function monitorTxBatcher() {\n            if (!capo) return;\n            const { txBatcher } = capo.setup;\n\n            txBatcher.$notifier.on(\"rotated\", (batch) => {\n                console.log(\"batch rotated\", batch);\n                const txns = batch.$allTxns;\n                if (txns.length) {\n                    setInitialId(txns[0].id);\n                } else {\n                    batch.$txChanges.once(\"txAdded\", (txTracker) => {\n                        console.log(\"tx added\", txTracker);\n                        const { id } = txTracker;\n                        setInitialId(id);\n                    });\n                }\n                setTxBatch(batch);\n            });\n        },\n        [capo, capo?.setup.txBatcher]\n    );\n\n    const hasBatch = !!currentBatch && !!currentBatch?.$allTxns.length;\n\n    if (!hasBatch) return null;\n    return (\n        <div className=\"z-100 bg-background/66 absolute top-10 right-4 w-[80vw] rounded-lg border border-white/10 backdrop-blur-md\">\n            <TxBatchViewer batch={currentBatch} {...{ initialId }} />\n        </div>\n    );\n}\n","\"use client\";\nimport React, {\n    type ChangeEventHandler,\n    type MouseEventHandler,\n    Component,\n    Fragment,\n} from \"react\";\nimport {\n    makeHydraClient,\n    makeRandomRootPrivateKey,\n    makeRootPrivateKey,\n    type BlockfrostV0Client,\n    type CardanoClient,\n    type Cip30FullHandle,\n    type Cip30Wallet,\n    type HydraClientOptions,\n    type SimpleWallet,\n    type TxChainBuilder,\n    type Wallet,\n    type WalletHelper,\n} from \"@helios-lang/tx-utils\";\nimport type { NetworkParams, Tx, TxInput } from \"@helios-lang/ledger\";\nimport {\n    makeBlockfrostV0Client,\n    makeCip30Wallet,\n    makeRandomSimpleWallet,\n    makeSimpleWallet,\n    makeTxChainBuilder,\n    makeWalletHelper,\n} from \"@helios-lang/tx-utils\";\n\nimport {\n    TransactionSubmission,\n    type Connection,\n    type ConnectionConfig,\n    createInteractionContext,\n    createTransactionSubmissionClient,\n    createLedgerStateQueryClient,\n} from \"@cardano-ogmios/client\";\n\nimport type {\n    Capo,\n    CapoConfig,\n    ConfigFor,\n    MinimalCharterDataArgs,\n    namedSubmitters,\n    simpleOgmiosConn,\n    StellarFactoryArgs,\n    stellarSubclass,\n    submitterName,\n    TxBatcherOptions,\n    TxDescription,\n} from \"@donecollectively/stellar-contracts\";\n\nimport {\n    GenericSigner,\n    OgmiosTxSubmitter,\n    StellarTxnContext,\n    TxBatcher,\n    UutName,\n    dumpAny,\n    parseCapoJSONConfig,\n} from \"@donecollectively/stellar-contracts\";\n\nimport { Button } from \"./Button.js\";\nimport { InPortal } from \"./inPortal.js\";\nimport { Progress } from \"./Progress.js\";\nimport { ClientSideOnly } from \"./ClientSideOnly.js\";\nimport { TxBatchUI } from \"./TxBatchUI.js\";\nimport { environment } from \"../environment.js\";\nimport { bytesToHex, hexToBytes } from \"@helios-lang/codec-utils\";\n\n// Making your own dApp using Stellar Contracts?  Here's how to get started:\n//   First, use the \"null\" config here.\n//   Next, charter your Capo using the guide in the README file.\n//   Do any development work you'd like to do; incremental configurations\n//     ... are stored in localStorage.\n//   When you're ready, paste the configuration (see \"deploy this!\" in the console logs)\n//     ... in place of the non-null config structure below.\n//\n//\nconst ourCapoConfig = null;\n\n//!!! comment out the following block while using the \"null\" config.\n// const ourCapoConfig = {\n//     mph: { bytes: \"1caa8526c25066237f4d1e5e271790fa7de0bc286c1b39ccac076f92\" },\n//     rev: \"1\",\n//     isDev: true,\n//     seedTxn: {\n//         bytes: \"ebea3b3fe691b71fa254682e9232ab14540ea694c13945ac41d32c6487c1e21e\",\n//     },\n//     seedIndex: \"5\",\n//     rootCapoScriptHash: {\n//         bytes: \"d3b181cdf036c70178ae4763a0a50f2f829cf8a50abdc59c41958d17\",\n//     },\n// };\n\n/**\n * @public\n */\nexport type stateUpdaterFunc = CapoDAppProvider<Capo<any>>[\"updateStatus\"];\n/**\n * @public\n */\nexport type errorFunc = CapoDAppProvider<Capo<any>>[\"reportError\"];\n/**\n * @public\n */\nexport type renderFunc = () => JSX.Element | JSX.Element[] | string | void;\n\nconst networkNames = {\n    0: \"preprod\",\n    1: \"mainnet\",\n    2: \"preview\",\n};\n\nlet mountCount = 0;\n\n// const bfKeys = {\n//     mainnet: \"mainnetvtlJdtsOo7nNwf58Az9F5HRDGCIkxujZ\",\n//     preprod: \"preprodCwAM4ABR6SowGsmURORvDJvQTyWmCHJP\",\n// };\n\n/**\n * @public\n */\nexport type UpdateStateProps = Partial<\n    Omit<CapoDappProviderState<any>, \"status\">\n>;\n\n/**\n * @public\n */\nexport type UpdateStatusProps<T extends UserActionMap<any>> = Omit<\n    CapoDappStatus<T>,\n    \"message\" | \"nextAction\"\n> & {\n    nextAction?: string & keyof T;\n};\n\n/**\n * @public\n */\nexport type propsType<CapoType extends Capo<any>> = {\n    capoClass: stellarSubclass<CapoType>;\n    targetNetwork: \"preview\" | \"preprod\" | \"mainnet\";\n    dAppName?: string;\n    supportedWallets?: string[];\n    hydra?: boolean | Omit<HydraClientOptions, \"isForMainnet\">;\n    blockfrostKey: string;\n    ogmiosConnections?: Record<submitterName, simpleOgmiosConn>;\n    otherSubmitters?: namedSubmitters;\n    /**\n     * indicates DOM id's in which the status, details and wallet info should be displayed\n     * @remarks\n     * If set to \"headless\", the provider will not render any UI elements.\n     *\n     * If unset, the provider will render status, userDetails and walletInfo in dom elements\n     * of those same names.\n     *\n     * If these portals are not present, placeholder portals will be created and warnings\n     * will be logged to the console.\n     */\n    uiPortals?:\n        | \"headless\"\n        | {\n              capoStatus: string;\n              capoUserDetails: string;\n              txBatchUI: string;\n          };\n\n    /**\n     * Sets initial-page-layout rendering time (in milliseconds) before\n     * the provider will create placeholder portals for capoStatus and capoUserDetails\n     * @remarks\n     * Not used if `uiPortals=` is \"headless\".  If it is explicitly set with portal-ids,\n     * the delay will repeated (up to 10 times) until the portals are found.\n     *\n     * Default is 150ms - should be enough for most apps\n     */\n    portalDelay?: number;\n    onNetwork?: (network: CardanoClient) => void;\n    onUserInfo?: (userInfo: DappUserInfo) => void;\n    onStatusChange?: (status: CapoDappStatus<any>) => void;\n    onSubmitError?: (txd: TxDescription<any, \"built\">) => void;\n    // provider.mkCapoSiteCtx();onContextChange\n\n    onContextChange?: (provider?: CapoDAppProvider<CapoType, any>) => void;\n    onWalletChange?: (wallet: Wallet | undefined) => void;\n    children: React.ReactNode;\n    // ??current-transaction display/state-change hook\n};\n\n/**\n * @remarks\n * @public\n */\nexport type CapoDappProviderState<CapoType extends Capo<any>> = {\n    capo?: CapoType;\n    networkParams?: NetworkParams;\n\n    status: CapoDappStatus<any>;\n    userInfo: DappUserInfo;\n\n    walletHelper?: WalletHelper<Wallet>;\n    walletUtxos?: TxInput[];\n    txBatcher?: TxBatcher;\n    // showDetail?: string;\n    tcx?: StellarTxnContext<any>;\n    bf?: BlockfrostV0Client;\n    dAppName?: string;\n};\n\n/**\n * @public\n */\nexport type SetWalletDetails = {\n    walletName: string;\n    simpleWallet?: SimpleWallet;\n    cip30WalletHandle?: Cip30FullHandle;\n    autoNext?: boolean;\n};\n\n/**\n * A react component providing services for a dApp using Stellar Contracts\n * @remarks\n * The dApp provider helps dApp developers by managing the lifecycle\n * of wallet connections, user roles, and transaction-processing.\n *\n * It provides default UI elements for status messages and error reporting,\n * while allowing developers to customize the user experience with their own\n * overridden presentation.\n *\n * It supports useState()-compatible state updates via its `onStatusChange=`,\n * `onUserInfo=`, and `onSetCapo=` props.  Alternatively, it can be subclassed\n * and its default renderers overridden for another style of customizing.\n *\n * use the `uiPortals=` prop to provide dom id's for each type of UI element, if you want \n * to place or style them in a specific location in your layout.  Otherwise, you can simply \n * place (styled or unstyled) <div id=\"{capoStatus, capoUserDetails, txBatchUI}\"> elements in your layout,\n*  and the provider's version of those elements will be rendered into your portals.\n* \n* We recommend providing color themes matching your app's branding; all the provided \n* UI elements are styled with tailwind classes that reference those theme colors.\n* \n* @public\n */\nexport class CapoDAppProvider<\n    CapoType extends Capo<any>,\n    UserActions extends UserActionMap<any> = BaseUserActionMap\n> extends Component<propsType<CapoType>, CapoDappProviderState<CapoType>> {\n    bf: BlockfrostV0Client;\n    // bfFast: TxChainBuilder & BlockfrostV0Client;\n    capoClass: stellarSubclass<CapoType>;\n    static notProse = true;\n    i: number = 0;\n    didWarnDappName = false;\n    get dAppName() {\n        if (!this.props.dAppName && !this.didWarnDappName) {\n            console.warn(\n                \"using generic dAppName.  Override it in props `dAppName=`, if you wish\"\n            );\n            this.didWarnDappName = true;\n            return \"dApp contract\";\n        }\n        return this.props.dAppName;\n    }\n    constructor(props: propsType<CapoType>) {\n        super(props);\n        this.capoClass = props.capoClass;\n        this.i = mountCount += 1;\n        this.bootstrapCapo = this.bootstrapCapo.bind(this);\n        this.connectCapo = this.connectCapo.bind(this);\n\n        this.updateStatus = this.updateStatus.bind(this);\n        this.reportError = this.reportError.bind(this);\n        this.renderRoleInfo = this.renderRoleInfo.bind(this);\n        this.renderActionButton = this.renderActionButton.bind(this);\n        this.renderWalletInfo = this.renderWalletInfo.bind(this);\n        this.renderProgressBar = this.renderProgressBar.bind(this);\n        this.renderPersistentMessage = this.renderPersistentMessage.bind(this);\n        this.renderNotification = this.renderNotification.bind(this);\n        this.renderErrorStatus = this.renderErrorStatus.bind(this);\n\n        this.connectWallet = this.connectWallet.bind(this);\n        this.bf = makeBlockfrostV0Client(\n            props.targetNetwork,\n            props.blockfrostKey\n        );\n        this.state = {\n            status: {\n                message: `... connecting to ${this.dAppName} ...`,\n                keepOnscreen: true,\n\n                developerGuidance:\n                    \"... discovering the on-chain status e.g. from blockfrost\",\n            },\n            userInfo: {\n                roles: [],\n                foundNetworkName: \"\",\n                connectingWallet: false,\n            },\n            txBatcher: undefined,\n            bf: this.bf,\n            dAppName: this.dAppName,\n        };\n        // this.bfFast = makeTxChainBuilder(this.bf);\n    }\n\n    componentDidUpdate(\n        prevProps: propsType<CapoType>,\n        prevState: CapoDappProviderState<CapoType>\n    ) {\n        if (prevProps.dAppName !== this.props.dAppName) {\n            this.setState({ dAppName: this.dAppName });\n        }\n        const { capo, userInfo, status } = this.state;\n        if (this.props.onUserInfo && userInfo !== prevState.userInfo) {\n            this.props.onUserInfo(userInfo);\n        }\n        if (this.props.onStatusChange && status !== prevState.status) {\n            this.props.onStatusChange(status);\n        }\n        if (this.props.onContextChange && capo !== prevState.capo) {\n            this.props.onContextChange(this);\n        }\n        if (\n            this.props.onWalletChange &&\n            userInfo.wallet !== prevState.userInfo.wallet\n        ) {\n            this.props.onWalletChange(userInfo.wallet);\n        }\n    }\n\n    supportedWallets() {\n        return [\"eternl\", \"zwallet\"];\n    }\n\n    isWalletSupported(wallet: string) {\n        const supported =\n            this.props.supportedWallets ?? this.supportedWallets();\n\n        return supported.includes(wallet);\n    }\n\n    walletIsAvailable(wallet: string) {\n        if (wallet === \"zwallet\") {\n            return true;\n        }\n        return !!(window as any).cardano?.[wallet];\n    }\n\n    render() {\n        let {\n            tcx,\n            capo,\n            walletUtxos,\n            walletHelper,\n            userInfo: { wallet, connectingWallet, roles, memberUut: collabUut },\n            status: {\n                moreInstructions,\n                message,\n                progressBar,\n                progressPercent,\n                keepOnscreen,\n                clearAfter,\n                isError,\n            },\n        } = this.state;\n        const { children = <></>, uiPortals, portalDelay } = this.props;\n\n        if (\"headless\" == uiPortals) {\n            return (\n                <CapoDappProviderContext.Provider value={this}>\n                    {children}\n                </CapoDappProviderContext.Provider>\n            );\n        }\n\n        let results: React.ReactNode = children;\n        // if (isError) {\n        //     results = <>\n        //         {/* <div>Fix the problem before continuing.</div> */}\n        //         {children}\n        //     </>;\n        // }\n\n        // const loading = <Progress key={status}>loading</Progress>;\n        const walletInfo = this.renderWalletInfo();\n        const showProgressBar = !!progressBar;\n\n        const roleInfo = this.renderRoleInfo();\n        const capoInfo =\n            \"development\" == process.env.NODE_ENV && capo?._compiledScript\n                ? <div className=\"inline-block flex flex-row\">\n                    {/* show a chip with the capo address, short until expanded on hover */}\n                    {/* leaves space for a hat icon on its left */}\n                    <span\n                        className=\"mb-0 pl-2 text-black overflow-hidden max-w-48 hover:max-w-full inline-block rounded border border-slate-500 bg-blue-500 px-2 py-0 text-sm shadow-none outline-none hover:cursor-text\"\n                    >\n                        Capo&nbsp;{capo.address.toString()}\n                    </span>&nbsp;\n                    {roleInfo}\n                </div>\n                : \"\";\n        {\n            capoInfo ? \"address: \" + capoInfo : \"\";\n        }\n\n        const portalFallbackMessage = {\n            fallbackHelp:\n                \"CapoDAppProvider: set the uiPortals= prop and/or provide the expected portal elements in the DOM\",\n        };\n        // const inviteLink = roles?.includes(\"admin\") ? this.inviteButton() : \"\";\n        const userDetails = (\n            <InPortal\n                key=\"capoUserDetails\"\n                domId={uiPortals?.capoUserDetails ?? \"capoUserDetails\"}\n                maxRetries={uiPortals ? 10 : 1}\n                fallbackLocation=\"top\"\n                {...{ delay: portalDelay, portalFallbackMessage }}\n            >\n                 {capoInfo} \n                {walletInfo}\n                {/* {inviteLink} */}\n            </InPortal>\n        );\n\n        const txBatchUI = (\n            <InPortal\n                key=\"txBatchUI\"\n                domId={uiPortals?.txBatchUI ?? \"txBatchUI\"}\n                fallbackLocation=\"top\"\n            >\n                <TxBatchUI />\n            </InPortal>\n        );\n\n        const progressLabel = \"string\" == typeof progressBar ? progressBar : \"\";\n\n        const renderedStatus =\n            (message && (\n                <InPortal\n                    key=\"capoStatus\"\n                    domId={uiPortals?.capoStatus ?? \"capoStatus\"}\n                    fallbackLocation=\"bottom\"\n                    {...{ delay: portalDelay, portalFallbackMessage }}\n                >\n                    <div className=\"z-40 opacity-60\">\n                        {showProgressBar\n                            ? this.renderProgressBar(\n                                  progressLabel,\n                                  progressPercent\n                              )\n                            : \"\"}\n                        {isError\n                            ? this.renderErrorStatus()\n                            : keepOnscreen\n                            ? this.renderPersistentMessage()\n                            : this.renderNotification()}\n                    </div>\n                </InPortal>\n            )) ||\n            \"\";\n\n        return (\n            <ClientSideOnly\n                children={\n                    <CapoDappProviderContext.Provider value={this}>\n                        <div>\n                            {renderedStatus}\n                            {userDetails}\n                            {txBatchUI}\n                            {results as any}\n                        </div>\n                    </CapoDappProviderContext.Provider>\n                }\n            />\n        );\n    }\n\n    /**\n     * Renders a progress bar with a label and optional percentage\n     * @remarks\n     * The progress bar will be indeterminate if no percentage is provided,\n     * showing an indicator of activity without a specific completion percentage.\n     */\n    renderProgressBar(\n        progressLabel: string,\n        progressPercent?: number\n    ): React.ReactNode {\n        const pp: any = progressPercent ? { progressPercent } : {};\n\n        return (\n            <Progress key=\"capoProgress\" {...pp}>\n                {progressLabel}\n            </Progress>\n        );\n    }\n\n    /**\n     * Renders a message when the current status indicates that the\n     * user should take some action before continuing, or that the material\n     * should persist onscreen.\n     * @remarks\n     *\n     * Customizers may override this method to provide a different presentation\n     * than the default.\n     *\n     * The resulting React elements will be rendered using the InPortal component\n     * to direct the presentation into the right area of your application layout.\n     *\n     * The `message` and `moreInstructions` fields SHOULD normally be displayed\n     * for the user.\n     *\n     * Customizers SHOULD always call \\{this._renderNextAction\\(\\)\\}, which will render\n     * a button for any next recommended action (if applicable) for the user to take.\n     * To customize the action button, override `renderActionButton()`.\n     *\n     * ### More about message notifications\n     *\n     * Depending on the details of the current status (the `keepOnscreen` flag),\n     * either this method or renderNotification() will be called to display the status\n     * message. Developers may override one, the other, or both to customize the\n     * presentation of the messages.\n     *\n     * If the `developerGuidance` field is present for any given message, it SHOULD NOT\n     * be displayed in the UI, but can help developers determine how they may guide the\n     * user.  In a `development` environment, you MAY wish to show the `developerGuidance`\n     * onscreen as well.\n     *\n     */\n    renderPersistentMessage(): React.ReactNode {\n        const {\n            status: { moreInstructions, message, isError },\n        } = this.state;\n        const statusClass =\n            //  !isError\n            //     ? \"font-bold bg-red-800 text-orange-200\" :\n            \"bg-blue-300 border-blue-500 text-black font-bold dark:bg-blue-900 dark:text-blue-300\";\n        return (\n            <div\n                className={`flex flex-row w-full status min-h-10 relative left-0 top-0 mb-4 rounded border p-1 ${statusClass}`}\n                key=\"persistentMessage\"\n                role=\"banner\"\n            >\n                <div className=\"\">\n                    <span key=\"status\" className=\"block sm:inline\">\n                        {message}\n                    </span>\n                    <div className=\"text-sm text-gray-700 dark:text-gray-300 italic\">\n                        {moreInstructions}\n                    </div>\n                </div>\n\n                <div className=\"mr-2 flex-grow\">{this.renderNextAction()}</div>\n            </div>\n        );\n    }\n\n    /**\n     * Renders a message when the current status indicates that the\n     * the message is transient and should be cleared after a short time.\n     * @remarks\n     *\n     * By default, this method presents using the renderPersistentMessage() method,\n     * though customizers may override this method to provide a different presentation.\n     *\n     * The provider will automatically update the state to clear the status message\n     * after this indicated `clearAfter` time has elapsed.  Customizers using tools\n     * that spawn their own notification elements (such as \"toast\" notifications)\n     * should feed the `clearAfter` value into their notification system, and may\n     * need to ensure a correct response the message-clearing update (if you get\n     * empty toast, you didn't do it right : ).\n     *\n     * Overriding only renderPersistentMessage() will affect both transient and persistent\n     * messages.  Overriding only renderNotification() will affect only transient messages.\n     *\n     * ### More about message notifications\n     *\n     * Depending on the details of the current status (the `keepOnscreen` flag),\n     * either this method or renderPersistentMessage() will be called to display\n     * the status message.  Developers may override one, the other, or both to\n     * customize the presentation of the messages.\n     *\n     * The resulting React elements will be rendered using the InPortal component\n     * to direct the presentation into the 'capoStatus' portal element in your application layout.\n     */\n    renderNotification(): React.ReactNode {\n        return this.renderPersistentMessage();\n    }\n\n    /**\n     * Renders a message when the current status indicates that an error has occurred\n     * @remarks\n     * Customizers may override this method to provide a different presentation for this case.\n     *\n     * This method SHOULD present the `message` and `moreInstructions` fields to the\n     * user, indicate a clear error status for visual purposes, and include `{this._renderNextAction()}`\n     * to display any recommended next action for the user to take (customize the button by overriding\n     * `renderActionButton()`).\n     *\n     * Customizers SHOULD also provide a role=\"alert\" attribute for accessibility purposes.\n     *\n     * The resulting React elements will be rendered using the InPortal component\n     * to the 'capoStatus' portal element in your application layout.\n     */\n    renderErrorStatus() {\n        const {\n            status: { moreInstructions, message },\n        } = this.state;\n        return (\n            <div\n                className=\"flex flex-row w-full error min-h-10 relative left-0 top-0 mb-4 rounded border p-1 font-bold bg-[#e7560a] text-black\"\n                role=\"alert\"\n                key=\"errorStatus\"\n            >\n                <div className=\"\">\n                    <strong className=\"font-bold\">Whoops! &nbsp;&nbsp;</strong>\n                    <span key=\"status-err\" className=\"block sm:inline\">\n                        {message!.split(\"\\n\").map((line, i) => (\n                            <React.Fragment key={`line-${i}`}>\n                                {line}\n                                <br />\n                            </React.Fragment>\n                        ))}\n                    </span>\n                    <div className=\"text-sm italic\">{moreInstructions}</div>\n                </div>\n\n                <div className=\"mr-2 flex-grow text-nowrap\">\n                    {this.renderNextAction()}\n                </div>\n            </div>\n        );\n    }\n\n    renderNextAction() {\n        const {\n            status: {\n                nextAction: {\n                    key: actionKey,\n                    label: actionMessage,\n                    trigger: actionTrigger,\n                } = {},\n            },\n        } = this.state;\n\n        if (!actionKey) return;\n        if (!actionTrigger) {\n            console.error(\"no action trigger for next action\", actionKey);\n            return;\n        }\n        return this.renderActionButton(actionKey, actionTrigger, actionMessage);\n    }\n\n    renderActionButton(\n        actionKey: string,\n        actionTrigger: MouseEventHandler<HTMLButtonElement>,\n        actionMessage?: string\n    ) {\n        return (\n            <button\n                className=\"btn float-right ml-1 rounded-md border-2 border-amber-800 bg-blue-900 p-2 text-white hover:bg-blue-600 dark:border-amber-700 dark:bg-blue-200 dark:text-black dark:hover:bg-blue-50\"\n                onClick={actionTrigger}\n            >\n                {actionMessage || this.userActions[actionKey].label}\n            </button>\n        );\n    }\n\n    /**\n     * displays a list of detected user roles\n     * @remarks\n     * This method is called by the default render() method to display the user's roles.\n     *\n     * Customizers may override this method to provide a different presentation for the user's roles.\n     * The default implementation simply emits a list of role tags using react fragments,\n     * with no additional envelope or decoration.  If you do this, you SHOULD call\n     * renderRoleTag() to display each individual role tag.\n     *\n     * To customize individual role tags, override `renderRoleTag()` instead.\n     *\n     * The resulting React elements are normally included in the capoUserInfo portal element.\n     * Customizers may use this method directly if using the \"headless\" uiPortals option.\n     */\n    renderRoleInfo() {\n        const {\n            userInfo: { roles },\n        } = this.state;\n        if (!roles) return;\n\n        return (\n            <>\n                {roles.map((r) => {\n                    return (\n                        <Fragment key={`role-${r}`}>\n                            {this.renderRoleTag(r)}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n\n    /**\n     * displays a single role tag detected for the current user\n     * @remarks\n     * This method is called by the default renderRoleInfo() method to display a single role tag.\n     */\n    renderRoleTag(role: string) {\n        return (\n            <span className=\"ml-1 mb-0 inline-block rounded border border-slate-500 bg-emerald-800 px-2 py-0 text-sm text-slate-400 shadow-none outline-none transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] hover:cursor-text\">\n                {role}\n            </span>\n        );\n    }\n\n    // doAction(action) {\n    //     const actions = {\n    //         initializeCapo: this.bootstrapCapo,\n    //         retryCreation: this.connectCapo,\n    //     };\n    //     const thisAction = actions[action];\n    //     thisAction.call(this);\n    // }\n\n    /**\n     * renders a lightweight wallet connection button.\n     * @remarks\n     * It's recommended to override this method to present your preferred\n     * wallet connection button.\n     *\n     * When you detect a wallet change, call the `setWallet()` method to\n     * notify the dApp.\n     */\n    renderWalletInfo() {\n        const {\n            userInfo: {\n                wallet,\n                walletAddress,\n                connectingWallet,\n                foundNetworkName,                \n                selectedWallet\n            },\n        } = this.state;\n\n        let autoWallet = selectedWallet;\n        if (\"undefined\" !== typeof window && typeof selectedWallet === \"undefined\") {\n            autoWallet = window.localStorage.getItem(\"capoAutoConnectWalletName\") || \"\"\n        }\n\n        if (wallet) {\n            return (\n                <div className=\"flex flex-row\">\n                    {walletAddress && ( \n                        <span\n                            key=\"chip-walletAddr\"\n                            // make it small by default, but allow it to grow on hover\n                            // also, make it right-aligned and chop the overflow\n                            // color the text black\n                            className=\"mb-0 text-black text-nowrap overflow-hidden max-w-24 hover:max-w-full inline-block rounded border border-slate-500 bg-blue-500 px-2 py-0 text-sm shadow-none outline-none hover:cursor-text\"\n                        >\n                            {walletAddress} {selectedWallet}<a href=\"#\" onClick={() => this.newWalletSelected(\"\")}>✖️</a>\n                        </span>\n                    )}\n                    &nbsp;\n                    <span\n                        key=\"chip-networkName\"\n                        className=\"mb-0 inline-block rounded border border-slate-500 bg-blue-900 px-2 py-0 text-sm text-slate-400 shadow-none outline-none transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] hover:cursor-text\"\n                    >\n                        {foundNetworkName}\n                    </span>\n                </div>\n            );\n        } else if (connectingWallet) {\n            return (\n                <div>\n                    <Button variant=\"secondary\" disabled className=\"-mt-3\">\n                        ... connecting ...\n                    </Button>\n                </div>\n            );\n        } else {\n    \n            return (\n                <div>\n                    <select value={autoWallet} onChange={this.onWalletChange}>\n                        <option value=\"\"> -- choose wallet -- </option>\n                        <option value=\"zwallet\">Zero Wallet</option>\n                        <option value=\"eternl\">Eternl</option>\n                    </select>\n                    <Button\n                        variant=\"secondary\"\n                        className=\"-mt-3\"\n                        onClick={this.onConnectButton}\n                    >\n                        Connect Wallet\n                    </Button>\n                </div>\n            );\n        }\n    }\n\n    onWalletChange: ChangeEventHandler<HTMLSelectElement> = (event) => {\n        this.newWalletSelected(event.target.value);\n        event.preventDefault();\n    };\n\n    onConnectButton: MouseEventHandler<HTMLButtonElement> = async (event) => {\n        this.connectWallet();\n    };\n\n    // txnDump() {\n    //     const { tcx } = this.state;\n    //     if (!tcx) return;\n\n    //     const built = await tcx.build();\n    //     const txnDump = tcx.dump();\n    //     {\n    //         txnDump && (\n    //             <pre\n    //                 style={{\n    //                     color: \"#999\",\n    //                     border: \"1px dashed #505\",\n    //                     borderRadius: \"0.5em\",\n    //                 }}\n    //             >\n    //                 {txnDump}\n\n    //                 {tcx.state.bsc &&\n    //                     JSON.stringify(tcx.state.bootstrappedConfig, null, 2)}\n    //             </pre>\n    //         );\n    //     }\n    // }\n\n    //  ---- Component setup sequence starts here\n    //  -- step 1: get blockfrost's network params\n    async componentDidMount() {\n        // in dev environment, React re-mounts the same component : /\n        if (this._unmounted) this._unmounted = false;\n\n        if (this._unmounted) {\n            // debugger;\n            return;\n        }\n\n        this._isInitializing = this._isInitializing || this.doInitialize();\n    }\n    _isInitializing: Promise<any> | undefined = undefined;\n    async doInitialize() {\n        const networkParams: NetworkParams = await this.bf.parameters;\n\n        if (\"undefined\" != typeof window) {\n            const autoWallet = window.localStorage.getItem(\n                \"capoAutoConnectWalletName\"\n            );\n            if (autoWallet) {\n                await this.newWalletSelected(autoWallet, false);\n            }\n        }\n\n        // await this.updateState('connecting to wallet', {\n        await this.updateStatus(\n            \"initializing on-chain contracts\",\n            {\n                developerGuidance: \"status message for the user\",\n            },\n            \"//component did mount\",\n            {\n                networkParams,\n            }\n        );\n        if (this.props.onNetwork) this.props.onNetwork(this.bf);\n        if (this.props.onStatusChange)\n            this.props.onStatusChange(this.state.status);\n        if (this.props.onUserInfo) this.props.onUserInfo(this.state.userInfo);\n\n        if (this.props.onContextChange) this.props.onContextChange(this);\n        // if (this.props.onWalletChange) this.props.onWalletChange(undefined);\n\n        await this.updateStatus(\n            \"setting up tx submitters\",\n            {\n                developerGuidance: \"just show the message to the user\",\n            },\n            \"//setupSubmitters\"\n        );\n        await this.setupSubmitters();\n\n        this.connectCapo();\n    }\n    submitters: namedSubmitters = {};\n\n    async setupSubmitters() {\n        this.submitters = {\n            blockfrost: this.bf,\n            ...(this.props.otherSubmitters || {}),\n        };\n        for (const [name, conn] of Object.entries(\n            this.props.ogmiosConnections || {}\n        )) {\n            if (name in this.submitters) {\n                throw new Error(\n                    `ogmios submitter ${name} conflicts with other implied or provided submitter`\n                );\n            }\n\n            this.submitters[name] = await OgmiosTxSubmitter.withOgmiosConn(\n                this.isMainnet(),\n                conn\n            );\n        }\n        const { promise, resolve } = Promise.withResolvers();\n        const { networkParams, userInfo: { wallet } = {} } = this.state;\n        if (!networkParams) {\n            throw new Error(\"network params not available\");\n        }\n\n        // const wallet = makeCip30Wallet(walletHandle);\n        // const {txBatcher} = this.state\n        // if (txBatcher) {\n        //     txBatcher.signingStrategy = new GenericCip30Signer(wallet)\n        // }\n\n        const txBatcherOptions: TxBatcherOptions = {\n            submitters: this.submitters,\n        };\n        if (wallet) {\n            txBatcherOptions.signingStrategy = new GenericSigner(wallet);\n        }\n        this.setState(\n            {\n                txBatcher: new TxBatcher(txBatcherOptions),\n                // , {\n                //     network: this.bf,\n                //     networkParams,\n                // }),\n            },\n            () => resolve(\"\")\n        );\n\n        return promise;\n    }\n\n    _unmounted = false;\n    async componentWillUnmount() {\n        this._unmounted = true;\n\n        // not really an error - just big and red so it's super obvious when it happens\n        console.error(\"capo dApp provider unmounted\");\n    }\n\n    /**\n     * @internal\n     */\n    newWalletSelected(selectedWallet: string = \"eternl\", autoNext = true) {\n        if (selectedWallet === \"\") {\n            return this.updateStatus(\"disconnecting from wallet\", {\n                developerGuidance: \"just a status message for the user\",\n            }, \"//disconnecting wallet\", {\n                userInfo: {\n                    ...this.state.userInfo,\n                    selectedWallet: \"\",\n                    wallet: undefined,\n                    walletAddress: undefined,\n                    walletHandle: undefined,\n                },\n            });\n        }\n        if (!this.isWalletSupported(selectedWallet)) {\n            debugger;\n            this.reportError(\n                new Error(\"wallet not supported\"),\n                `selected wallet '${selectedWallet}' not supported`,\n                {\n                    developerGuidance:\n                        \"let the user know to install the wallet plugin\",\n                }\n            );\n            return;\n        }\n\n        if (!this.walletIsAvailable(selectedWallet)) {\n            this.reportError(\n                new Error(`wallet '${selectedWallet}' not available`),\n                `selected wallet '${selectedWallet}' isn't activated - enable the browser extension to continue`,\n                {\n                    developerGuidance:\n                        \"let the user know to install the wallet plugin\",\n                }\n            );\n            return;\n        }\n\n        return new Promise<void>((resolve) => {\n            this.setState(\n                {\n                    userInfo: {\n                        ...this.state.userInfo,\n                        selectedWallet,\n                    },\n                },\n                () => resolve()\n            );\n        }).then(() => {\n            return this.connectWallet(autoNext);\n        });\n    }\n\n    get userInfo() {\n        return this.state.userInfo;\n    }\n\n    //  -- step 2: connect to Cardano wallet\n    walletConnectPromise?: Promise<any>;\n\n    async connectWallet(autoNext = true, retries = 5) {\n        const {\n            userInfo,\n            userInfo: { wallet: alreadyConnected, selectedWallet = \"eternl\" },\n            capo,\n        } = this.state;\n        if (this._unmounted) {\n            debugger;\n            return true;\n        }\n        if (alreadyConnected) return true;\n\n        if (!this.isWalletSupported(selectedWallet)) {\n            this.reportError(\n                new Error(`wallet '${selectedWallet}' not supported`),\n                `selected wallet '${selectedWallet}' isn't supported`,\n                {\n                    developerGuidance:\n                        \"let the user know to install the wallet plugin\",\n                }\n            );\n            return;\n        }\n        if (!this.walletIsAvailable(selectedWallet)) {\n            this.reportError(\n                new Error(`wallet '${selectedWallet}' not available`),\n                `selected wallet '${selectedWallet}' isn't activated - enable the browser extension to continue`,\n                {\n                    developerGuidance:\n                        \"let the user know to install the wallet plugin\",\n                }\n            );\n            return;\n        }\n        //! it suppresses lame nextjs/react-sourced double-trigger of mount sequence\n        // if (this._unmounted) return\n        // debugger\n        if (this.walletConnectPromise) {\n            console.warn(\n                \"suppressing redundant wallet connect, already pending\"\n            );\n\n            return this.walletConnectPromise;\n        }\n\n        await this.updateStatus(\n            \"connecting to Cardano wallet\",\n            {\n                progressBar: true,\n                developerGuidance: \"just a status message for the user\",\n            },\n            \"//connecting wallet\",\n            {\n                userInfo: { ...userInfo, connectingWallet: true },\n            }\n        );\n        let simpleWallet: SimpleWallet | undefined;\n        let walletHandle: Cip30FullHandle | undefined;\n        if (selectedWallet === \"zwallet\") {\n            let privKeyHex = window.localStorage.getItem(\"zwk\");\n            if (!privKeyHex) {\n                const entropy = makeRandomRootPrivateKey().entropy;\n                privKeyHex = bytesToHex(entropy);\n                window.localStorage.setItem(\"zwk\", privKeyHex);\n            }\n            const privKey = makeRootPrivateKey(hexToBytes(privKeyHex));\n\n            // const capo = this.state.capo;\n            // if (!capo) {\n            //     throw new Error(\"capo not initialized\")\n            // }\n            const isMainnet = this.props.targetNetwork === \"mainnet\";\n            const useHydra = !!this.props.hydra;\n            const hydraOptions: HydraClientOptions | undefined=\n                useHydra\n                    ? {\n                          ...(this.props.hydra === true ? {} : this.props.hydra),\n                          isForMainnet: isMainnet,\n                      }\n                    : undefined;\n            let networkClient = useHydra ? makeHydraClient(WebSocket, {\n                onReceive(message) {\n                    console.log(\"onReceive\", message);\n                },\n                isForMainnet: isMainnet,\n                ...hydraOptions,\n            }) : this.bf;\n            simpleWallet = makeSimpleWallet(privKey, networkClient);\n        } else {\n            if (!!this.props.hydra) {\n                throw new Error(\"hydra not supported for this wallet\");\n            }\n            const connecting = (this.walletConnectPromise =\n                //@ts-expect-error on Cardano\n                window.cardano[selectedWallet]?.enable());\n            walletHandle = await connecting.catch((e: any) => {\n                simpleWallet = undefined;\n\n                // eternl plugin seems to have a race for initializing\n                // the wallet connection, when we do auto-connect.\n                if (!!retries && e.message.match(/no account set/)) {\n                    const delay = Math.pow(1.6, 5 - retries) * 200;\n                    return new Promise((res) => setTimeout(res, delay)).then(\n                        () => {\n                            return this.connectWallet(autoNext, retries - 1);\n                        }\n                    );\n                }\n                this.reportError(e, \"wallet connect\", {\n                    developerGuidance:\n                        \"guide the user to get connected to a supported wallet plugin\",\n                });\n            });\n\n            if (!walletHandle) return;\n        }\n\n        return this.setWallet({\n            cip30WalletHandle: walletHandle,\n            simpleWallet: simpleWallet,\n            walletName: selectedWallet,\n            autoNext,\n        });\n    }\n\n    /**\n     * allows setting the wallet for the dApp from a CIP-30 wallet handle\n     * @remarks\n     * if your application has its own UI for the user to choose their wallet and connect or disconnect,\n     * call this method any time a new wallet is selected.\n     * @public\n     */\n    async setWallet(details: SetWalletDetails) {\n        let {\n            walletName,\n            simpleWallet,\n            cip30WalletHandle: walletHandle,\n            autoNext = true,\n        } = details;\n        if (!simpleWallet && !walletHandle) {\n            debugger;\n            throw new Error(\"wallet or walletHandle is required\");\n        }\n\n        let wallet: Wallet | undefined = simpleWallet;\n        let addrString: string | undefined;\n        console.warn(\"CIP-30 Wallet Handle\", walletHandle);\n\n        let foundNetworkName: string | undefined;\n        if (walletHandle) {\n            const netId = await walletHandle.getNetworkId();\n            const addr = (await walletHandle.getUsedAddresses())[0];\n            addrString = addr\n            foundNetworkName = networkNames[netId];\n            if (foundNetworkName !== this.props.targetNetwork) {\n                return this.updateStatus(\n                    `This application is only available on the ${this.props.targetNetwork} network.  Your wallet is connected to network ${netId} (${foundNetworkName})`,\n                    {\n                        isError: true,\n                        developerGuidance:\n                            \"when the user switches networks, the dApp should automatically(?) reconnect\",\n                    },\n                    \"//wallet not on expected network\",\n                    {\n                        userInfo: {\n                            ...this.userInfo,\n                            connectingWallet: false,\n                            walletAddress: addrString,\n                            foundNetworkName: foundNetworkName || \"‹unknown›\",\n                        },\n                    }\n                );\n            }\n\n            if (this.bf.networkName !== foundNetworkName) {\n                //! checks that wallet network matches network params / bf\n                this.updateStatus(\n                    `wallet network mismatch; expected ${this.bf.networkName}, wallet ${foundNetworkName}`,\n                    {\n                        isError: true,\n                        developerGuidance:\n                            \"the dApp should automatically(?) reconnect when the user switches networks\",\n                    },\n                    \"//wallet network doesn't match bf network\",\n                    {\n                        userInfo: {\n                            ...this.userInfo,\n                            connectingWallet: false,                            \n                            walletAddress: addrString,\n                            foundNetworkName,\n                        },\n                    }\n                );\n                return;\n            }\n            wallet = makeCip30Wallet(walletHandle);\n        } else {\n            if (!simpleWallet) {\n                throw new Error(\"wallet not found\"); // for TypeScript\n            }\n            wallet = simpleWallet;\n            foundNetworkName = this.props.targetNetwork;\n            if (this.capo) {\n                this.capo.setup.network = simpleWallet.cardanoClient;\n                this.capo.setup.actorContext.wallet = wallet;\n            }\n            const networkParams = await simpleWallet.cardanoClient.parameters;\n            const addr = (await wallet.usedAddresses)[0];\n            addrString = addr.toString();\n            await this.updateStatus(\n                \"connected with zero-wallet\",\n                {\n                    developerGuidance: \"status message for the user\",\n                },\n                \"// zero-wallet connected\",\n                {\n                    networkParams,\n                    userInfo: {\n                        ...this.userInfo,\n                        connectingWallet: false,\n                        wallet,\n                        walletAddress: addrString,\n                    },\n                }\n            );\n        }\n        if (!wallet) {\n            throw new Error(\"wallet not found\"); // for TypeScript\n        }\n        const { txBatcher } = this.state;\n\n        if (txBatcher) {\n            txBatcher.signingStrategy = new GenericSigner(wallet);\n        }\n\n        const walletHelper = makeWalletHelper(wallet);\n        if (\"undefined\" !== typeof window) {\n            if (\n                window.localStorage.getItem(\"capoAutoConnectWalletName\") !==\n                walletName\n            ) {\n                window.localStorage.setItem(\n                    \"capoAutoConnectWalletName\",\n                    walletName\n                );\n            }\n        }\n\n        const newState: UpdateStateProps = {\n            userInfo: {\n                ...this.userInfo,\n                wallet,\n                walletHandle,\n                selectedWallet: walletName,\n                connectingWallet: false,\n                foundNetworkName,\n            },\n            walletHelper,\n        };\n        await this.updateStatus(\n            \"finding collateral and other wallet utxos\",\n            {\n                developerGuidance: \"show status message onscreen\",\n                clearAfter: 5000,\n                progressBar: true,\n            },\n            \"//finding wallet utxos & collateral\",\n            newState\n        );\n\n        if (this.capo) this.capo.actorContext.wallet = wallet;\n\n        await walletHelper.utxos.then((walletUtxos: TxInput[]) => {\n            return this.updateStatus(\n                undefined,\n                {\n                    developerGuidance:\n                        \"nothing to do here but clear an existing status message (if needed)\",\n                },\n                \"//found wallet utxos\",\n                {\n                    walletUtxos,\n                }\n            );\n        });\n\n        if (\n            (this.state.networkParams && autoNext && !this.state.capo) ||\n            !(await this.state.capo?.isConfigured)\n        ) {\n            await this.updateStatus(\n                `reconnecting to ${this.dAppName} with connected wallet`,\n                {\n                    developerGuidance: \"status message for the user\",\n                },\n                \"//reinit after wallet\"\n            );\n            return this.connectCapo(autoNext);\n        }\n    }\n\n    async checkWalletTokens() {\n        const { capo } = this.state;\n        if (!capo?.actorContext.wallet) {\n            await this.updateStatus(\n                \"no capo yet, or not connected to wallet\",\n                {\n                    developerGuidance:\n                        \"wait for the wallet to be connected before calling checkWalletTokens\",\n                },\n                \"/// no capo or wallet; skipping scan for authority tokens\"\n            );\n            return;\n        }\n\n        await this.updateStatus(\n            \"checking wallet for authority tokens \",\n            {\n                progressBar: true,\n                developerGuidance: \"status message for the user\",\n            },\n            \"/// looking for authority tokens  from policy \" + capo.mph.toHex()\n        );\n\n        const roles: String[] = [];\n        //@ts-expect-error - for now - only works if capo uses member info\n        const member = await capo.findMemberInfo?.();\n        const isAdmin = await capo.findActorUut(\"capoGov\");\n\n        let memberUut;\n        if (!!member) {\n            memberUut = member.uut;\n\n            roles.push(\"collaborator\");\n        }\n        if (!!isAdmin) roles.push(\"admin\");\n\n        const message = roles.includes(\"member\")\n            ? // || roles.includes(\"admin\")\n              \"\"\n            : this.getStartedMessage();\n\n        this.updateStatus(\n            message,\n            {\n                progressPercent: 100,\n                developerGuidance:\n                    \"display the indicated roles in the UI and/or show/hide app features based on the roles\",\n            },\n            `/// found ${roles.length} roles: ${roles.join(\", \")}}`,\n            {\n                userInfo: {\n                    ...this.userInfo,\n                    //@ts-expect-error on strict types\n                    roles,\n                    memberUut,\n                },\n            }\n        );\n    }\n\n    getStartedMessage(): string {\n        return `Hurray!  Users can now start doing their thing. Customize this content in your CapoDappProvider's getStartedMessage() method.`;\n    }\n\n    // -- step 3 - check if the Capo is configured and ready for use\n    async connectCapo(autoNext = true, reset?: \"reset\") {\n        if (this._unmounted) return;\n\n        // const priorVH = \"b30c39d09103f5ed3588adc9179cb957137ffa79568e6a5dfda4e317\"\n        // const addr = helios.Address.fromHashes(new helios.ValidatorHash(priorVH))\n        // window.alert(addr.toBech32())\n\n        // !!! todo: consider a way for clients of this component\n        //  ... to indicate conditions for auto-connect to wallet\n        // if (\"create\" == route || \"edit\" == route) {\n        //     await this.connectWallet();\n        // }\n        let {\n            networkParams,\n            capo,\n\n            userInfo: { wallet },\n        } = this.state;\n\n        let localConfig = null; // window.localStorage.getItem(\"capoConfig\");\n        if (localConfig)\n            try {\n                localConfig = JSON.parse(localConfig);\n\n                console.log(\n                    \"------------------- deploy this -----------------------\\n\",\n                    localConfig,\n                    \"\\n------------------- deploy this! -----------------------\\n\",\n                    \"... by pasting this into your dAPI repo's capo.config.json\"\n                );\n\n                this.updateStatus(\n                    \"using dev-time config from localStorage to load contract ...\",\n                    {\n                        clearAfter: 5000,\n                        moreInstructions:\n                            \"to deploy this configuration, see details in the console\",\n                        developerGuidance:\n                            \"at production time, we'll use the deployed config instead\",\n                    },\n                    \"// dev-time notice\"\n                );\n            } catch (e: any) {\n                return this.reportError(e, \"parsing devCfg from localStorage\", {\n                    nextAction: \"initializeCapo\",\n                    moreInstructions:\n                        \"You can re-initialize the capo to reset the dev config, or deploy a good config using the `cst` command-line tool\",\n                    developerGuidance:\n                        \"If this situation persists, you might need to investigate why the dev config is being written as something non-parseable\",\n                });\n            }\n        const bestKnownConfig = localConfig || ourCapoConfig;\n        let config =\n            !reset && bestKnownConfig\n                ? { config: parseCapoJSONConfig(bestKnownConfig) }\n                : { partialConfig: {} };\n\n        if (!wallet) console.warn(\"connecting to capo with no wallet\");\n        if (!networkParams) {\n            console.warn(\"no network params\");\n            return;\n        }\n        type t = ConfigFor<CapoType>;\n        let { txBatcher } = this.state;\n        if (!txBatcher) {\n            const batcherOptions: TxBatcherOptions = {\n                submitters: this.submitters,\n                ...(wallet\n                    ? {\n                          signingStrategy: new GenericSigner(wallet),\n                      }\n                    : {}),\n            };\n\n            txBatcher = new TxBatcher(batcherOptions);\n        }\n\n        let network: CardanoClient = this.bf;\n        //@ts-expect-error - sorry, typescript : /\n        if (this.state.userInfo.wallet?.cardanoClient) {\n            network = (this.state.userInfo.wallet! as SimpleWallet)\n                .cardanoClient;\n            networkParams = await network.parameters;\n        }\n        const setup = {\n            network,\n            networkParams,\n            txBatcher,\n            actorContext: {\n                wallet,\n            },\n            isMainnet: this.isMainnet(),\n            optimize: true,\n        };\n        txBatcher.setup = setup;\n        let cfg: StellarFactoryArgs<CapoConfig> = {\n            setup: setup,\n            // partialConfig: {},\n            ...config,\n        };\n        try {\n            console.log(\"init with cfg\", cfg);\n            await this.updateStatus(\n                `connecting: ${this.dAppName}`,\n                {\n                    developerGuidance:\n                        \"wait for connection; possibly show a spinner\",\n                },\n                \"//init\",\n                {\n                    txBatcher,\n                }\n            );\n\n            const capo = await this.capoClass.createWith(\n                //@ts-expect-error - sorry, typescript : /\n                cfg\n            );\n            const capoBundle = capo.getBundle();\n            const configured = capoBundle.configuredParams;\n            const { isChartered } = capo;\n\n            if (!configured || !isChartered) {\n                const problem = configured\n                    ? isChartered\n                        ? \"impossible\"\n                        : \"is preconfigured and ready to be chartered!\"\n                    : isChartered\n                    ? \"impossible\"\n                    : \"needs to be configured and chartered.   Add a configuration if you have it, or create the Capo charter now.\";\n\n                const message = autoNext ? `The Capo contract ${problem} ` : \"\";\n\n                await this.updateStatus(\n                    message,\n                    {\n                        nextAction: \"initializeCapo\",\n                        developerGuidance:\n                            \"likely administrative moment for dev-time creation of the capo\",\n                    },\n                    \"//bootstrap needed\",\n                    {\n                        capo,\n                    }\n                );\n                return;\n                // return this.stellarSetup();\n            }\n            capo.actorContext.wallet = wallet;\n            if (!autoNext)\n                return this.updateStatus(\n                    \"\",\n                    {\n                        developerGuidance:\n                            \"capture this capo object for use in transaction-building.  See also the dataDelegates...\",\n                    },\n                    \"// Capo is connected to wallet, ready to do an on-chain activity\",\n                    { capo }\n                );\n\n            await this.updateStatus(\n                \"... searching ...\",\n                {\n                    busy: true,\n                    developerGuidance:\n                        \"display a spinner or other indicator that the dApp is doing something\",\n                },\n                \"//searching (or freshening search after wallet connection)\",\n                {\n                    capo: capo,\n                }\n            );\n            this.checkWalletTokens();\n            // this.fetchBookEntries();\n        } catch (error: any) {\n            this.reportError(error, `checking ${this.dAppName} configuration`, {\n                nextAction: \"initializeCapo\",\n                moreInstructions:\n                    \"Developer error: Some error has occurred during initialization of on-chain Capo.\" +\n                        \"development\" ==\n                    process.env.NODE_ENV\n                        ? \"You can try again, or check the console for more information.\"\n                        : `You might need to contact ${this.dAppName}'s support channels for assistance.`,\n                developerGuidance:\n                    \"Check the logs for more information about the error\",\n            });\n        }\n    }\n\n    private isMainnet(): boolean {\n        const isMainnet = !(\n            \"development\" == environment.NODE_ENV ||\n            \"test\" == environment.NODE_ENV ||\n            \"preview\" == environment.CARDANO_NETWORK ||\n            \"preprod\" == environment.CARDANO_NETWORK\n        );\n        console.log(\n            \"isMainnet\",\n            isMainnet,\n            environment.NODE_ENV,\n            environment.CARDANO_NETWORK\n        );\n        return isMainnet;\n    }\n\n    async mkDefaultCharterArgs(): Promise<MinimalCharterDataArgs> {\n        const { walletHelper } = this.state;\n        if (!walletHelper) {\n            debugger;\n            throw new Error(\"no wallet helper\");\n        }\n        const addr = await walletHelper.baseAddress;\n        return {\n            govAuthorityLink: {\n                config: {\n                    //this.capo.stringifyDgtConfig({\n                    addrHint: [addr],\n                },\n            },\n            mintDelegateLink: {\n                config: {},\n            },\n            spendDelegateLink: {\n                config: {},\n            },\n            mintInvariants: [],\n            spendInvariants: [],\n            otherNamedDelegates: new Map(),\n            manifest: new Map(),\n            rev: 1n,\n        };\n    }\n\n    //  -- step 3a - initialize the Capo if needed\n    async bootstrapCapo() {\n        if (!this.userInfo?.wallet) await this.connectWallet(false);\n        await this.connectCapo(false, \"reset\");\n        const {\n            capo,\n            userInfo: { wallet },\n        } = this.state;\n\n        if (!wallet) {\n            debugger;\n            throw new Error(\"no wallet\");\n        }\n        if (!capo) {\n            debugger;\n            throw new Error(\"no capo\");\n        }\n        if (await capo.isConfigured) {\n            return this.reportError(\n                new Error(`Capo already has a deployed configuration`),\n                \"bootstrap\",\n                {\n                    moreInstructions:\n                        \"This is a developer error that should be unreachable\",\n                    developerGuidance:\n                        \"Figure out how this could have happened, and fix the first root cause\",\n                }\n            );\n        }\n\n        await this.updateStatus(\n            \"creating the Capo charter transaction ...\",\n            {\n                progressBar: true,\n                moreInstructions:\n                    \"This could take 60-90 seconds while the contracts are compiled\",\n                developerGuidance:\n                    \"status indicator while the transaction is build.  this might take a second or three.\",\n            },\n            \"//creating charter txn\"\n        );\n\n        let tcx: Awaited<ReturnType<CapoType[\"mkTxnMintCharterToken\"]>>;\n        try {\n            const addresses = await wallet.unusedAddresses\n            // type Expand<T> =  T extends infer O ? { [K in keyof O]: O[K] } : never;\n            // type tt = Expand<typeof t.state>\n            tcx = await capo.mkTxnMintCharterToken(\n                await this.mkDefaultCharterArgs()\n            );\n        } catch (e: any) {\n            console.error(e);\n\n            this.reportError(e, \"creating charter\", {\n                nextAction: \"retryCreation\",\n                developerGuidance:\n                    \"Make sure you're approving the setup transactions in the wallet, and check the logs to investigate possible other causes of error\",\n            });\n            return;\n        }\n        await this.updateStatus(\n            \"Bootstrap transaction loading into your wallet...\",\n            {\n                progressBar: true,\n                moreInstructions: `If it looks right, sign the transaction to finish chartering the ${this.dAppName}`,\n                developerGuidance:\n                    \"the dApp is waiting for the wallet to sign the bootstrap txn\",\n            },\n            \"/// push bootstrap txn to wallet\",\n            {\n                tcx,\n            }\n        );\n        try {\n            // const paramsOverride: Partial<NetworkParams> = {\n            //     maxTxExCpu: 1000000000000,\n            //     maxTxExMem: 100000000,\n            //     maxTxSize: 49777,\n            // };\n            await tcx.submitAll({\n                // paramsOverride,\n                onSubmitError: (details) => {\n                    this.props.onSubmitError?.(details);\n                },\n                addlTxInfo: {\n                    txName: `${this.dAppName} Charter`,\n                    description: `Bootstrap on-chain contracts for ${this.dAppName}`,\n                    moreInfo: `If this looks right, sign the transaction to finish chartering the ${this.dAppName}`,\n                },\n                fixupBeforeSubmit: ({\n                    tcx,\n                    description,\n                    moreInfo,\n                    optional,\n                    txName,\n                }) => {\n                    return this.updateStatus(\n                        \"creating addl Txn: \" + description,\n                        {\n                            moreInstructions: moreInfo,\n                            progressBar: \"waiting for wallet signature\",\n                            developerGuidance:\n                                \"to user: get this thing deployed, yo\",\n                        },\n                        `/// push ${description} txn to wallet`\n                    );\n                },\n                onSubmitted: ({ description, tcx }) => {\n                    return this.updateStatus(\n                        \"submitted txn: \" + description,\n                        {\n                            moreInstructions:\n                                \"the txn will take a few moments to be confirmed\",\n                            developerGuidance: \"it's just a user confirmation\",\n                        },\n                        \"/// txn submitted ok to network\"\n                    );\n                },\n            });\n            console.warn(\n                \"------------------- Boostrapped Config -----------------------\\n\",\n                tcx.state.bootstrappedConfig,\n                \"\\n------------------- deploy this! -----------------------\\n\",\n                \"... by pasting this into your dAPI repo's capo.config.json\"\n            );\n\n            if (\"development\" == process.env.NODE_ENV) {\n                window.localStorage.setItem(\n                    \"capoConfig\",\n                    JSON.stringify(tcx.state.bootstrappedConfig)\n                );\n                await this.updateStatus(\n                    \"Okay: self-deployed dev-time config.  It might take 10-20s for the charter to be found on-chain\",\n                    {\n                        keepOnscreen: true,\n                        moreInstructions:\n                            \"Bootstrap config saved to localStorage.  It will be used on next load.\",\n\n                        developerGuidance:\n                            \"dev-time 'deployment' to localStorage ready!\",\n                    },\n                    \"//stored bootstrapped config in localStorage\"\n                );\n                await new Promise((res) => setTimeout(res, 5000));\n            } else {\n                await this.updateStatus(\n                    `Capo contract creation submitted.  Use the details from the console to deploy this configuration.`,\n                    {\n                        keepOnscreen: true,\n                        moreInstructions:\n                            \"The charter transaction is submitted to the network.  It may take a few minutes to be confirmed.\",\n                        developerGuidance:\n                            \"Deploy the capo configuration by pasting these details into your dApp code, the build and deploy the dApp.\",\n                    },\n                    \"//ok: charter txn submitted to network\"\n                );\n            }\n\n            // this.seekConfirmation()\n        } catch (e: any) {\n            console.error(e);\n            this.updateStatus(\n                `while building bootstrap txn: \"${e.message}\"`,\n                {\n                    isError: true,\n                    nextAction: \"retryCreation\",\n                    developerGuidance:\n                        \"creating the capo didn't work for some reason.  Let the user try again.\",\n                },\n                \"//wallet error during charter\",\n                {\n                    capo: undefined,\n                }\n            );\n        }\n    }\n\n    /**\n     * sets the state to indicate an error condition and possible next steps\n     * @remarks\n     */\n    reportError(\n        e: Error,\n        prefix: string,\n        addlAttrs: UpdateStatusProps<UserActions>\n    ) {\n        console.error(e.stack || e.message);\n        debugger;\n        return this.updateStatus(\n            `${prefix}: \"${e.message}\"`,\n            {\n                isError: true,\n                keepOnscreen: true,\n                ...addlAttrs,\n            },\n            \"//error msg to user\"\n        );\n    }\n\n    /**\n     * Promise-based wrapper for setState, with status message implicit\n     * @remarks\n     *\n     * sets the status message in state.status, along with any other state props\n     *\n     * automatically clears nextAction, error, and actionLabels if they aren't\n     * explicitly set.\n     *\n     * returns an await-able promise for setting the indicated state\n     *\n     * TODO: Notifies state-change through the hooks inidicated in props\n     *\n     * @public\n     **/\n    updateStatus(\n        message: string | undefined,\n        statusProps: UpdateStatusProps<UserActions>,\n        extraComment: string,\n        extraState: UpdateStateProps = {}\n    ): Promise<any> {\n        const {\n            nextAction = undefined,\n            // moreInstructions = undefined,\n            // progressBar = undefined,\n            isError = undefined,\n            clearAfter = 0,\n            ...otherStatusProps\n        } = statusProps;\n\n        // if (this._unmounted) {\n        //     console.warn(`suppressing state update after unmount (\\\"${status}\\\")`)\n        //     return\n        // }\n        if (!clearAfter) {\n            otherStatusProps.keepOnscreen = true;\n        }\n        console.log(`instance ${this.i}`, { status: message });\n        const status: CapoDappStatus<UserActions> =\n            \"undefined\" === typeof message\n                ? {\n                      message: undefined,\n                      developerGuidance:\n                          \"the current state was cleared, indicating no pending actions.  You MAY clear the most recent message.\",\n                  }\n                : {\n                      ...otherStatusProps,\n                      message,\n                      isError,\n                      clearAfter,\n                      ...(nextAction\n                          ? {\n                                nextAction: {\n                                    key: nextAction,\n                                    label: this.userActions[nextAction]?.label,\n                                    trigger:\n                                        this.userActions[nextAction]?.trigger,\n                                },\n                            }\n                          : {}),\n                  };\n        const newState: CapoDappProviderState<CapoType> = {\n            ...this.state,\n            status: status,\n            ...extraState,\n        };\n        const doneWith =\n            (\"\" == message &&\n                this.state.status.message &&\n                `(done: ${this.state.status.message})`) ||\n            \"\";\n\n        console.warn(extraComment || \"\" + doneWith || \"\", {\n            newState,\n        });\n        return new Promise<void>((resolve) => {\n            this.setState(newState, resolve);\n            if (clearAfter) {\n                setTimeout(() => {\n                    if (this.state.status.message == message)\n                        this.updateStatus(\n                            \"\",\n                            {\n                                clearAfter: 0,\n                                developerGuidance:\n                                    \"clearing the message after the indicated time; if you have already used the previous clearAfter signal for a temporary message, it's ok to ignore this\",\n                            },\n                            \"//clear previous message\"\n                        );\n                }, clearAfter);\n            }\n        });\n    }\n\n    /**\n     * Defines activities that can be specified as nextAction: ‹key›,\n     * and offered to the user as a button to trigger the activity.\n     * @remarks\n     * Subclasses MAY override this method to provide additional actions\n     * and SHOULD include `{ ... super.userActions }`\n     */\n    get userActions(): UserActions {\n        return {\n            initializeCapo: {\n                label: \"Setup Capo\",\n                trigger: this.bootstrapCapo,\n            },\n            retryCreation: {\n                label: \"Retry\",\n                trigger: this.connectCapo,\n            },\n        } as BaseUserActionMap as UserActions;\n    }\n\n    /**\n     * emits an object allowing clients to access the provider's capabilities\n     * including including status updates, error-reporting and default UI\n     * elements\n     */\n    get capo(): CapoType | undefined {\n        return this.state.capo;\n    }\n}\n\n/**\n * Status info about the current user\n * @remarks\n * Indicates the user's current status and detected roles in the dApp.\n * @public\n */\nexport type DappUserInfo = {\n    selectedWallet?: string;\n    connectingWallet: boolean;\n    wallet?: Wallet;\n    walletHandle?: Cip30FullHandle;\n    walletAddress?: string;\n\n    memberUut?: UutName;\n    roles: (\"member\" | \"admin\" | \"artist\" | \"muNodeOp\")[];\n    foundNetworkName: string;\n};\n\n/**\n * @public\n */\nexport type UserAction = {\n    label: string;\n    trigger: () => void;\n};\n\n/**\n * @public\n */\nexport type BaseUserActionMap = {\n    initializeCapo: UserAction;\n    retryCreation: UserAction;\n};\n\n/**\n * @public\n */\nexport type UserActionMap<actions extends string> = Record<\n    actions,\n    UserAction\n> &\n    BaseUserActionMap;\n\n/**\n * @public\n */\nexport const CapoDappProviderContext = React.createContext<CapoDAppProvider<any> | null>(null);\n\n/**\n * React hook for accessing the CapoDappProvider context.\n * @remarks\n * The context data now includes the capo instance as well as the provider.  \n * \n * Indicate your Capo's type in the type parameter to access your Capo's methods and properties.\n * @typeParam C - the type of the capo instance\n * @public\n */\nexport function useCapoDappProvider<C extends Capo<any, any> = Capo<any, any>>() {\n    const provider = React.useContext(CapoDappProviderContext as React.Context<CapoDAppProvider<C> | null>);\n    if (!provider) {\n        throw new Error(\n            \"useCapoDappProvider must be used within a CapoDappProvider\"\n        );\n    }\n    const [capo, setCapo] = React.useState<C>();\n    const [checking, keepChecking] = React.useState(1);\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            if (capo !== provider?.capo) {\n                setCapo(provider?.capo);\n            }\n            keepChecking(1 + checking);\n        }, 2000);\n    }, [checking, provider, provider?.userInfo.wallet, capo]);\n\n    return {capo, provider};\n}\n\n/**\n * Status details emitted by the CapoDappProvider to indicate progress and current state\n * @remarks\n * status updates are emitted via the provider's onStatusChange callback,\n * and are intended to provide signals for the client UI to update its display\n * in response to user actions and other events, while keeping the client\n * in complete control of its presentation of the details.\n *\n * The CapoDappProvider can emit its own UI, using tailwind.css classes,\n * and this status object is intended as an alternative to that, allowing\n * complete customization of the UI.\n *\n * To customize some of the rendering while using the provider's built-in\n * rendering for other aspects, see the provider's `mkCapoSiteCtx()` method\n * and the helper methods it exposes.\n * @public\n */\nexport type CapoDappStatus<T extends UserActionMap<any> = BaseUserActionMap> = {\n    /**\n     * the current status message to display to the user\n     * @remarks\n     * to clear the status message, set status to an empty string.  The client MAY\n     * choose to continue displaying the last status message after it is cleared, for instance\n     * if it queues the message for automatic removal.\n     *\n     * If the prior message has keepOnscreen: true, the client can EXPECT that\n     * the message won't be cleared until some additional activity is initiated,\n     * typically by the user.\n     */\n    message: string | undefined;\n    /**\n     * Indicates that the message SHOULD be left onscreen, and not automatically removed.\n     * @remarks\n     * if set, clearAfter will be undefined.\n     */\n    keepOnscreen?: true | undefined;\n    /**\n     * A hint for the client to clear the status message after a certain amount of time.\n     * @remarks\n     * The dApp provider will emit a new status with an empty message after the indicated\n     * time.  The client MAY choose to pass the clearAfter hint to a UI-notification library\n     * and let it handle the timing & presentation of message-removal; then it can ignore\n     * the empty-message update.\n     */\n    clearAfter?: number;\n    /**\n     * Indicates that the status message is an error message.  The client SHOULD display\n     * the message in a way indicating a problem the user may need to address.  dApps\n     * issuing such error indications SHOULD normally include a suggested nextAction\n     * to take, such as retrying the creation and/or submission of a transaction.\n     */\n    isError?: true;\n    /**\n     * Provides additional guidance, information or instructions for people using the dApp.\n     */\n    moreInstructions?: string;\n    /**\n     * Indicates a suggestied next activity for the dApp user to take in response to an error\n     * or other status message.\n     * @remarks\n     * If included, the client SHOULD display a button with the indicated label, and SHOULD\n     * call the indicated trigger when the button is clicked.  This trigger will initiate a dApp activity\n     * facilitating the next useful step for the user.  Typically this may be an administrative activity,\n     * but could also be used for end-user actions related to the dApp's day-to-day functionality,\n     * particularly those not needing any special UI.\n     *\n     * When there is a next action, the button and status message SHOULD be displayed\n     * in a way that makes it clear that the user should take the next action, typically by\n     * rendering the button and the status message within the same container.\n     */\n    nextAction?: {\n        /**\n         * a string identifier for a next action the user may take.  MAY include dApp-specific keys\n         */\n        key: string & keyof T;\n        /**\n         * the label to display on the button for the next action\n         */\n        label: string;\n        /**\n         * a function to call when the user clicks the button to take the next action\n         */\n        trigger: () => void;\n    };\n    /**\n     * Indicates that the dApp is currently performing an activity that may take some time to complete.\n     * @remarks\n     * If the progressBar attribute is provided (truthy), the client SHOULD display an indicator\n     * that an activity is pending.  If the value is a string, the client SHOULD display the string\n     * as a label for the progress indicator.\n     *\n     * If the progressPercent attribute is provided, the client SHOULD expect incremental updates with\n     * new progressPercent values and the same `message` attribute.  dApps providing progressPercent\n     * updates SHOULD include a 100%-completion update when their activity is finished.\n     *\n     * dApps SHOULD try to include incremental updates (e.g. in moreInstructions) at least every 5-10 seconds\n     * to keep the user's trust during activities that may take time to be completed or confirmed.\n     *\n     * For long-running activities taking more than 30s, the completion message SHOULD be\n     * left onscreen, not automatically cleared.\n     */\n    progressBar?: true | string | undefined;\n    /**\n     * A percentage value indicating the progress of a long-running activity, when avaialble.\n     * @remarks\n     * Activities not having any numeric information about progress SHOULD NOT include this attribute.\n     * Instead, they MAY wish to indicate some expectations in `moreInstructions` to help the user\n     * know what to expect.\n     */\n    progressPercent?: number | undefined;\n    /**\n     * When multiple transactions are needed to complete an activity, the pendingTxns attribute\n     * provides names, descriptions and more information about those transactions.  The UI MAY\n     * display this summary information onscreen to guide the user's understanding of the various steps.\n     *\n     * Note that pending transactions may be abstract, in the sense that the actual built transaction\n     * may not be present when presented in this list.  The client SHOULD limit its display of pendingTxns\n     * to the summary information provided.\n     *\n     * NOTE: The transaction-submission API contains a callback for `beforeSubmit(txn)` that should be used\n     * separately from this status-indicator to show further transaction details if needed at the time of\n     * submitting a built transaction to the wallet for signing.\n     */\n    pendingTxns?: TxDescription<any, \"resolved\">[];\n    /**\n     * A transaction may trigger additional transactions, and those transactions may further trigger\n     * a queue of transactions.  In this case, the nextPendingQueue collects a list of transactions\n     * triggered by the transactions seen in `pendingTxns`.  All the `pendingTxns` will be processed\n     * before any of the transactions from the `nextPendingQueue`.  Once all the transactions in the\n     * `pendingTxns` list are completed, the `pendingTxns` will be replaced with the transactions\n     * from the `nextPendingQueue`, and the `nextPendingQueue` will be cleared.\n     */\n    nextPendingQueue?: TxDescription<any, any>[];\n    progressResult?: string;\n    /**\n     * the dev guidance SHOULD NOT be displayed in-app.  When included,\n     * it provides a hint to developers about how to handle current status, prompt, error, etc.\n     * dev guidance is not always included\n     */\n    developerGuidance: string | undefined;\n\n    /**\n     * Indicates that the dApp is busy doing something.  Client developers are encouraged to indicate\n     * the busy state in a way indicating there is something going on, without discouraging the user from\n     * doing anything else like navigating to a different page.\n     */\n    busy?: true;\n};\n","\"use client\";\nimport * as React from \"react\";\nimport { makeShelleyAddress } from \"@helios-lang/ledger\";\nimport {\n    DashHighlightItem,\n    Highlight,\n    Lowlight,\n    Softlight,\n    DashboardTemplate,\n    DashboardRow,\n    DashboardSummary,\n    DashSummaryItem,\n    DashboardHighlights,\n} from \"./DashboardTemplate.js\";\nimport {\n    abbrevAddress,\n    type CharterData,\n    type Capo,\n    type DelegateSetup,\n    type hasAddlTxns,\n    type StellarTxnContext,\n    type BatchSubmitController,\n    type ErgoCapoManifestEntry,\n    type RelativeDelegateLink,\n    bytesToText,\n    uplcDataSerializer,\n    BasicMintDelegate,\n    StellarDelegate,\n    DelegatedDataContract,\n} from \"@donecollectively/stellar-contracts\";\nimport { useCapoDappProvider } from \"./CapoDappProvider.js\";\nimport { TxBatchViewer } from \"./TxBatchViewer.js\";\n\n/**\n * Shows a Capo-based dApp's charter status as a dashboard-style screen\n * @public\n */\nexport function CharterStatus() {\n    const {capo, provider} = useCapoDappProvider();\n    const blockfrost = provider?.bf;\n\n    const [charterData, setCharterData] = React.useState<CharterData>();\n    const [statusMessage, setStatusMessage] = React.useState(\"\");\n\n    React.useEffect(() => {\n        if (!provider?.userInfo?.wallet) {\n            setStatusMessage(\"no user info\");\n            return;\n        }\n        if (!provider) {\n            setStatusMessage(\"no provider\");\n            return;\n        }\n\n        // @ts-ignore - This is a temporary global variable for debugging\n        globalThis.capo = capo;\n        setStatusMessage(\"finding charter data...\");\n        if (!capo) return;\n        const bundle = capo.getBundle();\n        if (!bundle) {\n            setStatusMessage(\"no bundle\");\n            return;\n        }\n        if (!bundle._progIsPrecompiled) {\n            setStatusMessage(\"Capo bundle not configured\");\n            return;\n        }\n\n        capo?.findCharterData(undefined, { optional: true }).then((cd) => {\n            if (!cd) {\n                setStatusMessage(\"no charter data found\");\n                return;\n            }\n            setStatusMessage(\"charter data found\");\n            // @ts-ignore - This is a temporary global variable for debugging\n            globalThis.charter = cd;\n\n            setCharterData(cd);\n        });\n    }, [provider, provider?.userInfo.wallet, capo]);\n\n    const [upgradeTxn, setUpgradeTxn] = React.useState<\n        hasAddlTxns<StellarTxnContext> | \"ok\" | undefined\n    >();\n    React.useEffect(\n        function checkForNeededUpgrades() {\n            if (!capo) return;\n            if (!charterData) return;\n\n            capo.mkTxnUpgradeIfNeeded()\n                .catch((e) => {\n                    setStatusMessage(\"error: \" + e.message);\n                    debugger;\n                })\n                .then((tcx) => {\n                    if (!tcx) {\n                        setStatusMessage(\"no upgrade needed\");\n                        return;\n                    }\n                    if (Object.keys(tcx.addlTxns).length) {\n                        setUpgradeTxn(tcx as hasAddlTxns<StellarTxnContext>);\n                    } else {\n                        setUpgradeTxn(\"ok\");\n                        setStatusMessage(\"no upgrade needed\");\n                    }\n                });\n        },\n        [charterData]\n    );\n\n    // const [currentBatch, setTxBatch] = React.useState<BatchSubmitController>();\n    // const [initialId, setInitialId] = React.useState<string | undefined>(\n    //     undefined\n    // );\n    // React.useEffect(\n    //     function monitorTxBatcher() {\n    //         if (!capo) return;\n    //         const { txBatcher } = capo.setup;\n\n    //         txBatcher.$notifier.on(\"rotated\", (batch) => {\n    //             console.log(\"batch rotated\", batch);\n    //             const txns = batch.$allTxns;\n    //             if (txns.length) {\n    //                 setInitialId(txns[0].id);\n    //             } else {\n    //                 batch.$txChanges.once(\"txAdded\", (txTracker) => {\n    //                     console.log(\"tx added\", txTracker);\n    //                     const { id } = txTracker;\n    //                     setInitialId(id);\n    //                 });\n    //             }\n    //             setTxBatch(batch);\n    //         });\n    //     },\n    //     [capo, capo?.setup.txBatcher]\n    // );\n\n    const loadUpgrades = React.useMemo(() => {\n        return async function loadUpgradeTxns() {\n            if (!capo) return;\n            if (!upgradeTxn) return;\n            if (\"ok\" === upgradeTxn) return;\n            const { txBatcher } = capo.setup;\n\n            txBatcher!.current.$addTxns([\n                {\n                    description: \"Upgrade Charter\",\n                    tcx: upgradeTxn,\n                    id: upgradeTxn.id,\n                    depth: 0,\n                    moreInfo:\n                        \"Applies needed updates to on-chain deployment details\",\n                },\n            ]);\n            // setInitialId(Object.values(upgradeTxn.addlTxns)[0].id);\n\n            upgradeTxn.buildAndQueueAll({});\n        };\n    }, [capo, capo?.setup.txBatcher, upgradeTxn]);\n\n    let upgradeInfo = <></>;\n    if (upgradeTxn === \"ok\") {\n        upgradeInfo = (\n            <DashHighlightItem title=\"Deployment\">\n                <br />\n                <Lowlight>Everything is up to date</Lowlight>\n            </DashHighlightItem>\n        );\n    } else if (upgradeTxn) {\n        const txnCount = Object.keys(upgradeTxn.addlTxns).length;\n        const txns = txnCount === 1 ? \"tx\" : \"txns\";\n        upgradeInfo = (\n            <DashHighlightItem button=\"Review & Submit\" onClick={loadUpgrades}>\n                <Highlight>\n                    {txnCount}{\" \"}\n                    <Lowlight as=\"span\" className=\"text-lg\">\n                        {txns} needed\n                    </Lowlight>\n                </Highlight>\n                <Softlight className=\"italic\">\n                    To bring the on-chain deployment up to date\n                </Softlight>\n            </DashHighlightItem>\n        );\n    }\n\n    let highlights: React.ReactNode | null = null;\n    if (capo && !capo.isChartered) {\n        highlights = (\n            <DashboardHighlights title=\"Highlights\">\n                <DashHighlightItem\n                    title=\"Needs Charter\"\n                    footer=\"The Capo has not been created yet\"\n                >\n                    <Highlight>Setup the Capo to resolve</Highlight>\n                </DashHighlightItem>\n            </DashboardHighlights>\n        );\n    } else if (charterData) {\n        highlights = (\n            <DashboardHighlights\n                title=\"Highlights\"\n                footer={\n                    <>\n                        Capo:{\" \"}\n                        <Softlight as=\"span\">\n                            {capo?.address?.toString()}\n                        </Softlight>\n                        <div>\n                            Minting policy:{\" \"}\n                            <Softlight as=\"span\">\n                                {capo?.mintingPolicyHash?.toString()}\n                            </Softlight>\n                        </div>\n                    </>\n                }\n            >\n                {capo && charterData && (\n                    <CharterHighlights capo={capo} charterData={charterData} />\n                )}\n                {upgradeInfo}\n            </DashboardHighlights>\n        );\n    }\n\n    return (\n        <>\n            <DashboardTemplate title=\"Charter\">\n                <div>\n                    {provider?.dAppName}: {statusMessage}\n                </div>\n                <DashboardRow>\n                    <DashboardSummary title=\"Stats\">\n                        <DashSummaryItem title=\"Node Operators\">\n                            42\n                        </DashSummaryItem>\n                        <DashSummaryItem title=\"Active Stake\">\n                            14,200\n                            <Highlight>ADA</Highlight>\n                        </DashSummaryItem>\n                        <DashSummaryItem title=\"Great Things\">\n                            1042\n                        </DashSummaryItem>\n                    </DashboardSummary>\n                    {highlights}\n                </DashboardRow>\n            </DashboardTemplate>\n            {(charterData && (\n                <code className=\"text-sm\">\n                    <pre>{uplcDataSerializer(\"\", charterData)}</pre>\n                </code>\n            )) || <pre>loading charter data...</pre>}\n        </>\n    );\n}\n\n/**\n * Shows a highlights of various contract elements within a Capo-based dApp\n * @remarks\n * Includes mint and spend delegates, delegated data policies, and named manifest entries\n * @public\n */\nexport function CharterHighlights({\n    capo,\n    charterData,\n}: {\n    capo: Capo<any, any>;\n    charterData: CharterData;\n}) {\n    const isMainnet = capo.setup.isMainnet;\n    const [{ mintDgt, spendDgt }, setDelegates] = React.useState<{\n        mintDgt: BasicMintDelegate | undefined | null;\n        spendDgt: BasicMintDelegate | undefined | null;\n    }>({\n        mintDgt: undefined,\n        spendDgt: undefined,\n    });\n    const [dataControllers, setDataControllers] = React.useState<{\n        [key: string]: DelegatedDataContract<any, any>;\n    }>({});\n    React.useEffect(() => {\n        async function loadDelegates() {\n            const mintDgt = (await capo.getMintDelegate(charterData)) || null;\n            const spendDgt = (await capo.getSpendDelegate(charterData)) || null;\n            setDelegates({ mintDgt, spendDgt });\n\n            const dataControllers = {};\n            for (const [entryName, entryInfo] of [\n                ...charterData.manifest.entries(),\n            ]) {\n                if (entryInfo.entryType.DgDataPolicy) {\n                    const dgt = await capo.getDgDataController(entryName, {\n                        charterData,\n                    });\n                    dataControllers[entryName] = dgt;\n                }\n            }\n            setDataControllers(dataControllers);\n        }\n        loadDelegates();\n    }, [capo, charterData]);\n\n    const { mintDelegateLink } = charterData;\n    const { spendDelegateLink } = charterData;\n\n    // const mintDgtAddr = mintDelegateLink?.delegateValidatorHash\n    //     ? makeShelleyAddress(isMainnet, mintDelegateLink.delegateValidatorHash)\n    //     : undefined\n    // const spendDgtAddr = spendDelegateLink?.delegateValidatorHash\n    //     ? makeShelleyAddress(isMainnet, spendDelegateLink.delegateValidatorHash)\n    //     : undefined\n\n    if (!charterData) return null;\n    // debugger\n\n    const manifestNamedEntries = [...charterData.manifest.entries()]\n        .filter(([_, foundRole]) => !foundRole.entryType.DgDataPolicy)\n        .map(([roleName, foundRole]: [string, ErgoCapoManifestEntry]) => {\n            const entryType = Object.keys(foundRole.entryType)[0];\n            // debugger\n\n            return (\n                <DashHighlightItem\n                    key={`role-${roleName}`}\n                    title={roleName}\n                    footer={`manifest '${entryType}' entry`}\n                >\n                    <Softlight>{bytesToText(foundRole.tokenName)}</Softlight>\n                </DashHighlightItem>\n            );\n        });\n\n    const coreDelegates = (() => {\n        if (!mintDgt) return null;\n        if (!spendDgt) return null;\n        return (\n            <>\n                <CoreDelegateHighlightItem\n                    title=\"Mint Delegate\"\n                    delegate={mintDgt}\n                    delegateLink={mintDelegateLink}\n                    isMainnet={isMainnet}\n                    footer=\"governs all token minting\"\n                />\n\n                <CoreDelegateHighlightItem\n                    title=\"Spend Delegate\"\n                    delegate={spendDgt}\n                    delegateLink={spendDelegateLink}\n                    isMainnet={isMainnet}\n                    footer=\"controls admin &amp; redelegation\"\n                />\n            </>\n        );\n    })();\n\n    return (\n        <>\n            {coreDelegates}\n            {manifestNamedEntries}\n\n            {...Object.entries(capo.delegateRoles).flatMap(\n                ([roleName, roleInfo]: [\n                    string,\n                    DelegateSetup<any, StellarDelegate, any>\n                ]) => {\n                    if (roleName == \"govAuthority\") return null;\n                    if (roleName == \"mintDelegate\") return null;\n                    if (roleName == \"spendDelegate\") return null;\n\n                    const foundRole = charterData.manifest.get(roleName);\n                    if (!foundRole)\n                        return (\n                            <DashHighlightItem\n                                title={roleName}\n                                key={`mftRole-${roleName}`}\n                            >\n                                <Softlight>Delegated data policy</Softlight>\n                                <Highlight>needs deployment</Highlight>\n                            </DashHighlightItem>\n                        );\n                    return (\n                        <DelegatedDataPolicyItem\n                            roleName={roleName}\n                            delegate={dataControllers[roleName]}\n                            mainnet={isMainnet}\n                            foundRole={foundRole}\n                        />\n                    );\n                }\n            )}\n        </>\n    );\n}\n\nfunction DelegatedDataPolicyItem({\n    roleName,\n    delegate,\n    mainnet,\n    foundRole,\n}: {\n    roleName: string;\n    delegate: DelegatedDataContract<any, any>;\n    mainnet: boolean;\n    foundRole: ErgoCapoManifestEntry;\n}) {\n    return (\n        <DashHighlightItem\n            title={roleName}\n            footer={\n                <>\n                    Governs all{\" \"}\n                    <Lowlight as=\"span\">\n                        <b>{delegate?.recordTypeName}</b>\n                    </Lowlight>{\" \"}\n                    records\n                </>\n            }\n        >\n            <div className=\"flex flex-row justify-between w-full\">\n                <div>\n                    <Softlight>\n                        Delegated data policy\n                        <div className=\"text-xs\">\n                            &nbsp;&nbsp;&nbsp;\n                            {bytesToText(foundRole.tokenName)}\n                        </div>\n                    </Softlight>\n                </div>\n                <div className=\"flex flex-col items-end\">\n                    <Lowlight className=\"text-xs\">for type</Lowlight>\n                    <Highlight as=\"span\" className=\"whitespace-nowrap\">\n                        {foundRole.entryType.DgDataPolicy?.idPrefix}-*\n                    </Highlight>\n                </div>\n            </div>\n            {delegate?.getBundle().previousOnchainScript ? (\n                <div className=\"text-xs mt-2 w-full text-right\">\n                    <Highlight as=\"span\">update needed </Highlight>\n                    <Softlight className=\"italic\">\n                        to apply pending code changes to on-chain policy\n                    </Softlight>\n                </div>\n            ) : (\n                \"\"\n            )}\n        </DashHighlightItem>\n    );\n}\n\nfunction CoreDelegateHighlightItem({\n    title,\n    delegate,\n    delegateLink,\n    isMainnet,\n    footer,\n}: {\n    title: string;\n    delegate?: BasicMintDelegate;\n    delegateLink?: RelativeDelegateLink;\n    isMainnet: boolean;\n    footer?: string;\n}) {\n    if (!delegateLink) {\n        return (\n            <DashHighlightItem title={title}>\n                <Highlight>needs deployment</Highlight>\n            </DashHighlightItem>\n        );\n    }\n    const dvh = delegateLink.delegateValidatorHash;\n    const addr = dvh ? abbrevAddress(makeShelleyAddress(isMainnet, dvh)) : \"\";\n    // if (delegate) debugger\n    return (\n        <DashHighlightItem title={title} footer={footer}>\n            <Softlight>{delegateLink?.uutName}</Softlight>\n            <Lowlight className=\"text-right\">{addr}</Lowlight>\n\n            {delegate?.getBundle().previousOnchainScript ? (\n                <Highlight className=\"text-right\">\n                    update needed{\" \"}\n                    <Softlight>to apply changes to on-chain policy</Softlight>\n                </Highlight>\n            ) : null}\n        </DashHighlightItem>\n    );\n}\n","\"use client\"\nimport type { TxDescription } from \"@donecollectively/stellar-contracts\"\nimport { TxSubmitMgr } from \"@donecollectively/stellar-contracts\"\nimport * as React from \"react\"\nimport {\n  DashboardRow,\n  DashboardHighlights,\n  DashHighlightItem,\n  Highlight,\n  Lowlight,\n  Softlight,\n} from \"./DashboardTemplate.js\"\n\n/**\n * @public\n */\nexport type PendingTxn = {\n  txd: TxDescription<any, any>\n  statusSummary: string\n  mgr?: TxSubmitMgr\n}\n\n/**\n * @deprecated - the CharterStatus component is now preferred\n * @public\n */\nexport function ShowPendingTxns({\n  pendingTxns,\n}: {\n  pendingTxns: Map<string, PendingTxn>\n}) {\n  return (\n    <DashboardRow>\n      <DashboardHighlights title=\"Pending Txns\">\n        {...Array.from(pendingTxns.values()).map(({ mgr, statusSummary, txd }) => (\n          <DashHighlightItem key={txd.id} title={txd.txName || txd.description}>\n            {statusSummary}\n            {mgr?.pending?.activity}\n          </DashHighlightItem>\n        ))}\n      </DashboardHighlights>\n    </DashboardRow>\n  )\n}\n","\"use client\";\nimport * as React from \"react\";\n\n/**\n * @deprecated - probably not needed anymore\n * @public\n */\nexport function ShowFailedActivity(\n    {\n        failed, failure: { message, code, data, ...otherFailInfo } = {} as any, ...results\n    }: OgmiosEvalFailure = {} as any) {\n    if (Object.keys(otherFailInfo).length === 0) {\n        otherFailInfo = undefined as any;\n    }\n    if (!failed || !message) {\n        return (\n            <code>\n                <pre>\n                    {failed && (\n                        <>\n                            failed: {failed}\n                            <br />\n                        </>\n                    )}\n                    {message && (\n                        <>\n                            message: {message}\n                            <br />\n                        </>\n                    )}\n                    {JSON.stringify({ otherFailInfo, ...results }, null, 2)}\n                    <br />\n                </pre>\n            </code>\n        );\n    }\n    const moreDetail = Array.isArray(data) && !!data[0].validator ? (\n        <div>\n            {data.map(({ validator, error, ...others }) => {\n                const { index, purpose } = validator;\n                const {\n                    code: errorCode, message: errorMessage, data: { validationError, traces = [], ...otherData } = {},\n                } = error;\n\n                return (\n                    <div key={index}>\n                        <h4>\n                            Validator {index} ({purpose}): {errorMessage}\n                            <pre>{JSON.stringify(others, null, 2)}</pre>\n                        </h4>\n                        <hr />\n                        <div className=\"ml-8 bl-2 b-slate bl-2\">\n                            <code>\n                                <pre>{traces.join(\"\\n\")}</pre>\n                            </code>\n                            <hr />\n                            <pre>otherData: {JSON.stringify(otherData, null, 2)}</pre>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    ) : (\n        <code>\n            <pre>{JSON.stringify(data, null, 2)}</pre>\n        </code>\n    );\n\n    return (\n        <div>\n            Activity failed: {failed} <br />\n            Message: {message} <br />\n            {moreDetail}\n        </div>\n    );\n}\n\n/**\n * @public\n */\nexport type OgmiosEvalFailure = {\n    failed: string\n    failure: {\n        message: string\n        code: number\n        data: any\n    }\n}\n// Example data:\nconst exampleData = {\n    failed: \"evaluate\",\n    failure: {\n        message: \"Some scripts of the transactions terminated with error(s).\",\n        code: 3010,\n        data: [\n            {\n                validator: {\n                    index: 0,\n                    purpose: \"mint\",\n                },\n                error: {\n                    code: 3012,\n                    message: \"Some of the scripts failed to evaluate to a positive outcome. The field 'data.validationError' informs about the nature of the error, and 'data.traces' lists all the execution traces collected during the script execution.\",\n                    data: {\n                        validationError: \"An error has occurred:\\nThe machine terminated because of an error, either from a built-in function or from an explicit use of 'error'.\",\n                        traces: [\n                            \"cm1\",\n                            \" 🚥❓ Capo minter\",\n                            \" -- minter policy id: 160b62cc1aa98de8c818aa553e76dd1596f5d2800f9d9f958b8ef20e\",\n                            \"cm2\",\n                            \" -- creating Capo charter\",\n                            \"❗ must mint the charter token\",\n                            \"❗ verifies that the provided seed utxo is being spent, providing uniqueness assurances for the minting-script's seed parameters\",\n                            \" -- has seed -> ok\\n\",\n                            \"cm3\",\n                            \"validateUutMinting\",\n                            \"❗ must mint uuts for mintDgt, spendDgt, and govAuth using the same seed\",\n                            \" ℹ️ 🐞 expected: 1x charter\",\n                            \" ℹ️ 🐞 expected: 1x capoGov-0458e5880117\",\n                            \" ℹ️ 🐞 expected: 1x mintDgt-0458e5880117\",\n                            \" ℹ️ 🐞 expected: 1x spendDgt-0458e5880117\",\n                            \" ℹ️ 🐞 actual: 1x capoGov-0458e5880117\",\n                            \" ℹ️ 🐞 actual: 1x charter\",\n                            \" ℹ️ 🐞 actual: 1x mintDgt-0458e5880117\",\n                            \" ℹ️ 🐞 actual: 1x spendDgt-0458e5880117\",\n                            \"other policy values minted: \\n\",\n                            \"lovelace: 0\\n\",\n                            \"❗ Ensures the mint for this policy-id is exactly the expected value\",\n                            \"mismatch in UUT mint\",\n                        ],\n                    },\n                },\n            },\n        ],\n        id: {},\n    },\n}\n\n"],"names":["React","ellipse","tx","capo","tcx","mintDgt","spendDgt","dataControllers"],"mappings":"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"}