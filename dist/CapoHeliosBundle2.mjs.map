{"version":3,"file":"CapoHeliosBundle2.mjs","sources":["../src/configuration/DeployedScriptConfigs.ts","../src/helios/scriptBundling/CapoHeliosBundle.ts"],"sourcesContent":["/**\n * Provides a registry for script configurations that are deployed to the\n * on-chain enviorment.\n * @remarks\n *\n */\n\nimport {\n    makeMintingPolicyHash,\n    makeTxId,\n    makeValidatorHash,\n} from \"@helios-lang/ledger\";\nimport type { CapoConfig } from \"../CapoTypes.js\";\nimport type { DeployedProgramBundle } from \"../helios/CachedHeliosProgram.js\";\nimport type { configBaseWithRev } from \"../StellarContract.js\";\nimport type {\n    capoDelegateConfig,\n    minimalDelegateConfig,\n} from \"../delegation/RolesAndDelegates.js\";\nimport type { BasicMinterParams } from \"../minting/CapoMinter.js\";\n\n/**\n * type-safe factory function for creating a registry of scripts with their\n * deployment details for the on-chain environment\n * @remarks\n * use this in your Capo bundle's `config()` function\n *\n * The registry is indexed by each script's moduleName, and contains a list of\n * deployed configurations for that script, with configuration details,\n * on-chain script hash, and program CBOR.\n * @public\n */\nexport function mkDeployedScriptConfigs(x: AllDeployedScriptConfigs) {\n    return x;\n}\n/**\n * type-safe factory function for creating a Capo deployment details object\n * with details of its scripts deployed to the on-chain environment\n * @remarks\n * use this to make your Capo bundle's deployedDetails attribute.\n * @public\n */\nexport function mkCapoDeployment({\n    capo,\n}: // scripts,\nRequired<CapoDeployedDetails<\"json\">>) {\n    const { config, programBundle } = capo;\n    return {\n        // scripts,\n        capo: {\n            config: parseCapoJSONConfig(config),\n            programBundle,\n        } as DeployedScriptDetails<CapoConfig, \"native\">,\n    };\n}\n\n/**\n * @public\n */\ntype DelegateDeployment = {\n    config: minimalDelegateConfig;\n    scriptHash: string;\n    programBundle?: DeployedProgramBundle;\n};\n\n/**\n * type-safe factory function for creating a Delegate deployment details object\n * @public\n */\nexport function mkDelegateDeployment(\n    ddd: DelegateDeployment\n): DelegateDeployment {\n    return ddd;\n}\n\n/**\n * @public\n */\nexport type CapoDeployedDetails<form extends \"json\" | \"native\" = \"native\"> = {\n    capo?: DeployedScriptDetails<CapoConfig, form>;\n    minter? : DeployedScriptDetails<BasicMinterParams, form>\n    isNullDeployment?: boolean;\n};\n\n/**\n * @public\n */\nexport type AllDeployedScriptConfigs = {\n    [scriptModuleName: string]: ScriptDeployments;\n};\n\n/**\n * @public\n */\ntype DeployedConfigWithVariants = {\n    [name: string]: DeployedScriptDetails;\n} & {\n    singleton?: never;\n};\n\n/**\n * @public\n */\ntype DeployedSingletonConfig<CT extends configBaseWithRev = configBaseWithRev> =\n    {\n        singleton: DeployedScriptDetails<CT>;\n    };\n\n/**\n * @public\n */\nexport type ScriptDeployments =\n    | DeployedSingletonConfig\n    | DeployedConfigWithVariants;\n\n/**\n * @public\n */\nexport type DeployedScriptDetails<\n    CT extends configBaseWithRev = configBaseWithRev,\n    form extends \"json\" | \"native\" = \"native\"\n> =\n    | {\n          config: form extends \"json\" ? any : CT;\n          scriptHash?: number[];\n          programBundle?: DeployedProgramBundle;\n      }\n    | RequiredDeployedScriptDetails<CT>;\n\n/**\n * @public\n */\nexport type RequiredDeployedScriptDetails<\n    CT extends configBaseWithRev,\n    form extends \"json\" | \"native\" = \"native\"\n> = {\n    config: form extends \"json\" ? any : CT;\n    programBundle: DeployedProgramBundle;\n    scriptHash?: string;\n};\n\n/**\n * @public\n */\nexport type CapoConfigJSON = {\n    mph: {\n        bytes: string;\n    };\n    rev: bigint;\n    seedTxn?: {\n        bytes: string;\n    };\n    seedIndex: bigint;\n    rootCapoScriptHash: {\n        bytes: string;\n    };\n};\n\n/**\n * parses details needed for a Capo and its related minter to be instantiated\n * @public\n */\nexport function parseCapoJSONConfig(rawJsonConfig: CapoConfigJSON | string) {\n    const jsonConfig =\n        typeof rawJsonConfig === \"string\"\n            ? (JSON.parse(rawJsonConfig) as CapoConfigJSON)\n            : rawJsonConfig;\n\n    const { mph, rev, seedTxn, seedIndex, rootCapoScriptHash } = jsonConfig;\n\n    const outputConfig: any = {};\n    if (!mph) throw new Error(\"mph is required\");\n    if (!seedTxn) throw new Error(\"seedTxn is required\");\n    if (!seedIndex) throw new Error(\"seedIndex is required\");\n    if (!rootCapoScriptHash) throw new Error(\"rootCapoScriptHash is required\");\n\n    outputConfig.mph = makeMintingPolicyHash(mph.bytes);\n    outputConfig.rev = BigInt(rev || 1);\n    outputConfig.seedTxn = makeTxId(seedTxn.bytes);\n    outputConfig.seedIndex = BigInt(seedIndex);\n    outputConfig.rootCapoScriptHash = makeValidatorHash(\n        rootCapoScriptHash.bytes\n    );\n\n    return outputConfig as CapoConfig;\n}\n/**\n * parses details needed for a Capo minter to be instantiated\n * @public\n */\nexport function parseCapoMinterJSONConfig(\n    rawJSONConfig: Pick<CapoConfigJSON, \"seedTxn\" | \"seedIndex\">\n) {\n    const { seedTxn, seedIndex } = rawJSONConfig;\n    if (!seedTxn) throw new Error(\"seedTxn is required\");\n    if (!seedIndex) throw new Error(\"seedIndex is required\");\n\n    return {\n        seedTxn: makeTxId(seedTxn.bytes),\n        seedIndex: BigInt(seedIndex),\n    };\n}\n","import type { Source } from \"@helios-lang/compiler-utils\";\n\nimport {\n    HeliosScriptBundle,\n    placeholderSetupDetails,\n} from \"./HeliosScriptBundle.js\";\n\nimport CapoMintHelpers from \"../../CapoMintHelpers.hl\";\nimport CapoDelegateHelpers from \"../../delegation/CapoDelegateHelpers.hl\";\nimport StellarHeliosHelpers from \"../../StellarHeliosHelpers.hl\";\nimport CapoHelpers from \"../../CapoHelpers.hl\";\nimport TypeMapMetadata from \"../../TypeMapMetadata.hl\";\nimport mainContract from \"../../DefaultCapo.hl\";\n\nimport {\n    parseCapoJSONConfig,\n    parseCapoMinterJSONConfig,\n    type AllDeployedScriptConfigs,\n    type CapoDeployedDetails,\n    type DeployedScriptDetails,\n} from \"../../configuration/DeployedScriptConfigs.js\";\nimport type { StellarBundleSetupDetails } from \"../../StellarContract.js\";\nimport type { AbstractNew } from \"../typeUtils.js\";\n\nexport type CapoHeliosBundleClass = AbstractNew<CapoHeliosBundle>;\n\n/**\n * A set of Helios scripts that are used to define a Capo contract.\n * @remarks\n * This class is intended to be extended to provide a specific Capo contract.\n *\n * You can inherit & augment `get sharedModules()` to make additional\n * helios modules available for use in related contract scripts.  Other\n * bundles can include these modules only by naming them in their\n * own `includeFromCapoModules()` method.\n * @public\n */\nexport class CapoHeliosBundle extends HeliosScriptBundle {\n    configuredScriptDetails?: DeployedScriptDetails;\n    static isPreconfigured = false;\n    preConfigured: CapoDeployedDetails<any> = {capo: undefined};\n    scriptParamsSource = \"config\" as const\n    requiresGovAuthority = true;\n\n    get hasAnyVariant() {\n        if (this.preConfigured?.capo?.config) return true;\n        if (this.configuredUplcParams) return true;\n\n        return false\n    }\n\n    parseCapoJSONConfig(config: any) {\n        return parseCapoJSONConfig(config);\n    }\n\n    parseCapoMinterJSONConfig(config: any) {\n        return parseCapoMinterJSONConfig(config);\n    }\n\n    init(setupDetails: StellarBundleSetupDetails<any>) {\n        let deployedDetails : DeployedScriptDetails | undefined;\n        \n        if (this.preConfigured.capo) {\n            this.configuredScriptDetails = deployedDetails = this.preConfigured.capo\n            const {\n                config, programBundle\n            } = deployedDetails;\n            if (!programBundle) throw new Error(`${this.constructor.name} missing deployedDetails.programBundle`);\n            // if (!scriptHash) throw new Error(`${this.constructor.name}: missing deployedDetails.scriptHash`);\n\n            this.preCompiled = { singleton: { programBundle, config } };\n        } else if (setupDetails.deployedDetails) {\n            this.configuredScriptDetails = deployedDetails = setupDetails.deployedDetails\n        } else if (!this.configuredScriptDetails) {\n            \n            console.warn(`no script details configured for ${this.constructor.name} (dbpa)`)\n        }\n\n        const hasParams = deployedDetails?.config || setupDetails.params\n        const uplcParams = hasParams ? this.paramsToUplc(hasParams) : undefined\n\n        if (hasParams) {\n            this.configuredParams = hasParams\n            this.configuredUplcParams = uplcParams\n        }\n        this._didInit = true;\n    }\n\n    get isPrecompiled() {\n        return !!this.preConfigured?.capo?.programBundle;\n    }\n\n\n    getPreCompiledBundle(variant: string) {\n        if (variant !== \"singleton\") {\n            throw new Error(`Capo bundle: ${this.constructor.name} only singleton variant is supported`);\n        }\n\n        const {capo} = this.preConfigured\n        if (!capo?.programBundle) {\n            debugger\n            throw new Error(`Capo bundle: ${this.constructor.name} - not preConfigured or no programBundle configured (debugging breakpoint available)`)\n        }\n        return capo.programBundle\n    }\n\n    get main() {\n        return mainContract;\n    }\n\n    getPreconfiguredUplcParams(variantName:string) {\n        if (!this.preConfigured?.capo?.config) {\n            return undefined\n        }\n        return super.getPreconfiguredUplcParams(variantName)\n    }\n\n    get params() {\n        \n        if (this.configuredParams) {\n            return this.configuredParams\n        }\n    }\n\n    datumTypeName = \"CapoDatum\";\n    capoBundle = this; // ???\n\n    get scriptConfigs() {\n        throw new Error(`scriptConfigs - do something else instead`);\n    }\n\n    get bridgeClassName(): string {\n        if (this.constructor === CapoHeliosBundle) {\n            return \"CapoDataBridge\";\n        }\n\n        return (\n            this.constructor.name.replace(\"Helios\", \"\").replace(\"Bundle\", \"\") +\n            \"Bridge\"\n        );\n        // throw new Error(`${this.constructor.name} must implement get bridgeClassName`);\n    }\n    static isCapoBundle = true;\n\n    /**\n     * returns only the modules needed for the Capo contract\n     * @remarks\n     * overrides the base class's logic that references a connected\n     * Capo bundle - that policy is not needed here because this IS\n     * the Capo bundle.\n     */\n    getEffectiveModuleList() {\n        return this.modules;\n    }\n\n    /**\n     * indicates a list of modules available for inclusion in Capo-connected scripts\n     * @remarks\n     * Subclasses can implement this method to provide additional modules\n     * shareable to various Capo-connected scripts; those scripts need to\n     * include the modules by name in their `includeFromCapoModules()` method.\n     *\n     * See the\n     */\n    get sharedModules(): Source[] {\n        return [];\n    }\n\n    get modules() {\n        return [\n            CapoMintHelpers,\n            CapoDelegateHelpers,\n            StellarHeliosHelpers,\n            CapoHelpers,\n            TypeMapMetadata,\n        ];\n    }\n}\n"],"names":["mainContract","CapoMintHelpers","CapoDelegateHelpers","StellarHeliosHelpers","CapoHelpers","TypeMapMetadata"],"mappings":"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"}