{"version":3,"file":"CapoHeliosBundle2.mjs","sources":["../src/configuration/DeployedScriptConfigs.ts","../src/helios/scriptBundling/CapoHeliosBundle.ts"],"sourcesContent":["/**\n * Provides a registry for script configurations that are deployed to the\n * on-chain enviorment.\n * @remarks\n *\n */\n\nimport {\n    makeMintingPolicyHash,\n    makeTxId,\n    makeValidatorHash,\n} from \"@helios-lang/ledger\";\nimport type { CapoConfig } from \"../CapoTypes.js\";\nimport type { PrecompiledProgramJSON } from \"../helios/CachedHeliosProgram.js\";\nimport type { configBaseWithRev } from \"../StellarContract.js\";\nimport type {\n    capoDelegateConfig,\n    minimalDelegateConfig,\n} from \"../delegation/RolesAndDelegates.js\";\nimport type { BasicMinterParams } from \"../minting/CapoMinter.js\";\n\n/**\n * type-safe factory function for creating a registry of scripts with their\n * deployment details for the on-chain environment\n * @remarks\n * use this in your Capo bundle's `config()` function\n *\n * The registry is indexed by each script's moduleName, and contains a list of\n * deployed configurations for that script, with configuration details,\n * on-chain script hash, and program CBOR.\n * @public\n */\nexport function mkDeployedScriptConfigs(x: AllDeployedScriptConfigs) {\n    return x;\n}\n/**\n * type-safe factory function for creating a Capo deployment details object\n * with details of its scripts deployed to the on-chain environment\n * @remarks\n * use this to make your Capo bundle's deployedDetails attribute.\n * @public\n */\nexport function mkCapoDeployment({\n    capo,\n}: // scripts,\nRequired<CapoDeployedDetails<\"json\">>) {\n    const {\n        config,\n        // programBundle\n    } = capo;\n    return {\n        // scripts,\n        capo: {\n            config: parseCapoJSONConfig(config),\n        } as DeployedScriptDetails<CapoConfig, \"native\">,\n    };\n}\n\n/**\n * @public\n */\ntype DelegateDeployment = {\n    config: minimalDelegateConfig;\n    scriptHash: string;\n    programBundle?: PrecompiledProgramJSON;\n};\n\n/**\n * type-safe factory function for creating a Delegate deployment details object\n * @public\n */\nexport function mkDelegateDeployment(\n    ddd: DelegateDeployment\n): DelegateDeployment {\n    return ddd;\n}\n\n/**\n * @public\n */\nexport type CapoDeployedDetails<form extends \"json\" | \"native\" = \"native\"> = {\n    capo?: DeployedScriptDetails<CapoConfig, form>;\n    minter?: DeployedScriptDetails<BasicMinterParams, form>;\n};\n\n/**\n * @public\n */\nexport type AllDeployedScriptConfigs = {\n    [scriptModuleName: string]: ScriptDeployments;\n};\n\n/**\n * @public\n */\ntype DeployedConfigWithVariants = {\n    [name: string]: DeployedScriptDetails;\n} & {\n    singleton?: never;\n};\n\n/**\n * @public\n */\ntype DeployedSingletonConfig<CT extends configBaseWithRev = configBaseWithRev> =\n    {\n        singleton: DeployedScriptDetails<CT>;\n    };\n\n/**\n * @public\n */\nexport type ScriptDeployments =\n    | DeployedSingletonConfig\n    | DeployedConfigWithVariants;\n\n/**\n * @public\n */\nexport type DeployedScriptDetails<\n    CT extends configBaseWithRev = configBaseWithRev,\n    form extends \"json\" | \"native\" = \"native\"\n> = {\n    config: form extends \"json\" ? any : CT;\n    scriptHash?: number[];\n    programName?: string;\n    //   programBundle?: DeployedProgramBundle;\n};\n\n/**\n * @public\n */\nexport type CapoConfigJSON = {\n    mph: {\n        bytes: string;\n    };\n    rev: bigint;\n    seedTxn?: {\n        bytes: string;\n    };\n    seedIndex: bigint;\n    rootCapoScriptHash: {\n        bytes: string;\n    };\n};\n\n/**\n * parses details needed for a Capo and its related minter to be instantiated\n * @public\n */\nexport function parseCapoJSONConfig(rawJsonConfig: CapoConfigJSON | string) {\n    const jsonConfig =\n        typeof rawJsonConfig === \"string\"\n            ? (JSON.parse(rawJsonConfig) as CapoConfigJSON)\n            : rawJsonConfig;\n\n    const { mph, rev, seedTxn, seedIndex, rootCapoScriptHash } = jsonConfig;\n\n    const outputConfig: any = {};\n    if (!mph) throw new Error(\"mph is required\");\n    if (!seedTxn) throw new Error(\"seedTxn is required\");\n    if (!seedIndex) throw new Error(\"seedIndex is required\");\n    if (!rootCapoScriptHash) throw new Error(\"rootCapoScriptHash is required\");\n\n    outputConfig.mph = makeMintingPolicyHash(mph.bytes);\n    outputConfig.rev = BigInt(rev || 1);\n    outputConfig.seedTxn = makeTxId(seedTxn.bytes);\n    outputConfig.seedIndex = BigInt(seedIndex);\n    outputConfig.rootCapoScriptHash = makeValidatorHash(\n        rootCapoScriptHash.bytes\n    );\n\n    return outputConfig as CapoConfig;\n}\n/**\n * parses details needed for a Capo minter to be instantiated\n * @public\n */\nexport function parseCapoMinterJSONConfig(\n    rawJSONConfig: Pick<CapoConfigJSON, \"seedTxn\" | \"seedIndex\">\n) {\n    const { seedTxn, seedIndex } = rawJSONConfig;\n    if (!seedTxn) throw new Error(\"seedTxn is required\");\n    if (!seedIndex) throw new Error(\"seedIndex is required\");\n\n    return {\n        seedTxn: makeTxId(seedTxn.bytes),\n        seedIndex: BigInt(seedIndex),\n    };\n}\n","import type { Source } from \"@helios-lang/compiler-utils\";\n\nimport {\n    HeliosScriptBundle,\n    placeholderSetupDetails,\n} from \"./HeliosScriptBundle.js\";\n\nimport CapoMintHelpers from \"../../CapoMintHelpers.hl\";\nimport CapoDelegateHelpers from \"../../delegation/CapoDelegateHelpers.hl\";\nimport StellarHeliosHelpers from \"../../StellarHeliosHelpers.hl\";\nimport CapoHelpers from \"../../CapoHelpers.hl\";\nimport TypeMapMetadata from \"../../TypeMapMetadata.hl\";\nimport mainContract from \"../../DefaultCapo.hl\";\n\nimport type { StellarBundleSetupDetails } from \"../../StellarContract.js\";\nimport type { AbstractNew } from \"../typeUtils.js\";\nimport { parseCapoJSONConfig, parseCapoMinterJSONConfig, type CapoDeployedDetails, type DeployedScriptDetails } from \"../../configuration/DeployedScriptConfigs.js\";\nimport type { capoConfigurationDetails } from \"../../configuration/DefaultNullCapoDeploymentConfig.js\";\nimport type { PrecompiledProgramJSON } from \"../CachedHeliosProgram.js\";\n\nexport type CapoHeliosBundleClass = AbstractNew<CapoHeliosBundle>;\n\n/**\n * A set of Helios scripts that are used to define a Capo contract.\n * @remarks\n * This class is intended to be extended to provide a specific Capo contract.\n *\n * You can inherit & augment `get sharedModules()` to make additional\n * helios modules available for use in related contract scripts.  Other\n * bundles can include these modules only by naming them in their\n * own `includeFromCapoModules()` method.\n * @public\n */\nexport class CapoHeliosBundle extends HeliosScriptBundle {\n    preConfigured?: typeof capoConfigurationDetails\n    precompiledScriptDetails?: CapoDeployedDetails<any> = {capo: undefined};\n    scriptParamsSource = \"config\" as const\n    requiresGovAuthority = true;\n\n    get hasAnyVariant() {\n        if (this.preConfigured?.capo?.config) return true;\n        throw new Error(\"can we live without configuredUplcParams before accessing program?\")\n        if (this.configuredUplcParams) return true;\n\n        return false\n    }\n\n    parseCapoJSONConfig(config: any) {\n        return parseCapoJSONConfig(config);\n    }\n\n    parseCapoMinterJSONConfig(config: any) {\n        return parseCapoMinterJSONConfig(config);\n    }\n\n    init(setupDetails: StellarBundleSetupDetails<any>) {\n        const {setup} = setupDetails\n\n        let deployedDetails : DeployedScriptDetails | undefined;\n        \n        if (this.precompiledScriptDetails?.capo) {\n            this.configuredScriptDetails = deployedDetails = this.precompiledScriptDetails.capo\n            const {\n                config\n                // programBundle\n            } = deployedDetails;\n            this.configuredParams = config\n            this._selectedVariant = \"capo\"\n        } else if (setupDetails.deployedDetails) {\n            this.configuredScriptDetails = deployedDetails = setupDetails.deployedDetails\n        } else if (!this.configuredScriptDetails) {\n            \n            console.warn(`no script details configured for ${this.constructor.name} (dbpa)`)\n        }\n        this._didInit = true;\n    }\n\n    initProgramDetails() {\n        const {configuredScriptDetails} = this;\n\n        const hasParams = configuredScriptDetails?.config || this.setupDetails.params\n        const uplcParams = hasParams ? this.paramsToUplc(hasParams) : undefined\n\n        if (hasParams) {\n            this.configuredParams = hasParams\n            this.configuredUplcParams = uplcParams\n        }\n    }\n\n    get isPrecompiled() {\n        const t = super.isPrecompiled\n        // the `preConfigured` entry, built by the stellar rollup bundler,\n        // signals that the script is precompiled.  The actual compiled script\n        // is loaded separately, but this provide the key signal of its its presence.\n        const hasScriptHash = !!this.precompiledScriptDetails?.capo?.scriptHash;\n        if (t !== hasScriptHash) {\n            debugger\n            throw new Error(\"surprise! this code path is used: isPrecompiled() - precompiledScriptDetails mismatch (dbpa)\")\n            // ^^ if this never happens, then we don't need this method\n        }\n        return t\n    }\n\n    async loadPrecompiledScript() : Promise<PrecompiledProgramJSON> {\n        throw new Error(\"capo on-chain bundle is not precompiled\");\n    }\n\n    async loadPrecompiledMinterScript() : Promise<PrecompiledProgramJSON> {\n        throw new Error(\"capo minter on-chain bundle is not precompiled\");\n    }\n\n    getPreCompiledBundle(variant: string) {\n        throw new Error(\"deprecated\")\n        if (variant !== \"singleton\") {\n            throw new Error(`Capo bundle: ${this.constructor.name} only singleton variant is supported`);\n        }\n\n        //@ts-expect-error\n        const {capo} = this.preCompiledScriptDetails\n        if (!capo?.scriptHash) {\n            debugger\n            throw new Error(`Capo bundle: ${this.constructor.name} - not preConfigured or no programBundle configured (debugging breakpoint available)`)\n        }\n        return capo.programBundle\n    }\n\n    get main() {\n        return mainContract;\n    }\n\n    getPreconfiguredUplcParams(variantName:string) {\n        if (!this.preConfigured?.capo?.config) {\n            return undefined\n        }\n        return super.getPreconfiguredUplcParams(variantName)\n    }\n\n    get params() {\n        \n        if (this.configuredParams) {\n            return this.configuredParams\n        }\n    }\n\n    datumTypeName = \"CapoDatum\";\n    capoBundle = this; // ???\n\n    get scriptConfigs() {\n        throw new Error(`scriptConfigs - do something else instead`);\n    }\n\n    get bridgeClassName(): string {\n        if (this.constructor === CapoHeliosBundle) {\n            return \"CapoDataBridge\";\n        }\n\n        return (\n            this.constructor.name.replace(\"Helios\", \"\").replace(\"Bundle\", \"\") +\n            \"Bridge\"\n        );\n        // throw new Error(`${this.constructor.name} must implement get bridgeClassName`);\n    }\n    static isCapoBundle = true;\n\n    /**\n     * returns only the modules needed for the Capo contract\n     * @remarks\n     * overrides the base class's logic that references a connected\n     * Capo bundle - that policy is not needed here because this IS\n     * the Capo bundle.\n     */\n    getEffectiveModuleList() {\n        return this.modules;\n    }\n\n    /**\n     * indicates a list of modules available for inclusion in Capo-connected scripts\n     * @remarks\n     * Subclasses can implement this method to provide additional modules\n     * shareable to various Capo-connected scripts; those scripts need to\n     * include the modules by name in their `includeFromCapoModules()` method.\n     *\n     * See the\n     */\n    get sharedModules(): Source[] {\n        return [];\n    }\n\n    get modules() {\n        return [\n            CapoMintHelpers,\n            CapoDelegateHelpers,\n            StellarHeliosHelpers,\n            CapoHelpers,\n            TypeMapMetadata,\n        ];\n    }\n}\n"],"names":["mainContract","CapoMintHelpers","CapoDelegateHelpers","StellarHeliosHelpers","CapoHelpers","TypeMapMetadata"],"mappings":"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"}