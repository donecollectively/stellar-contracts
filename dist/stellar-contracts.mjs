export { e as environment } from './environment.mjs';
import { C as ContractBasedDelegate, A as Activity, d as datum, D as DataBridge, a as ContractDataBridge, i as impliedSeedActivityMaker, b as DataBridgeReaderClass, S as StellarContract, c as StellarDelegate, U as UutName, h as hasReqts, p as partialTxn, t as txn } from './ContractBasedDelegate2.mjs';
export { k as ContractDataBridgeWithEnumDatum, l as ContractDataBridgeWithOtherDatum, g as SeedActivity, e as UtxoHelper, f as findInputsInWallets, j as getSeed, m as mergesInheritedReqts } from './ContractBasedDelegate2.mjs';
import { m as mkValuesEntry, d as dumpAny, S as StellarTxnContext, a as mkUutValuesEntries, b as delegateLinkSerializer, e as errorMapAsString, u as uplcDataSerializer, T as TxNotNeededError, A as AlreadyPendingError } from './HeliosScriptBundle.mjs';
export { I as HeliosScriptBundle, F as abbrevAddress, G as abbreviatedDetail, H as abbreviatedDetailBytes, w as addrAsString, i as assetsAsString, E as betterJsonSerializer, x as byteArrayAsString, B as byteArrayListAsString, g as colors, C as datumSummary, c as debugMath, J as defaultNoDefinedModuleName, h as displayTokenName, D as hexToPrintableString, q as lovelaceToAda, K as placeholderSetupDetails, p as policyIdAsString, r as realDiv, f as realMul, s as stringToPrintableString, t as toFixedReal, j as txAsString, o as txInputAsString, n as txOutputAsString, z as txOutputIdAsString, y as txidAsString, k as utxoAsString, l as utxosAsString, v as valueAsString } from './HeliosScriptBundle.mjs';
import { bytesToHex, decodeUtf8, encodeUtf8, equalsBytes } from '@helios-lang/codec-utils';
export { decodeUtf8 as bytesToText, encodeUtf8 as textToBytes } from '@helios-lang/codec-utils';
import { makeInlineTxOutputDatum, makeValue, makeAssets, makeAddress, makeTxOutput, makeDummyMintingPolicyHash, makeValidatorHash, makeTxOutputId, makeNetworkParamsHelper, decodeTx, makeTxId, decodeTxWitnesses } from '@helios-lang/ledger';
import UnspecializedDelegateBundle from '@donecollectively/stellar-contracts/contracts/UnspecializedDelegate.hlb';
export { UnspecializedDgtBundle } from '@donecollectively/stellar-contracts/contracts/UnspecializedDelegate.hlb';
import { makeCast } from '@helios-lang/contract-utils';
import { CapoDelegateBundle } from './CapoDelegateHeliosBundle.mjs';
import { U as UnspecializedDelegate_hl } from './UnspecializedDelegate.mjs';
import { C as CapoHeliosBundle } from './CapoHeliosBundle2.mjs';
export { a as mkCapoDeployment, b as mkDelegateDeployment, m as mkDeployedScriptConfigs, p as parseCapoJSONConfig, c as parseCapoMinterJSONConfig } from './CapoHeliosBundle2.mjs';
import { makeIntData } from '@helios-lang/uplc';
import { blake2b } from '@helios-lang/crypto';
import CapoMinterBundle from '@donecollectively/stellar-contracts/contracts/CapoMinter.hlb';
import { DelegatedDataContract } from './DelegatedDataContract.mjs';
import ReqtsConcreteBundle from '@donecollectively/stellar-contracts/contracts/Reqts.concrete.hlb';
import '@helios-lang/compiler-utils';
import './DefaultCapo.mjs';
import './BasicDelegate.mjs';
import './ReqtsData.mjs';
export { DelegatedDataBundle } from './DelegatedDataBundle.mjs';
import { EventEmitter } from 'eventemitter3';
import { customAlphabet } from 'nanoid';
import { makeTxChainBuilder } from '@helios-lang/tx-utils';
import { createInteractionContext, createLedgerStateQueryClient, createTransactionSubmissionClient } from '@cardano-ogmios/client';
import '@donecollectively/stellar-contracts/HeliosProgramWithCacheAPI';
import '@helios-lang/compiler';

class DelegateConfigNeeded extends Error {
  errors;
  availableDgtNames;
  constructor(message, options) {
    super(message);
    const { errors, availableDgtNames } = options;
    if (errors) this.errors = errors;
    if (availableDgtNames) this.availableDgtNames = availableDgtNames;
  }
}
function delegateRoles(delegateMap) {
  return delegateMap;
}
function defineRole(delegateType, delegateClass, config, uutBaseName) {
  return {
    delegateType,
    delegateClass,
    config,
    uutPurpose: uutBaseName || delegateType
  };
}
//!!! todo: develop this further to allow easily enhancing a parent role-definition
//! a map of delegate selections needed for a transaction
//! a single delegate selection, where a person chooses

var __defProp$4 = Object.defineProperty;
var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
var __decorateClass$4 = (decorators, target, key, kind) => {
  var result = __getOwnPropDesc$4(target, key) ;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (decorator(target, key, result) ) || result;
  if (result) __defProp$4(target, key, result);
  return result;
};
class BasicMintDelegate extends ContractBasedDelegate {
  static currentRev = 1n;
  static isMintDelegate = true;
  get needsGovAuthority() {
    return true;
  }
  get delegateName() {
    return "mintDelegate";
  }
  static isMintAndSpendDelegate = true;
  /**
   * the scriptBundle for the BasicMintDelegate looks concrete,
   * but it's actually just referencing a generic, unspecialized delegate script
   * that may not provide much value to any specific application.  
   * 
   * Subclasses should expect to override this and provide a specialized
   * `get scriptBundle() { return new ‹YourMintDelegateBundle› }`, using
   *  a class you derive from CapoDelegateBundle and your own delegate
   * specialization.  TODO: a generator to make this easier.  Until then,
   * you can copy the UnspecializedDelegate.hl and specialize it.
   */
  scriptBundle() {
    return new UnspecializedDelegateBundle();
  }
  // uses the basic delegate script, plus the isMintDelegate param
  static get defaultParams() {
    return {
      ...super.defaultParams,
      delegateName: "mintDelegate",
      isMintDelegate: true,
      isDgDataPolicy: false,
      isSpendDelegate: this.isMintAndSpendDelegate,
      requiresGovAuthority: true
      // but note: non-true is only relevant for delegated-data policies.
    };
  }
  activityCreatingDelegatedData(seedFrom, uutPurpose) {
    throw new Error(`deprecated: explicit activity helper`);
  }
  activityCreatingDataDelegate(seedFrom, uutPurpose) {
    throw new Error(`deprecated: explicit activity helper`);
  }
  mkDatumScriptReference() {
    throw new Error(`obsolete mkDatumScriptReference!!!`);
  }
  async txnGrantAuthority(tcx, redeemer, skipReturningDelegate) {
    if (!redeemer)
      throw new Error(
        `mint delegate requires an explicit redeemer for txnGrantAuthority()`
      );
    const { capo } = this.configIn;
    return super.txnGrantAuthority(tcx, redeemer, skipReturningDelegate);
  }
  // moved to to super
  // static mkDelegateWithArgs(a: capoDelegateConfig) {}
}
__decorateClass$4([
  Activity.redeemer
], BasicMintDelegate.prototype, "activityCreatingDelegatedData");
__decorateClass$4([
  Activity.redeemer
], BasicMintDelegate.prototype, "activityCreatingDataDelegate");
__decorateClass$4([
  datum
], BasicMintDelegate.prototype, "mkDatumScriptReference");

class EnumBridge extends DataBridge {
  constructor(options) {
    super(options);
  }
  // the uplcReturnType provides type clues, mainly for editor support
  // and compile-time type-checking.  
  mkUplcData(value, enumPathExpr) {
    if (this.redirectTo) {
      return this.redirectTo(value);
    }
    const uplc = this["\u1C7A\u1C7Acast"].toUplcData(value, enumPathExpr);
    uplc.toString();
    bytesToHex(uplc.toCbor());
    uplc.dataPath = enumPathExpr;
    if (this.isActivity) {
      return {
        redeemer: uplc
      };
    } else {
      return uplc;
    }
  }
}

class UnspecializedDelegateBridge extends ContractDataBridge {
  static isAbstract = false;
  isAbstract = false;
  /**
   * Helper class for generating TxOutputDatum for the ***datum type (DelegateDatum)***
   * for this contract script. 
   */
  datum = new DelegateDatumHelper$1({ isMainnet: this.isMainnet });
  // datumAccessor/enum
  /**
   * this is the specific type of datum for the `BasicDelegate` script
   */
  DelegateDatum = this.datum;
  readDatum = (d) => {
    return this.reader.DelegateDatum(d);
  };
  /**
   * generates UplcData for the activity type (***DelegateActivity***) for the `BasicDelegate` script
   */
  activity = new DelegateActivityHelper$1({ isMainnet: this.isMainnet, isActivity: true });
  // activityAccessor/enum
  DelegateActivity = this.activity;
  reader = new UnspecializedDelegateBridgeReader(this, this.isMainnet);
  /**
   * accessors for all the types defined in the `BasicDelegate` script
   * @remarks - these accessors are used to generate UplcData for each type
   */
  types = {
    /**
     * generates UplcData for the enum type ***DelegateDatum*** for the `BasicDelegate` script
     */
    DelegateDatum: new DelegateDatumHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateRole*** for the `BasicDelegate` script
     */
    DelegateRole: new DelegateRoleHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestActivity*** for the `BasicDelegate` script
     */
    ManifestActivity: new ManifestActivityHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***CapoLifecycleActivity*** for the `BasicDelegate` script
     */
    CapoLifecycleActivity: new CapoLifecycleActivityHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateLifecycleActivity*** for the `BasicDelegate` script
     */
    DelegateLifecycleActivity: new DelegateLifecycleActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***SpendingActivity*** for the `BasicDelegate` script
     */
    SpendingActivity: new SpendingActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***MintingActivity*** for the `BasicDelegate` script
     */
    MintingActivity: new MintingActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***BurningActivity*** for the `BasicDelegate` script
     */
    BurningActivity: new BurningActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateActivity*** for the `BasicDelegate` script
     */
    DelegateActivity: new DelegateActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingDelegateAction*** for the `BasicDelegate` script
     */
    PendingDelegateAction: new PendingDelegateActionHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestEntryType*** for the `BasicDelegate` script
     */
    ManifestEntryType: new ManifestEntryTypeHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingCharterChange*** for the `BasicDelegate` script
     */
    PendingCharterChange: new PendingCharterChangeHelper$2({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***cctx_CharterInputType*** for the `BasicDelegate` script
     */
    cctx_CharterInputType: new cctx_CharterInputTypeHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***AnyData*** for the `BasicDelegate` script
     */
    AnyData: (fields) => {
      return this["\u1C7A\u1C7AAnyDataCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***DelegationDetail*** for the `BasicDelegate` script
     */
    DelegationDetail: (fields) => {
      return this["\u1C7A\u1C7ADelegationDetailCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***RelativeDelegateLink*** for the `BasicDelegate` script
     */
    RelativeDelegateLink: (fields) => {
      return this["\u1C7A\u1C7ARelativeDelegateLinkCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***PendingDelegateChange*** for the `BasicDelegate` script
     */
    PendingDelegateChange: (fields) => {
      return this["\u1C7A\u1C7APendingDelegateChangeCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***CapoManifestEntry*** for the `BasicDelegate` script
     */
    CapoManifestEntry: (fields) => {
      return this["\u1C7A\u1C7ACapoManifestEntryCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***CapoCtx*** for the `BasicDelegate` script
     */
    CapoCtx: (fields) => {
      return this["\u1C7A\u1C7ACapoCtxCast"].toUplcData(fields);
    }
  };
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7AAnyDataCast" = makeCast(
    AnyDataSchema$2,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ADelegationDetailCast" = makeCast(
    DelegationDetailSchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ARelativeDelegateLinkCast" = makeCast(
    RelativeDelegateLinkSchema$3,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7APendingDelegateChangeCast" = makeCast(
    PendingDelegateChangeSchema$2,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ACapoManifestEntryCast" = makeCast(
    CapoManifestEntrySchema$2,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ACapoCtxCast" = makeCast(
    CapoCtxSchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
}
class UnspecializedDelegateBridgeReader extends DataBridgeReaderClass {
  constructor(bridge, isMainnet) {
    super();
    this.bridge = bridge;
  }
  datum = (d) => {
    return this.DelegateDatum(d);
  };
  /**
      * reads UplcData *known to fit the **DelegateDatum*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateDatum(d) {
    const typeHelper = this.bridge.types.DelegateDatum;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateRole*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateRole(d) {
    const typeHelper = this.bridge.types.DelegateRole;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestActivity(d) {
    const typeHelper = this.bridge.types.ManifestActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **CapoLifecycleActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoLifecycleActivity(d) {
    const typeHelper = this.bridge.types.CapoLifecycleActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateLifecycleActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateLifecycleActivity(d) {
    const typeHelper = this.bridge.types.DelegateLifecycleActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **SpendingActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  SpendingActivity(d) {
    const typeHelper = this.bridge.types.SpendingActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **MintingActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  MintingActivity(d) {
    const typeHelper = this.bridge.types.MintingActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **BurningActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  BurningActivity(d) {
    const typeHelper = this.bridge.types.BurningActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateActivity(d) {
    const typeHelper = this.bridge.types.DelegateActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateAction*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateAction(d) {
    const typeHelper = this.bridge.types.PendingDelegateAction;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestEntryType*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestEntryType(d) {
    const typeHelper = this.bridge.types.ManifestEntryType;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingCharterChange*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingCharterChange(d) {
    const typeHelper = this.bridge.types.PendingCharterChange;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **cctx_CharterInputType*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  cctx_CharterInputType(d) {
    const typeHelper = this.bridge.types.cctx_CharterInputType;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **AnyData*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  AnyData(d) {
    const cast = this.bridge["\u1C7A\u1C7AAnyDataCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **DelegationDetail*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegationDetail(d) {
    const cast = this.bridge["\u1C7A\u1C7ADelegationDetailCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **RelativeDelegateLink*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  RelativeDelegateLink(d) {
    const cast = this.bridge["\u1C7A\u1C7ARelativeDelegateLinkCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateChange*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateChange(d) {
    const cast = this.bridge["\u1C7A\u1C7APendingDelegateChangeCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **CapoManifestEntry*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoManifestEntry(d) {
    const cast = this.bridge["\u1C7A\u1C7ACapoManifestEntryCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **CapoCtx*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoCtx(d) {
    const cast = this.bridge["\u1C7A\u1C7ACapoCtxCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
}
let DelegateDatumHelper$1 = class DelegateDatumHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateDatumSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  InlineTxOutputDatum for ***"UnspecializedDelegate::DelegateDatum.Cip68RefToken"***
   * @remarks - ***DelegateDatum$Cip68RefTokenLike*** is the same as the expanded field-types.
   */
  Cip68RefToken(fields) {
    const uplc = this.mkUplcData({
      Cip68RefToken: fields
    }, "UnspecializedDelegate::DelegateDatum.Cip68RefToken");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  InlineTxOutputDatum for ***"UnspecializedDelegate::DelegateDatum.IsDelegation"***
   * @remarks - ***DelegationDetailLike*** is the same as the expanded field-type.
   */
  IsDelegation(dd) {
    const uplc = this.mkUplcData({
      IsDelegation: dd
    }, "UnspecializedDelegate::DelegateDatum.IsDelegation");
    return makeInlineTxOutputDatum(uplc);
  }
  /**
   * generates  InlineTxOutputDatum for ***"UnspecializedDelegate::DelegateDatum.capoStoredData"***
   * @remarks - ***DelegateDatum$capoStoredDataLike*** is the same as the expanded field-types.
   */
  capoStoredData(fields) {
    const uplc = this.mkUplcData({
      capoStoredData: fields
    }, "UnspecializedDelegate::DelegateDatum.capoStoredData");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
};
let DelegateRoleHelper$2 = class DelegateRoleHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let ManifestActivityHelper$2 = class ManifestActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
let DelegateRoleHelperNested$2 = class DelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let ManifestActivityHelperNested$2 = class ManifestActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
let CapoLifecycleActivityHelper$2 = class CapoLifecycleActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new DelegateRoleHelperNested$2({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested$2({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
};
let DelegateLifecycleActivityHelper$1 = class DelegateLifecycleActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateLifecycleActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  ReplacingMe(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        ReplacingMe: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        ReplacingMe: fields
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$ReplacingMe({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$ReplacingMe = impliedSeedActivityMaker(
    this,
    this.ReplacingMe
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Retiring() {
    const uplc = this.mkUplcData(
      { Retiring: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get ValidatingSettings() {
    const uplc = this.mkUplcData(
      { ValidatingSettings: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let SpendingActivityHelper$1 = class SpendingActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    SpendingActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"UnspecializedDelegate::SpendingActivity._placeholder1SA"***
   */
  _placeholder1SA(recId) {
    const uplc = this.mkUplcData({
      _placeholder1SA: recId
    }, "UnspecializedDelegate::SpendingActivity._placeholder1SA");
    return uplc;
  }
};
let MintingActivityHelper$1 = class MintingActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    MintingActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
  * generates  UplcData for ***"UnspecializedDelegate::MintingActivity._placeholder1MA"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$_placeholder1MA}` variant of this activity instead
  *
   */
  _placeholder1MA(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      _placeholder1MA: seedTxOutputId
    }, "UnspecializedDelegate::MintingActivity._placeholder1MA");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates  UplcData for ***"UnspecializedDelegate::MintingActivity._placeholder1MA"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$_placeholder1MA`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
   */
  get $seeded$_placeholder1MA() {
    return impliedSeedActivityMaker(this, this._placeholder1MA)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
};
let BurningActivityHelper$1 = class BurningActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    BurningActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"UnspecializedDelegate::BurningActivity._placeholder1BA"***
   */
  _placeholder1BA(recId) {
    const uplc = this.mkUplcData({
      _placeholder1BA: recId
    }, "UnspecializedDelegate::BurningActivity._placeholder1BA");
    return uplc;
  }
};
let ActivityDelegateRoleHelperNested$2 = class ActivityDelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let CapoLifecycleActivityHelperNested$2 = class CapoLifecycleActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new ActivityDelegateRoleHelperNested$2({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested$2({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
};
let DelegateLifecycleActivityHelperNested$1 = class DelegateLifecycleActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateLifecycleActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  ReplacingMe(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        ReplacingMe: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        ReplacingMe: fields
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$ReplacingMe({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$ReplacingMe = impliedSeedActivityMaker(
    this,
    this.ReplacingMe
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Retiring() {
    const uplc = this.mkUplcData(
      { Retiring: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get ValidatingSettings() {
    const uplc = this.mkUplcData(
      { ValidatingSettings: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let SpendingActivityHelperNested$1 = class SpendingActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    SpendingActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::SpendingActivity._placeholder1SA"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  _placeholder1SA(recId) {
    const uplc = this.mkUplcData({
      _placeholder1SA: recId
    }, "UnspecializedDelegate::SpendingActivity._placeholder1SA");
    return uplc;
  }
};
let MintingActivityHelperNested$1 = class MintingActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    MintingActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
  * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::MintingActivity._placeholder1MA"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$_placeholder1MA}` variant of this activity instead
  *
   * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
  */
  _placeholder1MA(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      _placeholder1MA: seedTxOutputId
    }, "UnspecializedDelegate::MintingActivity._placeholder1MA");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::MintingActivity._placeholder1MA"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$_placeholder1MA`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  get $seeded$_placeholder1MA() {
    return impliedSeedActivityMaker(this, this._placeholder1MA)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
};
let BurningActivityHelperNested$1 = class BurningActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    BurningActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::BurningActivity._placeholder1BA"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  _placeholder1BA(recId) {
    const uplc = this.mkUplcData({
      _placeholder1BA: recId
    }, "UnspecializedDelegate::BurningActivity._placeholder1BA");
    return uplc;
  }
};
let DelegateActivityHelper$1 = class DelegateActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * access to different variants of the ***nested CapoLifecycleActivity*** type needed for ***DelegateActivity:CapoLifecycleActivities***.
   */
  get CapoLifecycleActivities() {
    const nestedAccessor = new CapoLifecycleActivityHelperNested$2({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { CapoLifecycleActivities: activity },
          "UnspecializedDelegate::DelegateActivity.CapoLifecycleActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested DelegateLifecycleActivity*** type needed for ***DelegateActivity:DelegateLifecycleActivities***.
   */
  get DelegateLifecycleActivities() {
    const nestedAccessor = new DelegateLifecycleActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { DelegateLifecycleActivities: activity },
          "UnspecializedDelegate::DelegateActivity.DelegateLifecycleActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested SpendingActivity*** type needed for ***DelegateActivity:SpendingActivities***.
   */
  get SpendingActivities() {
    const nestedAccessor = new SpendingActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { SpendingActivities: activity },
          "UnspecializedDelegate::DelegateActivity.SpendingActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested MintingActivity*** type needed for ***DelegateActivity:MintingActivities***.
   */
  get MintingActivities() {
    const nestedAccessor = new MintingActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { MintingActivities: activity },
          "UnspecializedDelegate::DelegateActivity.MintingActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested BurningActivity*** type needed for ***DelegateActivity:BurningActivities***.
   */
  get BurningActivities() {
    const nestedAccessor = new BurningActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { BurningActivities: activity },
          "UnspecializedDelegate::DelegateActivity.BurningActivities"
        );
      }
    );
    return nestedAccessor;
  }
  CreatingDelegatedData(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields }
      }, "UnspecializedDelegate::DelegateActivity.CreatingDelegatedData");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegatedData: fields
      }, "UnspecializedDelegate::DelegateActivity.CreatingDelegatedData");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::DelegateActivity.CreatingDelegatedData"***, 
   * @param fields - \{ dataType: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegatedData({ dataType })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingDelegatedData = impliedSeedActivityMaker(
    this,
    this.CreatingDelegatedData
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::DelegateActivity.UpdatingDelegatedData"***
   * @remarks - ***DelegateActivity$UpdatingDelegatedDataLike*** is the same as the expanded field-types.
   */
  UpdatingDelegatedData(fields) {
    const uplc = this.mkUplcData({
      UpdatingDelegatedData: fields
    }, "UnspecializedDelegate::DelegateActivity.UpdatingDelegatedData");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::DelegateActivity.DeletingDelegatedData"***
   * @remarks - ***DelegateActivity$DeletingDelegatedDataLike*** is the same as the expanded field-types.
   */
  DeletingDelegatedData(fields) {
    const uplc = this.mkUplcData({
      DeletingDelegatedData: fields
    }, "UnspecializedDelegate::DelegateActivity.DeletingDelegatedData");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"UnspecializedDelegate::DelegateActivity.MultipleDelegateActivities"***
   */
  MultipleDelegateActivities(activities) {
    const uplc = this.mkUplcData({
      MultipleDelegateActivities: activities
    }, "UnspecializedDelegate::DelegateActivity.MultipleDelegateActivities");
    return uplc;
  }
};
let PendingDelegateActionHelper$2 = class PendingDelegateActionHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingDelegateActionSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  Add(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Add: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Add: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Add"***, 
   * @param fields - \{ purpose: string, idPrefix: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Add({ purpose, idPrefix })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Add = impliedSeedActivityMaker(
    this,
    this.Add
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Remove"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Remove() {
    const uplc = this.mkUplcData(
      { Remove: {} },
      "CapoDelegateHelpers::PendingDelegateAction.Remove"
    );
    return uplc;
  }
  Replace(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Replace: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Replace: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Replace"***, 
   * @param fields - \{ purpose: string, idPrefix: string, replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | \{mph: MintingPolicyHash | string | number[], tokenName: string | number[]\} \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Replace({ purpose, idPrefix, replacesDgt })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Replace = impliedSeedActivityMaker(
    this,
    this.Replace
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
};
let ManifestEntryTypeHelper$2 = class ManifestEntryTypeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestEntryTypeSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.NamedTokenRef"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get NamedTokenRef() {
    const uplc = this.mkUplcData(
      { NamedTokenRef: {} },
      "CapoHelpers::ManifestEntryType.NamedTokenRef"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DgDataPolicy"***
   * @remarks - ***ManifestEntryType$DgDataPolicyLike*** is the same as the expanded field-types.
   */
  DgDataPolicy(fields) {
    const uplc = this.mkUplcData({
      DgDataPolicy: fields
    }, "CapoHelpers::ManifestEntryType.DgDataPolicy");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DelegateThreads"***
   * @remarks - ***ManifestEntryType$DelegateThreadsLike*** is the same as the expanded field-types.
   */
  DelegateThreads(fields) {
    const uplc = this.mkUplcData({
      DelegateThreads: fields
    }, "CapoHelpers::ManifestEntryType.DelegateThreads");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleMembership"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get MerkleMembership() {
    const uplc = this.mkUplcData(
      { MerkleMembership: {} },
      "CapoHelpers::ManifestEntryType.MerkleMembership"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleStateRoot"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#4***
   */
  get MerkleStateRoot() {
    const uplc = this.mkUplcData(
      { MerkleStateRoot: {} },
      "CapoHelpers::ManifestEntryType.MerkleStateRoot"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let PendingCharterChangeHelper$2 = class PendingCharterChangeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingCharterChangeSchema$2,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.delegateChange"***
   * @remarks - ***PendingDelegateChangeLike*** is the same as the expanded field-type.
   */
  delegateChange(change) {
    const uplc = this.mkUplcData({
      delegateChange: change
    }, "CapoDelegateHelpers::PendingCharterChange.delegateChange");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.otherManifestChange"***
   * @remarks - ***PendingCharterChange$otherManifestChangeLike*** is the same as the expanded field-types.
   */
  otherManifestChange(fields) {
    const uplc = this.mkUplcData({
      otherManifestChange: fields
    }, "CapoDelegateHelpers::PendingCharterChange.otherManifestChange");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
let cctx_CharterInputTypeHelper$1 = class cctx_CharterInputTypeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    cctx_CharterInputTypeSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoHelpers::cctx_CharterInputType.Unk"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get Unk() {
    const uplc = this.mkUplcData(
      { Unk: {} },
      "CapoHelpers::cctx_CharterInputType.Unk"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoHelpers::cctx_CharterInputType.RefInput"***
   * @remarks - ***cctx_CharterInputType$RefInputLike*** is the same as the expanded field-types.
   */
  RefInput(fields) {
    const uplc = this.mkUplcData({
      RefInput: fields
    }, "CapoHelpers::cctx_CharterInputType.RefInput");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoHelpers::cctx_CharterInputType.Input"***
   * @remarks - ***cctx_CharterInputType$InputLike*** is the same as the expanded field-types.
   */
  Input(fields) {
    const uplc = this.mkUplcData({
      Input: fields
    }, "CapoHelpers::cctx_CharterInputType.Input");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
const AnyDataSchema$2 = {
  "kind": "struct",
  "format": "map",
  "id": "__module__StellarHeliosHelpers__AnyData[]",
  "name": "AnyData",
  "fieldTypes": [
    {
      "name": "id",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "@id"
    },
    {
      "name": "type",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "tpe"
    }
  ]
};
const DelegationDetailSchema$1 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
  "name": "DelegationDetail",
  "fieldTypes": [
    {
      "name": "capoAddr",
      "type": {
        "kind": "internal",
        "name": "Address"
      }
    },
    {
      "name": "mph",
      "type": {
        "kind": "internal",
        "name": "MintingPolicyHash"
      }
    },
    {
      "name": "tn",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};
const DelegateDatumSchema$1 = {
  "kind": "enum",
  "name": "DelegateDatum",
  "id": "__module__UnspecializedDelegate__DelegateDatum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__UnspecializedDelegate__DelegateDatum[]__Cip68RefToken",
      "name": "Cip68RefToken",
      "fieldTypes": [
        {
          "name": "cip68meta",
          "type": {
            "kind": "struct",
            "format": "map",
            "id": "__module__StellarHeliosHelpers__AnyData[]",
            "name": "AnyData",
            "fieldTypes": [
              {
                "name": "id",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "@id"
              },
              {
                "name": "type",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "tpe"
              }
            ]
          }
        },
        {
          "name": "cip68version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "otherDetails",
          "type": {
            "kind": "internal",
            "name": "Data"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__UnspecializedDelegate__DelegateDatum[]__IsDelegation",
      "name": "IsDelegation",
      "fieldTypes": [
        {
          "name": "dd",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
            "name": "DelegationDetail",
            "fieldTypes": [
              {
                "name": "capoAddr",
                "type": {
                  "kind": "internal",
                  "name": "Address"
                }
              },
              {
                "name": "mph",
                "type": {
                  "kind": "internal",
                  "name": "MintingPolicyHash"
                }
              },
              {
                "name": "tn",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__UnspecializedDelegate__DelegateDatum[]__capoStoredData",
      "name": "capoStoredData",
      "fieldTypes": [
        {
          "name": "data",
          "type": {
            "kind": "struct",
            "format": "map",
            "id": "__module__StellarHeliosHelpers__AnyData[]",
            "name": "AnyData",
            "fieldTypes": [
              {
                "name": "id",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "@id"
              },
              {
                "name": "type",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "tpe"
              }
            ]
          }
        },
        {
          "name": "version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "otherDetails",
          "type": {
            "kind": "internal",
            "name": "Data"
          }
        }
      ]
    }
  ]
};
const DelegateRoleSchema$2 = {
  "kind": "enum",
  "name": "DelegateRole",
  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
      "name": "MintDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
      "name": "SpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
      "name": "MintInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
      "name": "SpendInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
      "name": "OtherNamedDgt",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
      "name": "BothMintAndSpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
      "name": "HandledByCapoOnly",
      "fieldTypes": []
    }
  ]
};
const ManifestActivitySchema$2 = {
  "kind": "enum",
  "name": "ManifestActivity",
  "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
      "name": "retiringEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
      "name": "updatingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
      "name": "addingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
      "name": "forkingThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "newThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
      "name": "burningThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "burnedThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    }
  ]
};
const CapoLifecycleActivitySchema$2 = {
  "kind": "enum",
  "name": "CapoLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
      "name": "CreatingDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
      "name": "queuePendingChange",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
      "name": "removePendingChange",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
      "name": "commitPendingChanges",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
      "name": "forcingNewSpendDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
      "name": "forcingNewMintDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
      "name": "updatingManifest",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ]
};
const DelegateLifecycleActivitySchema$1 = {
  "kind": "enum",
  "name": "DelegateLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
      "name": "ReplacingMe",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
      "name": "Retiring",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
      "name": "ValidatingSettings",
      "fieldTypes": []
    }
  ]
};
const SpendingActivitySchema$1 = {
  "kind": "enum",
  "name": "SpendingActivity",
  "id": "__module__UnspecializedDelegate__SpendingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__UnspecializedDelegate__SpendingActivity[]___placeholder1SA",
      "name": "_placeholder1SA",
      "fieldTypes": [
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
const MintingActivitySchema$1 = {
  "kind": "enum",
  "name": "MintingActivity",
  "id": "__module__UnspecializedDelegate__MintingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__UnspecializedDelegate__MintingActivity[]___placeholder1MA",
      "name": "_placeholder1MA",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    }
  ]
};
const BurningActivitySchema$1 = {
  "kind": "enum",
  "name": "BurningActivity",
  "id": "__module__UnspecializedDelegate__BurningActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__UnspecializedDelegate__BurningActivity[]___placeholder1BA",
      "name": "_placeholder1BA",
      "fieldTypes": [
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
const DelegateActivitySchema$1 = {
  "kind": "enum",
  "name": "DelegateActivity",
  "id": "__module__UnspecializedDelegate__DelegateActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__CapoLifecycleActivities",
      "name": "CapoLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "CapoLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                "name": "CreatingDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
                "name": "queuePendingChange",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
                "name": "removePendingChange",
                "fieldTypes": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "enum",
                      "name": "DelegateRole",
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                          "name": "MintDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                          "name": "SpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                          "name": "MintInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                          "name": "SpendInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                          "name": "DgDataPolicy",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 5,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                          "name": "OtherNamedDgt",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 6,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                          "name": "BothMintAndSpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 7,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                          "name": "HandledByCapoOnly",
                          "fieldTypes": []
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
                "name": "commitPendingChanges",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
                "name": "forcingNewSpendDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
                "name": "forcingNewMintDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
                "name": "updatingManifest",
                "fieldTypes": [
                  {
                    "name": "activity",
                    "type": {
                      "kind": "enum",
                      "name": "ManifestActivity",
                      "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                          "name": "retiringEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                          "name": "updatingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                          "name": "addingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                          "name": "forkingThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "newThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                          "name": "burningThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "burnedThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__DelegateLifecycleActivities",
      "name": "DelegateLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "DelegateLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                "name": "ReplacingMe",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                "name": "Retiring",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                "name": "ValidatingSettings",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__SpendingActivities",
      "name": "SpendingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "SpendingActivity",
            "id": "__module__UnspecializedDelegate__SpendingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__UnspecializedDelegate__SpendingActivity[]___placeholder1SA",
                "name": "_placeholder1SA",
                "fieldTypes": [
                  {
                    "name": "recId",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__MintingActivities",
      "name": "MintingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "MintingActivity",
            "id": "__module__UnspecializedDelegate__MintingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__UnspecializedDelegate__MintingActivity[]___placeholder1MA",
                "name": "_placeholder1MA",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__BurningActivities",
      "name": "BurningActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "BurningActivity",
            "id": "__module__UnspecializedDelegate__BurningActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__UnspecializedDelegate__BurningActivity[]___placeholder1BA",
                "name": "_placeholder1BA",
                "fieldTypes": [
                  {
                    "name": "recId",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__CreatingDelegatedData",
      "name": "CreatingDelegatedData",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__UpdatingDelegatedData",
      "name": "UpdatingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__DeletingDelegatedData",
      "name": "DeletingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 8,
      "id": "__module__UnspecializedDelegate__DelegateActivity[]__MultipleDelegateActivities",
      "name": "MultipleDelegateActivities",
      "fieldTypes": [
        {
          "name": "activities",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "internal",
              "name": "Data"
            }
          }
        }
      ]
    }
  ]
};
const PendingDelegateActionSchema$2 = {
  "kind": "enum",
  "name": "PendingDelegateAction",
  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
      "name": "Add",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
      "name": "Remove",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
      "name": "Replace",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "replacesDgt",
          "type": {
            "kind": "internal",
            "name": "AssetClass"
          }
        }
      ]
    }
  ]
};
const RelativeDelegateLinkSchema$3 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
  "name": "RelativeDelegateLink",
  "fieldTypes": [
    {
      "name": "uutName",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "delegateValidatorHash",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "ValidatorHash"
        }
      }
    },
    {
      "name": "config",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};
const PendingDelegateChangeSchema$2 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
  "name": "PendingDelegateChange",
  "fieldTypes": [
    {
      "name": "action",
      "type": {
        "kind": "enum",
        "name": "PendingDelegateAction",
        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
            "name": "Add",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
            "name": "Remove",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
            "name": "Replace",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "replacesDgt",
                "type": {
                  "kind": "internal",
                  "name": "AssetClass"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "role",
      "type": {
        "kind": "enum",
        "name": "DelegateRole",
        "id": "__module__CapoDelegateHelpers__DelegateRole[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
            "name": "MintDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
            "name": "SpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
            "name": "MintInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
            "name": "SpendInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
            "name": "OtherNamedDgt",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 6,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
            "name": "BothMintAndSpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 7,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
            "name": "HandledByCapoOnly",
            "fieldTypes": []
          }
        ]
      }
    },
    {
      "name": "dgtLink",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "struct",
          "format": "list",
          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
          "name": "RelativeDelegateLink",
          "fieldTypes": [
            {
              "name": "uutName",
              "type": {
                "kind": "internal",
                "name": "String"
              }
            },
            {
              "name": "delegateValidatorHash",
              "type": {
                "kind": "option",
                "someType": {
                  "kind": "internal",
                  "name": "ValidatorHash"
                }
              }
            },
            {
              "name": "config",
              "type": {
                "kind": "internal",
                "name": "ByteArray"
              }
            }
          ]
        }
      }
    }
  ]
};
const ManifestEntryTypeSchema$2 = {
  "kind": "enum",
  "name": "ManifestEntryType",
  "id": "__module__CapoHelpers__ManifestEntryType[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
      "name": "NamedTokenRef",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "policyLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
      "name": "DelegateThreads",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
      "name": "MerkleMembership",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
      "name": "MerkleStateRoot",
      "fieldTypes": []
    }
  ]
};
const CapoManifestEntrySchema$2 = {
  "kind": "struct",
  "format": "map",
  "id": "__module__CapoHelpers__CapoManifestEntry[]",
  "name": "CapoManifestEntry",
  "fieldTypes": [
    {
      "name": "entryType",
      "type": {
        "kind": "enum",
        "name": "ManifestEntryType",
        "id": "__module__CapoHelpers__ManifestEntryType[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
            "name": "NamedTokenRef",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "policyLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
            "name": "DelegateThreads",
            "fieldTypes": [
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
            "name": "MerkleMembership",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
            "name": "MerkleStateRoot",
            "fieldTypes": []
          }
        ]
      },
      "key": "tpe"
    },
    {
      "name": "tokenName",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "tn"
    },
    {
      "name": "mph",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "MintingPolicyHash"
        }
      }
    }
  ]
};
const PendingCharterChangeSchema$2 = {
  "kind": "enum",
  "name": "PendingCharterChange",
  "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
      "name": "delegateChange",
      "fieldTypes": [
        {
          "name": "change",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
            "name": "PendingDelegateChange",
            "fieldTypes": [
              {
                "name": "action",
                "type": {
                  "kind": "enum",
                  "name": "PendingDelegateAction",
                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                      "name": "Add",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                      "name": "Remove",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                      "name": "Replace",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "replacesDgt",
                          "type": {
                            "kind": "internal",
                            "name": "AssetClass"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "dgtLink",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
      "name": "otherManifestChange",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "remainingDelegateValidations",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "enum",
              "name": "DelegateRole",
              "id": "__module__CapoDelegateHelpers__DelegateRole[]",
              "variantTypes": [
                {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                  "name": "MintDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 1,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                  "name": "SpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 2,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                  "name": "MintInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 3,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                  "name": "SpendInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 4,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                  "name": "DgDataPolicy",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 5,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                  "name": "OtherNamedDgt",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 6,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                  "name": "BothMintAndSpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 7,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                  "name": "HandledByCapoOnly",
                  "fieldTypes": []
                }
              ]
            }
          }
        }
      ]
    }
  ]
};
const cctx_CharterInputTypeSchema$1 = {
  "kind": "enum",
  "name": "cctx_CharterInputType",
  "id": "__module__CapoHelpers__cctx_CharterInputType[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__Unk",
      "name": "Unk",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__RefInput",
      "name": "RefInput",
      "fieldTypes": [
        {
          "name": "datum",
          "type": {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
            "name": "CharterData",
            "fieldTypes": [
              {
                "name": "spendDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "spendInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "otherNamedDelegates",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "mintDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mintInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "govAuthorityLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manifest",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "map",
                    "id": "__module__CapoHelpers__CapoManifestEntry[]",
                    "name": "CapoManifestEntry",
                    "fieldTypes": [
                      {
                        "name": "entryType",
                        "type": {
                          "kind": "enum",
                          "name": "ManifestEntryType",
                          "id": "__module__CapoHelpers__ManifestEntryType[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                              "name": "NamedTokenRef",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                              "name": "DgDataPolicy",
                              "fieldTypes": [
                                {
                                  "name": "policyLink",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                    "name": "RelativeDelegateLink",
                                    "fieldTypes": [
                                      {
                                        "name": "uutName",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "delegateValidatorHash",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "internal",
                                            "name": "ValidatorHash"
                                          }
                                        }
                                      },
                                      {
                                        "name": "config",
                                        "type": {
                                          "kind": "internal",
                                          "name": "ByteArray"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "idPrefix",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 2,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                              "name": "DelegateThreads",
                              "fieldTypes": [
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 3,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                              "name": "MerkleMembership",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 4,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                              "name": "MerkleStateRoot",
                              "fieldTypes": []
                            }
                          ]
                        },
                        "key": "tpe"
                      },
                      {
                        "name": "tokenName",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        },
                        "key": "tn"
                      },
                      {
                        "name": "mph",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "MintingPolicyHash"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "pendingChanges",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "enum",
                    "name": "PendingCharterChange",
                    "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                    "variantTypes": [
                      {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                        "name": "delegateChange",
                        "fieldTypes": [
                          {
                            "name": "change",
                            "type": {
                              "kind": "struct",
                              "format": "list",
                              "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                              "name": "PendingDelegateChange",
                              "fieldTypes": [
                                {
                                  "name": "action",
                                  "type": {
                                    "kind": "enum",
                                    "name": "PendingDelegateAction",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                        "name": "Add",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                        "name": "Remove",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                        "name": "Replace",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "replacesDgt",
                                            "type": {
                                              "kind": "internal",
                                              "name": "AssetClass"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "dgtLink",
                                  "type": {
                                    "kind": "option",
                                    "someType": {
                                      "kind": "struct",
                                      "format": "list",
                                      "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                      "name": "RelativeDelegateLink",
                                      "fieldTypes": [
                                        {
                                          "name": "uutName",
                                          "type": {
                                            "kind": "internal",
                                            "name": "String"
                                          }
                                        },
                                        {
                                          "name": "delegateValidatorHash",
                                          "type": {
                                            "kind": "option",
                                            "someType": {
                                              "kind": "internal",
                                              "name": "ValidatorHash"
                                            }
                                          }
                                        },
                                        {
                                          "name": "config",
                                          "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                        "name": "otherManifestChange",
                        "fieldTypes": [
                          {
                            "name": "activity",
                            "type": {
                              "kind": "enum",
                              "name": "ManifestActivity",
                              "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                  "name": "retiringEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                  "name": "updatingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                  "name": "addingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                  "name": "forkingThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "newThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                  "name": "burningThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "burnedThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "name": "remainingDelegateValidations",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "enum",
                                "name": "DelegateRole",
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                    "name": "MintDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                    "name": "SpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                    "name": "MintInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                    "name": "SpendInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 5,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                    "name": "OtherNamedDgt",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 6,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                    "name": "BothMintAndSpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 7,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                    "name": "HandledByCapoOnly",
                                    "fieldTypes": []
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "name": "utxo",
          "type": {
            "kind": "internal",
            "name": "TxInput"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__Input",
      "name": "Input",
      "fieldTypes": [
        {
          "name": "datum",
          "type": {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
            "name": "CharterData",
            "fieldTypes": [
              {
                "name": "spendDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "spendInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "otherNamedDelegates",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "mintDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mintInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "govAuthorityLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manifest",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "map",
                    "id": "__module__CapoHelpers__CapoManifestEntry[]",
                    "name": "CapoManifestEntry",
                    "fieldTypes": [
                      {
                        "name": "entryType",
                        "type": {
                          "kind": "enum",
                          "name": "ManifestEntryType",
                          "id": "__module__CapoHelpers__ManifestEntryType[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                              "name": "NamedTokenRef",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                              "name": "DgDataPolicy",
                              "fieldTypes": [
                                {
                                  "name": "policyLink",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                    "name": "RelativeDelegateLink",
                                    "fieldTypes": [
                                      {
                                        "name": "uutName",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "delegateValidatorHash",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "internal",
                                            "name": "ValidatorHash"
                                          }
                                        }
                                      },
                                      {
                                        "name": "config",
                                        "type": {
                                          "kind": "internal",
                                          "name": "ByteArray"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "idPrefix",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 2,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                              "name": "DelegateThreads",
                              "fieldTypes": [
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 3,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                              "name": "MerkleMembership",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 4,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                              "name": "MerkleStateRoot",
                              "fieldTypes": []
                            }
                          ]
                        },
                        "key": "tpe"
                      },
                      {
                        "name": "tokenName",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        },
                        "key": "tn"
                      },
                      {
                        "name": "mph",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "MintingPolicyHash"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "pendingChanges",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "enum",
                    "name": "PendingCharterChange",
                    "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                    "variantTypes": [
                      {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                        "name": "delegateChange",
                        "fieldTypes": [
                          {
                            "name": "change",
                            "type": {
                              "kind": "struct",
                              "format": "list",
                              "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                              "name": "PendingDelegateChange",
                              "fieldTypes": [
                                {
                                  "name": "action",
                                  "type": {
                                    "kind": "enum",
                                    "name": "PendingDelegateAction",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                        "name": "Add",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                        "name": "Remove",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                        "name": "Replace",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "replacesDgt",
                                            "type": {
                                              "kind": "internal",
                                              "name": "AssetClass"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "dgtLink",
                                  "type": {
                                    "kind": "option",
                                    "someType": {
                                      "kind": "struct",
                                      "format": "list",
                                      "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                      "name": "RelativeDelegateLink",
                                      "fieldTypes": [
                                        {
                                          "name": "uutName",
                                          "type": {
                                            "kind": "internal",
                                            "name": "String"
                                          }
                                        },
                                        {
                                          "name": "delegateValidatorHash",
                                          "type": {
                                            "kind": "option",
                                            "someType": {
                                              "kind": "internal",
                                              "name": "ValidatorHash"
                                            }
                                          }
                                        },
                                        {
                                          "name": "config",
                                          "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                        "name": "otherManifestChange",
                        "fieldTypes": [
                          {
                            "name": "activity",
                            "type": {
                              "kind": "enum",
                              "name": "ManifestActivity",
                              "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                  "name": "retiringEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                  "name": "updatingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                  "name": "addingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                  "name": "forkingThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "newThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                  "name": "burningThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "burnedThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "name": "remainingDelegateValidations",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "enum",
                                "name": "DelegateRole",
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                    "name": "MintDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                    "name": "SpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                    "name": "MintInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                    "name": "SpendInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 5,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                    "name": "OtherNamedDgt",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 6,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                    "name": "BothMintAndSpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 7,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                    "name": "HandledByCapoOnly",
                                    "fieldTypes": []
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "name": "utxo",
          "type": {
            "kind": "internal",
            "name": "TxInput"
          }
        }
      ]
    }
  ]
};
const CapoCtxSchema$1 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoHelpers__CapoCtx[]",
  "name": "CapoCtx",
  "fieldTypes": [
    {
      "name": "mph",
      "type": {
        "kind": "internal",
        "name": "MintingPolicyHash"
      }
    },
    {
      "name": "charter",
      "type": {
        "kind": "enum",
        "name": "cctx_CharterInputType",
        "id": "__module__CapoHelpers__cctx_CharterInputType[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__Unk",
            "name": "Unk",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__RefInput",
            "name": "RefInput",
            "fieldTypes": [
              {
                "name": "datum",
                "type": {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
                  "name": "CharterData",
                  "fieldTypes": [
                    {
                      "name": "spendDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "spendInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "otherNamedDelegates",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "mintDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "mintInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "govAuthorityLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "manifest",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "map",
                          "id": "__module__CapoHelpers__CapoManifestEntry[]",
                          "name": "CapoManifestEntry",
                          "fieldTypes": [
                            {
                              "name": "entryType",
                              "type": {
                                "kind": "enum",
                                "name": "ManifestEntryType",
                                "id": "__module__CapoHelpers__ManifestEntryType[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                                    "name": "NamedTokenRef",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "policyLink",
                                        "type": {
                                          "kind": "struct",
                                          "format": "list",
                                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                          "name": "RelativeDelegateLink",
                                          "fieldTypes": [
                                            {
                                              "name": "uutName",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            },
                                            {
                                              "name": "delegateValidatorHash",
                                              "type": {
                                                "kind": "option",
                                                "someType": {
                                                  "kind": "internal",
                                                  "name": "ValidatorHash"
                                                }
                                              }
                                            },
                                            {
                                              "name": "config",
                                              "type": {
                                                "kind": "internal",
                                                "name": "ByteArray"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "idPrefix",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                                    "name": "DelegateThreads",
                                    "fieldTypes": [
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                                    "name": "MerkleMembership",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                                    "name": "MerkleStateRoot",
                                    "fieldTypes": []
                                  }
                                ]
                              },
                              "key": "tpe"
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              },
                              "key": "tn"
                            },
                            {
                              "name": "mph",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "MintingPolicyHash"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "pendingChanges",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "enum",
                          "name": "PendingCharterChange",
                          "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                              "name": "delegateChange",
                              "fieldTypes": [
                                {
                                  "name": "change",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                                    "name": "PendingDelegateChange",
                                    "fieldTypes": [
                                      {
                                        "name": "action",
                                        "type": {
                                          "kind": "enum",
                                          "name": "PendingDelegateAction",
                                          "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                              "name": "Add",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                              "name": "Remove",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                              "name": "Replace",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "replacesDgt",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "AssetClass"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "dgtLink",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                            "name": "RelativeDelegateLink",
                                            "fieldTypes": [
                                              {
                                                "name": "uutName",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "String"
                                                }
                                              },
                                              {
                                                "name": "delegateValidatorHash",
                                                "type": {
                                                  "kind": "option",
                                                  "someType": {
                                                    "kind": "internal",
                                                    "name": "ValidatorHash"
                                                  }
                                                }
                                              },
                                              {
                                                "name": "config",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "ByteArray"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                              "name": "otherManifestChange",
                              "fieldTypes": [
                                {
                                  "name": "activity",
                                  "type": {
                                    "kind": "enum",
                                    "name": "ManifestActivity",
                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                        "name": "retiringEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                        "name": "updatingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                        "name": "addingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                        "name": "forkingThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "newThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                        "name": "burningThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "burnedThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "remainingDelegateValidations",
                                  "type": {
                                    "kind": "list",
                                    "itemType": {
                                      "kind": "enum",
                                      "name": "DelegateRole",
                                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                      "variantTypes": [
                                        {
                                          "kind": "variant",
                                          "tag": 0,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                          "name": "MintDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 1,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                          "name": "SpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 2,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                          "name": "MintInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 3,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                          "name": "SpendInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 4,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                          "name": "DgDataPolicy",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 5,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                          "name": "OtherNamedDgt",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 6,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                          "name": "BothMintAndSpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 7,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                          "name": "HandledByCapoOnly",
                                          "fieldTypes": []
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "name": "utxo",
                "type": {
                  "kind": "internal",
                  "name": "TxInput"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__Input",
            "name": "Input",
            "fieldTypes": [
              {
                "name": "datum",
                "type": {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
                  "name": "CharterData",
                  "fieldTypes": [
                    {
                      "name": "spendDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "spendInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "otherNamedDelegates",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "mintDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "mintInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "govAuthorityLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "manifest",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "map",
                          "id": "__module__CapoHelpers__CapoManifestEntry[]",
                          "name": "CapoManifestEntry",
                          "fieldTypes": [
                            {
                              "name": "entryType",
                              "type": {
                                "kind": "enum",
                                "name": "ManifestEntryType",
                                "id": "__module__CapoHelpers__ManifestEntryType[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                                    "name": "NamedTokenRef",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "policyLink",
                                        "type": {
                                          "kind": "struct",
                                          "format": "list",
                                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                          "name": "RelativeDelegateLink",
                                          "fieldTypes": [
                                            {
                                              "name": "uutName",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            },
                                            {
                                              "name": "delegateValidatorHash",
                                              "type": {
                                                "kind": "option",
                                                "someType": {
                                                  "kind": "internal",
                                                  "name": "ValidatorHash"
                                                }
                                              }
                                            },
                                            {
                                              "name": "config",
                                              "type": {
                                                "kind": "internal",
                                                "name": "ByteArray"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "idPrefix",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                                    "name": "DelegateThreads",
                                    "fieldTypes": [
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                                    "name": "MerkleMembership",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                                    "name": "MerkleStateRoot",
                                    "fieldTypes": []
                                  }
                                ]
                              },
                              "key": "tpe"
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              },
                              "key": "tn"
                            },
                            {
                              "name": "mph",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "MintingPolicyHash"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "pendingChanges",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "enum",
                          "name": "PendingCharterChange",
                          "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                              "name": "delegateChange",
                              "fieldTypes": [
                                {
                                  "name": "change",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                                    "name": "PendingDelegateChange",
                                    "fieldTypes": [
                                      {
                                        "name": "action",
                                        "type": {
                                          "kind": "enum",
                                          "name": "PendingDelegateAction",
                                          "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                              "name": "Add",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                              "name": "Remove",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                              "name": "Replace",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "replacesDgt",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "AssetClass"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "dgtLink",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                            "name": "RelativeDelegateLink",
                                            "fieldTypes": [
                                              {
                                                "name": "uutName",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "String"
                                                }
                                              },
                                              {
                                                "name": "delegateValidatorHash",
                                                "type": {
                                                  "kind": "option",
                                                  "someType": {
                                                    "kind": "internal",
                                                    "name": "ValidatorHash"
                                                  }
                                                }
                                              },
                                              {
                                                "name": "config",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "ByteArray"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                              "name": "otherManifestChange",
                              "fieldTypes": [
                                {
                                  "name": "activity",
                                  "type": {
                                    "kind": "enum",
                                    "name": "ManifestActivity",
                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                        "name": "retiringEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                        "name": "updatingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                        "name": "addingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                        "name": "forkingThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "newThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                        "name": "burningThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "burnedThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "remainingDelegateValidations",
                                  "type": {
                                    "kind": "list",
                                    "itemType": {
                                      "kind": "enum",
                                      "name": "DelegateRole",
                                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                      "variantTypes": [
                                        {
                                          "kind": "variant",
                                          "tag": 0,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                          "name": "MintDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 1,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                          "name": "SpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 2,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                          "name": "MintInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 3,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                          "name": "SpendInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 4,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                          "name": "DgDataPolicy",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 5,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                          "name": "OtherNamedDgt",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 6,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                          "name": "BothMintAndSpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 7,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                          "name": "HandledByCapoOnly",
                                          "fieldTypes": []
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "name": "utxo",
                "type": {
                  "kind": "internal",
                  "name": "TxInput"
                }
              }
            ]
          }
        ]
      }
    }
  ]
};

var __defProp$3 = Object.defineProperty;
var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
var __decorateClass$3 = (decorators, target, key, kind) => {
  var result = __getOwnPropDesc$3(target, key) ;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (decorator(target, key, result) ) || result;
  if (result) __defProp$3(target, key, result);
  return result;
};
class UnspecializedMintDelegate extends BasicMintDelegate {
  dataBridgeClass = UnspecializedDelegateBridge;
  get delegateName() {
    return "UnspecializedDelegate";
  }
  scriptBundle() {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        "mint+spend delegate: using unspecialized delegate bundle\n  ... this is good enough for getting started, but you'll need to\n  ... specialize this delegate to fit your application's needs. \nTo do that, you'll add mintDgt and spendDgt entries into \n  ... your Capo's delegateRoles() method, typically with\n  ... both pointing to a single specialized mint-delegate class."
      );
    }
    return UnspecializedDelegateBundle.create({
      setup: this.setup
    });
  }
  activityMintingUutsAppSpecific(seedFrom, purposes) {
    const seed = this.getSeed(seedFrom);
    return this.mkSeededMintingActivity("mintingUuts", {
      seed,
      purposes
    });
  }
  activityCreatingTestNamedDelegate(seedFrom, purpose) {
    const seed = this.getSeed(seedFrom);
    return this.mkCapoLifecycleActivity("CreatingDelegate", {
      seed,
      purpose
    });
  }
}
__decorateClass$3([
  Activity.redeemer
], UnspecializedMintDelegate.prototype, "activityMintingUutsAppSpecific");
__decorateClass$3([
  Activity.redeemer
], UnspecializedMintDelegate.prototype, "activityCreatingTestNamedDelegate");

class MintSpendDelegateBundle extends CapoDelegateBundle {
  requiresGovAuthority = true;
  scriptParamsSource = "bundle";
  /**
   * returns an unspecialized module that works for basic use-cases of mint/spend delegate
   * @public
   */
  get unspecializedDelegateModule() {
    return UnspecializedDelegate_hl;
  }
  get params() {
    if (!this.requiresGovAuthority) {
      throw new Error("MintSpendDelegateBundle requiresGovAuthority must not be false");
    }
    return {
      rev: this.rev,
      delegateName: this.moduleName,
      isMintDelegate: true,
      isSpendDelegate: true,
      isDgDataPolicy: false,
      requiresGovAuthority: this.requiresGovAuthority
    };
  }
}

const capoConfigurationDetails = Object.freeze({
  capo: void 0,
  isNullDeployment: true
});

class CapoMinterDataBridge extends ContractDataBridge {
  static isAbstract = false;
  isAbstract = false;
  datum = void 0;
  // no datum type defined for this bundle (minter / rewards script)
  /**
   * generates UplcData for the activity type (***MinterActivity***) for the `CapoMinter` script
   */
  activity = new MinterActivityHelper({ isMainnet: this.isMainnet, isActivity: true });
  // activityAccessor/enum
  MinterActivity = this.activity;
  reader = new CapoMinterDataBridgeReader(this, this.isMainnet);
  /**
   * accessors for all the types defined in the `CapoMinter` script
   * @remarks - these accessors are used to generate UplcData for each type
   */
  types = {
    /**
     * generates UplcData for the enum type ***MinterActivity*** for the `CapoMinter` script
     */
    MinterActivity: new MinterActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***RelativeDelegateLink*** for the `CapoMinter` script
     */
    RelativeDelegateLink: (fields) => {
      return this["\u1C7A\u1C7ARelativeDelegateLinkCast"].toUplcData(fields);
    }
  };
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ARelativeDelegateLinkCast" = makeCast(
    RelativeDelegateLinkSchema$2,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
}
class CapoMinterDataBridgeReader extends DataBridgeReaderClass {
  constructor(bridge, isMainnet) {
    super();
    this.bridge = bridge;
  }
  /**
      * reads UplcData *known to fit the **MinterActivity*** enum type,
      * for the CapoMinter script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  MinterActivity(d) {
    const typeHelper = this.bridge.types.MinterActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **RelativeDelegateLink*** struct type,
      * for the CapoMinter script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  RelativeDelegateLink(d) {
    const cast = this.bridge["\u1C7A\u1C7ARelativeDelegateLinkCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
}
class MinterActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    MinterActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.mintingCharter"***
   */
  mintingCharter(owner) {
    const uplc = this.mkUplcData({
      mintingCharter: owner
    }, "CapoMintHelpers::MinterActivity.mintingCharter");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get mintWithDelegateAuthorizing() {
    const uplc = this.mkUplcData(
      { mintWithDelegateAuthorizing: {} },
      "CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
  * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingMintInvariant"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$addingMintInvariant}` variant of this activity instead
  *
   */
  addingMintInvariant(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      addingMintInvariant: seedTxOutputId
    }, "CapoMintHelpers::MinterActivity.addingMintInvariant");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingMintInvariant"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$addingMintInvariant`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
   */
  get $seeded$addingMintInvariant() {
    return impliedSeedActivityMaker(this, this.addingMintInvariant)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
  /**
  * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingSpendInvariant"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$addingSpendInvariant}` variant of this activity instead
  *
   */
  addingSpendInvariant(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      addingSpendInvariant: seedTxOutputId
    }, "CapoMintHelpers::MinterActivity.addingSpendInvariant");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingSpendInvariant"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$addingSpendInvariant`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
   */
  get $seeded$addingSpendInvariant() {
    return impliedSeedActivityMaker(this, this.addingSpendInvariant)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
  /**
  * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.forcingNewMintDelegate"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$forcingNewMintDelegate}` variant of this activity instead
  *
   */
  forcingNewMintDelegate(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      forcingNewMintDelegate: seedTxOutputId
    }, "CapoMintHelpers::MinterActivity.forcingNewMintDelegate");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.forcingNewMintDelegate"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$forcingNewMintDelegate`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
   */
  get $seeded$forcingNewMintDelegate() {
    return impliedSeedActivityMaker(this, this.forcingNewMintDelegate)();
  }
  CreatingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingNewSpendDelegate: fields
      }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"***, 
   * @param fields - \{ replacingUut: number[] | undefined \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingNewSpendDelegate({ replacingUut })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingNewSpendDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
}
const MinterActivitySchema = {
  "kind": "enum",
  "name": "MinterActivity",
  "id": "__module__CapoMintHelpers__MinterActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoMintHelpers__MinterActivity[]__mintingCharter",
      "name": "mintingCharter",
      "fieldTypes": [
        {
          "name": "owner",
          "type": {
            "kind": "internal",
            "name": "Address"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoMintHelpers__MinterActivity[]__mintWithDelegateAuthorizing",
      "name": "mintWithDelegateAuthorizing",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoMintHelpers__MinterActivity[]__addingMintInvariant",
      "name": "addingMintInvariant",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoMintHelpers__MinterActivity[]__addingSpendInvariant",
      "name": "addingSpendInvariant",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoMintHelpers__MinterActivity[]__forcingNewMintDelegate",
      "name": "forcingNewMintDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoMintHelpers__MinterActivity[]__CreatingNewSpendDelegate",
      "name": "CreatingNewSpendDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "replacingUut",
          "type": {
            "kind": "option",
            "someType": {
              "kind": "internal",
              "name": "ByteArray"
            }
          }
        }
      ]
    }
  ]
};
const RelativeDelegateLinkSchema$2 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
  "name": "RelativeDelegateLink",
  "fieldTypes": [
    {
      "name": "uutName",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "delegateValidatorHash",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "ValidatorHash"
        }
      }
    },
    {
      "name": "config",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};

var __defProp$2 = Object.defineProperty;
var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
var __decorateClass$2 = (decorators, target, key, kind) => {
  var result = __getOwnPropDesc$2(target, key) ;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (decorator(target, key, result) ) || result;
  if (result) __defProp$2(target, key, result);
  return result;
};
class CapoMinter extends StellarContract {
  currentRev = 1n;
  scriptBundle() {
    return CapoMinterBundle.create({
      setup: this.setup,
      params: this.configIn
    });
  }
  /**
   * the data bridge for this minter is fixed to one particular type
   */
  dataBridgeClass = CapoMinterDataBridge;
  get onchain() {
    return this.getOnchainBridge();
  }
  // get offchain(): mustFindConcreteContractBridgeType<this>["reader"] {
  //     return super.offchain as any;
  // }
  // get reader(): mustFindConcreteContractBridgeType<this>["reader"] {
  //     return super.offchain as any;
  // }
  get activity() {
    const bridge = this.onchain;
    return bridge.activity;
  }
  get scriptActivitiesName() {
    return "MinterActivity";
  }
  activityMintingCharter(ownerInfo) {
    return this.activityRedeemer("mintingCharter", ownerInfo);
  }
  activityMintWithDelegateAuthorizing() {
    return this.activityRedeemer("mintWithDelegateAuthorizing");
  }
  activityAddingMintInvariant(seedFrom) {
    const seed = this.getSeed(seedFrom);
    return this.activityRedeemer("addingMintInvariant", { seed });
  }
  activityAddingSpendInvariant(seedFrom) {
    const seed = this.getSeed(seedFrom);
    return this.activityRedeemer("addingSpendInvariant", { seed });
  }
  activityForcingNewMintDelegate(seedFrom) {
    console.warn(
      "NOTE: REPLACING THE MINT DELEGATE USING A DIRECT MINTER ACTIVITY\nTHIS IS NOT THE RECOMMENDED PATH - prefer using the existing mint delegate's ReplacingMe activity'"
    );
    const seed = this.getSeed(seedFrom);
    return this.activityRedeemer("forcingNewMintDelegate", { seed });
  }
  activityForcingNewSpendDelegate(seedFrom, replacingUut) {
    const seed = this.getSeed(seedFrom);
    return this.activityRedeemer("forcingNewSpendDelegate", {
      seed,
      replacingUut
    });
  }
  //! overrides base getter type with undefined not being allowed
  get mintingPolicyHash() {
    return super.mintingPolicyHash;
  }
  get charterTokenAsValuesEntry() {
    return mkValuesEntry("charter", BigInt(1));
  }
  tvCharter() {
    const { mintingPolicyHash } = this;
    const v = makeValue(
      0,
      makeAssets([[mintingPolicyHash, [this.charterTokenAsValuesEntry]]])
    );
    return v;
  }
  get charterTokenAsValue() {
    console.warn(
      "deprecated use of `get minter.charterTokenAsValue`; use tvCharter() instead"
    );
    return this.tvCharter();
  }
  async txnMintingCharter(tcx, {
    owner,
    capoGov,
    mintDelegate,
    spendDelegate
  }) {
    //!!! todo: can we expect capoGov & mintDgt in tcx.state.uuts? and update the type constraint here?
    const charterVE = this.charterTokenAsValuesEntry;
    const capoGovVE = mkValuesEntry(capoGov.name, BigInt(1));
    const mintDgtVE = mkValuesEntry(mintDelegate.name, BigInt(1));
    const spendDgtVE = mkValuesEntry(spendDelegate.name, BigInt(1));
    const values = [
      charterVE,
      // settingsUutVE,
      capoGovVE,
      mintDgtVE,
      spendDgtVE
    ];
    const activity = this.activity.mintingCharter(owner);
    return tcx.addScriptProgram(
      this.compiledScript
    ).mintTokens(
      this.mintingPolicyHash,
      values,
      activity
    );
  }
  attachScript(tcx, useRefScript = true) {
    return this.configIn.capo.txnAttachScriptOrRefScript(
      tcx,
      this.compiledScript,
      useRefScript
    );
  }
  async txnMintingWithoutDelegate(tcx, vEntries, minterActivity) {
    return (await this.attachScript(tcx)).mintTokens(
      this.mintingPolicyHash,
      vEntries,
      minterActivity
    );
  }
  async txnMintWithDelegateAuthorizing(tcx, vEntries, mintDelegate, mintDgtRedeemer, skipReturningDelegate) {
    const { capo } = this.configIn;
    const md = mintDelegate || await capo.getMintDelegate();
    const tcx1 = await capo.tcxWithCharterRef(tcx);
    await md.txnGrantAuthority(
      tcx1,
      mintDgtRedeemer,
      skipReturningDelegate
    );
    return (await this.attachScript(tcx)).mintTokens(
      this.mintingPolicyHash,
      vEntries,
      this.activityMintWithDelegateAuthorizing()
    );
  }
}
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityMintingCharter");
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityMintWithDelegateAuthorizing");
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityAddingMintInvariant");
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityAddingSpendInvariant");
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityForcingNewMintDelegate");
__decorateClass$2([
  Activity.redeemer
], CapoMinter.prototype, "activityForcingNewSpendDelegate");
__decorateClass$2([
  Activity.partialTxn
], CapoMinter.prototype, "txnMintingCharter");
__decorateClass$2([
  Activity.partialTxn
], CapoMinter.prototype, "txnMintingWithoutDelegate");
__decorateClass$2([
  Activity.partialTxn
], CapoMinter.prototype, "txnMintWithDelegateAuthorizing");

class AuthorityPolicy extends StellarDelegate {
  // this class is distinct from other delegates
}

class AnyAddressAuthorityPolicy extends AuthorityPolicy {
  loadBundle(params) {
    return void 0;
  }
  usesContractScript = false;
  getContractScriptParams() {
    return {
      rev: 0n
    };
  }
  get delegateValidatorHash() {
    return void 0;
  }
  // /**
  //  * special-case activity for non-contract (no redeemer)
  //  */
  // @Activity.redeemer
  // activityAuthorizing(): isActivity {
  //     return { redeemer: undefined };
  // }
  //! impls MUST resolve the indicated token to a specific UTxO
  //  ... or throw an informative error
  async DelegateMustFindAuthorityToken(tcx, label) {
    const v = this.tvAuthorityToken();
    const { addrHint } = this.configIn;
    return this.uh.mustFindActorUtxo(
      `${label}: ${decodeUtf8(this.configIn.tn)}`,
      {
        predicate: this.uh.mkTokenPredicate(v),
        exceptInTcx: tcx,
        extraErrorHint: "are you connected to the right wallet address? " + (addrHint?.length ? "\nauthority token originally issued to " + addrHint.map((x) => {
          const addr = "string" == typeof x ? makeAddress(x) : x;
          return dumpAny(addr) + " = " + addr.toString();
        }).join("\n or ") : "")
      }
    );
  }
  async txnReceiveAuthorityToken(tcx, tokenValue, fromFoundUtxo) {
    let dest;
    console.log("\u{1F41E}\u{1F41E}  receive authority token");
    if (fromFoundUtxo) {
      dest = fromFoundUtxo.address;
      console.log(
        "    \u{1F41E}\u{1F41E}  " + dumpAny(fromFoundUtxo.address, this.networkParams)
      );
    } else {
      if (!this.configIn?.addrHint?.[0])
        throw new Error(`missing addrHint`);
      const {
        addrHint
        // reqdAddress,  // removed
      } = this.configIn;
      dest = addrHint[0];
    }
    const output = makeTxOutput(dest, tokenValue);
    output.correctLovelace(this.networkParams);
    tcx.addOutput(output);
    console.log(
      "    \u{1F41E}\u{1F41E}  ...with output" + dumpAny(output, this.networkParams)
    );
    return tcx;
  }
  //! Adds the indicated token to the txn as an input with apporpriate activity/redeemer
  //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()
  async DelegateAddsAuthorityToken(tcx, fromFoundUtxo, redeemer) {
    //! no need to specify a redeemer, but we pass it through
    return tcx.addInput(fromFoundUtxo, redeemer);
  }
  //! Adds the indicated utxo to the transaction with appropriate activity/redeemer
  //  ... allowing the token to be burned by the minting policy.
  //! EXPECTS to receive a Utxo having the result of txnMustFindAuthorityToken()
  async DelegateRetiresAuthorityToken(tcx, fromFoundUtxo) {
    //! no need to specify a redeemer
    return tcx.addInput(fromFoundUtxo);
  }
}

class CapoDataBridge extends ContractDataBridge {
  static isAbstract = false;
  isAbstract = false;
  /**
   * Helper class for generating TxOutputDatum for the ***datum type (CapoDatum)***
   * for this contract script. 
   */
  datum = new CapoDatumHelper({ isMainnet: this.isMainnet });
  // datumAccessor/enum
  /**
   * this is the specific type of datum for the `Capo` script
   */
  CapoDatum = this.datum;
  readDatum = (d) => {
    return this.reader.CapoDatum(d);
  };
  /**
   * generates UplcData for the activity type (***CapoActivity***) for the `Capo` script
   */
  activity = new CapoActivityHelper({ isMainnet: this.isMainnet, isActivity: true });
  // activityAccessor/enum
  CapoActivity = this.activity;
  reader = new CapoDataBridgeReader(this, this.isMainnet);
  /**
   * accessors for all the types defined in the `Capo` script
   * @remarks - these accessors are used to generate UplcData for each type
   */
  types = {
    /**
     * generates UplcData for the enum type ***DelegateRole*** for the `Capo` script
     */
    DelegateRole: new DelegateRoleHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestEntryType*** for the `Capo` script
     */
    ManifestEntryType: new ManifestEntryTypeHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingDelegateAction*** for the `Capo` script
     */
    PendingDelegateAction: new PendingDelegateActionHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestActivity*** for the `Capo` script
     */
    ManifestActivity: new ManifestActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingCharterChange*** for the `Capo` script
     */
    PendingCharterChange: new PendingCharterChangeHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***CapoDatum*** for the `Capo` script
     */
    CapoDatum: new CapoDatumHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***CapoLifecycleActivity*** for the `Capo` script
     */
    CapoLifecycleActivity: new CapoLifecycleActivityHelper$1({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***CapoActivity*** for the `Capo` script
     */
    CapoActivity: new CapoActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***RelativeDelegateLink*** for the `Capo` script
     */
    RelativeDelegateLink: (fields) => {
      return this["\u1C7A\u1C7ARelativeDelegateLinkCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***CapoManifestEntry*** for the `Capo` script
     */
    CapoManifestEntry: (fields) => {
      return this["\u1C7A\u1C7ACapoManifestEntryCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***PendingDelegateChange*** for the `Capo` script
     */
    PendingDelegateChange: (fields) => {
      return this["\u1C7A\u1C7APendingDelegateChangeCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***AnyData*** for the `Capo` script
     */
    AnyData: (fields) => {
      return this["\u1C7A\u1C7AAnyDataCast"].toUplcData(fields);
    }
  };
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ARelativeDelegateLinkCast" = makeCast(
    RelativeDelegateLinkSchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ACapoManifestEntryCast" = makeCast(
    CapoManifestEntrySchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7APendingDelegateChangeCast" = makeCast(
    PendingDelegateChangeSchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7AAnyDataCast" = makeCast(
    AnyDataSchema$1,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
}
class CapoDataBridgeReader extends DataBridgeReaderClass {
  constructor(bridge, isMainnet) {
    super();
    this.bridge = bridge;
  }
  /**
      * reads UplcData *known to fit the **DelegateRole*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateRole(d) {
    const typeHelper = this.bridge.types.DelegateRole;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestEntryType*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestEntryType(d) {
    const typeHelper = this.bridge.types.ManifestEntryType;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateAction*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateAction(d) {
    const typeHelper = this.bridge.types.PendingDelegateAction;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestActivity*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestActivity(d) {
    const typeHelper = this.bridge.types.ManifestActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingCharterChange*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingCharterChange(d) {
    const typeHelper = this.bridge.types.PendingCharterChange;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  datum = (d) => {
    return this.CapoDatum(d);
  };
  /**
      * reads UplcData *known to fit the **CapoDatum*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoDatum(d) {
    const typeHelper = this.bridge.types.CapoDatum;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **CapoLifecycleActivity*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoLifecycleActivity(d) {
    const typeHelper = this.bridge.types.CapoLifecycleActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **CapoActivity*** enum type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoActivity(d) {
    const typeHelper = this.bridge.types.CapoActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **RelativeDelegateLink*** struct type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  RelativeDelegateLink(d) {
    const cast = this.bridge["\u1C7A\u1C7ARelativeDelegateLinkCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **CapoManifestEntry*** struct type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoManifestEntry(d) {
    const cast = this.bridge["\u1C7A\u1C7ACapoManifestEntryCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateChange*** struct type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateChange(d) {
    const cast = this.bridge["\u1C7A\u1C7APendingDelegateChangeCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **AnyData*** struct type,
      * for the Capo script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  AnyData(d) {
    const cast = this.bridge["\u1C7A\u1C7AAnyDataCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
}
let DelegateRoleHelper$1 = class DelegateRoleHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let ManifestEntryTypeHelper$1 = class ManifestEntryTypeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestEntryTypeSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.NamedTokenRef"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get NamedTokenRef() {
    const uplc = this.mkUplcData(
      { NamedTokenRef: {} },
      "CapoHelpers::ManifestEntryType.NamedTokenRef"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DgDataPolicy"***
   * @remarks - ***ManifestEntryType$DgDataPolicyLike*** is the same as the expanded field-types.
   */
  DgDataPolicy(fields) {
    const uplc = this.mkUplcData({
      DgDataPolicy: fields
    }, "CapoHelpers::ManifestEntryType.DgDataPolicy");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DelegateThreads"***
   * @remarks - ***ManifestEntryType$DelegateThreadsLike*** is the same as the expanded field-types.
   */
  DelegateThreads(fields) {
    const uplc = this.mkUplcData({
      DelegateThreads: fields
    }, "CapoHelpers::ManifestEntryType.DelegateThreads");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleMembership"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get MerkleMembership() {
    const uplc = this.mkUplcData(
      { MerkleMembership: {} },
      "CapoHelpers::ManifestEntryType.MerkleMembership"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleStateRoot"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#4***
   */
  get MerkleStateRoot() {
    const uplc = this.mkUplcData(
      { MerkleStateRoot: {} },
      "CapoHelpers::ManifestEntryType.MerkleStateRoot"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let PendingDelegateActionHelper$1 = class PendingDelegateActionHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingDelegateActionSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  Add(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Add: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Add: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Add"***, 
   * @param fields - \{ purpose: string, idPrefix: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Add({ purpose, idPrefix })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Add = impliedSeedActivityMaker(
    this,
    this.Add
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Remove"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Remove() {
    const uplc = this.mkUplcData(
      { Remove: {} },
      "CapoDelegateHelpers::PendingDelegateAction.Remove"
    );
    return uplc;
  }
  Replace(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Replace: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Replace: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Replace"***, 
   * @param fields - \{ purpose: string, idPrefix: string, replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | \{mph: MintingPolicyHash | string | number[], tokenName: string | number[]\} \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Replace({ purpose, idPrefix, replacesDgt })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Replace = impliedSeedActivityMaker(
    this,
    this.Replace
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
};
let ManifestActivityHelper$1 = class ManifestActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
let PendingCharterChangeHelper$1 = class PendingCharterChangeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingCharterChangeSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.delegateChange"***
   * @remarks - ***PendingDelegateChangeLike*** is the same as the expanded field-type.
   */
  delegateChange(change) {
    const uplc = this.mkUplcData({
      delegateChange: change
    }, "CapoDelegateHelpers::PendingCharterChange.delegateChange");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.otherManifestChange"***
   * @remarks - ***PendingCharterChange$otherManifestChangeLike*** is the same as the expanded field-types.
   */
  otherManifestChange(fields) {
    const uplc = this.mkUplcData({
      otherManifestChange: fields
    }, "CapoDelegateHelpers::PendingCharterChange.otherManifestChange");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
class CapoDatumHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoDatumSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  InlineTxOutputDatum for ***"CapoHelpers::CapoDatum.CharterData"***
   * @remarks - ***CapoDatum$CharterDataLike*** is the same as the expanded field-types.
   */
  CharterData(fields) {
    const uplc = this.mkUplcData({
      CharterData: fields
    }, "CapoHelpers::CapoDatum.CharterData");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
  /**
   * (property getter): InlineTxOutputDatum for ***"CapoHelpers::CapoDatum.ScriptReference"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get ScriptReference() {
    const uplc = this.mkUplcData(
      { ScriptReference: {} },
      "CapoHelpers::CapoDatum.ScriptReference"
    );
    return makeInlineTxOutputDatum(uplc);
  }
  /* tagOnly variant accessor */
  /**
   * generates  InlineTxOutputDatum for ***"CapoHelpers::CapoDatum.DelegatedData"***
   * @remarks - ***CapoDatum$DelegatedDataLike*** is the same as the expanded field-types.
   */
  DelegatedData(fields) {
    const uplc = this.mkUplcData({
      DelegatedData: fields
    }, "CapoHelpers::CapoDatum.DelegatedData");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
}
let DelegateRoleHelperNested$1 = class DelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let ManifestActivityHelperNested$1 = class ManifestActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
};
let CapoLifecycleActivityHelper$1 = class CapoLifecycleActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new DelegateRoleHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
};
let ActivityDelegateRoleHelperNested$1 = class ActivityDelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
};
let CapoLifecycleActivityHelperNested$1 = class CapoLifecycleActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema$1,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new ActivityDelegateRoleHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
};
class CapoActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * access to different variants of the ***nested CapoLifecycleActivity*** type needed for ***CapoActivity:capoLifecycleActivity***.
   */
  get capoLifecycleActivity() {
    const nestedAccessor = new CapoLifecycleActivityHelperNested$1({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { capoLifecycleActivity: activity },
          "CapoHelpers::CapoActivity.capoLifecycleActivity"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::CapoActivity.usingAuthority"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get usingAuthority() {
    const uplc = this.mkUplcData(
      { usingAuthority: {} },
      "CapoHelpers::CapoActivity.usingAuthority"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::CapoActivity.retiringRefScript"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get retiringRefScript() {
    const uplc = this.mkUplcData(
      { retiringRefScript: {} },
      "CapoHelpers::CapoActivity.retiringRefScript"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::CapoActivity.addingSpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get addingSpendInvariant() {
    const uplc = this.mkUplcData(
      { addingSpendInvariant: {} },
      "CapoHelpers::CapoActivity.addingSpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::CapoActivity.spendingDelegatedDatum"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#4***
   */
  get spendingDelegatedDatum() {
    const uplc = this.mkUplcData(
      { spendingDelegatedDatum: {} },
      "CapoHelpers::CapoActivity.spendingDelegatedDatum"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::CapoActivity.updatingCharter"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#5***
   */
  get updatingCharter() {
    const uplc = this.mkUplcData(
      { updatingCharter: {} },
      "CapoHelpers::CapoActivity.updatingCharter"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
const RelativeDelegateLinkSchema$1 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
  "name": "RelativeDelegateLink",
  "fieldTypes": [
    {
      "name": "uutName",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "delegateValidatorHash",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "ValidatorHash"
        }
      }
    },
    {
      "name": "config",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};
const DelegateRoleSchema$1 = {
  "kind": "enum",
  "name": "DelegateRole",
  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
      "name": "MintDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
      "name": "SpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
      "name": "MintInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
      "name": "SpendInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
      "name": "OtherNamedDgt",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
      "name": "BothMintAndSpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
      "name": "HandledByCapoOnly",
      "fieldTypes": []
    }
  ]
};
const ManifestEntryTypeSchema$1 = {
  "kind": "enum",
  "name": "ManifestEntryType",
  "id": "__module__CapoHelpers__ManifestEntryType[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
      "name": "NamedTokenRef",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "policyLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
      "name": "DelegateThreads",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
      "name": "MerkleMembership",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
      "name": "MerkleStateRoot",
      "fieldTypes": []
    }
  ]
};
const CapoManifestEntrySchema$1 = {
  "kind": "struct",
  "format": "map",
  "id": "__module__CapoHelpers__CapoManifestEntry[]",
  "name": "CapoManifestEntry",
  "fieldTypes": [
    {
      "name": "entryType",
      "type": {
        "kind": "enum",
        "name": "ManifestEntryType",
        "id": "__module__CapoHelpers__ManifestEntryType[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
            "name": "NamedTokenRef",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "policyLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
            "name": "DelegateThreads",
            "fieldTypes": [
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
            "name": "MerkleMembership",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
            "name": "MerkleStateRoot",
            "fieldTypes": []
          }
        ]
      },
      "key": "tpe"
    },
    {
      "name": "tokenName",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "tn"
    },
    {
      "name": "mph",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "MintingPolicyHash"
        }
      }
    }
  ]
};
const PendingDelegateActionSchema$1 = {
  "kind": "enum",
  "name": "PendingDelegateAction",
  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
      "name": "Add",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
      "name": "Remove",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
      "name": "Replace",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "replacesDgt",
          "type": {
            "kind": "internal",
            "name": "AssetClass"
          }
        }
      ]
    }
  ]
};
const PendingDelegateChangeSchema$1 = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
  "name": "PendingDelegateChange",
  "fieldTypes": [
    {
      "name": "action",
      "type": {
        "kind": "enum",
        "name": "PendingDelegateAction",
        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
            "name": "Add",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
            "name": "Remove",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
            "name": "Replace",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "replacesDgt",
                "type": {
                  "kind": "internal",
                  "name": "AssetClass"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "role",
      "type": {
        "kind": "enum",
        "name": "DelegateRole",
        "id": "__module__CapoDelegateHelpers__DelegateRole[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
            "name": "MintDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
            "name": "SpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
            "name": "MintInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
            "name": "SpendInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
            "name": "OtherNamedDgt",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 6,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
            "name": "BothMintAndSpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 7,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
            "name": "HandledByCapoOnly",
            "fieldTypes": []
          }
        ]
      }
    },
    {
      "name": "dgtLink",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "struct",
          "format": "list",
          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
          "name": "RelativeDelegateLink",
          "fieldTypes": [
            {
              "name": "uutName",
              "type": {
                "kind": "internal",
                "name": "String"
              }
            },
            {
              "name": "delegateValidatorHash",
              "type": {
                "kind": "option",
                "someType": {
                  "kind": "internal",
                  "name": "ValidatorHash"
                }
              }
            },
            {
              "name": "config",
              "type": {
                "kind": "internal",
                "name": "ByteArray"
              }
            }
          ]
        }
      }
    }
  ]
};
const ManifestActivitySchema$1 = {
  "kind": "enum",
  "name": "ManifestActivity",
  "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
      "name": "retiringEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
      "name": "updatingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
      "name": "addingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
      "name": "forkingThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "newThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
      "name": "burningThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "burnedThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    }
  ]
};
const PendingCharterChangeSchema$1 = {
  "kind": "enum",
  "name": "PendingCharterChange",
  "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
      "name": "delegateChange",
      "fieldTypes": [
        {
          "name": "change",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
            "name": "PendingDelegateChange",
            "fieldTypes": [
              {
                "name": "action",
                "type": {
                  "kind": "enum",
                  "name": "PendingDelegateAction",
                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                      "name": "Add",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                      "name": "Remove",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                      "name": "Replace",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "replacesDgt",
                          "type": {
                            "kind": "internal",
                            "name": "AssetClass"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "dgtLink",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
      "name": "otherManifestChange",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "remainingDelegateValidations",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "enum",
              "name": "DelegateRole",
              "id": "__module__CapoDelegateHelpers__DelegateRole[]",
              "variantTypes": [
                {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                  "name": "MintDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 1,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                  "name": "SpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 2,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                  "name": "MintInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 3,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                  "name": "SpendInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 4,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                  "name": "DgDataPolicy",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 5,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                  "name": "OtherNamedDgt",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 6,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                  "name": "BothMintAndSpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 7,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                  "name": "HandledByCapoOnly",
                  "fieldTypes": []
                }
              ]
            }
          }
        }
      ]
    }
  ]
};
const CapoDatumSchema = {
  "kind": "enum",
  "name": "CapoDatum",
  "id": "__module__CapoHelpers__CapoDatum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
      "name": "CharterData",
      "fieldTypes": [
        {
          "name": "spendDelegateLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "spendInvariants",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "struct",
              "format": "list",
              "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
              "name": "RelativeDelegateLink",
              "fieldTypes": [
                {
                  "name": "uutName",
                  "type": {
                    "kind": "internal",
                    "name": "String"
                  }
                },
                {
                  "name": "delegateValidatorHash",
                  "type": {
                    "kind": "option",
                    "someType": {
                      "kind": "internal",
                      "name": "ValidatorHash"
                    }
                  }
                },
                {
                  "name": "config",
                  "type": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              ]
            }
          }
        },
        {
          "name": "otherNamedDelegates",
          "type": {
            "kind": "map",
            "keyType": {
              "kind": "internal",
              "name": "String"
            },
            "valueType": {
              "kind": "struct",
              "format": "list",
              "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
              "name": "RelativeDelegateLink",
              "fieldTypes": [
                {
                  "name": "uutName",
                  "type": {
                    "kind": "internal",
                    "name": "String"
                  }
                },
                {
                  "name": "delegateValidatorHash",
                  "type": {
                    "kind": "option",
                    "someType": {
                      "kind": "internal",
                      "name": "ValidatorHash"
                    }
                  }
                },
                {
                  "name": "config",
                  "type": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              ]
            }
          }
        },
        {
          "name": "mintDelegateLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "mintInvariants",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "struct",
              "format": "list",
              "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
              "name": "RelativeDelegateLink",
              "fieldTypes": [
                {
                  "name": "uutName",
                  "type": {
                    "kind": "internal",
                    "name": "String"
                  }
                },
                {
                  "name": "delegateValidatorHash",
                  "type": {
                    "kind": "option",
                    "someType": {
                      "kind": "internal",
                      "name": "ValidatorHash"
                    }
                  }
                },
                {
                  "name": "config",
                  "type": {
                    "kind": "internal",
                    "name": "ByteArray"
                  }
                }
              ]
            }
          }
        },
        {
          "name": "govAuthorityLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "manifest",
          "type": {
            "kind": "map",
            "keyType": {
              "kind": "internal",
              "name": "String"
            },
            "valueType": {
              "kind": "struct",
              "format": "map",
              "id": "__module__CapoHelpers__CapoManifestEntry[]",
              "name": "CapoManifestEntry",
              "fieldTypes": [
                {
                  "name": "entryType",
                  "type": {
                    "kind": "enum",
                    "name": "ManifestEntryType",
                    "id": "__module__CapoHelpers__ManifestEntryType[]",
                    "variantTypes": [
                      {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                        "name": "NamedTokenRef",
                        "fieldTypes": []
                      },
                      {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                        "name": "DgDataPolicy",
                        "fieldTypes": [
                          {
                            "name": "policyLink",
                            "type": {
                              "kind": "struct",
                              "format": "list",
                              "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                              "name": "RelativeDelegateLink",
                              "fieldTypes": [
                                {
                                  "name": "uutName",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                },
                                {
                                  "name": "delegateValidatorHash",
                                  "type": {
                                    "kind": "option",
                                    "someType": {
                                      "kind": "internal",
                                      "name": "ValidatorHash"
                                    }
                                  }
                                },
                                {
                                  "name": "config",
                                  "type": {
                                    "kind": "internal",
                                    "name": "ByteArray"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "idPrefix",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "refCount",
                            "type": {
                              "kind": "internal",
                              "name": "Int"
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 2,
                        "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                        "name": "DelegateThreads",
                        "fieldTypes": [
                          {
                            "name": "role",
                            "type": {
                              "kind": "enum",
                              "name": "DelegateRole",
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                  "name": "MintDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                  "name": "SpendDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                  "name": "MintInvariant",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                  "name": "SpendInvariant",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                  "name": "DgDataPolicy",
                                  "fieldTypes": [
                                    {
                                      "name": "name",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 5,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                  "name": "OtherNamedDgt",
                                  "fieldTypes": [
                                    {
                                      "name": "name",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 6,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                  "name": "BothMintAndSpendDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 7,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                  "name": "HandledByCapoOnly",
                                  "fieldTypes": []
                                }
                              ]
                            }
                          },
                          {
                            "name": "refCount",
                            "type": {
                              "kind": "internal",
                              "name": "Int"
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 3,
                        "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                        "name": "MerkleMembership",
                        "fieldTypes": []
                      },
                      {
                        "kind": "variant",
                        "tag": 4,
                        "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                        "name": "MerkleStateRoot",
                        "fieldTypes": []
                      }
                    ]
                  },
                  "key": "tpe"
                },
                {
                  "name": "tokenName",
                  "type": {
                    "kind": "internal",
                    "name": "ByteArray"
                  },
                  "key": "tn"
                },
                {
                  "name": "mph",
                  "type": {
                    "kind": "option",
                    "someType": {
                      "kind": "internal",
                      "name": "MintingPolicyHash"
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "pendingChanges",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "enum",
              "name": "PendingCharterChange",
              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
              "variantTypes": [
                {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                  "name": "delegateChange",
                  "fieldTypes": [
                    {
                      "name": "change",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                        "name": "PendingDelegateChange",
                        "fieldTypes": [
                          {
                            "name": "action",
                            "type": {
                              "kind": "enum",
                              "name": "PendingDelegateAction",
                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                  "name": "Add",
                                  "fieldTypes": [
                                    {
                                      "name": "seed",
                                      "type": {
                                        "kind": "internal",
                                        "name": "TxOutputId"
                                      }
                                    },
                                    {
                                      "name": "purpose",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "idPrefix",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                  "name": "Remove",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                  "name": "Replace",
                                  "fieldTypes": [
                                    {
                                      "name": "seed",
                                      "type": {
                                        "kind": "internal",
                                        "name": "TxOutputId"
                                      }
                                    },
                                    {
                                      "name": "purpose",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "idPrefix",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "replacesDgt",
                                      "type": {
                                        "kind": "internal",
                                        "name": "AssetClass"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "name": "role",
                            "type": {
                              "kind": "enum",
                              "name": "DelegateRole",
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                  "name": "MintDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                  "name": "SpendDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                  "name": "MintInvariant",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                  "name": "SpendInvariant",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                  "name": "DgDataPolicy",
                                  "fieldTypes": [
                                    {
                                      "name": "name",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 5,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                  "name": "OtherNamedDgt",
                                  "fieldTypes": [
                                    {
                                      "name": "name",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 6,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                  "name": "BothMintAndSpendDgt",
                                  "fieldTypes": []
                                },
                                {
                                  "kind": "variant",
                                  "tag": 7,
                                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                  "name": "HandledByCapoOnly",
                                  "fieldTypes": []
                                }
                              ]
                            }
                          },
                          {
                            "name": "dgtLink",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "struct",
                                "format": "list",
                                "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                "name": "RelativeDelegateLink",
                                "fieldTypes": [
                                  {
                                    "name": "uutName",
                                    "type": {
                                      "kind": "internal",
                                      "name": "String"
                                    }
                                  },
                                  {
                                    "name": "delegateValidatorHash",
                                    "type": {
                                      "kind": "option",
                                      "someType": {
                                        "kind": "internal",
                                        "name": "ValidatorHash"
                                      }
                                    }
                                  },
                                  {
                                    "name": "config",
                                    "type": {
                                      "kind": "internal",
                                      "name": "ByteArray"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 1,
                  "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                  "name": "otherManifestChange",
                  "fieldTypes": [
                    {
                      "name": "activity",
                      "type": {
                        "kind": "enum",
                        "name": "ManifestActivity",
                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                        "variantTypes": [
                          {
                            "kind": "variant",
                            "tag": 0,
                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                            "name": "retiringEntry",
                            "fieldTypes": [
                              {
                                "name": "key",
                                "type": {
                                  "kind": "internal",
                                  "name": "String"
                                }
                              }
                            ]
                          },
                          {
                            "kind": "variant",
                            "tag": 1,
                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                            "name": "updatingEntry",
                            "fieldTypes": [
                              {
                                "name": "key",
                                "type": {
                                  "kind": "internal",
                                  "name": "String"
                                }
                              },
                              {
                                "name": "tokenName",
                                "type": {
                                  "kind": "internal",
                                  "name": "ByteArray"
                                }
                              }
                            ]
                          },
                          {
                            "kind": "variant",
                            "tag": 2,
                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                            "name": "addingEntry",
                            "fieldTypes": [
                              {
                                "name": "key",
                                "type": {
                                  "kind": "internal",
                                  "name": "String"
                                }
                              },
                              {
                                "name": "tokenName",
                                "type": {
                                  "kind": "internal",
                                  "name": "ByteArray"
                                }
                              }
                            ]
                          },
                          {
                            "kind": "variant",
                            "tag": 3,
                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                            "name": "forkingThreadToken",
                            "fieldTypes": [
                              {
                                "name": "key",
                                "type": {
                                  "kind": "internal",
                                  "name": "String"
                                }
                              },
                              {
                                "name": "newThreadCount",
                                "type": {
                                  "kind": "internal",
                                  "name": "Int"
                                }
                              }
                            ]
                          },
                          {
                            "kind": "variant",
                            "tag": 4,
                            "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                            "name": "burningThreadToken",
                            "fieldTypes": [
                              {
                                "name": "key",
                                "type": {
                                  "kind": "internal",
                                  "name": "String"
                                }
                              },
                              {
                                "name": "burnedThreadCount",
                                "type": {
                                  "kind": "internal",
                                  "name": "Int"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "name": "remainingDelegateValidations",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "enum",
                          "name": "DelegateRole",
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                              "name": "MintDgt",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                              "name": "SpendDgt",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 2,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                              "name": "MintInvariant",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 3,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                              "name": "SpendInvariant",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 4,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                              "name": "DgDataPolicy",
                              "fieldTypes": [
                                {
                                  "name": "name",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 5,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                              "name": "OtherNamedDgt",
                              "fieldTypes": [
                                {
                                  "name": "name",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 6,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                              "name": "BothMintAndSpendDgt",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 7,
                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                              "name": "HandledByCapoOnly",
                              "fieldTypes": []
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__CapoDatum[]__ScriptReference",
      "name": "ScriptReference",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__CapoDatum[]__DelegatedData",
      "name": "DelegatedData",
      "fieldTypes": [
        {
          "name": "data",
          "type": {
            "kind": "map",
            "keyType": {
              "kind": "internal",
              "name": "String"
            },
            "valueType": {
              "kind": "internal",
              "name": "Data"
            }
          }
        },
        {
          "name": "version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "otherDetails",
          "type": {
            "kind": "internal",
            "name": "Data"
          }
        }
      ]
    }
  ]
};
const CapoLifecycleActivitySchema$1 = {
  "kind": "enum",
  "name": "CapoLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
      "name": "CreatingDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
      "name": "queuePendingChange",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
      "name": "removePendingChange",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
      "name": "commitPendingChanges",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
      "name": "forcingNewSpendDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
      "name": "forcingNewMintDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
      "name": "updatingManifest",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ]
};
const CapoActivitySchema = {
  "kind": "enum",
  "name": "CapoActivity",
  "id": "__module__CapoHelpers__CapoActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__CapoActivity[]__capoLifecycleActivity",
      "name": "capoLifecycleActivity",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "CapoLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                "name": "CreatingDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
                "name": "queuePendingChange",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
                "name": "removePendingChange",
                "fieldTypes": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "enum",
                      "name": "DelegateRole",
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                          "name": "MintDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                          "name": "SpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                          "name": "MintInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                          "name": "SpendInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                          "name": "DgDataPolicy",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 5,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                          "name": "OtherNamedDgt",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 6,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                          "name": "BothMintAndSpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 7,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                          "name": "HandledByCapoOnly",
                          "fieldTypes": []
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
                "name": "commitPendingChanges",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
                "name": "forcingNewSpendDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
                "name": "forcingNewMintDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
                "name": "updatingManifest",
                "fieldTypes": [
                  {
                    "name": "activity",
                    "type": {
                      "kind": "enum",
                      "name": "ManifestActivity",
                      "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                          "name": "retiringEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                          "name": "updatingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                          "name": "addingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                          "name": "forkingThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "newThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                          "name": "burningThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "burnedThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__CapoActivity[]__usingAuthority",
      "name": "usingAuthority",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__CapoActivity[]__retiringRefScript",
      "name": "retiringRefScript",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoHelpers__CapoActivity[]__addingSpendInvariant",
      "name": "addingSpendInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoHelpers__CapoActivity[]__spendingDelegatedDatum",
      "name": "spendingDelegatedDatum",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoHelpers__CapoActivity[]__updatingCharter",
      "name": "updatingCharter",
      "fieldTypes": []
    }
  ]
};
const AnyDataSchema$1 = {
  "kind": "struct",
  "format": "map",
  "id": "__module__StellarHeliosHelpers__AnyData[]",
  "name": "AnyData",
  "fieldTypes": [
    {
      "name": "id",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "@id"
    },
    {
      "name": "type",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "tpe"
    }
  ]
};

function mkDgtStateKey(n, p = "dgPol") {
  return `${p}${n.slice(0, 1).toUpperCase()}${n.slice(1)}`;
}

var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = __getOwnPropDesc$1(target, key) ;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (decorator(target, key, result) ) || result;
  if (result) __defProp$1(target, key, result);
  return result;
};
class Capo extends StellarContract {
  //, hasRoleMap<SELF>
  static currentRev = 1n;
  static async currentConfig() {
  }
  /**
   * Enable auto-setup for delegates in the Capo contract.
   * @remarks
   *
   * This is a flag that can be set to true to enable auto-setup for delegates in the Capo contract.
   * It is currently false by default, meaning that the Capo contract will not automatically setup any delegates.
   *
   * We'll change that to true real soon now.
   */
  autoSetup = false;
  isChartered = false;
  dataBridgeClass = CapoDataBridge;
  needsCoreDelegateUpdates = false;
  get onchain() {
    return this.getOnchainBridge();
  }
  // /**
  //  * Advanced accessor for reading arbitrary onchain data known to be of specific types.
  //  * @remarks
  //  * The returned object provides accessors for reading onchain data of each specific type
  //  * defined in the contract's on-chain scripts.
  //  *
  //  * Normally, you can just use the findDelegatedDataUtxos() method or other helpers to
  //  * locate and implicilty decode data.
  //  */
  get offchain() {
    return super.offchain;
  }
  /**
   * @internal
   */
  get reader() {
    return super.offchain;
  }
  /**
   * Accessor for generating activity-data ("redeemer") values for use in transactions.
   * @remarks
   * This object contains named accessors for generating activity-data values for each
   * activity type defined in the contract's on-chain scripts.
   * 
   * Most activity types on the Capo are used implicitly by the other methods on the Capo,
   * so you may seldom need to use this object directly.
   * 
   * @example
   * ```typescript
   * const activity = capo.activity.usingAuthority;
   * ```
   */
  get activity() {
    const bridge = this.onchain;
    return bridge.activity;
  }
  get mkDatum() {
    return this.onchain.datum;
  }
  // /**
  //  * @internal
  //  */
  // api-extractor doesn't like this : (
  // private featureFlags: Record<string, boolean> = {};
  /**
   * @internal
   */
  get defaultFeatureFlags() {
    return {};
  }
  /**
   * @internal
   */
  featureEnabled(f) {
    return this.featureFlags[f] ?? false;
  }
  get canPartialConfig() {
    return true;
  }
  get newReadDatum() {
    const bridge = this.getOnchainBridge();
    const { readDatum } = bridge;
    if (!readDatum) {
      throw new Error(
        `${this.constructor.name}: this contract script doesn't use datum`
      );
    }
    return readDatum;
  }
  verifyConfigs() {
    return this.verifyCoreDelegates();
  }
  getBundle() {
    return super.getBundle();
  }
  scriptBundle() {
    console.warn(
      `${this.constructor.name}: each Capo will need to provide a scriptBundle() method.
It should return an instance of a class defined in a *.hlb.ts file.  At minimum:

    export default class MyAppCapo extends CapoHeliosBundle {
       get modules() { 
           return [
               ...super.modules,
               // additional custom .hl module imports here
           ];
       }
    }

We'll generate types for that .js file, based on the types in your Helios sources.
Your scriptBundle() method can \`return new MyAppCapo();\`

We suggest naming your Capo bundle class with your application's name.
`
    );
    console.warn(
      "using a generic Capo bundle - just enough for getting started."
    );
    return CapoHeliosBundle.create({
      setup: this.setup,
      params: this.configIn
    });
  }
  /**
   * Reveals any bootstrapping details that may be present during initial creation
   * of the Capo contract, for use during and immediately after charter-creation.
   *
   * @public
   **/
  bootstrapping;
  // abstract delegatedDataWrappers(): Promise<
  //     Record<string, someDataWrapper<any>>
  // >;
  get scriptDatumName() {
    return "CapoDatum";
  }
  get scriptActivitiesName() {
    return "CapoActivity";
  }
  static get defaultParams() {
    const params = {
      rev: this.currentRev
    };
    return params;
  }
  async init(args) {
    const {
      config,
      config: { featureFlags = {}, ...otherConfig } = {},
      ...otherArgs
    } = args;
    this.featureFlags = {
      ...this.defaultFeatureFlags,
      ...featureFlags
    };
    await super.init({
      ...otherArgs,
      ...Object.keys(otherConfig).length === 0 ? {} : { config: otherConfig }
    });
    const {
      scriptDatumName: onChainDatumName,
      scriptActivitiesName: onChainActivitiesName
    } = this;
    const { CharterData } = this.onChainDatumType.typeMembers;
    const updatingCharter = this.activity.updatingCharter;
    const usingAuthority = this.activity.usingAuthority;
    if (!CharterData)
      throw new Error(
        `datum type ${onChainDatumName} must have a 'CharterData' variant`
      );
    if (!updatingCharter)
      throw new Error(
        `activities type ${onChainActivitiesName} must have a 'updatingCharter' variant`
      );
    if (!usingAuthority)
      throw new Error(
        `activities type${onChainActivitiesName} must have a 'usingAuthority' variant`
      );
    const bundle = this.getBundle();
    let seedTxn = void 0;
    let {
      configuredParams,
      preConfigured: {
        minter: {
          config: minterConfig,
          programBundle: minterProgramBundle
        } = {}
      }
    } = bundle;
    if (configuredParams) {
      seedTxn = configuredParams.seedTxn;
      configuredParams.seedIndex;
      configuredParams.mph;
      minterConfig = configuredParams;
    } else if (this.configIn && !this.configIn.bootstrapping) {
      seedTxn = this.configIn.seedTxn;
      this.configIn.seedIndex;
    }
    if (seedTxn) {
      await this.connectMintingScript(minterConfig, minterProgramBundle);
    }
    this._delegateRoles = this.initDelegateRoles();
    if (seedTxn) {
      await this.verifyConfigs();
    }
    return this;
  }
  static bootstrapWith(args) {
    const { setup, config } = args;
    const Class = this;
    return new Class({ setup, config: { ...config, bootstrapping: true } });
  }
  /**
   * Creates any additional transactions needed during charter creation
   * @public
   * @remarks
   *
   * This method is a hook for subclasses to add extra transactions during the
   * charter creation process.  It is called during the creation of the charter transaction.
   *
   * The Capo has a {@link Capo.bootstrapping|`bootstrapping`} property that can be
   * referenced as needed during extra transaction creation.
   *
   * The provided transaction context has state.charterData in case it's needed.
   *
   * This method should use {@link StellarTxnContext.includeAddlTxn} to add transactions
   * to the context.
   *
   **/
  /* No-op by default */
  async mkAdditionalTxnsForCharter(tcx, options) {
    if (!tcx.state.addlTxns) tcx.state.addlTxns = [];
    return tcx;
  }
  // async readSettingsDatum<THIS extends Capo<any>>(
  //     this: THIS,
  //     parsedDatum: adapterParsedOnchainData<
  //         CapoOnchainSettingsType<THIS>,
  //         "SettingsData"
  //     >
  // ): Promise<CapoOffchainSettingsType<THIS>> {
  //     type t = CapoOnchainSettingsType<THIS>;
  //     return this.settingsAdapter.fromOnchainDatum(parsedDatum);
  // }
  get minterClass() {
    return CapoMinter;
  }
  minter;
  uutsValue(x) {
    let uutMap = x instanceof StellarTxnContext ? x.state.uuts : x instanceof UutName ? { single: x } : Array.isArray(x) ? { single: new UutName("some-uut", x) } : x;
    const vEntries = this.mkUutValuesEntries(uutMap);
    return makeValue(0, makeAssets([[this.mintingPolicyHash, vEntries]]));
  }
  /**
   * mockable method to make testing easier
   * @internal
   */
  mkUutValuesEntries(uutNameOrMap) {
    return mkUutValuesEntries(uutNameOrMap);
  }
  activityUsingAuthority() {
    return {
      redeemer: this.activityVariantToUplc("usingAuthority", {})
    };
  }
  tvCharter() {
    return this.minter.tvCharter();
  }
  get charterTokenAsValue() {
    console.warn(
      "deprecated get charterTokenAsValue; use tvCharter() instead"
    );
    return this.tvCharter();
  }
  get charterTokenPredicate() {
    const predicate = this.uh.mkTokenPredicate(this.tvCharter());
    return predicate;
  }
  //! forms a Value with minUtxo included
  tokenAsValue(tokenName, count = 1n) {
    const { mph } = this;
    return this.uh.mkMinTv(mph, tokenName, count);
  }
  async canFindCharterUtxo(capoUtxos) {
    if (!this.minter) return void 0;
    const predicate = this.uh.mkTokenPredicate(this.tvCharter());
    const { address } = this;
    const found = await this.uh.hasUtxo("charter", predicate, {
      address,
      utxos: capoUtxos,
      required: true
    });
    return found;
  }
  async mustFindCharterUtxo(capoUtxos) {
    const predicate = this.uh.mkTokenPredicate(this.tvCharter());
    return this.mustFindMyUtxo("charter", {
      predicate,
      extraErrorHint: "is the charter-mint done & already confirmed?",
      utxos: capoUtxos
    });
  }
  //     /**
  //  * Finds a free seed-utxo from the user wallet, and adds it to the transaction
  //  * @remarks
  //  *
  //  * Accepts a transaction context that may already have a seed.  Returns a typed
  //  * tcx with hasSeedUtxo type.
  //  *
  //  * The seedUtxo will be consumed in the transaction, so it can never be used
  //  * again; its value will be returned to the user wallet.
  //  *
  //  * The seedUtxo is needed for UUT minting, and the transaction is typed with
  //  * the presence of that seed (found in tcx.state.seedUtxo).
  //  *
  //  * If a seedUtxo is already present in the transaction context, no additional seedUtxo
  //  * will be added.
  //  *
  //  * If a seedUtxo is provided as an argument, that utxo must already be present
  //  * in the transaction inputs; the state will be updated to reference it.
  //  *
  //  * @public
  //  *
  //  **/
  //     async tcxWithSeedUtxo<TCX extends StellarTxnContext>(
  //         tcx: TCX = new StellarTxnContext(this.actorContext) as TCX,
  //         seedUtxo?: TxInput
  //     ): Promise<TCX & hasSeedUtxo> {
  /**
   * @deprecated - use tcxWithCharterRef() instead
   */
  async txnAddCharterRef(tcx) {
    return this.tcxWithCharterRef(tcx);
  }
  /**
   * Ensures the transaction context has a reference to the charter token
   * @remarks
   *
   * Accepts a transaction context that may already have a charter reference.  Returns a typed
   * tcx with hasCharterRef type.
   *
   * The transaction is typed with the presence of the charter reference (found in tcx.state.charterRef).
   *
   * If the charter reference is already present in the transaction context, the transaction will not be modified.
   */
  async tcxWithCharterRef(tcx) {
    if (
      //@ts-expect-error on type-probe:
      tcx.state.charterRef
    )
      return tcx;
    const ctUtxo = await this.mustFindCharterUtxo();
    tcx.addRefInput(ctUtxo);
    const charterData = await this.findCharterData(ctUtxo);
    const tcx2 = tcx;
    tcx2.state.charterRef = ctUtxo;
    tcx2.state.charterData = charterData;
    return tcx2.addRefInput(ctUtxo);
  }
  async tcxWithSettingsRef(tcx, {
    charterData,
    capoUtxos
  }) {
    if (
      //@ts-expect-error on type-probe:
      tcx.state.settingsInfo
    ) {
      return tcx;
    }
    const settingsInfo = await this.findSettingsInfo({
      charterData,
      capoUtxos
    });
    if (!settingsInfo) {
      throw new Error("settingsInfo not found");
    }
    tcx.addRefInput(settingsInfo.utxo);
    const tcx2 = tcx;
    tcx2.state.settingsInfo = settingsInfo;
    return tcx2;
  }
  // non-activity partial
  async txnMustUseCharterUtxo(tcx, redeemerOrRefInput, newCharterData) {
    return this.mustFindCharterUtxo().then(async (ctUtxo) => {
      if (true === redeemerOrRefInput || "refInput" === redeemerOrRefInput) {
        throw new Error(`use tcxWithCharterRef(tcx) instead`);
      }
      const redeemer = redeemerOrRefInput;
      const tcx2 = await this.txnAttachScriptOrRefScript(
        tcx,
        this.compiledScript
      );
      tcx2.txb._refInputs = tcx2.txb.refInputs.filter(
        (x) => !x.id.isEqual(ctUtxo.id)
      );
      tcx2.addInput(ctUtxo, redeemer);
      const datum2 = newCharterData ? this.mkDatum.CharterData(newCharterData) : ctUtxo.output.datum;
      return this.txnKeepCharterToken(tcx2, datum2);
    });
  }
  // non-activity partial
  async txnUpdateCharterUtxo(tcx, redeemer, newDatum) {
    return this.txnMustUseCharterUtxo(tcx, redeemer, newDatum);
  }
  // non-activity partial
  txnKeepCharterToken(tcx, datum2) {
    if (datum2.kind !== "InlineTxOutputDatum") {
      throw new Error(
        `datum must be InlineTxOutputDatum, not ${datum2.kind}`
      );
    }
    const txo = makeTxOutput(this.address, this.tvCharter(), datum2);
    txo.correctLovelace(this.networkParams);
    tcx.addOutput(txo);
    return tcx;
  }
  async txnAddGovAuthorityTokenRef(tcx) {
    const tcx2 = await this.tcxWithCharterRef(tcx);
    const tcx3 = await this.txnAddGovAuthority(tcx2);
    return tcx3;
  }
  async txnMustUseSpendDelegate(tcx, spendDelegate, activity) {
    const tcx2 = tcx;
    tcx2.state.spendDelegate = spendDelegate;
    return spendDelegate.txnGrantAuthority(tcx2, activity);
  }
  /**
   * provides minter-targeted params extracted from the input configuration
   * @remarks
   *
   * extracts the seed-txn details that are key to parameterizing the minter contract
   * @public
   **/
  getMinterParams() {
    const { seedTxn, seedIndex } = this.configIn;
    return { seedTxn, seedIndex };
  }
  // getCapoRev() {
  //     return 1n;
  // }
  get mph() {
    return this.minter.mintingPolicyHash;
  }
  get mintingPolicyHash() {
    return this.mph;
  }
  async findActorUut(uutPrefix, mph = this.mph) {
    const foundUtxo = await this.uh.findActorUtxo(
      `uut ${uutPrefix}-`,
      (utxo) => {
        if (getMatchingTokenName(utxo, mph)) {
          return utxo;
        }
      }
    );
    if (!foundUtxo) return void 0;
    return {
      utxo: foundUtxo,
      uut: new UutName(uutPrefix, getMatchingTokenName(foundUtxo, mph))
    };
    function getMatchingTokenName(utxo, mph2) {
      const tokenNamesExisting = utxo.value.assets.getPolicyTokenNames(mph2).map((x) => decodeUtf8(x));
      const tokenNames = tokenNamesExisting.filter((x) => {
        return !!x.startsWith(`${uutPrefix}-`);
      });
      return tokenNames[0];
    }
  }
  /**
   * parses details in a delegate-link
   * @deprecated - use an adapter for CharterData instead?
   */
  offchainLink(link) {
    if ("string" == typeof link.config) {
      throw new Error(`wrong type`);
    }
    if (Array.isArray(link.config)) {
      link = {
        ...link,
        config: JSON.parse(decodeUtf8(link.config))
      };
    }
    const { config } = link;
    if (config.rev) config.rev = BigInt(config.rev);
    return link;
  }
  parseDgtConfig(inLink) {
    if ("string" == typeof inLink.config) {
      throw new Error(`wrong type`);
    }
    if (!Array.isArray(inLink.config)) {
      throw new Error(`expected serialized JSON as bytearray`);
    }
    const config = JSON.parse(decodeUtf8(inLink.config));
    if (config.rev) config.rev = BigInt(config.rev);
    return config;
  }
  serializeDgtConfig(config) {
    return encodeUtf8(JSON.stringify(config, delegateLinkSerializer));
  }
  /**
   * @deprecated - use the bridge type directly, and parseDgtConfig iff we ever need that.
   */
  parseDelegateLinksInCharter(charterData) {
    const { otherNamedDelegates: nDgts, manifest } = charterData;
    nDgts instanceof Map ? [...nDgts.entries()] : Object.entries(nDgts);
  }
  async findCharterData(currentCharterUtxo, options) {
    let { optional, capoUtxos } = options || { optional: false };
    if (!capoUtxos) {
      capoUtxos = await this.findCapoUtxos();
    }
    if (!currentCharterUtxo) {
      try {
        currentCharterUtxo = optional ? (
          // doesn't throw
          await this.canFindCharterUtxo(capoUtxos)
        ) : (
          // can throw
          await this.mustFindCharterUtxo(capoUtxos)
        );
      } catch (e) {
        throw e;
      }
      if (!currentCharterUtxo) {
        return void 0;
      }
    }
    const datum2 = currentCharterUtxo.output.datum;
    if (datum2?.kind !== "InlineTxOutputDatum") {
      throw new Error(`invalid charter UTxO datum`);
    }
    const charterData = this.newReadDatum(datum2.data).CharterData;
    if (!charterData) throw Error(`invalid charter UTxO datum`);
    return charterData;
  }
  /**
   * Finds the currentSettings record for a Capo
   * @remarks
   * A Capo's currentSettings can be different in any deployment, but
   * any deployment can have one.  This function finds the currentSettings
   * as found in the Capo's `charterData.manifest`, and returns it with its 
   * underlying `data` and possible application-layer `dataWrapped` object.
   * 
   * Provide charterData and capoUtxos to resolve the currentSettings without 
   * extra queries.  
   * 
   * Define your SettingsController as a subclass of WrappedDgDataContract
   * to provide a custom data-wrapper.
   * 
   * If your protocol doesn't use settings, you probably aren't using 
   * this method.  If you are writing some protocol-independent code, be sure 
   * to use the `optional` attribute and be robust to cases of "no settings yet" 
   * and "the specific current protocol doesn't use settings at all".
   * 
   * Future: we will cache charterData and UTxOs so that this function will be
   * simpler in its interface and fast to execute without external management 
   * of `{charterData, capoUtxos}`.
  * @public
   */
  async findSettingsInfo(options) {
    let { charterData, capoUtxos, optional = false } = options || {};
    if (!capoUtxos || !charterData) {
      debugger;
      capoUtxos = await this.findCapoUtxos();
      charterData = await this.findCharterData(void 0, {
        optional: false,
        capoUtxos
      });
    }
    const currentSettings = charterData.manifest.get("currentSettings");
    if (!currentSettings) {
      if (optional) return void 0;
      throw new Error(
        `there is no currentSettings in the Capo's manifest`
      );
    }
    const uutName = currentSettings?.tokenName;
    return this.findDelegatedDataUtxos({
      type: "settings",
      id: uutName,
      capoUtxos,
      charterData
    }).then((xs) => this.singleItem(xs));
  }
  /**
   * @public
   */
  async addStrellaWithConfig(TargetClass, config, programBundle, previousOnchainScript) {
    const args = {
      config,
      setup: this.setup,
      programBundle,
      previousOnchainScript
    };
    const strella = await TargetClass.createWith(args);
    return strella;
  }
  async connectMintingScript(params, programBundle) {
    if (this.minter)
      throw new Error(`just use this.minter when it's already present`);
    const { minterClass } = this;
    const { seedTxn, seedIndex } = params;
    const { mph: expectedMph, rev } = this.getBundle().configuredParams || this.configIn || {
      mph: void 0,
      ...this.constructor.defaultParams
    };
    const config = {
      rev,
      seedTxn,
      seedIndex,
      capo: this
    };
    const noPreviousOnchainScript = void 0;
    const minter = await this.addStrellaWithConfig(
      minterClass,
      config,
      programBundle,
      noPreviousOnchainScript
    );
    if (expectedMph && !minter.mintingPolicyHash?.isEqual(expectedMph)) {
      throw new Error(
        `This minter script with this seed-utxo doesn't produce the required  minting policy hash
expected: ` + expectedMph.toHex() + "\nactual: " + minter.mintingPolicyHash?.toHex()
      );
    } else if (!expectedMph) {
      console.log(`${this.constructor.name}: seeding new minting policy`);
    }
    minter.mustHaveActivity("mintingCharter");
    return this.minter = minter;
  }
  /**
   * Finds a sufficient-sized utxo for seeding one or more named tokens
   * @remarks
   *
   * For allocating a charter token (/its minter), one or more UUTs, or other token name(s)
   * to be minted, this function calculates the size of minUtxo needed for all the needed tokens,
   * assuming they'll each be stored in separate utxos.  It then finds and returns a UTxO from the
   * current actor's wallet.  The utxo is NOT implicitly added to the transaction (use tcx.addInput() to add it).
   *
   * When the transaction context already has some utxo's being consumed, they're not
   * eligible for selection.
   *
   * If the transaction doesn't store the new tokens in separate utxos, any spare lovelace
   * are returned as change in the transaction.
   *
   * @param tcx - transaction context
   * @param purpose - a descriptive purpose used during utxo-finding in case of problems
   * @param tokenNames - the token names to be seeded.
   * @public
   **/
  async txnMustGetSeedUtxo(tcx, purpose, tokenNames) {
    //! given a Capo-based contract instance having a free TxInput to seed its validator address,
    //! prior to initial on-chain creation of contract,
    //! it finds that specific TxInput in the current user's wallet.
    const fakeMph = makeDummyMintingPolicyHash();
    const totalMinUtxoValue = tokenNames.reduce(
      addTokenValue.bind(this),
      makeValue(0n)
    );
    //! accumulates min-utxos for each stringy token-name in a reduce()
    function addTokenValue(accumulator, tn) {
      const vMin = this.uh.mkMinTv(fakeMph, tn);
      return accumulator.add(vMin);
    }
    const uutSeed = this.uh.mkValuePredicate(
      totalMinUtxoValue.lovelace,
      tcx
    );
    const seedUtxo = await this.uh.mustFindActorUtxo(purpose, {
      predicate: uutSeed,
      exceptInTcx: tcx
    }).catch((x) => {
      throw x;
    });
    const { txId: seedTxn, index: utxoIdx } = seedUtxo.id;
    const seedIndex = BigInt(utxoIdx);
    const count = tokenNames.length > 1 ? `${tokenNames.length} uuts for ` : "";
    const hex = seedTxn.toHex();
    console.log(
      `Seed tx for ${count}${purpose}: ${hex.slice(0, 8)}\u2026${hex.slice(
        -4
      )}#${seedIndex}`
    );
    return seedUtxo;
  }
  /**
   * Creates a new delegate link, given a delegation role and and strategy-selection details
   * @param tcx - A transaction-context having state.uuts[roleName] matching the roleName
   * @param role - the role of the delegate, matched with the `delegateRoles()` of `this`
   * @param delegateInfo - partial detail of the delegation with any
   *     details required by the particular role.  Its delegate type may be a subclass of the type
   *     indicated by the `roleName`.
   * @remarks
   *
   * Combines partal and implied configuration settings, validating the resulting configuration.
   *
   * It expects the transaction-context to have a UUT whose name (or a UUT roleName) matching
   * the indicated `roleName`.  Use {@link Capo.txnWillMintUuts|txnWillMintUuts()} or {@link Capo.txnMintingUuts|txnMintingUuts()} to construct
   * a transaction having that and a compliant txn-type.
   *
   * The resulting delegate-linking details can be used with this.mkRelativeDelegateLink() to
   * encode it as an on-chain RelativeLinkLink in the Capo's charter.
   *
   * The delegate-link is by default a contract-based delegate.  If that's not what you want,
   * you can the type-parameters to override it to a more general StellarDelegate type (NOTE: if you
   * find you're needing to specify a more specific contract-based delegate type, please let us know, as
   * our expectation is that the general type for a contract-based delegate should already provide all the
   * necessary type information for all kinds of contract-based delegate subclasses).
   *
   * To get a full DelegateSettings object, use txnCreateDelegateSettings() instead.
   *
   * @public
   *
   * @reqt throws DelegateConfigNeeded with an `errors` entry
   *   ... if there are any problems in validating the net configuration settings.
   * @reqt EXPECTS the `tcx` to be minting a UUT for the delegation,
   *   ... whose UutName can be found in `tcx.state.uuts[roleName]`
   * @reqt combines base settings from the selected delegate class's `defaultParams`
   *   ... adding the delegateRoles()[roleName] configuration for the selected roleName,
   *   ... along with any explicit `config` from the provided `delegateInfo`
   *   ... and automatically applies a `uut` setting.
   *   ... The later properties in this sequence take precedence.
   **/
  async txnCreateOffchainDelegateLink(tcx, role, delegateInfo) {
    const configured = await this.txnCreateConfiguredDelegate(
      tcx,
      role,
      delegateInfo
    );
    await configured.delegate.txnReceiveAuthorityToken(
      tcx,
      this.uh.mkMinTv(this.mph, tcx.state.uuts[role])
    );
    const delegateLink = this.extractDelegateLinkDetails(configured);
    const cacheKey = JSON.stringify(
      delegateLink,
      delegateLinkSerializer
      // 4 // indent 4 spaces
    );
    console.log("offchainDgtLink cache key", role, cacheKey);
    this._delegateCache[role] = this._delegateCache[role] || {};
    this._delegateCache[role][cacheKey] = configured;
    return configured;
  }
  /**
   * extracts the key details for creating an on-chain delegate link, given a setup-phase
   * configuration for that delegate.
   */
  mkOnchainRelativeDelegateLink(configured) {
    const {
      uutName,
      // strategyName,
      delegateValidatorHash,
      config = {}
    } = configured;
    if (!uutName) {
      throw new Error(`missing required uutName for delegate link`);
    }
    return {
      uutName,
      // strategyName,
      delegateValidatorHash,
      config: this.serializeDgtConfig(config)
    };
  }
  /**
   * extracts the key details of a delegate link, given a delegate configuration.
   * @remarks
   * This is valid only during the setup phase of creating a delegate, and does not encode the config entry.
   *
   * use mkRelativeDelegateLink() to encode the config entry, and use this.parseDgtConfig() to decode it.
   */
  extractDelegateLinkDetails(configured) {
    const {
      uutName,
      // strategyName,
      delegateValidatorHash,
      config = {}
    } = configured;
    return {
      uutName,
      // strategyName,
      delegateValidatorHash,
      config
    };
  }
  // mkDelegateLink(
  //     dl: OffchainPartialDelegateLink
  // ) {
  //     const { RelativeDelegateLink: hlRelativeDelegateLink } =
  //         this.onChainTypes;
  //     let {
  //         uutName,
  //         // strategyName,
  //         delegateValidatorHash,
  //         config,
  //         // reqdAddress: canRequireAddr,
  //         // addrHint = [],
  //     } = dl;
  //     const delegateLink : RelativeDelegateLinkLike ={
  //         // this.typeToUplc(hlRelativeDelegateLink, {
  //         uutName,
  //         // strategyName,
  //         delegateValidatorHash,
  //         config: textToBytes(JSON.stringify(config, delegateLinkSerializer)), //, 4)
  //     };
  // }
  /**
   * Generates and returns a complete set of delegate settings, given a delegation role and strategy-selection details.
   * @remarks
   *
   * Maps the indicated delegation role to specific UUT details from the provided transaction-context
   * to provide the resulting settings.  The transaction context isn't modified.
   *
   * Behaves exactly like (and provides the core implementation of) {@link Capo.txnCreateOffchainDelegateLink | txnCreateDelegateLink()},
   * returning additional `roleName` and `delegateClass`, to conform with the DelegateSettings type.
   *
   * ### Overriding the Delegate Type
   * The configuration is typed for a contract-based delegate by default.  If you need a more general
   * StellarDelegate type (for AuthorityPolicy, for example), you can override the type-parameters (if you are finding
   * that you need to specify a more specific contract-based delegate type, please let us know, as our expectation is that
   * the general type for a contract-based delegate should already provide all the necessary type information for all kinds of
   * contract-based delegate subclasses).
   *
   * See txnCreateDelegateLink for further details.
   * @public
   **/
  async txnCreateConfiguredDelegate(tcx, role, delegateInfo) {
    const {
      // strategyName,
      config: explicitConfig = {}
    } = delegateInfo;
    const { delegateRoles: delegateRoles2 } = this;
    const uut = tcx.state.uuts[role];
    if (!uut) {
      console.warn(
        `missing required UUT for role '${role}' in transaction context:`,
        tcx.state.uuts
      );
      throw new Error(
        `missing required UUT for role '${role}' (see logged details)`
      );
    }
    const impliedDelegationDetails = this.mkImpliedDelegationDetails(uut);
    const selectedDgt = delegateRoles2[role];
    if (!selectedDgt) {
      let msg = `invalid dgt role requested: '${role}'`;
      debugger;
      const e = new DelegateConfigNeeded(msg, {
        errorRole: role,
        availableDgtNames: Object.keys(delegateRoles2)
      });
      throw e;
    }
    const {
      delegateClass,
      config: { validateConfig, partialConfig: paramsFromRole = {} }
    } = selectedDgt;
    const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;
    const configForOnchainRelativeDelegateLink = {
      ...defaultParamsFromDelegateClass,
      ...paramsFromRole || {},
      ...explicitConfig
    };
    const fullCapoDgtConfig = {
      ...configForOnchainRelativeDelegateLink,
      ...impliedDelegationDetails,
      capo: this
    };
    //! it validates the net configuration so it can return a working config.
    const errors = validateConfig && validateConfig(fullCapoDgtConfig) || void 0;
    if (errors) {
      throw new DelegateConfigNeeded(
        `validation errors in delegateInfo.config for ${role}:
` + errorMapAsString(errors),
        { errors }
      );
    }
    let delegateSettings = {};
    let delegate = void 0;
    try {
      delegateSettings = {
        ...delegateInfo,
        roleName: role,
        //@ts-expect-error "could be instantiated with a different type" - TS2352
        //  ... typescript doesn't see the connection between the input settings and this variable
        delegateClass,
        uutName: uut.name,
        fullCapoDgtConfig,
        config: configForOnchainRelativeDelegateLink
      };
      delegate = await this.mustGetDelegate(role, delegateSettings);
      if (delegate.usesContractScript) {
        await delegate.asyncCompiledScript();
      }
    } catch (e) {
      console.log("error: unable to create delegate: ", e.stack);
      debugger;
      this.mustGetDelegate(role, delegateSettings).catch(
        (sameErrorIgnored) => void 0
      );
      e.message = `${e.message} (see logged details; debugging breakpoint available)`;
      throw e;
    }
    const { uutName } = delegateSettings;
    if (!uutName) {
      throw new Error(`missing required uutName in delegateSettings`);
    }
    const { delegateValidatorHash } = delegate;
    const pcd = {
      ...delegateSettings,
      config: configForOnchainRelativeDelegateLink,
      uutName,
      delegateValidatorHash,
      delegate
    };
    return pcd;
  }
  mkImpliedDelegationDetails(uut) {
    return {
      capoAddr: this.address,
      mph: this.mph,
      tn: encodeUtf8(uut.name)
    };
  }
  _delegateCache = {};
  // get connectDelegate()
  async connectDelegateWithOnchainRDLink(role, delegateLink) {
    const foundRole = this.delegateRoles[role];
    //!!! work on type-safety with roleName + available roles
    const onchainDgtLink = this.reader.RelativeDelegateLink(
      this.onchain.types.RelativeDelegateLink(delegateLink)
    );
    const selectedDgt = foundRole.delegateClass;
    const cache = this._delegateCache;
    const cacheKey = JSON.stringify(
      onchainDgtLink,
      // this.parseDgtConfig(delegateLink),
      delegateLinkSerializer
    );
    if (!cache[role]) cache[role] = {};
    const roleCache = cache[role];
    const cachedRole = roleCache[cacheKey];
    if (cachedRole) {
      const {
        // strategyName,
        delegate: delegate2
      } = cachedRole;
      return delegate2;
    }
    console.log(`   \u{1F50E}delegate \u{1F481} ${role}`);
    const {
      // strategyName,
      uutName,
      delegateValidatorHash: onchainValidatorHash,
      // addrHint,  //moved to config
      // reqdAddress,  // removed
      config: configBytesFromLink
    } = onchainDgtLink;
    if (!selectedDgt) {
      throw new Error(
        `no selected dgt for role '${role}'
link details: ${this.showDelegateLink(delegateLink)}`
      );
    }
    const {
      delegateClass,
      config: { partialConfig: dgtMapSettings }
    } = foundRole;
    const { defaultParams: defaultParamsFromDelegateClass } = delegateClass;
    const impliedDelegationDetails = this.mkImpliedDelegationDetails(
      new UutName(role, uutName)
    );
    const effectiveConfig = {
      ...defaultParamsFromDelegateClass,
      ...dgtMapSettings
    };
    if (effectiveConfig.rev === "1") {
      debugger;
    }
    const serializedCfg1 = JSON.stringify(
      effectiveConfig,
      delegateLinkSerializer,
      4
    );
    const parsedConfigFromLink = this.parseDgtConfig(delegateLink);
    const serializedCfg2 = JSON.stringify(
      parsedConfigFromLink,
      delegateLinkSerializer,
      4
    );
    const fullCapoDgtConfig = {
      ...effectiveConfig,
      ...parsedConfigFromLink,
      ...impliedDelegationDetails,
      capo: this
    };
    //!  //  delegate: DT // omitted in "pre-configured";
    const delegate = await this.mustGetDelegate(role, {
      delegateClass,
      fullCapoDgtConfig,
      roleName: role,
      uutName,
      // strategyName,
      config: parsedConfigFromLink
      // reqdAddress,
      // addrHint,
    });
    const previousOnchainScript = await (async () => {
      if (!onchainValidatorHash) return void 0;
      let needsUpgrade = false;
      const currentDvh = delegate.delegateValidatorHash;
      if (!currentDvh) {
        return void 0;
      }
      if (!currentDvh.isEqual(onchainValidatorHash)) {
        needsUpgrade = true;
      }
      if (!needsUpgrade) return void 0;
      const refScriptUtxo = await this.findRefScriptUtxo(
        onchainValidatorHash.bytes,
        await this.findCapoUtxos()
      );
      if (!refScriptUtxo?.output.refScript) {
        throw new Error(`unexpected: refScript for ${role} not found`);
      }
      return {
        validatorHash: onchainValidatorHash.bytes,
        uplcProgram: refScriptUtxo?.output.refScript
      };
    })();
    if (previousOnchainScript) {
      console.warn(
        `Delegate configuration for role '${role}' requires upgrade
  Previous config: ${serializedCfg2}
  Next config: ${serializedCfg1}
`
      );
      delegate._bundle.previousOnchainScript = previousOnchainScript;
      this.needsCoreDelegateUpdates = true;
    }
    delegate.delegateValidatorHash;
    console.log(
      `   \u2705 \u{1F481} ${role}  (now cached) `
      // +Debug info: +` @ key = ${cacheKey}`
    );
    roleCache[cacheKey] = {
      delegate
      // strategyName,
    };
    return delegate;
  }
  showDelegateLink(delegateLink) {
    return JSON.stringify(delegateLink, null, 2);
  }
  /**
   * Given a role name and configuration details,
   * finds and creates the class for the delegate in that role.
   * @remarks
   * Uses the deployedDetails from the Capo's bundle
   * for the compiled on-chain script, if available.
   *
   * If the indicated script role is not deployed as a singleton,
   * the deployedName is required, and matched against those
   * instances of the script seen in the bundle's deployedDetails.
   *
   * If the script role has no deployedDetails, the configuredDelegate
   * details are used to compile the script for on-chain use, after
   * which the resulting details should be used to update the bundle's
   * deployedDetails.  Normally this should be done during the build
   * of a new version of the package, resulting in a bundle having
   * "deployedDetails" for a script that is actually created on-chain
   * after the package is installed.
   */
  async mustGetDelegate(scriptRole, configuredDelegate, deployedName) {
    const {
      delegateClass,
      fullCapoDgtConfig: config,
      previousOnchainScript,
      config: t
    } = configuredDelegate;
    try {
      if (previousOnchainScript) {
        const configured = await this.addStrellaWithConfig(
          delegateClass,
          config,
          void 0,
          previousOnchainScript
        );
        return configured;
      } else {
        const configured = await this.addStrellaWithConfig(
          delegateClass,
          config
        );
        return configured;
      }
    } catch (e) {
      const t2 = e.message.match(/invalid parameter name '([^']+)'$/);
      const [_, badParamName] = t2 || [];
      if (badParamName) {
        throw new DelegateConfigNeeded(
          "configuration error while parameterizing contract script",
          { errors: { [badParamName]: e.message } }
        );
      }
      throw e;
    }
  }
  tvForDelegate(dgtLink) {
    return this.tokenAsValue(dgtLink.uutName);
  }
  mkDelegatePredicate(dgtLink) {
    return this.uh.mkTokenPredicate(this.tvForDelegate(dgtLink));
  }
  activityUpdatingCharter() {
    return {
      redeemer: this.activityVariantToUplc("updatingCharter", {})
    };
  }
  activitySpendingDelegatedDatum() {
    return {
      redeemer: this.activityVariantToUplc("spendingDelegatedDatum", {})
    };
  }
  // @Activity.redeemer
  // activityUpdatingSettings(): isActivity {
  //     return {
  //         redeemer: this.activityVariantToUplc("updatingSettings", {}),
  //     };
  // }
  /**
   * USE THE `delegateRoles` GETTER INSTEAD
   * @remarks
   *
   * - this no-op method is a convenience for Stellar Contracts maintainers
   *   and intuitive developers using autocomplete.
   * - Including it enables an entry
   *   in VSCode "Outline" view, which doesn't include the delegateRoles getter : /
   * @deprecated but please keep as a kind of redirect
   * @public
   **/
  getDelegateRoles() {
    throw new Error(`use the delegateRoles getter instead`);
  }
  get delegateRoles() {
    return this._delegateRoles;
  }
  _delegateRoles;
  // & myDelegateRoles;
  addressAuthorityConfig() {
    return {
      validateConfig(args) {
        const { rev, tn, addrHint } = args;
        const errors = {};
        if (!rev) errors.rev = ["required"];
        if (!tn?.length) errors.tn = ["(token-name) required"];
        if (!addrHint?.length)
          errors.addrHint = ["destination address required"];
        if (Object.keys(errors).length > 0) return errors;
        return void 0;
      }
    };
  }
  basicDelegateRoles() {
    const myRoles = delegateRoles({
      govAuthority: defineRole(
        "authority",
        AnyAddressAuthorityPolicy,
        this.addressAuthorityConfig(),
        "capoGov"
        // multisig: {
        //     delegateClass: MultisigAuthorityPolicy,
        //     validateConfig(args): strategyValidation {
        //         const { rev, uut } = args;
        //         const errors: ErrorMap = {};
        //         if (!rev) errors.rev = ["required"];
        //         if (!uut) errors.uut = ["required"];
        //         if (Object.keys(errors).length > 0) return errors;
        //         return undefined;
        //     },
        // },
      ),
      mintDelegate: defineRole("mintDgt", UnspecializedMintDelegate, {
        partialConfig: {},
        validateConfig(args) {
          return void 0;
        }
      }),
      spendDelegate: defineRole("spendDgt", UnspecializedMintDelegate, {
        partialConfig: {},
        validateConfig(args) {
          return void 0;
        }
      })
      // otherNamedDelegates: none by default
      //     namedDelegate: defineRole("namedDgt",
      //         //@ts-expect-error assigning abstract class where it prefers a concrete class
      //         StellarDelegate,
      //         {
      //             // no named delegates by default
      //         }
      //     ),
    });
    return myRoles;
  }
  /**
   * Performs a validation of all critical delegate connections
   * @remarks
   *
   * Checks that each delegate connection is correct and that the underlying
   * scripts for those delegates have not been modified in unplanned ways.
   *
   * Every Capo subclass that adds new delegate types SHOULD implement
   * this method, performing any checks needed to verify the scripts underlying
   * those delegate-types.  It should return `Promise.all([ super(), ...myOwnChecks])`.
   * @public
   **/
  async verifyCoreDelegates() {
    const rcsh = this.configIn?.rootCapoScriptHash;
    if (rcsh && !rcsh.isEqual(this.validatorHash)) {
      console.error(
        `expected: ` + rcsh.toHex() + `
  actual: ` + this.validatorHash.toHex()
      );
      throw new Error(
        `${this.constructor.name}: the leader contract script '${this.program.name}', or one of its dependencies, has been modified`
      );
    }
    await this.asyncCompiledScript();
    let charter;
    {
      const maybeFound = await this.findCharterData(void 0, {
        optional: true
      });
      if (!maybeFound) {
        console.warn(
          `Capo is not yet bootstrapped; skipping delegate verification`
        );
        return;
      }
      charter = maybeFound;
    }
    this.isChartered = true;
    const { govAuthorityLink, mintDelegateLink, spendDelegateLink } = charter;
    return Promise.all([
      this.connectDelegateWithOnchainRDLink("mintDelegate", mintDelegateLink),
      this.connectDelegateWithOnchainRDLink("govAuthority", govAuthorityLink),
      this.connectDelegateWithOnchainRDLink("spendDelegate", spendDelegateLink)
    ]);
  }
  mkDatumScriptReference() {
    return this.inlineDatum("ScriptReference", {});
  }
  // dataWrappers!: Record<string, someDataWrapper<any>> &
  //     Awaited<ReturnType<this["delegatedDataWrappers"]>>;
  // @datum
  // async mkDatumSettingsData<THISTYPE extends Capo<any>>(
  //     this: THISTYPE,
  //     settings: CapoOffchainSettingsType<THISTYPE>
  // ): Promise<TxOutputDatum> {
  //     const adapter = this.settingsAdapter;
  //     return adapter.toOnchainDatum(settings) as any;
  // }
  async findGovDelegate(charterData) {
    const chD = charterData || await this.findCharterData();
    const capoGovDelegate = await this.connectDelegateWithOnchainRDLink(
      "govAuthority",
      chD.govAuthorityLink
    );
    console.log(
      "finding charter's govDelegate via link" + uplcDataSerializer("link", chD.govAuthorityLink)
    );
    return capoGovDelegate;
  }
  async txnAddGovAuthority(tcx) {
    const charterDataMaybe = "charterData" in tcx.state ? tcx.state.charterData : void 0;
    if (tcx.state.govAuthority) {
      return tcx;
    }
    const capoGovDelegate = await this.findGovDelegate(charterDataMaybe);
    console.log("adding charter's govAuthority");
    const tcx2 = await capoGovDelegate.txnGrantAuthority(tcx);
    tcx2.state.govAuthority = capoGovDelegate;
    return tcx2;
  }
  // getMinterParams() {
  //     const { seedTxn, seedIdx } = this.configIn
  //     return { seedTxn, seedIdx }
  // }
  // async txnBurnUuts<
  //     existingTcx extends StellarTxnContext<any>,
  // >(
  //     initialTcx: existingTcx,
  //     uutNames: UutName[],
  // ): Promise<existingTcx> {
  //     const minter = this.connectMinter();
  //     const tcx = await minter.txnBurnUuts(
  //         initialTcx,
  //         uutNames,
  //     );
  //     const tcx2 = await this.txnAddCharterRef(tcx);
  //     return this.txnAddMintDelegate(tcx2);
  // }
  // async getMintDelegate<
  //     THIS extends Capo<any>,
  //     MDT extends BasicMintDelegate & THIS["delegateRoles"]["mintDgt"] extends RoleInfo<any, any, infer DT> ? DT : never
  // >() : Promise<MDT>{
  // todo: get mintDelegate type from delegateRoles
  async getMintDelegate(charterData) {
    if (!this.configIn) ;
    //!!! needs to work also during bootstrapping.
    const chD = charterData || await this.findCharterData();
    return this.connectDelegateWithOnchainRDLink("mintDelegate", chD.mintDelegateLink);
  }
  // todo: get spendDelegate type from delegateRoles
  async getSpendDelegate(charterData) {
    const chD = charterData || await this.findCharterData();
    return this.connectDelegateWithOnchainRDLink("spendDelegate", chD.spendDelegateLink);
  }
  getSettingsController(options) {
    return this.getDgDataController("settings", options);
  }
  /**
   * Finds the delegated-data controller for a given typeName.
   * @remarks
   * REQUIRES that the Capo manifest contains an installed DgDataPolicy
   * and that the off-chain Capo delegateMap provides an off-chain controller
   * for that typeName.
   */
  async getDgDataController(recordTypeName, options) {
    const { charterData, optional } = options || {};
    const chD = charterData || await this.findCharterData(void 0, {
      optional: optional || false
    });
    const foundME = chD.manifest.get(recordTypeName);
    if (!foundME) {
      if (optional) return void 0;
      await this.findCharterData();
      throw new Error(
        `${this.constructor.name}.charter.manifest: unknown record type '${recordTypeName}' (debugging breakpoint available)
Delegated-data-types registered in the manifest: 
 ${Array.from(chD.manifest.entries()).map(
          // bullet-point: •
          ([k, v]) => v.entryType.DgDataPolicy ? `  \u2022 ${k}
` : void 0
        ).filter((x) => !!x).join("")}`
      );
    }
    if (foundME?.entryType.DgDataPolicy) {
      return this.connectDelegateWithOnchainRDLink(recordTypeName, foundME.entryType.DgDataPolicy.policyLink);
    } else {
      const actualEntryType = Object.keys(foundME.entryType)[0];
      throw new Error(
        `${this.constructor.name}.charter.manifest: invalid data-type name '${recordTypeName}' for delegated-data-controller; 
"+
                "  ... manifest entry has type '${actualEntryType}', not DgDataPolicy!`
      );
    }
  }
  /**
   * @deprecated - use getOtherNamedDelegate() or getDgDataController() instead
   */
  getNamedDelegate() {
  }
  /**
   * Finds a contract's named delegate, given the expected delegateName.
   * @remarks
   * @public
   **/
  async getOtherNamedDelegate(delegateName, charterData) {
    const chD = charterData || await this.findCharterData();
    const foundDelegateLink = chD.otherNamedDelegates.get(delegateName);
    if (!foundDelegateLink) {
      throw new Error(
        `${this.constructor.name}: no namedDelegate found: ${delegateName}`
      );
    }
    return this.connectDelegateWithOnchainRDLink(delegateName, foundDelegateLink);
  }
  async getNamedDelegates(charterData) {
    const chD = charterData || await this.findCharterData();
    const namedDelegates = chD.otherNamedDelegates;
    const allNamedDelegates = [...namedDelegates.entries()].map(
      async ([otherDgtName, v]) => {
        return [
          otherDgtName,
          await this.connectDelegateWithOnchainRDLink(otherDgtName, v)
        ];
      }
    );
    const done = await Promise.all(allNamedDelegates);
    return Object.fromEntries(done);
  }
  async getGovDelegate(charterData) {
    throw new Error("unused");
  }
  /**
   * helper for test environment, allowing an abortive initial charter-creation, without
   * most of the costs, but enabling named-delegate scripts to be compiled/validated
   * much earlier in the test lifecycle.  The real charter process can then continue without
   * duplicating any of the dry-run setup costs.
   */
  didDryRun = {};
  /**
   * Initiates a seeding transaction, creating a new Capo contract of this type
   * @remarks
   *
   * The returned transaction context has `state.bootstrappedConfig` for
   * capturing the details for reproducing the contract's settings and on-chain
   * address, and state.charterData
   *
   * @param charterDataArgs - initial details for the charter datum
   * @param existinTcx - any existing transaction context
   * @typeParam TCX - inferred type of a provided transaction context
   * @public
   **/
  // @txn
  async mkTxnMintCharterToken(charterDataArgs, existingTcx, dryRun) {
    const dry = this.didDryRun || {};
    const didHaveDryRun = !!dry.minter;
    if (didHaveDryRun) {
      console.log(
        `\u{1F501} resuming charter setup after partial setup in dry-run`
      );
      if (JSON.stringify(dry.args, delegateLinkSerializer) !== JSON.stringify(charterDataArgs, delegateLinkSerializer)) {
        throw new Error(`dry-run args mismatch`);
      }
      if (JSON.stringify(dry.configIn, delegateLinkSerializer) !== JSON.stringify(this.configIn, delegateLinkSerializer)) {
        throw new Error(`dry-run config mismatch`);
      }
    } else if (this.configIn) {
      throw new Error(
        `this contract suite is already configured and can't be re-chartered`
      );
    }
    if (dryRun) {
      console.log(`  \u{1F3C3} dry-run mode for charter setup`);
    }
    const initialTcx = existingTcx || this.mkTcx("mint charter token");
    initialTcx.uh;
    const tcxWithSeed = !!dry.seedUtxo ? await this.tcxWithSeedUtxo(
      initialTcx.addInput(dry.seedUtxo),
      dry.seedUtxo
    ) : await this.tcxWithSeedUtxo(initialTcx);
    const seedUtxo = tcxWithSeed.state.seedUtxo;
    const { txId: seedTxn, index: utxoIdx } = seedUtxo.id;
    const seedIndex = BigInt(utxoIdx);
    const minter = dry.minter || this.minter || await this.connectMintingScript({
      seedIndex,
      seedTxn
    });
    await minter.asyncCompiledScript();
    const { mintingPolicyHash: mph } = minter;
    if (!didHaveDryRun) {
      const csp = this.partialConfig;
      const capoParams = {
        ...csp,
        mph,
        seedTxn,
        seedIndex
      };
      const params = capoParams;
      this.configIn = capoParams;
      await this.prepareBundleWithScriptParams(params);
      await this.asyncCompiledScript();
      capoParams.rootCapoScriptHash = makeValidatorHash(
        this.compiledScript.hash()
      );
      this.configIn = capoParams;
    }
    tcxWithSeed.state.bsc = this.configIn;
    tcxWithSeed.state.bootstrappedConfig = JSON.parse(
      JSON.stringify(this.configIn, delegateLinkSerializer)
    );
    const uutPurposes = [
      "capoGov",
      "mintDgt",
      "spendDgt"
      // "set" as const,
    ];
    const tcx = await this.txnWillMintUuts(
      tcxWithSeed,
      uutPurposes,
      { usingSeedUtxo: seedUtxo },
      {
        govAuthority: "capoGov",
        mintDelegate: "mintDgt",
        spendDelegate: "spendDgt"
        // settings: "set",
      }
    );
    const tcx2 = tcx;
    const { uuts } = tcx2.state;
    if (uuts.govAuthority !== uuts.capoGov) {
      throw new Error(`assertion can't fail`);
    }
    if (dryRun) {
      this.didDryRun = {
        minter,
        seedUtxo,
        configIn: this.configIn,
        args: charterDataArgs
      };
      console.log(`  \u{1F3C3}  dry-run charter setup done`);
      return tcx2;
    } else {
      this.didDryRun = {};
    }
    const govAuthority = await this.txnCreateOffchainDelegateLink(
      tcx2,
      "govAuthority",
      charterDataArgs.govAuthorityLink
    );
    const mintDelegate = await this.txnCreateOffchainDelegateLink(
      tcx2,
      "mintDelegate",
      charterDataArgs.mintDelegateLink
    );
    const spendDelegate = await this.txnCreateOffchainDelegateLink(
      tcx2,
      "spendDelegate",
      charterDataArgs.spendDelegateLink
    );
    this.bootstrapping = {
      govAuthority,
      mintDelegate,
      spendDelegate
    };
    const charterData = {
      govAuthorityLink: this.mkOnchainRelativeDelegateLink(govAuthority),
      spendDelegateLink: this.mkOnchainRelativeDelegateLink(spendDelegate),
      mintDelegateLink: this.mkOnchainRelativeDelegateLink(mintDelegate),
      // empty items during charter setup:
      otherNamedDelegates: /* @__PURE__ */ new Map(),
      manifest: /* @__PURE__ */ new Map(),
      spendInvariants: [],
      mintInvariants: [],
      pendingChanges: []
    };
    const charterOut = makeTxOutput(
      this.address,
      this.tvCharter(),
      this.onchain.datum?.CharterData(charterData)
      // this.compiledScript
    );
    charterOut.correctLovelace(this.networkParams);
    tcx2.addOutput(charterOut);
    tcx2.state.charterData = charterData;
    const tcxWithCharterMint = await this.minter.txnMintingCharter(tcx2, {
      owner: this.address,
      capoGov: uuts.capoGov,
      // same as govAuthority,
      mintDelegate: uuts.mintDelegate,
      spendDelegate: uuts.spendDelegate
      // settingsUut: uuts.set,
    });
    await this.txnMkAddlRefScriptTxn(
      tcxWithCharterMint,
      "mintDelegate",
      mintDelegate.delegate.compiledScript
    );
    await this.txnMkAddlRefScriptTxn(
      tcxWithCharterMint,
      "capo",
      this.compiledScript
    );
    const tcx4c = await this.txnMkAddlRefScriptTxn(
      tcxWithCharterMint,
      "minter",
      minter.compiledScript
    );
    console.log(
      " --------------------- CHARTER MINT ---------------------\n"
      // txAsString(tcx4.tx, this.networkParams)
    );
    return tcx4c;
  }
  async mkTxnUpgradeIfNeeded(charterData) {
    const tcx = this.mkTcx("upgrade if needed").facade();
    const capoUtxos = await this.findCapoUtxos();
    if (!charterData) {
      charterData = await this.findCharterData(void 0, {
        capoUtxos,
        optional: false
      });
    }
    const tcx2 = await this.addTxnBootstrappingSettings(tcx, charterData);
    return tcx2.includeAddlTxn("check for updates", {
      description: `capo-specific txns for deploying any missing or upgraded delegates`,
      moreInfo: "if any delegates are missing or need to be upgraded, these txns will take care of it",
      mkTcx: async () => {
        const tcx3 = this.mkTcx("addl txns for capo").facade();
        const capoUtxos2 = await this.findCapoUtxos();
        const charterData2 = await this.findCharterData(void 0, {
          capoUtxos: capoUtxos2,
          optional: false
        });
        if (this.autoSetup) {
          console.log("\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}\u{1F69C}");
          console.log(
            "autoSetup: checking delegate roles for policies needing creation or update:\n" + Object.keys(this.delegateRoles).map((k) => `- ${k}`).join("\n")
          );
          for (const [policyAndTypeName, details] of Object.entries(
            this.delegateRoles
          )) {
            const ds = details;
            const {
              delegateClass,
              config,
              delegateType,
              uutPurpose
            } = ds;
            if (!delegateClass.isDgDataPolicy) {
              console.warn(`${delegateClass.name} is not a dgDataPolicy`);
              continue;
            }
            const dgDataControllerClass = delegateClass;
            const delegate = await dgDataControllerClass.createWith(
              {
                setup: this.setup,
                partialConfig: {
                  capo: this
                }
              }
            );
            if (delegate.recordTypeName !== policyAndTypeName) {
              throw new Error(`${this.constructor.name}:  delegateRoles.${policyAndTypeName} has class ${dgDataControllerClass.name},
whose \`get recordTypeName()\` '${delegate.recordTypeName}' is mismatched.
Use the recordTypeName in the delegateRoles map.`);
            }
            await delegate.setupCapoPolicy(tcx3, policyAndTypeName, {
              charterData: charterData2,
              capoUtxos: capoUtxos2
            });
          }
        }
        this.commitPendingChangesIfNeeded(tcx3);
        console.log("\u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} end autoSetup \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C} \u{1F69C}");
        console.log("\u{1F69C} Next: addlTxns... \u{1F69C} \u{1F69C} ");
        await this.mkAdditionalTxnsForCharter(tcx3, {
          charterData: charterData2,
          capoUtxos: capoUtxos2
        });
        return tcx3;
      }
    });
  }
  async findCapoUtxos(option) {
    const utxos = await this.network.getUtxos(this.address);
    if ("always" === option?.dumpDetail) {
      console.log("Capo utxos:", dumpAny(utxos, this.networkParams));
    }
    return utxos;
  }
  async tcxWithCharterData(tcx) {
    const ch = await this.findCharterData();
    const tcx2 = tcx;
    tcx2.state.charterData = ch;
    return tcx2;
  }
  /**
   * Adds an additional txn to the transaction context, committing any pending manifest changes
   * @remarks
   *
   * If the capo manifest has any pending changes, this tx makes them active.
   * Use this after each queued manifest update
   * @public
   */
  async commitPendingChangesIfNeeded(tcx) {
    return tcx.includeAddlTxn("commit pending charter changes", {
      description: `commit pending changes if needed`,
      moreInfo: "If the capo manifest has any pending changes, this tx makes them active",
      mkTcx: async () => {
        const charter = await this.findCharterData();
        if (charter.pendingChanges.length > 0) {
          return this.mkTxnCommittingPendingChanges();
        }
        throw new TxNotNeededError("no pending changes to commit");
      }
    });
  }
  async addTxnBootstrappingSettings(tcx, charterData) {
    if (!this.delegateRoles.settings) {
      console.warn(
        ` \u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E} ${this.constructor.name} has no settings policy to initialize`
      );
      return tcx.withAddlTxns();
    } else {
      const optional = true;
      const foundDelegate = await this.getDgDataController("settings", {
        charterData,
        optional
      });
      if (!foundDelegate) {
        tcx.includeAddlTxn("create settings delegate", {
          description: `create settings-policy dgt`,
          optional: false,
          mkTcx: () => this.mkTxnInstallPolicyDelegate({
            typeName: "settings",
            idPrefix: "set",
            charterData
          })
        });
        console.warn("---- vvv   this redundant commitPendingChangesIfNeeded becomes applicable when multiple policies can be queued and installed at once");
        this.commitPendingChangesIfNeeded(tcx);
      }
      if (!charterData.manifest.get("currentSettings")) {
        tcx.includeAddlTxn(`createSettingsRecord`, {
          description: `creates initial settings`,
          moreInfo: "needed to configure other contract scripts",
          optional: false,
          mkTcx: async () => {
            const settingsController = await this.getDgDataController("settings");
            if (!settingsController) {
              throw new Error(
                `no settings policy found in the Capo manifest`
              );
            }
            let initialSettings = settingsController.exampleData();
            if (settingsController && //@ts-expect-error on optional method not declared on the general data-controller type
            !settingsController.initialSettingsData) {
              console.warn(
                "Note: the Settings controller has no `async initialSettingsData()` method defined; using exampleData().\n  Add this method to the settings policy if needed for deployment of the initial settings record.\n  To suppress this warning, add `initiaiSettingsData() { return this.exampleData() }` to the settings policy."
              );
            } else {
              initialSettings = //@ts-expect-error on optional method not declared on the general data-controller type
              await settingsController.initialSettingsData();
            }
            if (!initialSettings) {
              throw new Error(
                "the settings policy must implement exampleData() and/or async initialSettingsData() and return a valid settings record"
              );
            }
            const ma = settingsController.activity.MintingActivities;
            const activity = ma.$seeded$CreatingRecord;
            return settingsController.mkTxnCreateRecord({
              activity,
              data: initialSettings
            });
          }
        });
        tcx.includeAddlTxn(`addCurrentSettings`, {
          description: `register settings in Capo manifest`,
          moreInfo: "provides settings to all the Capo scripts",
          optional: false,
          mkTcx: async () => {
            await this.getDgDataController("settings");
            const settingsUtxo = (await this.findDelegatedDataUtxos({
              type: "settings"
            }))[0];
            if (!settingsUtxo) {
              throw new Error("can't find settings record");
            }
            const initialSettings = settingsUtxo.data;
            if (!initialSettings) {
              throw new Error(
                "can't extract initial settings record data"
              );
            }
            console.log(
              "\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E} hurray  \u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}\u{1F41E}"
            );
            console.log({ initialSettings });
            const tcx2 = await this.mkTxnAddManifestEntry(
              "currentSettings",
              settingsUtxo,
              {
                tokenName: initialSettings.id,
                entryType: { NamedTokenRef: {} },
                mph: void 0
              }
            );
            return this.commitPendingChangesIfNeeded(tcx2);
          }
        });
      }
      return tcx.withAddlTxns();
    }
  }
  // async txnAddSettingsOutput<
  //     TCX extends StellarTxnContext<hasAllUuts<"set">>
  // >(tcx: TCX, settings: CapoOffchainSettingsType<this>): Promise<TCX> {
  //     const settingsDatum = await this.mkDatumSettingsData(
  //         {
  //             id: tcx.state.uuts.set.name,
  //             ... (settings as any),
  //         });
  //     const settingsOut = new TxOutput(
  //         this.address,
  //         this.uutsValue(tcx.state.uuts.set),
  //         settingsDatum
  //     );
  //     settingsOut.correctLovelace(this.networkParams);
  //     return tcx.addOutput(settingsOut);
  // }
  // /**
  //  * @deprecated - use tcxWithSettingsRef() instead
  //  */
  // async addSettingsRef<TCX extends StellarTxnContext>(
  //     tcx: TCX
  // ): Promise<TCX & hasSettingsRef> {
  //     return this.tcxWithSettingsRef(tcx);
  // }
  // /**
  //  * ensures that the transaction context has a reference to the settings UTXO
  //  * @public
  //  * @remarks
  //  *
  //  * Accepts a transaction context, and ensures that it has a reference to the
  //  * settings UTXO.  If the transaction context already has a settings reference,
  //  * it is returned as-is.  Otherwise, the settings UTXO is found and added to
  //  * the transaction context.
  //  */
  // async tcxWithSettingsRef<TCX extends StellarTxnContext>(
  //     tcx: TCX
  // ): Promise<TCX & hasSettingsRef> {
  //     if (
  //         //@ts-expect-error on type-probe:
  //         tcx.state.settingsRef
  //     )
  //         return tcx as TCX & hasSettingsRef;
  //     const settingsUtxo = await this.findSettingsInfo(
  //         //@ts-expect-error it's ok if it's not there
  //         tcx.state.charterData
  //     );
  //     const tcx2 = tcx.addRefInput(settingsUtxo) as TCX & hasSettingsRef;
  //     tcx2.state.settingsRef = settingsUtxo;
  //     return tcx2;
  // }
  /**
   * Creates an additional reference-script-creation txn
   * @remarks
   *
   * Creates a txn for reference-script creation, and
   * adds it to the current transaction context to also be submitted.
   *
   * The reference script is stored in the Capo contract with a special
   * Datum, and it can be used in future transactions to save space and fees.
   *
   * @param tcx - the transaction context
   * @param scriptName - the name of the script, used in the addlTxn's  name
   * @param script - the script to be stored onchain for future reference
   * @public
   **/
  async txnMkAddlRefScriptTxn(tcx, scriptName, script) {
    const sn = scriptName[0].toUpperCase() + scriptName.slice(1);
    return tcx.includeAddlTxn(`refScript${sn}`, {
      description: `+ on-chain refScript: ${scriptName}`,
      moreInfo: "saves txn fees and txn space in future txns",
      optional: false,
      mkTcx: () => this.mkRefScriptTxn(script)
    });
  }
  async mkRefScriptTxn(script) {
    const tcx = this.mkTcx();
    const txo = makeTxOutput(
      this.address,
      makeValue(this.ADA(0n)),
      this.mkDatumScriptReference(),
      script
    );
    txo.correctLovelace(this.networkParams);
    if (this.actorContext.wallet) {
      const foundFunds = await this.uh.findActorUtxo(
        "to pay for refScript storage",
        this.uh.mkValuePredicate(txo.value.lovelace, tcx),
        {
          dumpDetail: "onFail"
        }
      );
      if (!foundFunds) {
        throw new Error(
          `no funds available in your wallet to create refScript; needed ${(Number(txo.value.lovelace) / 1e6).toFixed(3)} ADA`
        );
      }
      tcx.addInput(foundFunds);
    }
    return tcx.addOutput(txo);
  }
  async txnAttachScriptOrRefScript(tcx, program = void 0, useRefScript = true) {
    const program2 = program || this._compiledScript || await this.asyncCompiledScript();
    let expectedVh = program2.hash();
    const capoUtxos = await this.findCapoUtxos();
    const matchingScriptRef = await this.findRefScriptUtxo(
      expectedVh,
      capoUtxos
    );
    if (!matchingScriptRef) {
      console.warn(
        new Error(
          `\u26A0\uFE0F  missing refScript in Capo ${this.address.toString()} 
  ... for expected script hash ${bytesToHex(
            expectedVh
          )}; 
ADDING SCRIPT DIRECTLY TO TXN!`
        ).stack?.replace(/^Error/, "")
      );
      return tcx.addScriptProgram(program2);
    }
    return tcx.addRefInput(matchingScriptRef, program2);
  }
  async findRefScriptUtxo(expectedVh, capoUtxos) {
    const matchesRefScript = this.uh.mkRefScriptPredicate(expectedVh);
    const refScriptUtxos = await this.findScriptReferences(capoUtxos);
    const matchingScriptRef = refScriptUtxos.find(matchesRefScript);
    if (!matchingScriptRef) {
      return void 0;
    }
    return matchingScriptRef;
  }
  /** finds UTXOs in the capo that are of tnhe ReferenceScript variety of its datum
   * @remarks
   *
   * @public
   */
  async findScriptReferences(capoUtxos) {
    //! todo: adjust this to use a more abstract form of querying
    const utxos = (await Promise.all(
      capoUtxos.map((utxo) => {
        const datum2 = utxo.output.datum?.data;
        if (!datum2) return null;
        const scriptRef = this.newReadDatum(datum2);
        if (!scriptRef.ScriptReference) {
          return null;
        }
        return utxo;
      })
    )).filter((x) => !!x);
    return utxos;
  }
  async mkTxnUpdateCharter(args, activity = this.activityUpdatingCharter(), tcx = this.mkTcx()) {
    console.log(
      "update charter: " + uplcDataSerializer("activity", activity)
    );
    return this.txnUpdateCharterUtxo(tcx, activity, args);
  }
  async txnAddNamedDelegateAuthority(tcx, delegateName, delegate, activity) {
    return delegate.txnGrantAuthority(tcx, activity);
  }
  /**
   * Returns a single item from a list, throwing an error if it has multiple items
   *
   */
  singleItem(xs) {
    const [first, ...excess] = xs;
    if (excess.length) {
      throw new Error("expected single item, got " + excess.length);
    }
    return first;
  }
  /**
   * Queries a chain-index to find utxos having a specific type of delegated datum
   * @remarks
   * Optionally filters records by `id`, `type` and/or `predicate`
   *
   * The `predicate` function, if provided, can implement any logic suitable for a specific case of data-finding.
   */
  async findDelegatedDataUtxos({
    type,
    id,
    predicate,
    query,
    charterData,
    capoUtxos
  }) {
    if (!type && !predicate && !id) {
      throw new Error("Must provide either type, predicate or id");
    }
    if (id && predicate) {
      throw new Error("Cannot provide both id and predicate");
    }
    if (!capoUtxos) {
      capoUtxos = await this.findCapoUtxos();
    }
    if (!charterData) {
      charterData = await this.findCharterData(void 0, {
        optional: false,
        capoUtxos
      });
    }
    if (id) {
      let idBytes;
      if (Array.isArray(id)) {
        idBytes = id;
      } else {
        idBytes = encodeUtf8(id.toString());
      }
      predicate = (utxo, datum2) => {
        if (!datum2.id) {
          throw new Error(`um?`);
        }
        return equalsBytes(datum2.id, idBytes);
      };
    }
    if ("undefined" !== typeof type) {
      const dgtForType = await this.getDgDataController(type, {
        charterData
      });
      if (!dgtForType) {
        console.log("no adapter for type", type);
      }
    }
    const utxosWithDatum = (await Promise.all(
      capoUtxos.map(async (utxo) => {
        const { datum: datum2 } = utxo.output;
        if (!datum2?.data) return null;
        if (datum2.kind != "InlineTxOutputDatum") {
          throw new Error(
            `unexpected datum kind ${datum2.kind} in utxo`
          );
        }
        let type2;
        if (datum2.data.kind == "constr") {
          const cField = datum2.data.fields[0];
          if (!cField) {
            return void 0;
          }
          const map = cField.kind == "map" ? cField.items : null;
          if (map) {
            const typeBytes = encodeUtf8("tpe");
            const seenTypeBytes = map.find(([k, v]) => {
              if (k.kind != "bytes") {
                console.log("   - key not bytes", k.kind);
              } else {
                console.log("key ", decodeUtf8(k.bytes));
                return k.kind == "bytes" && equalsBytes(k.bytes, typeBytes);
              }
            })?.[1];
            if (seenTypeBytes?.kind == "bytes") {
              type2 = decodeUtf8(seenTypeBytes.bytes);
            }
          } else {
            console.log(
              "   - no map field in datum",
              datum2.data.dataPath
            );
          }
          if (!type2) {
            console.log(
              "   - no type field in datum",
              datum2.data.dataPath
            );
            return void 0;
          }
        }
        const dgtForType = type2 && await this.getDgDataController(type2, {
          charterData,
          optional: true
        });
        if (!dgtForType) {
          console.log(
            "no type found in datum",
            datum2.data.dataPath,
            "in utxo",
            dumpAny(utxo.id)
          );
          const msg = type2 ? `no delegate for type ${type2}` : "no type in datum";
          return {
            utxo,
            datum: datum2,
            dataWrapped: `Error: ${msg}, couldn't parse data`,
            toJSON() {
              return {
                utxo: utxo.datum,
                data: `[error: couldn't parse]`,
                dataWrapped: null
              };
            }
          };
        }
        const data = dgtForType.newReadDatum(datum2.data);
        const typedData = data.capoStoredData.data;
        return mkFoundDatum(utxo, dgtForType, datum2, typedData);
      })
    )).filter((x) => !!x);
    console.log(type, `findDelegatedData: `, utxosWithDatum.length);
    return utxosWithDatum;
    function mkFoundDatum(utxo, delegate, datum2, data) {
      if (!data) {
        return null;
      }
      if (!data.id || !data.type) {
        console.log(
          `\u26A0\uFE0F  WARNING: missing required 'id' or 'type' field in this delegated datum
`,
          dumpAny(utxo),
          data
        );
        debugger;
        return null;
      }
      if (type && data.type != type) {
        return null;
      }
      if (predicate && !predicate(utxo, data)) {
        return null;
      }
      const dataWrapped = delegate.usesWrappedData ? (
        //@ts-expect-error because we don't have a strong type for the delegate
        delegate.wrapData(data)
      ) : void 0;
      return {
        utxo,
        datum: datum2,
        data,
        dataWrapped,
        toJSON() {
          return {
            utxo: utxo.id,
            datum: datum2,
            data,
            dataWrapped: dataWrapped ? `[data wrapped  as ${dataWrapped?.constructor.name}]` : void 0
          };
        }
      };
    }
  }
  async mkTxnUpdatingMintDelegate(delegateInfo, tcx = new StellarTxnContext(this.setup)) {
    const currentCharter = await this.mustFindCharterUtxo();
    const currentDatum = await this.findCharterData(currentCharter);
    const mintDelegate = await this.getMintDelegate();
    const { minter } = this;
    const tcxWithSeed = await this.tcxWithSeedUtxo(tcx);
    const uutOptions = delegateInfo.forcedUpdate ? {
      withoutMintDelegate: {
        omitMintDelegate: true,
        specialMinterActivity: minter.activity.forcingNewMintDelegate(tcxWithSeed)
      }
    } : {
      mintDelegateActivity: mintDelegate.activity.DelegateLifecycleActivities.ReplacingMe(
        {
          seed: tcxWithSeed.state.seedUtxo.id,
          purpose: "mintDgt"
        }
      ),
      additionalMintValues: this.mkValuesBurningDelegateUut(
        currentDatum.mintDelegateLink
      ),
      skipDelegateReturn: true
      // so it can be burned without a txn imbalance
    };
    const tcx2 = await this.txnMintingUuts(
      // todo: make sure seed-utxo is selected with enough minUtxo ADA for the new UUT name.
      tcxWithSeed,
      ["mintDgt"],
      uutOptions,
      {
        mintDelegate: "mintDgt"
      }
    );
    console.warn("updating mint delegate with info", delegateInfo);
    const newMintDelegate = await this.txnCreateOffchainDelegateLink(
      tcx2,
      "mintDelegate",
      // !!! not tested:
      {
        ...delegateInfo,
        uutName: tcx2.state.uuts.mintDgt.name
      }
    );
    const fullCharterArgs = {
      ...currentDatum,
      mintDelegateLink: this.mkOnchainRelativeDelegateLink(newMintDelegate)
    };
    const capoActivity = delegateInfo.forcedUpdate ? this.activity.capoLifecycleActivity.forcingNewMintDelegate(tcx2, {
      purpose: "mintDgt"
    }) : void 0;
    const tcx3 = await this.mkTxnUpdateCharter(
      fullCharterArgs,
      capoActivity,
      await this.txnAddGovAuthority(tcx2)
    );
    return tcx3;
  }
  mkValuesBurningDelegateUut(current) {
    return [mkValuesEntry(current.uutName, -1n)];
  }
  async mkTxnUpdatingSpendDelegate(delegateInfo, tcx = new StellarTxnContext(this.setup)) {
    const currentCharter = await this.mustFindCharterUtxo();
    const currentDatum = await this.findCharterData(currentCharter);
    const spendDelegate = await this.getSpendDelegate(currentDatum);
    const tcxWithSeed = await this.tcxWithSeedUtxo(tcx);
    const uutOptions = {
      withoutMintDelegate: {
        omitMintDelegate: true,
        specialMinterActivity: this.minter.activity.CreatingNewSpendDelegate(tcxWithSeed, {
          replacingUut: delegateInfo.forcedUpdate ? void 0 : (
            // minter will enforce the Burn of this token name
            spendDelegate.authorityTokenName
          )
        }),
        additionalMintValues: delegateInfo.forcedUpdate ? void 0 : this.mkValuesBurningDelegateUut(
          currentDatum.spendDelegateLink
        ),
        // the minter won't require the old delegate to be burned,
        //  ... so it can be burned without a txn imbalance:
        skipDelegateReturn: delegateInfo.forcedUpdate
      }
    };
    const tcx2 = await this.txnMintingUuts(
      // todo: make sure seed-utxo is selected with enough minUtxo ADA for the new UUT name.
      tcxWithSeed,
      ["spendDgt"],
      uutOptions,
      {
        spendDelegate: "spendDgt"
      }
    );
    const newSpendDelegate = await this.txnCreateConfiguredDelegate(
      tcx2,
      "spendDelegate",
      delegateInfo
    );
    const tcx2a = delegateInfo.forcedUpdate ? tcx2 : await spendDelegate.txnGrantAuthority(
      tcx2,
      spendDelegate.activity.DelegateLifecycleActivities.ReplacingMe(
        {
          seed: tcxWithSeed.state.seedUtxo.id,
          purpose: "spendDgt"
        }
      ),
      "skipDelegateReturn"
    );
    const tcx2b = await newSpendDelegate.delegate.txnReceiveAuthorityToken(
      tcx2a,
      newSpendDelegate.delegate.tvAuthorityToken()
    );
    const fullCharterArgs = {
      ...currentDatum,
      spendDelegateLink: this.mkOnchainRelativeDelegateLink(newSpendDelegate)
    };
    const capoActivity = delegateInfo.forcedUpdate ? this.activity.capoLifecycleActivity.forcingNewSpendDelegate(
      tcx2,
      { purpose: "spendDgt" }
    ) : void 0;
    return this.mkTxnUpdateCharter(
      fullCharterArgs,
      capoActivity,
      await this.txnAddGovAuthority(tcx2b)
    );
  }
  async mkTxnAddingMintInvariant(delegateInfo, tcx = new StellarTxnContext(this.setup)) {
    await this.findCharterData();
    throw new Error(`test me!`);
  }
  async mkTxnAddingSpendInvariant(delegateInfo, tcx = new StellarTxnContext(this.setup)) {
    await this.findCharterData();
    throw new Error(`test me!`);
  }
  /**
   * Adds or replaces a named delegate in the Capo contract
   * @remarks
   *
   * Registers a new delegate, keyed by its name.  The delegate may
   * replace another
   *
   * Other contract scripts can reference named delegates through the
   * contract's charter, requiring their presence in a transaction - thus
   * delegating some portion of validation responsibility to the other script
   *
   * @param delegateName - the key that will be used in the on-chain data structures and in dependent contracts.
   *  @param options - configuration for the delegate
   * @public
   **/
  async mkTxnAddingNamedDelegate(delegateName, options, tcx = this.mkTcx()) {
    const currentCharter = await this.findCharterData();
    console.log(
      "------------------ TODO SUPPORT OPTIONS.forcedUpdate ----------------"
    );
    const uutPurpose = options.uutName || delegateName;
    if (uutPurpose.length > 13) {
      throw new Error(
        `uutName ${uutPurpose} can be max 13 chars 
   ... adjust this separately from the delegateName with options.uutName`
      );
    }
    await this.getMintDelegate(currentCharter);
    console.log("  -- \u{1F41E}\u{1F41E}adding named delegate with options", options);
    const tcx1 = tcx.state.seedUtxo === void 0 ? await this.tcxWithSeedUtxo() : tcx;
    const tcx2 = await this.txnMintingUuts(
      tcx1,
      [uutPurpose],
      options.mintSetup,
      {
        // role / uut map
        [delegateName]: uutPurpose
      }
    );
    const newNamedDelegate = await this.txnCreateOffchainDelegateLink(
      tcx2,
      delegateName,
      options
    );
    const tcx4 = await this.mkTxnUpdateCharter(
      {
        ...currentCharter,
        otherNamedDelegates: new Map([
          ...currentCharter.otherNamedDelegates.entries(),
          [
            delegateName,
            this.mkOnchainRelativeDelegateLink(newNamedDelegate)
          ]
        ])
      },
      void 0,
      await this.txnAddGovAuthority(tcx2)
    );
    const DelegateName = delegateName[0].toUpperCase() + delegateName.slice(1);
    const bigDelegateName = `namedDelegate${DelegateName}`;
    tcx4.state[bigDelegateName] = newNamedDelegate;
    const tcx5 = await this.txnMkAddlRefScriptTxn(
      tcx4,
      bigDelegateName,
      newNamedDelegate.delegate.compiledScript
    );
    return tcx5;
  }
  async mkTxnInstallingPolicyDelegate(options) {
    const tcx1 = await this.tcxWithSeedUtxo(this.mkTcx());
    const existingDgtEntry = this.hasPolicyInManifest(
      options.typeName,
      options.charterData
    );
    if (existingDgtEntry) {
      return this.mkTxnQueuingDelegateChange("Replace", options, tcx1);
    } else {
      return this.mkTxnQueuingDelegateChange("Add", options, tcx1);
    }
  }
  /**
   * Helper for installing a named policy delegate
   * @remarks
   * 
   * Creates a transaction for adding a delegate-data-policy to the Capo, using the same logic as mkTxnInstallingPolicyDelegate.
   * 
   * In addition, it also commits the pending changes to the Capo's charter.
   * 
   * Use mkTxnInstallingPolicyDelegate to queue a pending change without committing it (useful 
   * for tests, or when multiple policies can be queued and installed at once).
   * 
   * Note that deploying multiple policies at once is currently disabled, to help prevent resource-exhaustion attacks.
   * 
   * @public
   */
  async mkTxnInstallPolicyDelegate(options) {
    const tcx1 = await this.mkTxnInstallingPolicyDelegate(options);
    return this.commitPendingChangesIfNeeded(tcx1);
  }
  // async mkTxnQueuingDelegateRemoval<
  //     THIS extends Capo<any>,
  //     TCX extends StellarTxnContext<anyState> = StellarTxnContext<anyState>
  // >(this: THIS, pendingChange: toQueueDgtRemoval, tcx = this.mkTcx()) {
  //     const currentCharter = await this.findCharterData();
  //     const mintDelegate = await this.getMintDelegate(currentCharter);
  //     const spendDelegate = await this.getSpendDelegate(currentCharter);
  //     const tcx1 = await spendDelegate.txnGrantAuthority(
  //         tcx,
  //         spendDelegate.activity.capoLifecycleActivity.queuePendingChange(
  //             pendingChange
  //         )
  //     );
  //     const tcx2 = await this.mkTxnUpdateCharter(
  //         {
  //             ...currentCharter,
  //             pendingChanges: [
  //                 pendingChange,
  //                 ...currentCharter.pendingChanges,
  //             ],
  //         },
  //         this.activity.capoLifecycleActivity.queuePendingChange(
  //             pendingChange
  //         ),
  //         tcx1
  //     );
  //     return tcx2;
  // }
  /**
   * Adds a new entry to the Capo's manifest
   * @remarks
   * Use mkTxnQueueingDelegateChange for changing DgDataPolicy entries.
   *
   * The type exclusions here mean this CURRENTLY works only with the
   * NamedTokenRef variety of manifest entry, but that's just pragmatic
   * because the other types don't yet have an implementation.
   * Other types can be eligible for adding to this API or to a different call.
   */
  async mkTxnAddManifestEntry(key, utxo, entry, tcx = this.mkTcx()) {
    const currentCharter = await this.findCharterData();
    if (!entry.entryType.NamedTokenRef) {
      throw new Error(`not yet supported for ${Object.keys(entry)}[0]`);
    }
    const { tokenName } = entry;
    const tcx1a = await this.txnAddGovAuthority(tcx);
    const tcx1b = tcx1a.addRefInput(utxo.utxo);
    const spendDgt = await this.getSpendDelegate(currentCharter);
    const tcx1c = await spendDgt.txnGrantAuthority(
      tcx1b,
      spendDgt.activity.CapoLifecycleActivities.updatingManifest.addingEntry(
        {
          key,
          tokenName
        }
      )
    );
    const tcx2 = await this.mkTxnUpdateCharter(
      {
        ...currentCharter,
        manifest: new Map([
          ...currentCharter.manifest.entries(),
          [key, entry]
        ])
      },
      this.activity.capoLifecycleActivity.updatingManifest.addingEntry({
        key,
        tokenName
      }),
      tcx1c
    );
    return tcx2;
  }
  async mkTxnQueuingDelegateChange(change, options, tcx = this.mkTcx()) {
    const {
      idPrefix,
      typeName,
      charterData,
      dgtOptions = { config: {} }
    } = options;
    const purpose = dgtOptions.uutName || "dgPol";
    if (purpose.length > 13) {
      throw new Error(
        `delegate-purpose ${purpose} can be max 13 chars for a UUT-name.  
   ... adjust this separately from the policyName with options.uutName`
      );
    }
    const existingDelegate = await this.getDgDataController(typeName, {
      charterData,
      optional: true
    });
    const mintDgt = await this.getMintDelegate(charterData);
    const mintDgtActivity = mintDgt.activity;
    const tcx1 = (
      //@ts-expect-error on checking for possible seedUtxo presence
      tcx.state.seedUtxo === void 0 ? await this.tcxWithSeedUtxo() : tcx
    );
    const tempDataPolicyLink = await this.tempMkDelegateLinkForQueuingDgtChange(
      tcx1.state.seedUtxo,
      mintDgtActivity,
      purpose,
      typeName,
      idPrefix,
      dgtOptions
    );
    this.mkOnchainRelativeDelegateLink(tempDataPolicyLink);
    const replacesDgtME = this.hasPolicyInManifest(typeName, charterData);
    const [manifestPolicyName, existingDgtEntry] = replacesDgtME || [];
    const existingDgtLink = existingDgtEntry?.entryType.DgDataPolicy?.policyLink;
    if (existingDgtEntry?.mph) {
      throw new Error(
        `Replace: for now, this only works with a minting policy from this Capo`
      );
    }
    const replacesDgtTokenName = existingDgtEntry?.tokenName;
    const existingDvh = existingDgtLink?.delegateValidatorHash;
    if (replacesDgtTokenName) {
      if ("Add" === change) {
        throw new Error(
          `Cannot add a policy with the same name as an existing one: ${typeName} (use Replace activity)`
        );
      }
      if (!existingDelegate) {
        throw new Error(
          `Cannot replace a policy that doesn't exist: ${typeName} (use Add activity)`
        );
      }
      const previousCompiledScript = existingDelegate.getBundle().previousCompiledScript();
      if (!previousCompiledScript) {
        if (existingDvh) {
          throw new TxNotNeededError(
            `Policy doesn't need an update: ${typeName}`
          );
        }
      } else {
        if (!existingDvh) {
          throw new Error(
            `incontheeivable! -- on-chain manifest has no validator hash for ${typeName}, but the offchain bundle has a previous compiled script`
          );
        }
        const previousDvh = makeValidatorHash(
          previousCompiledScript.hash()
        );
        if (!previousDvh.isEqual(existingDvh)) {
          throw new Error(
            `Unexpected mismatch between onchain and offchain: ${typeName}
   ... onchain: ${existingDvh}
   ... offchain: ${previousDvh}`
          );
        }
        const nextScript = existingDelegate.getBundle().compiledScript();
        const nextDvh = makeValidatorHash(nextScript.hash());
        if (nextDvh.isEqual(existingDvh)) {
          console.warn(
            "this is not the path we'd ever expect to take"
          );
          throw new TxNotNeededError(
            `Policy doesn't need an update: ${typeName}`
          );
        }
      }
    } else {
      if ("Replace" === change) {
        throw new Error(
          `Cannot replace a policy that doesn't exist: ${typeName} (use Add activity)`
        );
      }
    }
    const dgtAction = change === "Add" ? {
      Add: {
        seed: tcx1.state.seedUtxo.id,
        purpose,
        idPrefix
        // delegateValidatorHash: tempOCDPLink.delegateValidatorHash,
        // config: tempOCDPLink.config,
      }
    } : {
      Replace: {
        ...{
          seed: tcx1.state.seedUtxo.id,
          purpose,
          idPrefix
        },
        replacesDgt: this.uh.acAuthorityToken(
          replacesDgtTokenName
        )
      }
    };
    const tcx2 = await this.txnMintingUuts(
      tcx1,
      [purpose],
      {
        usingSeedUtxo: tcx1.state.seedUtxo,
        mintDelegateActivity: mintDgtActivity.CapoLifecycleActivities.queuePendingChange
        // (
        //     pendingDgtChange
        // ),
      },
      {
        // role / uut map
        dgDataPolicy: purpose,
        [typeName]: purpose
      }
    );
    const delegateLink = this.mkOnchainRelativeDelegateLink(
      await this.txnCreateOffchainDelegateLink(
        tcx2,
        typeName,
        dgtOptions
      )
    );
    const pendingChange = {
      delegateChange: {
        action: dgtAction,
        role: { DgDataPolicy: typeName },
        // idPrefix,
        // dgtLink: tempOCDPLink,
        dgtLink: delegateLink
      }
    };
    const helper = this.getOnchainBridge().types.PendingCharterChange;
    helper.delegateChange(
      pendingChange.delegateChange
    );
    const changingThisRole = (pc) => {
      const dgc = pc.delegateChange;
      if (!dgc) return false;
      const existingRole = dgc.role.DgDataPolicy;
      if (typeName != existingRole) return false;
      const existingChangeAction = Object.keys(dgc.action)[0];
      return change == existingChangeAction;
    };
    const isAlreadyPresent = this.findPendingChange(
      charterData,
      changingThisRole
    );
    if (isAlreadyPresent) {
      throw new AlreadyPendingError(
        "pending delegate change already queued"
      );
    }
    const tcx4 = await this.mkTxnUpdateCharter(
      {
        ...charterData,
        pendingChanges: [pendingChange, ...charterData.pendingChanges]
      },
      this.activity.capoLifecycleActivity.queuePendingChange,
      // (
      //     pendingDgtChange
      // ),
      await this.txnAddGovAuthority(tcx2)
    );
    const stateKey = mkDgtStateKey(typeName);
    const tcx5 = tcx4;
    const tcx6 = await this.txnMkAddlRefScriptTxn(
      tcx5,
      stateKey,
      tempDataPolicyLink.delegate.compiledScript
    );
    return tcx6;
  }
  /**
   * Looks up a policy in the manifest, returning the policy name and the manifest entry if found.
   * @remarks
   * Returns a pair of [ policyName, manifestEntry ] if found.  Returns undefined if the policy is not found.  
   * @public
   */
  hasPolicyInManifest(policyName, charterData) {
    return [...charterData.manifest.entries()].find(
      ([manifestPolicyName, m]) => {
        return !!m.entryType.DgDataPolicy && manifestPolicyName == policyName;
      }
    );
  }
  /**
   * mockable helper for finding a pending change in the charter, to make it easier to test
   */
  findPendingChange(charterData, changingThisRole) {
    return charterData.pendingChanges.find(changingThisRole);
  }
  async tempMkDelegateLinkForQueuingDgtChange(seedUtxo, mintDgtActivity, purpose, typeName, idPrefix, options) {
    const ttcx1 = await this.tcxWithSeedUtxo(this.mkTcx(), seedUtxo);
    const ttcx2 = await this.txnMintingUuts(
      ttcx1,
      [purpose],
      {
        usingSeedUtxo: seedUtxo,
        mintDelegateActivity: mintDgtActivity.CapoLifecycleActivities.queuePendingChange
        //     {
        //         action: {
        //             Add: {
        //                 seed: ttcx1.state.seedUtxo.id,
        //                 purpose,
        //                 idPrefix: idPrefix
        //             },
        //         },
        //         role: { DgDataPolicy: {} },
        //         name: policyName,
        //     }
        // ),
      },
      {
        // role / uut map
        [typeName]: purpose
      }
    );
    return this.txnCreateOffchainDelegateLink(ttcx2, typeName, options);
  }
  async mkTxnCommittingPendingChanges(tcx = this.mkTcx()) {
    const currentCharter = await this.findCharterData();
    const mintDgt = await this.getMintDelegate(currentCharter);
    const spendDgt = await this.getSpendDelegate(currentCharter);
    const pendingChanges = currentCharter.pendingChanges;
    const tcx1a = await spendDgt.txnGrantAuthority(
      tcx,
      spendDgt.activity.CapoLifecycleActivities.commitPendingChanges
    );
    const tcx1b = await this.txnAddGovAuthority(tcx1a);
    let tcx3 = tcx1b;
    let isReplacing = false;
    const currentManifest = currentCharter.manifest;
    const newManifestEntries = /* @__PURE__ */ new Map();
    for (const pendingChange of pendingChanges) {
      if (pendingChange.otherManifestChange) {
        throw new Error(`otherManifestChange not yet supported`);
      }
      const {
        action: thisAction,
        role,
        dgtLink
      } = pendingChange.delegateChange;
      const name = role.DgDataPolicy;
      if (!name) {
        throw new Error(
          `only DgDataPolicy changes are currently supported here`
        );
      }
      if (!dgtLink) {
        throw new Error(`missing expected 'dgtLink' in pendingChange`);
      }
      const { uutName } = dgtLink;
      let idPrefix;
      if (thisAction.Add) {
        const { purpose, seed, idPrefix: PAidPrefix } = thisAction.Add;
        if (!PAidPrefix) {
          throw new Error(
            `missing expected 'idPrefix' in pendingChange`
          );
        }
        idPrefix = PAidPrefix;
        this.mkTcx();
        if (currentManifest.get(name)) {
          throw new Error(`can't Add conflicting name to manifest`);
        }
      } else {
        if (!thisAction.Replace) {
          throw new Error(
            `only Add and Replace actions are supported here`
          );
        }
        isReplacing = true;
        const {
          purpose,
          seed,
          idPrefix: PRidPrefix
        } = thisAction.Replace;
        if (!PRidPrefix) {
          throw new Error(
            `missing expected 'idPrefix' in pendingChange`
          );
        }
        idPrefix = PRidPrefix;
        if (!currentManifest.get(name)) {
          throw new Error(
            `can't Replace non-existent name '${name}' in manifest`
          );
        }
      }
      newManifestEntries.set(name, {
        tokenName: encodeUtf8(uutName),
        mph: void 0,
        entryType: {
          DgDataPolicy: {
            policyLink: dgtLink,
            idPrefix,
            refCount: 1n
          }
        }
      });
    }
    if (!isReplacing) {
      tcx3 = await mintDgt.txnGrantAuthority(
        tcx1b,
        mintDgt.activity.CapoLifecycleActivities.commitPendingChanges
      );
    } else {
      const tcx2 = await this.tcxWithCharterRef(tcx);
      const tcx2a = await this.txnAddGovAuthority(tcx2);
      const mintDgt2 = await this.getMintDelegate();
      const minter = this.minter;
      const toBurn = await Promise.all(
        [...currentManifest.entries()].filter(([name, _]) => newManifestEntries.has(name)).map(async ([name, { mph, tokenName, entryType }]) => {
          if (mph && !mph.isEqual(minter.mintingPolicyHash)) {
            throw new Error(
              `Replace: for now, this only works with a minting policy from this Capo`
            );
          }
          if (entryType.DgDataPolicy) {
            const previousDgt = await this.getDgDataController(name);
            if (!previousDgt) {
              throw new Error(
                `can't find previous dgDataPolicy: ${name}`
              );
            }
            await previousDgt.txnGrantAuthority(
              tcx2a,
              previousDgt.activity.DelegateLifecycleActivities.Retiring,
              "skipDelegateReturn"
            );
          }
          return mkValuesEntry(tokenName, -1n);
        })
      );
      tcx3 = await minter.txnMintWithDelegateAuthorizing(
        tcx2a,
        toBurn,
        mintDgt2,
        // ????
        mintDgt2.activity.CapoLifecycleActivities.commitPendingChanges
      );
    }
    const updatedManifest = new Map([
      ...newManifestEntries.entries(),
      ...[...currentManifest.entries()].filter(
        ([name, _]) => !newManifestEntries.has(name)
      )
    ]);
    const tcx4 = await this.mkTxnUpdateCharter(
      {
        ...currentCharter,
        manifest: updatedManifest,
        pendingChanges: []
      },
      this.activity.capoLifecycleActivity.commitPendingChanges,
      tcx3
    );
    return tcx4;
  }
  async txnMintingUuts(initialTcx, uutPurposes, options, roles = {}) {
    const {
      usingSeedUtxo,
      additionalMintValues = [],
      omitMintDelegate = false,
      mintDelegateActivity,
      specialMinterActivity,
      skipDelegateReturn
    } = (
      //@ts-expect-error accessing the intersection type
      options.withoutMintDelegate || options
    );
    const mintDelegate = await this.getMintDelegate();
    const { seedUtxo } = initialTcx.state;
    const tcx = await this.txnWillMintUuts(
      initialTcx,
      uutPurposes,
      {
        usingSeedUtxo: seedUtxo
        // additionalMintValues,
        // existingDelegateReplacementActivity,
      },
      roles
    );
    if (omitMintDelegate) {
      if (mintDelegateActivity)
        throw new Error(
          `omitMintDelegate and usingMintDelegateActivity are mutually exclusive`
        );
      if (!specialMinterActivity) {
        throw new Error(
          `txnMintingUuts: omitMintDelegate requires a specialMinterActivity to be specified
  ... this indicates an activity in the MINTER (not the minting delegate),  ... the minter should be able to honor that activity/redeemer.`
        );
      }
      const tcx22 = await this.minter.txnMintingWithoutDelegate(
        tcx,
        [
          ...this.mkUutValuesEntries(tcx.state.uuts),
          ...additionalMintValues
        ],
        specialMinterActivity
      );
      return tcx22;
    }
    if (additionalMintValues.length && !mintDelegateActivity) {
      throw new Error(
        `additionalMintValues requires a custom activity provided by your mint delegate specialization`
      );
    }
    if (!mintDelegateActivity) {
      throw new Error(
        `txnMintingUuts: options.mintDelegateActivity is required;   ... it should indicate an application-specific use-case for which the mint delegate validates the exact needed UUTs to be minted`
      );
    }
    const tcx2 = await this.minter.txnMintWithDelegateAuthorizing(
      tcx,
      [
        ...this.mkUutValuesEntries(tcx.state.uuts),
        ...additionalMintValues
      ],
      mintDelegate,
      mintDelegateActivity,
      skipDelegateReturn
    );
    return tcx2;
  }
  /**
   * @deprecated use tcxWithSeedUtxo() instead
   * @remarks adds a seed utxo to a transaction-context,
   */
  async addSeedUtxo(tcx = new StellarTxnContext(this.setup), seedUtxo) {
    return this.tcxWithSeedUtxo(tcx, seedUtxo);
  }
  async txnWillMintUuts(tcx, uutPurposes, { usingSeedUtxo }, roles = {}) {
    if (!usingSeedUtxo) debugger;
    const { txId, index: utxoIdx } = usingSeedUtxo.id;
    const uutMap = Object.fromEntries(
      uutPurposes.map((uutPurpose) => {
        const idx = makeIntData(BigInt(utxoIdx)).toCbor();
        const txoId = txId.bytes.concat(["@".charCodeAt(0)], idx);
        const uutName = new UutName(
          uutPurpose,
          `${uutPurpose}-${bytesToHex(blake2b(txoId).slice(0, 6))}`
        );
        return [uutPurpose, uutName];
      })
    );
    for (const [role, uutPurpose] of Object.entries(roles)) {
      const mappedUutName = uutMap[uutPurpose];
      if (!mappedUutName) {
        throw new Error(
          `role/name mismatch: ${role}: not found: ${uutPurpose}
  ... available: ${uutPurposes.join(", ")}`
        );
      }
      uutMap[role] = mappedUutName;
    }
    if (!tcx.state) tcx.state = { uuts: {} };
    tcx.state.uuts = {
      ...tcx.state.uuts,
      ...uutMap
    };
    return tcx;
  }
  requirements() {
    return hasReqts({
      "is a base class for leader/Capo pattern": {
        purpose: "so that smart contract developers can easily start multi-script development",
        details: [
          "Instantiating a Capo contract always uses the seed-utxo pattern for uniqueness.",
          "Subclassing Capo with no type-params gives the default minter,",
          "  ... which only allows UUTs to be created",
          "Subclassing Capo<CustomMinter> gives an overloaded minter,",
          "  ... which must allow UUT minting and may allow more Activities too."
        ],
        mech: [
          "provides a default minter",
          "allows the minter class to be overridden"
        ]
      },
      "can create unique utility tokens": {
        purpose: "so the contract can use UUTs for scoped-authority semantics",
        details: [
          "That UUT (a Value) is returned, and then should be added to a TxOutput.",
          "The partial-helper doesn't constrain the semantics of the UUT.",
          "The uniqueness level can be iterated in future as needed.",
          "The UUT's token-name combines its textual purpose with a short hash ",
          "   ... of the seed UTxO, formatted with bech32"
        ],
        mech: [
          "Building a txn with a UUT involves using the txnMintingUuts partial-helper on the Capo.",
          "Fills tcx.state.uuts with purpose-keyed unique token-names",
          "The UUT uses the seed-utxo pattern to form 64 bits of uniqueness, so that token-names stay short-ish."
        ]
      },
      "supports the Delegation pattern using roles and strategy-variants": {
        purpose: "enables structured modularity and extensibility",
        details: [
          "A Capo constellation can declare a set of roles to be filled in the contract logic.",
          "The roles are typed, so that implementers of extensibility can know ",
          "  ... which capabilities their plugins need to provide",
          "Each role should be filled by a StellarContract class, ",
          "  ... which is required at the time it is needed during creation of a transaction.",
          "Each role should normally provide a base implementation ",
          "  ... of a delegate that can serve the role.",
          "Strategies, strategy-variants, or simple 'variants' are all similar ways ",
          "  ... of indicating different named plugins that can serve a particular role.",
          "Variant-names are human-readable, while the actual code",
          "  ... behind each variant name are the strategies"
        ],
        mech: [],
        requires: [
          "supports well-typed role declarations and strategy-adding",
          "supports just-in-time strategy-selection using txnCreateDelegateLink()",
          "given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings",
          "supports concrete resolution of existing role delegates"
        ]
      },
      "supports well-typed role declarations and strategy-adding": {
        purpose: "for plugin implementers to have a clear picture of what to implement",
        details: [
          "Each Capo class may declare a roles data structure.",
          "GOAL: The required type for each role must be matched when adding a plugin class serving a role",
          "A dApp using a Capo class can add strategy variants by subclassing"
        ],
        mech: [
          "Capo EXPECTS a synchronous getter for 'delegateRoles' to be defined",
          "Capo provides a default 'delegateRoles' having no specific roles (or maybe just minter - TBD)",
          "Subclasses can define their own get delegateRoles(), return a role-map-to-variant-map structure"
        ],
        requires: [
          "Each role uses a RoleVariants structure which can accept new variants"
        ]
      },
      "supports just-in-time strategy-selection using txnCreateDelegateLink()": {
        purpose: "enabling each transaction to select appropriate plugins for its contextual needs",
        details: [
          "When a transaction having an extensibility-point is being created,",
          "  ... it SHOULD require an explicit choice of the delegate to use in that role.",
          "When a 'mkTxn\u2039DoesThings\u203A' method creates a new role-delegated UTxO, ",
          "  ... it sets essential configuration details for the delegation ",
          "  ... including a specific UUT that provides a linking mechanism for the delegate",
          "The delegate contract, including its address and/or reference-script UTxO ",
          "  ... and/or its parameters and its StellarContract class, MUST be captured ",
          "  ... so that it can be easily resolved and used/referenced",
          "  .... during a later transaction whose UTxO-spending is governed by the delegate contract.",
          "When the delegate serving the role is selected, ",
          "  ... that delegate will be manifested as a concrete pair of StellarContract subclass ",
          "  ... and contract address.  The contract address MAY be pre-existing ",
          "  ... or be instantiated as a result of the delegation details."
        ],
        mech: [
          "txnCreateDelegateLink(tcx, role, delegationSettings) method configures a new delegate",
          "txnCreateDelegateLink() will use a 'default' delegate strategy",
          "If there is no delegate configured (or defaulted) for the needed role, txnCreateDelegateLink throws a DelegateConfigNeeded error.",
          "If the strategy-configuration doesn't match available variants, the DelegateConfigNeeded error offers suggested strategy-names",
          "If the strategy-configuration has any configuration problems, the DelegateConfigNeeded error contains an 'errors' object",
          "txnCreateDelegateSettings(tcx, role, delegationSettings) returns the delegate link plus a concreted delegate instance"
        ]
      },
      "given a configured delegate-link, it can create a ready-to-use Stellar subclass with all the right settings": {
        purpose: "allows the known facts about a delegate to be resolved to working SC class",
        details: [
          "A delegate link created by txnCreateDelegateLink(), can be captured in different ways",
          "  ... e.g. as a Datum property in a contract, ",
          "  ... or in any off-chain way.",
          "A dApp then reconstitutes this key information to a StellarContract, ",
          "  ... enabling simple multi-contract collaboration"
        ],
        mech: [
          "mustGetDelegate(configuredDelegate) method retrieves a configured delegate"
        ]
      },
      "Each role uses a RoleVariants structure which can accept new variants": {
        purpose: "provides a type-safe container for adding strategy-variants to a role",
        details: [
          "Adding a strategy variant requires a human-readable name for the variant",
          "  ... and a reference to the StellarContract class implementing that variant.",
          "Each variant may indicate a type for its configuration data-structure",
          "  ... and may include a factory function accepting a data-structure of that type.",
          "TBD: base configuration type?  Capo txn-builders supporting utxo-creation can provide baseline details of the base type, ",
          "  ... with additional strategy-specific details provided in the transaction-context.",
          "When adding strategies, existing variants cannot be removed or replaced."
        ],
        mech: [
          "RoleVariants has type-parameters indicating the baseline types & interfaces for delegates in that role",
          "TODO: variants can augment the delegateRoles object without removing or replacing any existing variant"
        ],
        requires: [
          "provides a Strategy type for binding a contract to a strategy-variant name"
        ]
      },
      "provides a Strategy type for binding a contract to a strategy-variant name": {
        purpose: "has all the strategy-specific bindings between a variant and the contract delegate",
        details: [
          "When adding a contract as a delegate serving in a role, its name",
          "  ... and its Strategy binding creates the connection between the host contract (suite) ",
          "  ... and the StellarContract subclass implementing the details of the strategy.",
          "The Strategy and its underlying contract are type-matched",
          "  ... with the interface needed by the Role.",
          "The Strategy is a well-typed structure supporting ",
          "  ... any strategy-specific configuration details (script parameters)",
          "  ... and validation of script parameters"
        ],
        mech: [
          "Each strategy must reference a type-matched implementation class",
          "Each strategy may define scriptParams always used for that strategy",
          "Each strategy may defer the definition of other script-params to be defined when a specific delegation relationship is being created",
          "Each strategy must define a validateScriptParams(allScriptParams) function, returning an errors object if there are problems",
          "validateScriptParams() should return undefined if there are no problems"
        ],
        requires: [
          "supports concrete resolution of existing role delegates"
        ]
      },
      "supports concrete resolution of existing role delegates": {
        purpose: "so that transactions involving delegated responsibilities can be executed",
        details: [
          "When a transaction needs to involve a UTxO governed by a delegate contract",
          "   ... the need for that delegate contract is signalled through Capo callbacks ",
          "   ... during the transaction-building process.",
          "Those callbacks contain key information, such as role-name, parameters, and address",
          "  ... needed in the collaboration to find the correct concrete delegate.",
          "Once the delegate is resolved to a configured StellarContract class, ",
          "   ... its established transaction-building interface is triggered, ",
          "   ... augmenting the transaction with the correct details, ",
          "   ... and enabling the right on-chain behaviors / verifications",
          "The Strategy adapter is expected to return the proper delegate with its matching address."
        ],
        mech: [
          "TODO: with an existing delegate, the selected strategy class MUST exactly match the known delegate-address"
        ]
      },
      "can locate UUTs in the user's wallet": {
        purpose: "for finding UUTs representing user's authority",
        details: [
          "A Capo contract can locate UUTs in the user's wallet",
          "  ... using the findActorUut() method",
          "This is useful for finding authority tokens, ",
          "  ... such as a charter-governance token, ",
          "  ... or a token representing a user's authority in a smart contract"
        ],
        mech: ["findActorUut() returns a FoundUut object, "]
      },
      "positively governs all administrative actions": {
        purpose: "to maintain clear control by an abstract entity",
        details: [
          // descriptive details of the requirement (not the tech):
          "A governance delegate is defined during contract creation",
          "The contract's policy for allowing governance actions is abstract, ",
          "  ... enforced only by a delegation pattern. ",
          "Thus, the Capo doesn't contain any of the policy details.",
          "The delegate can be evolved through governance action"
        ],
        mech: [
          // descriptive details of the chosen mechanisms for implementing the reqts:
          "uses a 'charter' token specialized for this contract",
          "the charter token has a govDgt (governance delegate) in its Datum structure",
          "the gov delegate's token can provide authorization for administrative actions",
          "the charter Datum is updated when needed to reflect a new gov delegation config"
        ],
        requires: [
          "has a unique, permanent charter token",
          "has a unique, permanent treasury address",
          // "the trustee threshold is enforced on all administrative actions",
          // "the trustee group can be changed",
          "the charter token is always kept in the contract",
          "the charter details can be updated by authority of the capoGov-* token",
          "can mint other tokens, on the authority of the charter's registered mintDgt- token",
          "can handle large transactions with reference scripts"
        ]
      },
      "has a singleton minting policy": {
        purpose: "to mint various tokens authorized by the treasury",
        details: [
          "A chosen minting script is bound deterministically to the contract constellation",
          "Its inaugural (aka 'initial Charter' or 'Charter Mint') transaction creates a charter token",
          "The minting script can issue further tokens approved by the Capo's minting delegate",
          "The minting script does not need to concern itself with details of the delegate's approval"
        ],
        mech: [
          "has an initial UTxO chosen arbitrarily, and that UTxO is consumed during initial Charter",
          "makes a different address depending on (txId, outputIndex) parameters of the Minting script"
        ],
        requires: [
          "can mint other tokens, on the authority of the charter's registered mintDgt- token"
        ]
      },
      "the charter details can be updated by authority of the capoGov-* token": {
        purpose: "to support behavioral changes over time by repointing the delegate links",
        details: [
          "The Capo's ability to accept charter-configuration changes allows its behavior to evolve. ",
          "These configuration changes can accept a new minting-delegate configuration ,",
          " ... or other details of the Charter datum that may be specialized.",
          "Charter updates are authorized by the gov delegate"
        ],
        mech: ["can update details of the datum"],
        requires: [
          "can update the minting delegate in the charter data",
          "can update the spending delegate in the charter data",
          "can add invariant minting delegates to the charter data",
          "can add invariant spending delegates to the charter data"
        ]
      },
      "can update the minting delegate in the charter data": {
        purpose: "to evolve the minting policy for the contract",
        details: [
          "when updating the minting policy delegate, the gov authority is used to authorize the change",
          "the minting policy is updated in the charter datum",
          "the old minting policy should be retired when changing policies"
        ],
        impl: "mkTxnUpdatingMintDelegate()",
        mech: [
          "can install an updated minting delegate",
          "fails without the capoGov- authority uut",
          "normally requires the eixsting mint delegate to be involved in the replacement",
          "can force-replace the mint delegate if needed",
          "keeps the charter token in the contract address",
          "uses the new minting delegate after it is installed",
          "can't use the old minting delegate after it is replaced"
        ]
      },
      "can update the spending delegate in the charter data": {
        purpose: "to evolve the spending policy for the contract's delegated-datum types",
        details: [
          "when updating the spending policy delegate, the gov authority is used to authorize the change",
          "the spending policy is updated in the charter datum",
          "the old spending policy should be retired when changing policies"
        ],
        mech: [
          "can install an updated spending delegate",
          "fails without the capoGov- authority uut",
          "normally requires the eixsting mint delegate to be involved in the replacement",
          "can force-replace the mint delegate if needed",
          "keeps the charter token in the contract address",
          "uses the new spending delegate after it is installed",
          "can't use the old spending delegate after it is replaced"
        ]
      },
      "can add invariant spending delegates to the charter data": {
        purpose: "to arrange permanent spending policies for custom data types",
        details: [
          "The Capo can add invariant spending policies for custom data types",
          "These invariants are enforced forever, and can't be changed",
          "The baseline scripts directly enforce these invariants, so that a delegate-swap actvity can't undermine the invariant"
        ],
        mech: [
          "TODO: TEST can add an invariant spending delegate for a datum type",
          "TODO: TEST cannot change any other charter settings when adding an invariant",
          "TODO: TEST cannot change spend invariants when updating other charter settings",
          "TODO: TEST new invariants are always enforced",
          "TODO: TEST can never remove an invariant spending delegate for a datum type"
        ]
      },
      "can add invariant minting delegates to the charter data": {
        purpose: "to arrange permanent minting policies constraining what can be minted",
        details: [
          "The Capo can add invariant mint policies",
          "These invariants are enforced forever, and can't be changed",
          "The baseline scripts directly enforce these invariants, so that a mint-delegate-swap actvity can't undermine the invariant"
        ],
        mech: [
          "TODO: TEST can add an invariant mint delegate",
          "TODO: TEST fails without the capoGov- authority uut",
          "TODO: TEST cannot change any other charter settings when adding the mint invariant",
          "TODO: TEST can never remove an mint invariant mint after it is added",
          "TODO: TEST cannot change mint invariants when updating other charter settings",
          "TODO: TEST always enforces new mint invariants"
        ]
      },
      "has a unique, permanent treasury address": {
        purpose: "to give continuity for its stakeholders",
        details: [
          "One-time creation is ensured by UTxO's unique-spendability property",
          "Determinism is transferred from the charter utxo to the MPH and to the treasury address",
          "Further software development lifecycle is enabled by evolution of details stored in the Charter datum"
        ],
        mech: [
          "uses the Minting Policy Hash as the sole parameter for the treasury spending script"
        ],
        requires: ["has a singleton minting policy"]
      },
      "has a unique, permanent charter token": {
        purpose: "to guarantee permanent identity of a token constraining administrative actions",
        details: [
          "a charter token is uniquely created when bootstrapping the constellation contract",
          "the charter token can't ever be recreated (it's non-fungible and can't be re-minted)",
          "the treasury address, minting policy hash, and charter token are all deterministic based on input utxo"
        ],
        impl: "txnMintCharterToken()",
        mech: [
          "creates a unique 'charter' token, with assetId determined from minting-policy-hash+'charter'",
          // "XXX - move to multi-sig Delegate - TODO: fails if minSigs is longer than trustee list",
          "doesn't work with a different spent utxo"
        ],
        requires: [
          "has a singleton minting policy",
          "the charter token is always kept in the contract"
        ]
      },
      "supports an abstract Settings structure stored in the contact": {
        purpose: "allows settings that can evolve to support Capo-related scripts as needed",
        details: [
          "The Settings structure can be stored in the contract, separately from the CharterData. ",
          "It can be updated by the govAuthority, and can be used to store any ",
          "  ... data needed by the Capo's scripts, such as minting and spending delegates.",
          "The charter datum references the settings uut, and shouldn't ",
          "  ... ever need to change that reference, since the settings data can be updated in place.",
          "The settings can store various data using string keys and conventions defined within the Capo.",
          "The Capo contract MUST NOT make any calls to methods in the Settings structure, ",
          "  ... so that that the Capo's code won't be changed if any methods are modified."
        ],
        mech: [
          // "has a 'SettingsData' datum variant & utxo in the contract",
          // "offchain code can read the settings data from the contract",
          // "TODO: TEST onchain code can read the settings data from the contract",
          // "charter creation requires a CharterData reference to the settings UUT",
          // "charter creation requires presence of a SettingsData map",
          // "updatingCharter activity MUST NOT change the set-UUT reference",
        ],
        requires: [
          // "mkTxnUpdateSettings(): can update the settings",
          "added and updated delegates always validate the present configuration data"
        ]
      },
      // "mkTxnUpdateSettings(): can update the settings": {
      //     purpose: "to support parameter changes",
      //     impl: "mkTxnUpdateSettings()",
      //     details: [
      //         "The minting delegate is expected to validate all updates to the configuration data.",
      //         "The spending delegate is expected to validate all updates to the configuration data.",
      //         "Settings changes are validated by all registered delegates before being accepted.",
      //     ],
      //     mech: [
      //         "can update the settings data with a separate UpdatingSettings Activity on the Settings",
      //         "requires the capoGov- authority uut to update the settings data",
      //         "the spending delegate must validate the UpdatingSettings details",
      //         "the minting delegate must validate the UpdatingSettings details",
      //         "all named delegates must validate the UpdatingSettings details",
      //         "TODO: the spending invariant delegates must validate the UpdatingSettings details",
      //         "TODO: the minting invariant delegates must validate the UpdatingSettings details",
      //     ],
      // },
      "added and updated delegates always validate the present configuration data": {
        purpose: "to ensure that the entirety of policies in a contract suite have integrity",
        details: [
          "New delegates cannot be adopted unless they also validate the present configuration data, ",
          "  ... so that configuration and current delegates can always be expected to be in sync.",
          "However, a new delegate can't verify the config during their creation, ",
          "  ... because its policy can be triggered only after it has a utxo in it)",
          "With an an initial step of staging a prospective delegate, the new delegate can ",
          "  ... provide positive assurance of  compatibility with the current settings."
        ],
        impl: "mkTxnStagingNewDelegate",
        mech: [
          "TODO: staging a Named delegate updates the namedDelegates structure with staged item",
          "TODO: staging a Mint delegate updates the mintDelegateLink structure with staged item",
          "TODO: staging a Spend delegate updates the spendDelegateLink structure with staged item",
          "TODO: staging an invariant delegate updates the invariantDelegates structure with staged item"
        ],
        requires: ["can commit new delegates"]
      },
      "can commit new delegates": {
        purpose: "to finalize the adoption of a new or updated delegate",
        details: [
          "A staged delegate can be committed, if it the current settings validate okay with it. ",
          "Given it already exists, then its settings-validation logic can be triggered ",
          " ... and its status can advance from 'staged' to 'active' "
        ],
        mech: [
          "TODO: a staged delegate is only adopted if it validates ok with the then-current settings"
        ]
      },
      "supports storing new types of datum not pre-defined in the Capo's on-chain script": {
        purpose: "to allow data extensibility and evolution in a backwards-compatible way",
        details: [
          "The Capo's DelegatedDatum type encapsulates all custom data types, ",
          "  ... and can be thought of as a Union of types that can be extended over time",
          "This allows the policies governing each type of data to evolve independently",
          "  ... without those data needing to be moved between contract addresses when changing the policies.",
          "The spending delegate script is expected to enforce spending rules for each type of custom data",
          "The minting delegate is expected to enforce creation rules for each type of custom data",
          "The mint- and spend-delegates can evolve to handle new types of data",
          "A namedDelegates structure in the Capo provides a manifest of additional delegates, ",
          "  ... whose involvement may be required as needed by the mint- and spend-delegates."
        ],
        mech: [
          "has named delegates, as a string map to named delegate links",
          "the spending policy "
        ],
        requires: [
          "the charter has a namedDelegates structure for semantic delegate links",
          "CreatingDelegatedDatum: creates a UTxO with any custom datum",
          "UpdatingDelegatedDatum: checks that a custom data element can be updated"
        ]
      },
      "the charter has a namedDelegates structure for semantic delegate links": {
        purpose: "to provide a manifest of additional delegates that may be required to enforce application semantics",
        details: [
          "The namedDelegates structure is a string map to named delegate links",
          "The minting and spending delegates can use these named delegates as needed",
          "The minting and spending delegates can evolve to handle new types of data",
          "The namedDelegates structure can be updated by the gov delegate"
        ],
        mech: [
          "has a namedDelegates structure in the charter datum",
          "TODO: TEST a named delegate can be added if the minter approves its creation",
          "the charter.namedDelegates structure can only be updated by the gov delegate",
          "can reject creation of named delegate with name not fitting the application's rules",
          "TODO: won't mint the new delegate without the seed-utxo being included in the transaction",
          "TODO: is created as a PendingDelegate datum during initial creation",
          "TODO: can only be adopted into Charter datum when it successfully validates the current SettingsData"
        ],
        requires: []
      },
      "CreatingDelegatedDatum: creates a UTxO with any custom datum": {
        purpose: "allows the application to enforce policies for custom record creation",
        details: [
          "The Capo must involve the minting delegate in creating a custom datum",
          "  ... which can apply its own logic to deciding whether the creation is allowed.",
          "The Capo trusts the minting delegate's enforcement of policy.",
          "The mint delegate can be signalled to validate multiple minting activities creating multiple delegated-datum UTxOs with separate seeds"
        ],
        impl: "mkTxnCreatingDelegatedDatum",
        mech: [
          "builds transactions including the minting delegate",
          "fails if the minting delegate is not included in the transaction",
          "fails if a CreatingDelegatedData activity isn't matched on recId by a data-controller MintingActivity",
          "TODO: TEST the mint delegate's multi-activity works with the generic CreatingDelegatedData activity",
          "TODO: the mint delegate's multi-activity can TODO work with the generic DeletingDelegatedData activity",
          "TODO: the mint delegate's multi-activity fails if the delegated-data controller isn't triggered with a matching MintingActivity(seed, recId)",
          "TODO: the mint delegate's multi-activity fails if the delegated-data controller has multiple activities for the same record id",
          "TODO: the data-controller policy fails if any of its creation activities doesn't have a matching output record",
          "TODO: the data-controller policy fails if any of the creation activities corresponds to an existing record-id input",
          "TODO: the data-controller policy fails if a deletion activity isn't matched with a BURN of the record's UUT"
        ]
      },
      "UpdatingDelegatedDatum: checks that a custom data element can be updated": {
        purpose: "guards appropriate updates to custom data elements",
        details: [
          "When updating a custom datum, the Capo must involve the spending delegate ",
          "  ... which can apply its own logic to deciding whether the update is allowed.",
          "The Capo trusts the spending delegate's enforcement of policy.",
          "The spend delegate can be signalled to validate multiple activities covering multiple utxos in a single transaction"
        ],
        mech: [
          "builds transactions including the spending-delegate",
          "TODO: TEST the capo fails if the spend delegate doesn't have an activity matching the record being updated",
          "TODO: TEST the capo fails if the spend delegate has multiple activities for any one record id",
          "TODO: TEST the spend delegate's multi-activity works only with the generic UpdatingDelegatedData activity",
          "TODO: TEST the spend delegate fails if any of its activities isn't matched by a spent/updated record",
          "TODO: TEST the spend delegate fails if the delegated data controller doesn't have an activity matching that record",
          "TODO: TEST the spend delegate fails if the delegated data controller has multiple activities for the record id",
          "TODO: TEST the data-controller policy fails if any of its activities isn't matched by a spent/updated record",
          "TODO: TEST the data-controller policy works only with its specific SpendingActivities/MintingActivities, not the generic activities used by the SpendDgt",
          "fails if the spending delegate is not included in the transaction",
          "TODO: builds transactions including the invariant spending-delegates",
          "TODO: fails if the expected invariant delegate is not included in the transaction"
        ]
      },
      "the charter token is always kept in the contract": {
        purpose: "so that the treasury contract is always in control of administrative changes",
        details: [
          "The charter token's spendability' is used as a signal of administrative authority for transactions wanting proof of authority",
          "... thus, other scripts don't need to express any of the authority policy, but can simply verify the token's presence in the txn",
          "It shouldn't ever be possible to interfere with its spendability, e.g. by bundling it in an inconvenient way with other assets",
          "By enforcing that the charter token is always returned to the contract, ",
          "... it has assurance of continuing ability to govern the next activity using that token",
          "Note: the charter mint can bind with any contract having suitable assurances, ",
          "... but we only focus on the case of binding to this treasury contract"
        ],
        mech: [
          "builds transactions with the charter token returned to the contract",
          "fails to spend the charter token if it's not returned to the contract",
          "TODO: ensures that the charter token is kept separate from other assets in the contract"
        ],
        requires: []
      },
      "can mint other tokens, on the authority of the charter's registered mintDgt- token": {
        purpose: "to simplify the logic of minting, while being sure of minting authority",
        details: [
          "the minting policy doesn't have to directly express detailed policy for authorization",
          "instead, it defers authority to the minting delegate, ",
          "... which can implement its own policy for minting",
          "... and by simply requiring that the mintDgt token is being spent.",
          "The minting delegate decides whether that's to be allowed."
        ],
        mech: [
          "can build transactions that mint non-'charter' tokens",
          "requires the charter-token to be spent as proof of authority",
          "fails if the charter-token is not returned to the treasury",
          "fails if the charter-token parameters are modified"
        ]
      },
      "can handle large transactions with reference scripts": {
        purpose: "to support large transactions and reduce per-transaction costs",
        details: [
          "Each Capo involves the leader contract, a short minting script, ",
          "  ... and a minting delegate.  Particularly in pre-production, these ",
          "  ... can easily add up to more than the basic 16kB transaction size limit.",
          "By creating reference scripts, the size budget overhead for later ",
          "  ... transactions is reduced, at cost of an initial deposit for each refScript. ",
          "Very small validators may get away without refScripts, but more complicated ",
          "  ... transactions will need them.  So creating them is recommended in all cases."
        ],
        mech: [
          "creates refScript for minter during charter creation",
          "creates refScript for capo during charter creation",
          "creates refScript for mintDgt during charter creation",
          "finds refScripts in the Capo's utxos",
          "txnAttachScriptOrRefScript(): uses scriptRefs in txns on request"
        ]
      }
    });
  }
}
__decorateClass$1([
  Activity.redeemer
], Capo.prototype, "activityUsingAuthority");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnMustUseCharterUtxo");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnUpdateCharterUtxo");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnKeepCharterToken");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnAddGovAuthorityTokenRef");
__decorateClass$1([
  Activity.redeemer
], Capo.prototype, "activityUpdatingCharter");
__decorateClass$1([
  Activity.redeemer
], Capo.prototype, "activitySpendingDelegatedDatum");
__decorateClass$1([
  datum
], Capo.prototype, "mkDatumScriptReference");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnAttachScriptOrRefScript");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnUpdateCharter");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnAddNamedDelegateAuthority");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnUpdatingMintDelegate");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnUpdatingSpendDelegate");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnAddingMintInvariant");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnAddingSpendInvariant");
__decorateClass$1([
  txn
], Capo.prototype, "mkTxnInstallingPolicyDelegate");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnMintingUuts");
__decorateClass$1([
  partialTxn
], Capo.prototype, "txnWillMintUuts");

class ReqtsPolicyDataBridge extends ContractDataBridge {
  static isAbstract = false;
  isAbstract = false;
  /**
   * Helper class for generating TxOutputDatum for the ***datum type (DelegateDatum)***
   * for this contract script. 
   */
  datum = new DelegateDatumHelper({ isMainnet: this.isMainnet });
  // datumAccessor/enum
  /**
   * this is the specific type of datum for the `BasicDelegate` script
   */
  DelegateDatum = this.datum;
  readDatum = (d) => {
    return this.reader.DelegateDatum(d);
  };
  /**
   * generates UplcData for the activity type (***DelegateActivity***) for the `BasicDelegate` script
   */
  activity = new DelegateActivityHelper({ isMainnet: this.isMainnet, isActivity: true });
  // activityAccessor/enum
  DelegateActivity = this.activity;
  reader = new ReqtsPolicyDataBridgeReader(this, this.isMainnet);
  /**
   * accessors for all the types defined in the `BasicDelegate` script
   * @remarks - these accessors are used to generate UplcData for each type
   */
  types = {
    /**
     * generates UplcData for the enum type ***DelegateDatum*** for the `BasicDelegate` script
     */
    DelegateDatum: new DelegateDatumHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateRole*** for the `BasicDelegate` script
     */
    DelegateRole: new DelegateRoleHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestActivity*** for the `BasicDelegate` script
     */
    ManifestActivity: new ManifestActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***CapoLifecycleActivity*** for the `BasicDelegate` script
     */
    CapoLifecycleActivity: new CapoLifecycleActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateLifecycleActivity*** for the `BasicDelegate` script
     */
    DelegateLifecycleActivity: new DelegateLifecycleActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***SpendingActivity*** for the `BasicDelegate` script
     */
    SpendingActivity: new SpendingActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***MintingActivity*** for the `BasicDelegate` script
     */
    MintingActivity: new MintingActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***BurningActivity*** for the `BasicDelegate` script
     */
    BurningActivity: new BurningActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***DelegateActivity*** for the `BasicDelegate` script
     */
    DelegateActivity: new DelegateActivityHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingDelegateAction*** for the `BasicDelegate` script
     */
    PendingDelegateAction: new PendingDelegateActionHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***ManifestEntryType*** for the `BasicDelegate` script
     */
    ManifestEntryType: new ManifestEntryTypeHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***PendingCharterChange*** for the `BasicDelegate` script
     */
    PendingCharterChange: new PendingCharterChangeHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***cctx_CharterInputType*** for the `BasicDelegate` script
     */
    cctx_CharterInputType: new cctx_CharterInputTypeHelper({ isMainnet: this.isMainnet }),
    /**
     * generates UplcData for the enum type ***AnyData*** for the `BasicDelegate` script
     */
    AnyData: (fields) => {
      return this["\u1C7A\u1C7AAnyDataCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***DelegationDetail*** for the `BasicDelegate` script
     */
    DelegationDetail: (fields) => {
      return this["\u1C7A\u1C7ADelegationDetailCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***ReqtData*** for the `BasicDelegate` script
     */
    ReqtData: (fields) => {
      return this["\u1C7A\u1C7AReqtDataCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***RelativeDelegateLink*** for the `BasicDelegate` script
     */
    RelativeDelegateLink: (fields) => {
      return this["\u1C7A\u1C7ARelativeDelegateLinkCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***PendingDelegateChange*** for the `BasicDelegate` script
     */
    PendingDelegateChange: (fields) => {
      return this["\u1C7A\u1C7APendingDelegateChangeCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***CapoManifestEntry*** for the `BasicDelegate` script
     */
    CapoManifestEntry: (fields) => {
      return this["\u1C7A\u1C7ACapoManifestEntryCast"].toUplcData(fields);
    },
    /**
     * generates UplcData for the enum type ***CapoCtx*** for the `BasicDelegate` script
     */
    CapoCtx: (fields) => {
      return this["\u1C7A\u1C7ACapoCtxCast"].toUplcData(fields);
    }
  };
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7AAnyDataCast" = makeCast(
    AnyDataSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ADelegationDetailCast" = makeCast(
    DelegationDetailSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7AReqtDataCast" = makeCast(
    ReqtDataSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ARelativeDelegateLinkCast" = makeCast(
    RelativeDelegateLinkSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7APendingDelegateChangeCast" = makeCast(
    PendingDelegateChangeSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ACapoManifestEntryCast" = makeCast(
    CapoManifestEntrySchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
  /**
              * uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7ACapoCtxCast" = makeCast(
    CapoCtxSchema,
    { isMainnet: true, unwrapSingleFieldEnumVariants: true }
  );
}
class ReqtsPolicyDataBridgeReader extends DataBridgeReaderClass {
  constructor(bridge, isMainnet) {
    super();
    this.bridge = bridge;
  }
  datum = (d) => {
    return this.DelegateDatum(d);
  };
  /**
      * reads UplcData *known to fit the **DelegateDatum*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateDatum(d) {
    const typeHelper = this.bridge.types.DelegateDatum;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateRole*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateRole(d) {
    const typeHelper = this.bridge.types.DelegateRole;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestActivity(d) {
    const typeHelper = this.bridge.types.ManifestActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **CapoLifecycleActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoLifecycleActivity(d) {
    const typeHelper = this.bridge.types.CapoLifecycleActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateLifecycleActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateLifecycleActivity(d) {
    const typeHelper = this.bridge.types.DelegateLifecycleActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **SpendingActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  SpendingActivity(d) {
    const typeHelper = this.bridge.types.SpendingActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **MintingActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  MintingActivity(d) {
    const typeHelper = this.bridge.types.MintingActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **BurningActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  BurningActivity(d) {
    const typeHelper = this.bridge.types.BurningActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **DelegateActivity*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegateActivity(d) {
    const typeHelper = this.bridge.types.DelegateActivity;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateAction*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateAction(d) {
    const typeHelper = this.bridge.types.PendingDelegateAction;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **ManifestEntryType*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ManifestEntryType(d) {
    const typeHelper = this.bridge.types.ManifestEntryType;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **PendingCharterChange*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingCharterChange(d) {
    const typeHelper = this.bridge.types.PendingCharterChange;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **cctx_CharterInputType*** enum type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the enum type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  cctx_CharterInputType(d) {
    const typeHelper = this.bridge.types.cctx_CharterInputType;
    const cast = typeHelper["\u1C7A\u1C7Acast"];
    return cast.fromUplcData(d);
  }
  /* enumReader helper */
  /**
      * reads UplcData *known to fit the **AnyData*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  AnyData(d) {
    const cast = this.bridge["\u1C7A\u1C7AAnyDataCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **DelegationDetail*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  DelegationDetail(d) {
    const cast = this.bridge["\u1C7A\u1C7ADelegationDetailCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **ReqtData*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  ReqtData(d) {
    const cast = this.bridge["\u1C7A\u1C7AReqtDataCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **RelativeDelegateLink*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  RelativeDelegateLink(d) {
    const cast = this.bridge["\u1C7A\u1C7ARelativeDelegateLinkCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **PendingDelegateChange*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  PendingDelegateChange(d) {
    const cast = this.bridge["\u1C7A\u1C7APendingDelegateChangeCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **CapoManifestEntry*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoManifestEntry(d) {
    const cast = this.bridge["\u1C7A\u1C7ACapoManifestEntryCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
  /**
      * reads UplcData *known to fit the **CapoCtx*** struct type,
      * for the BasicDelegate script.
      * #### Standard WARNING
      * 
      * This is a low-level data-reader for use in ***advanced development scenarios***.
      * 
      * Used correctly with data that matches the type, this reader
      * returns strongly-typed data - your code using these types will be safe.
      * 
      * On the other hand, reading non-matching data will not give you a valid result.  
      * It may throw an error, or it may throw no error, but return a value that
      * causes some error later on in your code, when you try to use it.
      */
  CapoCtx(d) {
    const cast = this.bridge["\u1C7A\u1C7ACapoCtxCast"];
    return cast.fromUplcData(d);
  }
  /* structReader helper */
}
class DelegateDatumHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateDatumSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  InlineTxOutputDatum for ***"ReqtsData::DelegateDatum.Cip68RefToken"***
   * @remarks - ***DelegateDatum$Cip68RefTokenLike*** is the same as the expanded field-types.
   */
  Cip68RefToken(fields) {
    const uplc = this.mkUplcData({
      Cip68RefToken: fields
    }, "ReqtsData::DelegateDatum.Cip68RefToken");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  InlineTxOutputDatum for ***"ReqtsData::DelegateDatum.IsDelegation"***
   * @remarks - ***DelegationDetailLike*** is the same as the expanded field-type.
   */
  IsDelegation(dd) {
    const uplc = this.mkUplcData({
      IsDelegation: dd
    }, "ReqtsData::DelegateDatum.IsDelegation");
    return makeInlineTxOutputDatum(uplc);
  }
  /**
   * generates  InlineTxOutputDatum for ***"ReqtsData::DelegateDatum.capoStoredData"***
   * @remarks - ***DelegateDatum$capoStoredDataLike*** is the same as the expanded field-types.
   */
  capoStoredData(fields) {
    const uplc = this.mkUplcData({
      capoStoredData: fields
    }, "ReqtsData::DelegateDatum.capoStoredData");
    return makeInlineTxOutputDatum(uplc);
  }
  /*multiFieldVariant enum accessor*/
}
class DelegateRoleHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class ManifestActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
}
class DelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class ManifestActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.retiringEntry"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  retiringEntry(key) {
    const uplc = this.mkUplcData({
      retiringEntry: key
    }, "CapoDelegateHelpers::ManifestActivity.retiringEntry");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.updatingEntry"***
   * @remarks - ***ManifestActivity$updatingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  updatingEntry(fields) {
    const uplc = this.mkUplcData({
      updatingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.updatingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.addingEntry"***
   * @remarks - ***ManifestActivity$addingEntryLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  addingEntry(fields) {
    const uplc = this.mkUplcData({
      addingEntry: fields
    }, "CapoDelegateHelpers::ManifestActivity.addingEntry");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.forkingThreadToken"***
   * @remarks - ***ManifestActivity$forkingThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  forkingThreadToken(fields) {
    const uplc = this.mkUplcData({
      forkingThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.forkingThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::ManifestActivity.burningThreadToken"***
   * @remarks - ***ManifestActivity$burningThreadTokenLike*** is the same as the expanded field-types.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  burningThreadToken(fields) {
    const uplc = this.mkUplcData({
      burningThreadToken: fields
    }, "CapoDelegateHelpers::ManifestActivity.burningThreadToken");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
}
class CapoLifecycleActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new DelegateRoleHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: false
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
}
class DelegateLifecycleActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateLifecycleActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  ReplacingMe(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        ReplacingMe: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        ReplacingMe: fields
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$ReplacingMe({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$ReplacingMe = impliedSeedActivityMaker(
    this,
    this.ReplacingMe
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Retiring() {
    const uplc = this.mkUplcData(
      { Retiring: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get ValidatingSettings() {
    const uplc = this.mkUplcData(
      { ValidatingSettings: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class SpendingActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    SpendingActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"ReqtsData::SpendingActivity.UpdatingRecord"***
   */
  UpdatingRecord(id) {
    const uplc = this.mkUplcData({
      UpdatingRecord: id
    }, "ReqtsData::SpendingActivity.UpdatingRecord");
    return uplc;
  }
}
class MintingActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    MintingActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
  * generates  UplcData for ***"ReqtsData::MintingActivity.CreatingRecord"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$CreatingRecord}` variant of this activity instead
  *
   */
  CreatingRecord(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      CreatingRecord: seedTxOutputId
    }, "ReqtsData::MintingActivity.CreatingRecord");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates  UplcData for ***"ReqtsData::MintingActivity.CreatingRecord"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$CreatingRecord`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
   */
  get $seeded$CreatingRecord() {
    return impliedSeedActivityMaker(this, this.CreatingRecord)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
}
class BurningActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    BurningActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"ReqtsData::BurningActivity.DeletingRecord"***
   */
  DeletingRecord(id) {
    const uplc = this.mkUplcData({
      DeletingRecord: id
    }, "ReqtsData::BurningActivity.DeletingRecord");
    return uplc;
  }
}
class ActivityDelegateRoleHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateRoleSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get MintDgt() {
    const uplc = this.mkUplcData(
      { MintDgt: {} },
      "CapoDelegateHelpers::DelegateRole.MintDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get SpendDgt() {
    const uplc = this.mkUplcData(
      { SpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.SpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.MintInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get MintInvariant() {
    const uplc = this.mkUplcData(
      { MintInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.MintInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.SpendInvariant"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get SpendInvariant() {
    const uplc = this.mkUplcData(
      { SpendInvariant: {} },
      "CapoDelegateHelpers::DelegateRole.SpendInvariant"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.DgDataPolicy"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DgDataPolicy(name) {
    const uplc = this.mkUplcData({
      DgDataPolicy: name
    }, "CapoDelegateHelpers::DelegateRole.DgDataPolicy");
    return uplc;
  }
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateRole.OtherNamedDgt"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  OtherNamedDgt(name) {
    const uplc = this.mkUplcData({
      OtherNamedDgt: name
    }, "CapoDelegateHelpers::DelegateRole.OtherNamedDgt");
    return uplc;
  }
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#6***
   */
  get BothMintAndSpendDgt() {
    const uplc = this.mkUplcData(
      { BothMintAndSpendDgt: {} },
      "CapoDelegateHelpers::DelegateRole.BothMintAndSpendDgt"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#7***
   */
  get HandledByCapoOnly() {
    const uplc = this.mkUplcData(
      { HandledByCapoOnly: {} },
      "CapoDelegateHelpers::DelegateRole.HandledByCapoOnly"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class CapoLifecycleActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    CapoLifecycleActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  CreatingDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.CreatingDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$CreatingDelegate = impliedSeedActivityMaker(
    this,
    this.CreatingDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get queuePendingChange() {
    const uplc = this.mkUplcData(
      { queuePendingChange: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.queuePendingChange"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * access to different variants of the ***nested DelegateRole*** type needed for ***CapoLifecycleActivity:removePendingChange***.
   */
  get removePendingChange() {
    const nestedAccessor = new ActivityDelegateRoleHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (role) => {
        return this.mkUplcData(
          { removePendingChange: role },
          "CapoDelegateHelpers::CapoLifecycleActivity.removePendingChange"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get commitPendingChanges() {
    const uplc = this.mkUplcData(
      { commitPendingChanges: {} },
      "CapoDelegateHelpers::CapoLifecycleActivity.commitPendingChanges"
    );
    return uplc;
  }
  forcingNewSpendDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewSpendDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewSpendDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewSpendDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewSpendDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewSpendDelegate
  );
  forcingNewMintDelegate(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        forcingNewMintDelegate: fields
      }, "CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::CapoLifecycleActivity.forcingNewMintDelegate"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$forcingNewMintDelegate({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$forcingNewMintDelegate = impliedSeedActivityMaker(
    this,
    this.forcingNewMintDelegate
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * access to different variants of the ***nested ManifestActivity*** type needed for ***CapoLifecycleActivity:updatingManifest***.
   */
  get updatingManifest() {
    const nestedAccessor = new ManifestActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { updatingManifest: activity },
          "CapoDelegateHelpers::CapoLifecycleActivity.updatingManifest"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
}
class DelegateLifecycleActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateLifecycleActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  ReplacingMe(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        ReplacingMe: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        ReplacingMe: fields
      }, "CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ReplacingMe"***, 
   * @param fields - \{ purpose: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$ReplacingMe({ purpose })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
  * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  $seeded$ReplacingMe = impliedSeedActivityMaker(
    this,
    this.ReplacingMe
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Retiring() {
    const uplc = this.mkUplcData(
      { Retiring: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.Retiring"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#2***
   */
  get ValidatingSettings() {
    const uplc = this.mkUplcData(
      { ValidatingSettings: {} },
      "CapoDelegateHelpers::DelegateLifecycleActivity.ValidatingSettings"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class SpendingActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    SpendingActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsData::SpendingActivity.UpdatingRecord"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  UpdatingRecord(id) {
    const uplc = this.mkUplcData({
      UpdatingRecord: id
    }, "ReqtsData::SpendingActivity.UpdatingRecord");
    return uplc;
  }
}
class MintingActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    MintingActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
  * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsData::MintingActivity.CreatingRecord"***, 
  * given a transaction-context (or direct arg) with a ***seed utxo*** 
  * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
  *  - to get a transaction context having the seed needed for this argument, 
  *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
  * - or see the {@link hasSeed} type for other ways to feed it with a TxOutputId.
  *  - in a context providing an implicit seed utxo, use 
  *    the `$seeded$CreatingRecord}` variant of this activity instead
  *
   * ##### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
  */
  CreatingRecord(thingWithSeed) {
    const seedTxOutputId = this.getSeed(thingWithSeed);
    const uplc = this.mkUplcData({
      CreatingRecord: seedTxOutputId
    }, "ReqtsData::MintingActivity.CreatingRecord");
    return uplc;
  }
  /*singleField/seeded enum variant*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsData::MintingActivity.CreatingRecord"***
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   * #### Usage
   * Access the activity-creator as a getter: `$seeded$CreatingRecord`
   *
   * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
   * `mkTxnCreateRecord({activity, ...})` method.
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  get $seeded$CreatingRecord() {
    return impliedSeedActivityMaker(this, this.CreatingRecord)();
  }
  /* coda: seeded helper in same singleField/seeded enum variant*/
}
class BurningActivityHelperNested extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    BurningActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsData::BurningActivity.DeletingRecord"***
  * @remarks
  * #### Nested activity: 
  * this is connected to a nested-activity wrapper, so the details are piped through 
  * the parent's uplc-encoder, producing a single uplc object with 
  * a complete wrapper for this inner activity detail.
   */
  DeletingRecord(id) {
    const uplc = this.mkUplcData({
      DeletingRecord: id
    }, "ReqtsData::BurningActivity.DeletingRecord");
    return uplc;
  }
}
class DelegateActivityHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    DelegateActivitySchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * access to different variants of the ***nested CapoLifecycleActivity*** type needed for ***DelegateActivity:CapoLifecycleActivities***.
   */
  get CapoLifecycleActivities() {
    const nestedAccessor = new CapoLifecycleActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { CapoLifecycleActivities: activity },
          "ReqtsPolicy::DelegateActivity.CapoLifecycleActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested DelegateLifecycleActivity*** type needed for ***DelegateActivity:DelegateLifecycleActivities***.
   */
  get DelegateLifecycleActivities() {
    const nestedAccessor = new DelegateLifecycleActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { DelegateLifecycleActivities: activity },
          "ReqtsPolicy::DelegateActivity.DelegateLifecycleActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested SpendingActivity*** type needed for ***DelegateActivity:SpendingActivities***.
   */
  get SpendingActivities() {
    const nestedAccessor = new SpendingActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { SpendingActivities: activity },
          "ReqtsPolicy::DelegateActivity.SpendingActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested MintingActivity*** type needed for ***DelegateActivity:MintingActivities***.
   */
  get MintingActivities() {
    const nestedAccessor = new MintingActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { MintingActivities: activity },
          "ReqtsPolicy::DelegateActivity.MintingActivities"
        );
      }
    );
    return nestedAccessor;
  }
  /* nested enum accessor */
  /**
   * access to different variants of the ***nested BurningActivity*** type needed for ***DelegateActivity:BurningActivities***.
   */
  get BurningActivities() {
    const nestedAccessor = new BurningActivityHelperNested({
      isMainnet: this.isMainnet,
      isNested: true,
      isActivity: true
    });
    nestedAccessor.mkDataVia(
      (activity) => {
        return this.mkUplcData(
          { BurningActivities: activity },
          "ReqtsPolicy::DelegateActivity.BurningActivities"
        );
      }
    );
    return nestedAccessor;
  }
  CreatingDelegatedData(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        CreatingDelegatedData: { seed: seedTxOutputId, ...filteredFields }
      }, "ReqtsPolicy::DelegateActivity.CreatingDelegatedData");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        CreatingDelegatedData: fields
      }, "ReqtsPolicy::DelegateActivity.CreatingDelegatedData");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsPolicy::DelegateActivity.CreatingDelegatedData"***, 
   * @param fields - \{ dataType: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$CreatingDelegatedData({ dataType })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$CreatingDelegatedData = impliedSeedActivityMaker(
    this,
    this.CreatingDelegatedData
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsPolicy::DelegateActivity.UpdatingDelegatedData"***
   * @remarks - ***DelegateActivity$UpdatingDelegatedDataLike*** is the same as the expanded field-types.
   */
  UpdatingDelegatedData(fields) {
    const uplc = this.mkUplcData({
      UpdatingDelegatedData: fields
    }, "ReqtsPolicy::DelegateActivity.UpdatingDelegatedData");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsPolicy::DelegateActivity.DeletingDelegatedData"***
   * @remarks - ***DelegateActivity$DeletingDelegatedDataLike*** is the same as the expanded field-types.
   */
  DeletingDelegatedData(fields) {
    const uplc = this.mkUplcData({
      DeletingDelegatedData: fields
    }, "ReqtsPolicy::DelegateActivity.DeletingDelegatedData");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates isActivity/redeemer wrapper with UplcData for ***"ReqtsPolicy::DelegateActivity.MultipleDelegateActivities"***
   */
  MultipleDelegateActivities(activities) {
    const uplc = this.mkUplcData({
      MultipleDelegateActivities: activities
    }, "ReqtsPolicy::DelegateActivity.MultipleDelegateActivities");
    return uplc;
  }
}
class PendingDelegateActionHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingDelegateActionSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  Add(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Add: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Add: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Add");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Add"***, 
   * @param fields - \{ purpose: string, idPrefix: string \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Add({ purpose, idPrefix })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Add = impliedSeedActivityMaker(
    this,
    this.Add
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
  /**
   * (property getter): UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Remove"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
   */
  get Remove() {
    const uplc = this.mkUplcData(
      { Remove: {} },
      "CapoDelegateHelpers::PendingDelegateAction.Remove"
    );
    return uplc;
  }
  Replace(seedOrUf, filteredFields) {
    if (filteredFields) {
      const seedTxOutputId = this.getSeed(seedOrUf);
      const uplc = this.mkUplcData({
        Replace: { seed: seedTxOutputId, ...filteredFields }
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    } else {
      const fields = seedOrUf;
      const uplc = this.mkUplcData({
        Replace: fields
      }, "CapoDelegateHelpers::PendingDelegateAction.Replace");
      return uplc;
    }
  }
  /*multiFieldVariant/seeded enum accessor*/
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingDelegateAction.Replace"***, 
   * @param fields - \{ purpose: string, idPrefix: string, replacesDgt: AssetClass | string | [string | MintingPolicyHash | number[], string | number[]] | \{mph: MintingPolicyHash | string | number[], tokenName: string | number[]\} \}
   * @remarks
  * ##### Seeded activity
  * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
   * ##### Activity contains implied seed
   * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
   * provided implicitly by a SeedActivity-supporting library function. 
   *
   * #### Usage
   *   1. Call the `$seeded$Replace({ purpose, idPrefix, replacesDgt })`
    *       method with the indicated (non-seed) details.
   *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
   *       `mkTxnCreateRecord({activity})` method.
   */
  $seeded$Replace = impliedSeedActivityMaker(
    this,
    this.Replace
  );
  /* coda: seeded helper in same multiFieldVariant/seeded */
}
class ManifestEntryTypeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    ManifestEntryTypeSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.NamedTokenRef"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get NamedTokenRef() {
    const uplc = this.mkUplcData(
      { NamedTokenRef: {} },
      "CapoHelpers::ManifestEntryType.NamedTokenRef"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DgDataPolicy"***
   * @remarks - ***ManifestEntryType$DgDataPolicyLike*** is the same as the expanded field-types.
   */
  DgDataPolicy(fields) {
    const uplc = this.mkUplcData({
      DgDataPolicy: fields
    }, "CapoHelpers::ManifestEntryType.DgDataPolicy");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoHelpers::ManifestEntryType.DelegateThreads"***
   * @remarks - ***ManifestEntryType$DelegateThreadsLike*** is the same as the expanded field-types.
   */
  DelegateThreads(fields) {
    const uplc = this.mkUplcData({
      DelegateThreads: fields
    }, "CapoHelpers::ManifestEntryType.DelegateThreads");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleMembership"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#3***
   */
  get MerkleMembership() {
    const uplc = this.mkUplcData(
      { MerkleMembership: {} },
      "CapoHelpers::ManifestEntryType.MerkleMembership"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * (property getter): UplcData for ***"CapoHelpers::ManifestEntryType.MerkleStateRoot"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#4***
   */
  get MerkleStateRoot() {
    const uplc = this.mkUplcData(
      { MerkleStateRoot: {} },
      "CapoHelpers::ManifestEntryType.MerkleStateRoot"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
}
class PendingCharterChangeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    PendingCharterChangeSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.delegateChange"***
   * @remarks - ***PendingDelegateChangeLike*** is the same as the expanded field-type.
   */
  delegateChange(change) {
    const uplc = this.mkUplcData({
      delegateChange: change
    }, "CapoDelegateHelpers::PendingCharterChange.delegateChange");
    return uplc;
  }
  /**
   * generates  UplcData for ***"CapoDelegateHelpers::PendingCharterChange.otherManifestChange"***
   * @remarks - ***PendingCharterChange$otherManifestChangeLike*** is the same as the expanded field-types.
   */
  otherManifestChange(fields) {
    const uplc = this.mkUplcData({
      otherManifestChange: fields
    }, "CapoDelegateHelpers::PendingCharterChange.otherManifestChange");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
}
class cctx_CharterInputTypeHelper extends EnumBridge {
  /*mkEnumHelperClass*/
  /**
          * @internal
          *  uses unicode U+1c7a - sorts to the end */
  "\u1C7A\u1C7Acast" = makeCast(
    cctx_CharterInputTypeSchema,
    { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
  );
  /**
   * (property getter): UplcData for ***"CapoHelpers::cctx_CharterInputType.Unk"***
   * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
   */
  get Unk() {
    const uplc = this.mkUplcData(
      { Unk: {} },
      "CapoHelpers::cctx_CharterInputType.Unk"
    );
    return uplc;
  }
  /* tagOnly variant accessor */
  /**
   * generates  UplcData for ***"CapoHelpers::cctx_CharterInputType.RefInput"***
   * @remarks - ***cctx_CharterInputType$RefInputLike*** is the same as the expanded field-types.
   */
  RefInput(fields) {
    const uplc = this.mkUplcData({
      RefInput: fields
    }, "CapoHelpers::cctx_CharterInputType.RefInput");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
  /**
   * generates  UplcData for ***"CapoHelpers::cctx_CharterInputType.Input"***
   * @remarks - ***cctx_CharterInputType$InputLike*** is the same as the expanded field-types.
   */
  Input(fields) {
    const uplc = this.mkUplcData({
      Input: fields
    }, "CapoHelpers::cctx_CharterInputType.Input");
    return uplc;
  }
  /*multiFieldVariant enum accessor*/
}
const AnyDataSchema = {
  "kind": "struct",
  "format": "map",
  "id": "__module__StellarHeliosHelpers__AnyData[]",
  "name": "AnyData",
  "fieldTypes": [
    {
      "name": "id",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "@id"
    },
    {
      "name": "type",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "tpe"
    }
  ]
};
const DelegationDetailSchema = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
  "name": "DelegationDetail",
  "fieldTypes": [
    {
      "name": "capoAddr",
      "type": {
        "kind": "internal",
        "name": "Address"
      }
    },
    {
      "name": "mph",
      "type": {
        "kind": "internal",
        "name": "MintingPolicyHash"
      }
    },
    {
      "name": "tn",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};
const ReqtDataSchema = {
  "kind": "struct",
  "format": "map",
  "id": "__module__ReqtsData__ReqtData[]",
  "name": "ReqtData",
  "fieldTypes": [
    {
      "name": "id",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "@id"
    },
    {
      "name": "type",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "tpe"
    },
    {
      "name": "category",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "cat"
    },
    {
      "name": "name",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "image",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "description",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "mustFreshenBy",
      "type": {
        "kind": "internal",
        "name": "Time"
      },
      "key": "exp"
    },
    {
      "name": "target",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "tgt"
    },
    {
      "name": "purpose",
      "type": {
        "kind": "internal",
        "name": "String"
      },
      "key": "prps"
    },
    {
      "name": "details",
      "type": {
        "kind": "list",
        "itemType": {
          "kind": "internal",
          "name": "String"
        }
      },
      "key": "dtls"
    },
    {
      "name": "mech",
      "type": {
        "kind": "list",
        "itemType": {
          "kind": "internal",
          "name": "String"
        }
      }
    },
    {
      "name": "impl",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "requires",
      "type": {
        "kind": "list",
        "itemType": {
          "kind": "internal",
          "name": "String"
        }
      }
    }
  ]
};
const DelegateDatumSchema = {
  "kind": "enum",
  "name": "DelegateDatum",
  "id": "__module__ReqtsData__DelegateDatum[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__ReqtsData__DelegateDatum[]__Cip68RefToken",
      "name": "Cip68RefToken",
      "fieldTypes": [
        {
          "name": "cip68meta",
          "type": {
            "kind": "struct",
            "format": "map",
            "id": "__module__StellarHeliosHelpers__AnyData[]",
            "name": "AnyData",
            "fieldTypes": [
              {
                "name": "id",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "@id"
              },
              {
                "name": "type",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "tpe"
              }
            ]
          }
        },
        {
          "name": "cip68version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "otherDetails",
          "type": {
            "kind": "internal",
            "name": "Data"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__ReqtsData__DelegateDatum[]__IsDelegation",
      "name": "IsDelegation",
      "fieldTypes": [
        {
          "name": "dd",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__DelegationDetail[]",
            "name": "DelegationDetail",
            "fieldTypes": [
              {
                "name": "capoAddr",
                "type": {
                  "kind": "internal",
                  "name": "Address"
                }
              },
              {
                "name": "mph",
                "type": {
                  "kind": "internal",
                  "name": "MintingPolicyHash"
                }
              },
              {
                "name": "tn",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__ReqtsData__DelegateDatum[]__capoStoredData",
      "name": "capoStoredData",
      "fieldTypes": [
        {
          "name": "data",
          "type": {
            "kind": "struct",
            "format": "map",
            "id": "__module__ReqtsData__ReqtData[]",
            "name": "ReqtData",
            "fieldTypes": [
              {
                "name": "id",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "@id"
              },
              {
                "name": "type",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "tpe"
              },
              {
                "name": "category",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "cat"
              },
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "image",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "description",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "mustFreshenBy",
                "type": {
                  "kind": "internal",
                  "name": "Time"
                },
                "key": "exp"
              },
              {
                "name": "target",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                },
                "key": "tgt"
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                },
                "key": "prps"
              },
              {
                "name": "details",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "String"
                  }
                },
                "key": "dtls"
              },
              {
                "name": "mech",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "String"
                  }
                }
              },
              {
                "name": "impl",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "requires",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "internal",
                    "name": "String"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "version",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        },
        {
          "name": "otherDetails",
          "type": {
            "kind": "internal",
            "name": "Data"
          }
        }
      ]
    }
  ]
};
const DelegateRoleSchema = {
  "kind": "enum",
  "name": "DelegateRole",
  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
      "name": "MintDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
      "name": "SpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
      "name": "MintInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
      "name": "SpendInvariant",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
      "name": "OtherNamedDgt",
      "fieldTypes": [
        {
          "name": "name",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
      "name": "BothMintAndSpendDgt",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
      "name": "HandledByCapoOnly",
      "fieldTypes": []
    }
  ]
};
const ManifestActivitySchema = {
  "kind": "enum",
  "name": "ManifestActivity",
  "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
      "name": "retiringEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
      "name": "updatingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
      "name": "addingEntry",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "tokenName",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
      "name": "forkingThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "newThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
      "name": "burningThreadToken",
      "fieldTypes": [
        {
          "name": "key",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "burnedThreadCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    }
  ]
};
const CapoLifecycleActivitySchema = {
  "kind": "enum",
  "name": "CapoLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
      "name": "CreatingDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
      "name": "queuePendingChange",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
      "name": "removePendingChange",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
      "name": "commitPendingChanges",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
      "name": "forcingNewSpendDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
      "name": "forcingNewMintDelegate",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
      "name": "updatingManifest",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ]
};
const DelegateLifecycleActivitySchema = {
  "kind": "enum",
  "name": "DelegateLifecycleActivity",
  "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
      "name": "ReplacingMe",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
      "name": "Retiring",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
      "name": "ValidatingSettings",
      "fieldTypes": []
    }
  ]
};
const SpendingActivitySchema = {
  "kind": "enum",
  "name": "SpendingActivity",
  "id": "__module__ReqtsData__SpendingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__ReqtsData__SpendingActivity[]__UpdatingRecord",
      "name": "UpdatingRecord",
      "fieldTypes": [
        {
          "name": "id",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
const MintingActivitySchema = {
  "kind": "enum",
  "name": "MintingActivity",
  "id": "__module__ReqtsData__MintingActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__ReqtsData__MintingActivity[]__CreatingRecord",
      "name": "CreatingRecord",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        }
      ]
    }
  ]
};
const BurningActivitySchema = {
  "kind": "enum",
  "name": "BurningActivity",
  "id": "__module__ReqtsData__BurningActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__ReqtsData__BurningActivity[]__DeletingRecord",
      "name": "DeletingRecord",
      "fieldTypes": [
        {
          "name": "id",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    }
  ]
};
const DelegateActivitySchema = {
  "kind": "enum",
  "name": "DelegateActivity",
  "id": "__module__ReqtsPolicy__DelegateActivity[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__CapoLifecycleActivities",
      "name": "CapoLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "CapoLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__CreatingDelegate",
                "name": "CreatingDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__queuePendingChange",
                "name": "queuePendingChange",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__removePendingChange",
                "name": "removePendingChange",
                "fieldTypes": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "enum",
                      "name": "DelegateRole",
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                          "name": "MintDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                          "name": "SpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                          "name": "MintInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                          "name": "SpendInvariant",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                          "name": "DgDataPolicy",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 5,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                          "name": "OtherNamedDgt",
                          "fieldTypes": [
                            {
                              "name": "name",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 6,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                          "name": "BothMintAndSpendDgt",
                          "fieldTypes": []
                        },
                        {
                          "kind": "variant",
                          "tag": 7,
                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                          "name": "HandledByCapoOnly",
                          "fieldTypes": []
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__commitPendingChanges",
                "name": "commitPendingChanges",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewSpendDelegate",
                "name": "forcingNewSpendDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__forcingNewMintDelegate",
                "name": "forcingNewMintDelegate",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__CapoLifecycleActivity[]__updatingManifest",
                "name": "updatingManifest",
                "fieldTypes": [
                  {
                    "name": "activity",
                    "type": {
                      "kind": "enum",
                      "name": "ManifestActivity",
                      "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                      "variantTypes": [
                        {
                          "kind": "variant",
                          "tag": 0,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                          "name": "retiringEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 1,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                          "name": "updatingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 2,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                          "name": "addingEntry",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 3,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                          "name": "forkingThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "newThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        },
                        {
                          "kind": "variant",
                          "tag": 4,
                          "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                          "name": "burningThreadToken",
                          "fieldTypes": [
                            {
                              "name": "key",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "burnedThreadCount",
                              "type": {
                                "kind": "internal",
                                "name": "Int"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__DelegateLifecycleActivities",
      "name": "DelegateLifecycleActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "DelegateLifecycleActivity",
            "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ReplacingMe",
                "name": "ReplacingMe",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  },
                  {
                    "name": "purpose",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__Retiring",
                "name": "Retiring",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateLifecycleActivity[]__ValidatingSettings",
                "name": "ValidatingSettings",
                "fieldTypes": []
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__SpendingActivities",
      "name": "SpendingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "SpendingActivity",
            "id": "__module__ReqtsData__SpendingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__ReqtsData__SpendingActivity[]__UpdatingRecord",
                "name": "UpdatingRecord",
                "fieldTypes": [
                  {
                    "name": "id",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__MintingActivities",
      "name": "MintingActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "MintingActivity",
            "id": "__module__ReqtsData__MintingActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__ReqtsData__MintingActivity[]__CreatingRecord",
                "name": "CreatingRecord",
                "fieldTypes": [
                  {
                    "name": "seed",
                    "type": {
                      "kind": "internal",
                      "name": "TxOutputId"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__BurningActivities",
      "name": "BurningActivities",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "BurningActivity",
            "id": "__module__ReqtsData__BurningActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__ReqtsData__BurningActivity[]__DeletingRecord",
                "name": "DeletingRecord",
                "fieldTypes": [
                  {
                    "name": "id",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 5,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__CreatingDelegatedData",
      "name": "CreatingDelegatedData",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 6,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__UpdatingDelegatedData",
      "name": "UpdatingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 7,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__DeletingDelegatedData",
      "name": "DeletingDelegatedData",
      "fieldTypes": [
        {
          "name": "dataType",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "recId",
          "type": {
            "kind": "internal",
            "name": "ByteArray"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 8,
      "id": "__module__ReqtsPolicy__DelegateActivity[]__MultipleDelegateActivities",
      "name": "MultipleDelegateActivities",
      "fieldTypes": [
        {
          "name": "activities",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "internal",
              "name": "Data"
            }
          }
        }
      ]
    }
  ]
};
const PendingDelegateActionSchema = {
  "kind": "enum",
  "name": "PendingDelegateAction",
  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
      "name": "Add",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
      "name": "Remove",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
      "name": "Replace",
      "fieldTypes": [
        {
          "name": "seed",
          "type": {
            "kind": "internal",
            "name": "TxOutputId"
          }
        },
        {
          "name": "purpose",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "replacesDgt",
          "type": {
            "kind": "internal",
            "name": "AssetClass"
          }
        }
      ]
    }
  ]
};
const RelativeDelegateLinkSchema = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
  "name": "RelativeDelegateLink",
  "fieldTypes": [
    {
      "name": "uutName",
      "type": {
        "kind": "internal",
        "name": "String"
      }
    },
    {
      "name": "delegateValidatorHash",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "ValidatorHash"
        }
      }
    },
    {
      "name": "config",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      }
    }
  ]
};
const PendingDelegateChangeSchema = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
  "name": "PendingDelegateChange",
  "fieldTypes": [
    {
      "name": "action",
      "type": {
        "kind": "enum",
        "name": "PendingDelegateAction",
        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
            "name": "Add",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
            "name": "Remove",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
            "name": "Replace",
            "fieldTypes": [
              {
                "name": "seed",
                "type": {
                  "kind": "internal",
                  "name": "TxOutputId"
                }
              },
              {
                "name": "purpose",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "replacesDgt",
                "type": {
                  "kind": "internal",
                  "name": "AssetClass"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "role",
      "type": {
        "kind": "enum",
        "name": "DelegateRole",
        "id": "__module__CapoDelegateHelpers__DelegateRole[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
            "name": "MintDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
            "name": "SpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
            "name": "MintInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
            "name": "SpendInvariant",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
            "name": "OtherNamedDgt",
            "fieldTypes": [
              {
                "name": "name",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 6,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
            "name": "BothMintAndSpendDgt",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 7,
            "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
            "name": "HandledByCapoOnly",
            "fieldTypes": []
          }
        ]
      }
    },
    {
      "name": "dgtLink",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "struct",
          "format": "list",
          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
          "name": "RelativeDelegateLink",
          "fieldTypes": [
            {
              "name": "uutName",
              "type": {
                "kind": "internal",
                "name": "String"
              }
            },
            {
              "name": "delegateValidatorHash",
              "type": {
                "kind": "option",
                "someType": {
                  "kind": "internal",
                  "name": "ValidatorHash"
                }
              }
            },
            {
              "name": "config",
              "type": {
                "kind": "internal",
                "name": "ByteArray"
              }
            }
          ]
        }
      }
    }
  ]
};
const ManifestEntryTypeSchema = {
  "kind": "enum",
  "name": "ManifestEntryType",
  "id": "__module__CapoHelpers__ManifestEntryType[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
      "name": "NamedTokenRef",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
      "name": "DgDataPolicy",
      "fieldTypes": [
        {
          "name": "policyLink",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
            "name": "RelativeDelegateLink",
            "fieldTypes": [
              {
                "name": "uutName",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "delegateValidatorHash",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                  }
                }
              },
              {
                "name": "config",
                "type": {
                  "kind": "internal",
                  "name": "ByteArray"
                }
              }
            ]
          }
        },
        {
          "name": "idPrefix",
          "type": {
            "kind": "internal",
            "name": "String"
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
      "name": "DelegateThreads",
      "fieldTypes": [
        {
          "name": "role",
          "type": {
            "kind": "enum",
            "name": "DelegateRole",
            "id": "__module__CapoDelegateHelpers__DelegateRole[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                "name": "MintDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                "name": "SpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                "name": "MintInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                "name": "SpendInvariant",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                "name": "DgDataPolicy",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 5,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                "name": "OtherNamedDgt",
                "fieldTypes": [
                  {
                    "name": "name",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 6,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                "name": "BothMintAndSpendDgt",
                "fieldTypes": []
              },
              {
                "kind": "variant",
                "tag": 7,
                "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                "name": "HandledByCapoOnly",
                "fieldTypes": []
              }
            ]
          }
        },
        {
          "name": "refCount",
          "type": {
            "kind": "internal",
            "name": "Int"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 3,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
      "name": "MerkleMembership",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 4,
      "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
      "name": "MerkleStateRoot",
      "fieldTypes": []
    }
  ]
};
const CapoManifestEntrySchema = {
  "kind": "struct",
  "format": "map",
  "id": "__module__CapoHelpers__CapoManifestEntry[]",
  "name": "CapoManifestEntry",
  "fieldTypes": [
    {
      "name": "entryType",
      "type": {
        "kind": "enum",
        "name": "ManifestEntryType",
        "id": "__module__CapoHelpers__ManifestEntryType[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
            "name": "NamedTokenRef",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
            "name": "DgDataPolicy",
            "fieldTypes": [
              {
                "name": "policyLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "idPrefix",
                "type": {
                  "kind": "internal",
                  "name": "String"
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
            "name": "DelegateThreads",
            "fieldTypes": [
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "refCount",
                "type": {
                  "kind": "internal",
                  "name": "Int"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
            "name": "MerkleMembership",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
            "name": "MerkleStateRoot",
            "fieldTypes": []
          }
        ]
      },
      "key": "tpe"
    },
    {
      "name": "tokenName",
      "type": {
        "kind": "internal",
        "name": "ByteArray"
      },
      "key": "tn"
    },
    {
      "name": "mph",
      "type": {
        "kind": "option",
        "someType": {
          "kind": "internal",
          "name": "MintingPolicyHash"
        }
      }
    }
  ]
};
const PendingCharterChangeSchema = {
  "kind": "enum",
  "name": "PendingCharterChange",
  "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
      "name": "delegateChange",
      "fieldTypes": [
        {
          "name": "change",
          "type": {
            "kind": "struct",
            "format": "list",
            "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
            "name": "PendingDelegateChange",
            "fieldTypes": [
              {
                "name": "action",
                "type": {
                  "kind": "enum",
                  "name": "PendingDelegateAction",
                  "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                      "name": "Add",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                      "name": "Remove",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                      "name": "Replace",
                      "fieldTypes": [
                        {
                          "name": "seed",
                          "type": {
                            "kind": "internal",
                            "name": "TxOutputId"
                          }
                        },
                        {
                          "name": "purpose",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "idPrefix",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        },
                        {
                          "name": "replacesDgt",
                          "type": {
                            "kind": "internal",
                            "name": "AssetClass"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "name": "role",
                "type": {
                  "kind": "enum",
                  "name": "DelegateRole",
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                  "variantTypes": [
                    {
                      "kind": "variant",
                      "tag": 0,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                      "name": "MintDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 1,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                      "name": "SpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 2,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                      "name": "MintInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 3,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                      "name": "SpendInvariant",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 4,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                      "name": "DgDataPolicy",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 5,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                      "name": "OtherNamedDgt",
                      "fieldTypes": [
                        {
                          "name": "name",
                          "type": {
                            "kind": "internal",
                            "name": "String"
                          }
                        }
                      ]
                    },
                    {
                      "kind": "variant",
                      "tag": 6,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                      "name": "BothMintAndSpendDgt",
                      "fieldTypes": []
                    },
                    {
                      "kind": "variant",
                      "tag": 7,
                      "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                      "name": "HandledByCapoOnly",
                      "fieldTypes": []
                    }
                  ]
                }
              },
              {
                "name": "dgtLink",
                "type": {
                  "kind": "option",
                  "someType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
      "name": "otherManifestChange",
      "fieldTypes": [
        {
          "name": "activity",
          "type": {
            "kind": "enum",
            "name": "ManifestActivity",
            "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
            "variantTypes": [
              {
                "kind": "variant",
                "tag": 0,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                "name": "retiringEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 1,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                "name": "updatingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 2,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                "name": "addingEntry",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "tokenName",
                    "type": {
                      "kind": "internal",
                      "name": "ByteArray"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 3,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                "name": "forkingThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "newThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              },
              {
                "kind": "variant",
                "tag": 4,
                "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                "name": "burningThreadToken",
                "fieldTypes": [
                  {
                    "name": "key",
                    "type": {
                      "kind": "internal",
                      "name": "String"
                    }
                  },
                  {
                    "name": "burnedThreadCount",
                    "type": {
                      "kind": "internal",
                      "name": "Int"
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "remainingDelegateValidations",
          "type": {
            "kind": "list",
            "itemType": {
              "kind": "enum",
              "name": "DelegateRole",
              "id": "__module__CapoDelegateHelpers__DelegateRole[]",
              "variantTypes": [
                {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                  "name": "MintDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 1,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                  "name": "SpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 2,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                  "name": "MintInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 3,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                  "name": "SpendInvariant",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 4,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                  "name": "DgDataPolicy",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 5,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                  "name": "OtherNamedDgt",
                  "fieldTypes": [
                    {
                      "name": "name",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    }
                  ]
                },
                {
                  "kind": "variant",
                  "tag": 6,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                  "name": "BothMintAndSpendDgt",
                  "fieldTypes": []
                },
                {
                  "kind": "variant",
                  "tag": 7,
                  "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                  "name": "HandledByCapoOnly",
                  "fieldTypes": []
                }
              ]
            }
          }
        }
      ]
    }
  ]
};
const cctx_CharterInputTypeSchema = {
  "kind": "enum",
  "name": "cctx_CharterInputType",
  "id": "__module__CapoHelpers__cctx_CharterInputType[]",
  "variantTypes": [
    {
      "kind": "variant",
      "tag": 0,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__Unk",
      "name": "Unk",
      "fieldTypes": []
    },
    {
      "kind": "variant",
      "tag": 1,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__RefInput",
      "name": "RefInput",
      "fieldTypes": [
        {
          "name": "datum",
          "type": {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
            "name": "CharterData",
            "fieldTypes": [
              {
                "name": "spendDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "spendInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "otherNamedDelegates",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "mintDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mintInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "govAuthorityLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manifest",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "map",
                    "id": "__module__CapoHelpers__CapoManifestEntry[]",
                    "name": "CapoManifestEntry",
                    "fieldTypes": [
                      {
                        "name": "entryType",
                        "type": {
                          "kind": "enum",
                          "name": "ManifestEntryType",
                          "id": "__module__CapoHelpers__ManifestEntryType[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                              "name": "NamedTokenRef",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                              "name": "DgDataPolicy",
                              "fieldTypes": [
                                {
                                  "name": "policyLink",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                    "name": "RelativeDelegateLink",
                                    "fieldTypes": [
                                      {
                                        "name": "uutName",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "delegateValidatorHash",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "internal",
                                            "name": "ValidatorHash"
                                          }
                                        }
                                      },
                                      {
                                        "name": "config",
                                        "type": {
                                          "kind": "internal",
                                          "name": "ByteArray"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "idPrefix",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 2,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                              "name": "DelegateThreads",
                              "fieldTypes": [
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 3,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                              "name": "MerkleMembership",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 4,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                              "name": "MerkleStateRoot",
                              "fieldTypes": []
                            }
                          ]
                        },
                        "key": "tpe"
                      },
                      {
                        "name": "tokenName",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        },
                        "key": "tn"
                      },
                      {
                        "name": "mph",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "MintingPolicyHash"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "pendingChanges",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "enum",
                    "name": "PendingCharterChange",
                    "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                    "variantTypes": [
                      {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                        "name": "delegateChange",
                        "fieldTypes": [
                          {
                            "name": "change",
                            "type": {
                              "kind": "struct",
                              "format": "list",
                              "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                              "name": "PendingDelegateChange",
                              "fieldTypes": [
                                {
                                  "name": "action",
                                  "type": {
                                    "kind": "enum",
                                    "name": "PendingDelegateAction",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                        "name": "Add",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                        "name": "Remove",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                        "name": "Replace",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "replacesDgt",
                                            "type": {
                                              "kind": "internal",
                                              "name": "AssetClass"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "dgtLink",
                                  "type": {
                                    "kind": "option",
                                    "someType": {
                                      "kind": "struct",
                                      "format": "list",
                                      "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                      "name": "RelativeDelegateLink",
                                      "fieldTypes": [
                                        {
                                          "name": "uutName",
                                          "type": {
                                            "kind": "internal",
                                            "name": "String"
                                          }
                                        },
                                        {
                                          "name": "delegateValidatorHash",
                                          "type": {
                                            "kind": "option",
                                            "someType": {
                                              "kind": "internal",
                                              "name": "ValidatorHash"
                                            }
                                          }
                                        },
                                        {
                                          "name": "config",
                                          "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                        "name": "otherManifestChange",
                        "fieldTypes": [
                          {
                            "name": "activity",
                            "type": {
                              "kind": "enum",
                              "name": "ManifestActivity",
                              "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                  "name": "retiringEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                  "name": "updatingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                  "name": "addingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                  "name": "forkingThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "newThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                  "name": "burningThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "burnedThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "name": "remainingDelegateValidations",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "enum",
                                "name": "DelegateRole",
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                    "name": "MintDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                    "name": "SpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                    "name": "MintInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                    "name": "SpendInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 5,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                    "name": "OtherNamedDgt",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 6,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                    "name": "BothMintAndSpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 7,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                    "name": "HandledByCapoOnly",
                                    "fieldTypes": []
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "name": "utxo",
          "type": {
            "kind": "internal",
            "name": "TxInput"
          }
        }
      ]
    },
    {
      "kind": "variant",
      "tag": 2,
      "id": "__module__CapoHelpers__cctx_CharterInputType[]__Input",
      "name": "Input",
      "fieldTypes": [
        {
          "name": "datum",
          "type": {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
            "name": "CharterData",
            "fieldTypes": [
              {
                "name": "spendDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "spendInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "otherNamedDelegates",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "mintDelegateLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mintInvariants",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                    "name": "RelativeDelegateLink",
                    "fieldTypes": [
                      {
                        "name": "uutName",
                        "type": {
                          "kind": "internal",
                          "name": "String"
                        }
                      },
                      {
                        "name": "delegateValidatorHash",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "ValidatorHash"
                          }
                        }
                      },
                      {
                        "name": "config",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "govAuthorityLink",
                "type": {
                  "kind": "struct",
                  "format": "list",
                  "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                  "name": "RelativeDelegateLink",
                  "fieldTypes": [
                    {
                      "name": "uutName",
                      "type": {
                        "kind": "internal",
                        "name": "String"
                      }
                    },
                    {
                      "name": "delegateValidatorHash",
                      "type": {
                        "kind": "option",
                        "someType": {
                          "kind": "internal",
                          "name": "ValidatorHash"
                        }
                      }
                    },
                    {
                      "name": "config",
                      "type": {
                        "kind": "internal",
                        "name": "ByteArray"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manifest",
                "type": {
                  "kind": "map",
                  "keyType": {
                    "kind": "internal",
                    "name": "String"
                  },
                  "valueType": {
                    "kind": "struct",
                    "format": "map",
                    "id": "__module__CapoHelpers__CapoManifestEntry[]",
                    "name": "CapoManifestEntry",
                    "fieldTypes": [
                      {
                        "name": "entryType",
                        "type": {
                          "kind": "enum",
                          "name": "ManifestEntryType",
                          "id": "__module__CapoHelpers__ManifestEntryType[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                              "name": "NamedTokenRef",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                              "name": "DgDataPolicy",
                              "fieldTypes": [
                                {
                                  "name": "policyLink",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                    "name": "RelativeDelegateLink",
                                    "fieldTypes": [
                                      {
                                        "name": "uutName",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "delegateValidatorHash",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "internal",
                                            "name": "ValidatorHash"
                                          }
                                        }
                                      },
                                      {
                                        "name": "config",
                                        "type": {
                                          "kind": "internal",
                                          "name": "ByteArray"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "idPrefix",
                                  "type": {
                                    "kind": "internal",
                                    "name": "String"
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 2,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                              "name": "DelegateThreads",
                              "fieldTypes": [
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "refCount",
                                  "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 3,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                              "name": "MerkleMembership",
                              "fieldTypes": []
                            },
                            {
                              "kind": "variant",
                              "tag": 4,
                              "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                              "name": "MerkleStateRoot",
                              "fieldTypes": []
                            }
                          ]
                        },
                        "key": "tpe"
                      },
                      {
                        "name": "tokenName",
                        "type": {
                          "kind": "internal",
                          "name": "ByteArray"
                        },
                        "key": "tn"
                      },
                      {
                        "name": "mph",
                        "type": {
                          "kind": "option",
                          "someType": {
                            "kind": "internal",
                            "name": "MintingPolicyHash"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "pendingChanges",
                "type": {
                  "kind": "list",
                  "itemType": {
                    "kind": "enum",
                    "name": "PendingCharterChange",
                    "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                    "variantTypes": [
                      {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                        "name": "delegateChange",
                        "fieldTypes": [
                          {
                            "name": "change",
                            "type": {
                              "kind": "struct",
                              "format": "list",
                              "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                              "name": "PendingDelegateChange",
                              "fieldTypes": [
                                {
                                  "name": "action",
                                  "type": {
                                    "kind": "enum",
                                    "name": "PendingDelegateAction",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                        "name": "Add",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                        "name": "Remove",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                        "name": "Replace",
                                        "fieldTypes": [
                                          {
                                            "name": "seed",
                                            "type": {
                                              "kind": "internal",
                                              "name": "TxOutputId"
                                            }
                                          },
                                          {
                                            "name": "purpose",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "idPrefix",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "replacesDgt",
                                            "type": {
                                              "kind": "internal",
                                              "name": "AssetClass"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "role",
                                  "type": {
                                    "kind": "enum",
                                    "name": "DelegateRole",
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                        "name": "MintDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                        "name": "SpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                        "name": "MintInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                        "name": "SpendInvariant",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                        "name": "DgDataPolicy",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 5,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                        "name": "OtherNamedDgt",
                                        "fieldTypes": [
                                          {
                                            "name": "name",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 6,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                        "name": "BothMintAndSpendDgt",
                                        "fieldTypes": []
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 7,
                                        "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                        "name": "HandledByCapoOnly",
                                        "fieldTypes": []
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "dgtLink",
                                  "type": {
                                    "kind": "option",
                                    "someType": {
                                      "kind": "struct",
                                      "format": "list",
                                      "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                      "name": "RelativeDelegateLink",
                                      "fieldTypes": [
                                        {
                                          "name": "uutName",
                                          "type": {
                                            "kind": "internal",
                                            "name": "String"
                                          }
                                        },
                                        {
                                          "name": "delegateValidatorHash",
                                          "type": {
                                            "kind": "option",
                                            "someType": {
                                              "kind": "internal",
                                              "name": "ValidatorHash"
                                            }
                                          }
                                        },
                                        {
                                          "name": "config",
                                          "type": {
                                            "kind": "internal",
                                            "name": "ByteArray"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                        "name": "otherManifestChange",
                        "fieldTypes": [
                          {
                            "name": "activity",
                            "type": {
                              "kind": "enum",
                              "name": "ManifestActivity",
                              "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                              "variantTypes": [
                                {
                                  "kind": "variant",
                                  "tag": 0,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                  "name": "retiringEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 1,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                  "name": "updatingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 2,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                  "name": "addingEntry",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "tokenName",
                                      "type": {
                                        "kind": "internal",
                                        "name": "ByteArray"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 3,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                  "name": "forkingThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "newThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                },
                                {
                                  "kind": "variant",
                                  "tag": 4,
                                  "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                  "name": "burningThreadToken",
                                  "fieldTypes": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "kind": "internal",
                                        "name": "String"
                                      }
                                    },
                                    {
                                      "name": "burnedThreadCount",
                                      "type": {
                                        "kind": "internal",
                                        "name": "Int"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          {
                            "name": "remainingDelegateValidations",
                            "type": {
                              "kind": "list",
                              "itemType": {
                                "kind": "enum",
                                "name": "DelegateRole",
                                "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                    "name": "MintDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                    "name": "SpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                    "name": "MintInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                    "name": "SpendInvariant",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 5,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                    "name": "OtherNamedDgt",
                                    "fieldTypes": [
                                      {
                                        "name": "name",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 6,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                    "name": "BothMintAndSpendDgt",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 7,
                                    "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                    "name": "HandledByCapoOnly",
                                    "fieldTypes": []
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "name": "utxo",
          "type": {
            "kind": "internal",
            "name": "TxInput"
          }
        }
      ]
    }
  ]
};
const CapoCtxSchema = {
  "kind": "struct",
  "format": "list",
  "id": "__module__CapoHelpers__CapoCtx[]",
  "name": "CapoCtx",
  "fieldTypes": [
    {
      "name": "mph",
      "type": {
        "kind": "internal",
        "name": "MintingPolicyHash"
      }
    },
    {
      "name": "charter",
      "type": {
        "kind": "enum",
        "name": "cctx_CharterInputType",
        "id": "__module__CapoHelpers__cctx_CharterInputType[]",
        "variantTypes": [
          {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__Unk",
            "name": "Unk",
            "fieldTypes": []
          },
          {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__RefInput",
            "name": "RefInput",
            "fieldTypes": [
              {
                "name": "datum",
                "type": {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
                  "name": "CharterData",
                  "fieldTypes": [
                    {
                      "name": "spendDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "spendInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "otherNamedDelegates",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "mintDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "mintInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "govAuthorityLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "manifest",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "map",
                          "id": "__module__CapoHelpers__CapoManifestEntry[]",
                          "name": "CapoManifestEntry",
                          "fieldTypes": [
                            {
                              "name": "entryType",
                              "type": {
                                "kind": "enum",
                                "name": "ManifestEntryType",
                                "id": "__module__CapoHelpers__ManifestEntryType[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                                    "name": "NamedTokenRef",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "policyLink",
                                        "type": {
                                          "kind": "struct",
                                          "format": "list",
                                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                          "name": "RelativeDelegateLink",
                                          "fieldTypes": [
                                            {
                                              "name": "uutName",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            },
                                            {
                                              "name": "delegateValidatorHash",
                                              "type": {
                                                "kind": "option",
                                                "someType": {
                                                  "kind": "internal",
                                                  "name": "ValidatorHash"
                                                }
                                              }
                                            },
                                            {
                                              "name": "config",
                                              "type": {
                                                "kind": "internal",
                                                "name": "ByteArray"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "idPrefix",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                                    "name": "DelegateThreads",
                                    "fieldTypes": [
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                                    "name": "MerkleMembership",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                                    "name": "MerkleStateRoot",
                                    "fieldTypes": []
                                  }
                                ]
                              },
                              "key": "tpe"
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              },
                              "key": "tn"
                            },
                            {
                              "name": "mph",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "MintingPolicyHash"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "pendingChanges",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "enum",
                          "name": "PendingCharterChange",
                          "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                              "name": "delegateChange",
                              "fieldTypes": [
                                {
                                  "name": "change",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                                    "name": "PendingDelegateChange",
                                    "fieldTypes": [
                                      {
                                        "name": "action",
                                        "type": {
                                          "kind": "enum",
                                          "name": "PendingDelegateAction",
                                          "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                              "name": "Add",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                              "name": "Remove",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                              "name": "Replace",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "replacesDgt",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "AssetClass"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "dgtLink",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                            "name": "RelativeDelegateLink",
                                            "fieldTypes": [
                                              {
                                                "name": "uutName",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "String"
                                                }
                                              },
                                              {
                                                "name": "delegateValidatorHash",
                                                "type": {
                                                  "kind": "option",
                                                  "someType": {
                                                    "kind": "internal",
                                                    "name": "ValidatorHash"
                                                  }
                                                }
                                              },
                                              {
                                                "name": "config",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "ByteArray"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                              "name": "otherManifestChange",
                              "fieldTypes": [
                                {
                                  "name": "activity",
                                  "type": {
                                    "kind": "enum",
                                    "name": "ManifestActivity",
                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                        "name": "retiringEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                        "name": "updatingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                        "name": "addingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                        "name": "forkingThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "newThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                        "name": "burningThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "burnedThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "remainingDelegateValidations",
                                  "type": {
                                    "kind": "list",
                                    "itemType": {
                                      "kind": "enum",
                                      "name": "DelegateRole",
                                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                      "variantTypes": [
                                        {
                                          "kind": "variant",
                                          "tag": 0,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                          "name": "MintDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 1,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                          "name": "SpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 2,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                          "name": "MintInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 3,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                          "name": "SpendInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 4,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                          "name": "DgDataPolicy",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 5,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                          "name": "OtherNamedDgt",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 6,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                          "name": "BothMintAndSpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 7,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                          "name": "HandledByCapoOnly",
                                          "fieldTypes": []
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "name": "utxo",
                "type": {
                  "kind": "internal",
                  "name": "TxInput"
                }
              }
            ]
          },
          {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoHelpers__cctx_CharterInputType[]__Input",
            "name": "Input",
            "fieldTypes": [
              {
                "name": "datum",
                "type": {
                  "kind": "variant",
                  "tag": 0,
                  "id": "__module__CapoHelpers__CapoDatum[]__CharterData",
                  "name": "CharterData",
                  "fieldTypes": [
                    {
                      "name": "spendDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "spendInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "otherNamedDelegates",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "mintDelegateLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "mintInvariants",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "struct",
                          "format": "list",
                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                          "name": "RelativeDelegateLink",
                          "fieldTypes": [
                            {
                              "name": "uutName",
                              "type": {
                                "kind": "internal",
                                "name": "String"
                              }
                            },
                            {
                              "name": "delegateValidatorHash",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "ValidatorHash"
                                }
                              }
                            },
                            {
                              "name": "config",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "govAuthorityLink",
                      "type": {
                        "kind": "struct",
                        "format": "list",
                        "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                        "name": "RelativeDelegateLink",
                        "fieldTypes": [
                          {
                            "name": "uutName",
                            "type": {
                              "kind": "internal",
                              "name": "String"
                            }
                          },
                          {
                            "name": "delegateValidatorHash",
                            "type": {
                              "kind": "option",
                              "someType": {
                                "kind": "internal",
                                "name": "ValidatorHash"
                              }
                            }
                          },
                          {
                            "name": "config",
                            "type": {
                              "kind": "internal",
                              "name": "ByteArray"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "manifest",
                      "type": {
                        "kind": "map",
                        "keyType": {
                          "kind": "internal",
                          "name": "String"
                        },
                        "valueType": {
                          "kind": "struct",
                          "format": "map",
                          "id": "__module__CapoHelpers__CapoManifestEntry[]",
                          "name": "CapoManifestEntry",
                          "fieldTypes": [
                            {
                              "name": "entryType",
                              "type": {
                                "kind": "enum",
                                "name": "ManifestEntryType",
                                "id": "__module__CapoHelpers__ManifestEntryType[]",
                                "variantTypes": [
                                  {
                                    "kind": "variant",
                                    "tag": 0,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__NamedTokenRef",
                                    "name": "NamedTokenRef",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 1,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DgDataPolicy",
                                    "name": "DgDataPolicy",
                                    "fieldTypes": [
                                      {
                                        "name": "policyLink",
                                        "type": {
                                          "kind": "struct",
                                          "format": "list",
                                          "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                          "name": "RelativeDelegateLink",
                                          "fieldTypes": [
                                            {
                                              "name": "uutName",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            },
                                            {
                                              "name": "delegateValidatorHash",
                                              "type": {
                                                "kind": "option",
                                                "someType": {
                                                  "kind": "internal",
                                                  "name": "ValidatorHash"
                                                }
                                              }
                                            },
                                            {
                                              "name": "config",
                                              "type": {
                                                "kind": "internal",
                                                "name": "ByteArray"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "idPrefix",
                                        "type": {
                                          "kind": "internal",
                                          "name": "String"
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 2,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__DelegateThreads",
                                    "name": "DelegateThreads",
                                    "fieldTypes": [
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "refCount",
                                        "type": {
                                          "kind": "internal",
                                          "name": "Int"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 3,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleMembership",
                                    "name": "MerkleMembership",
                                    "fieldTypes": []
                                  },
                                  {
                                    "kind": "variant",
                                    "tag": 4,
                                    "id": "__module__CapoHelpers__ManifestEntryType[]__MerkleStateRoot",
                                    "name": "MerkleStateRoot",
                                    "fieldTypes": []
                                  }
                                ]
                              },
                              "key": "tpe"
                            },
                            {
                              "name": "tokenName",
                              "type": {
                                "kind": "internal",
                                "name": "ByteArray"
                              },
                              "key": "tn"
                            },
                            {
                              "name": "mph",
                              "type": {
                                "kind": "option",
                                "someType": {
                                  "kind": "internal",
                                  "name": "MintingPolicyHash"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "pendingChanges",
                      "type": {
                        "kind": "list",
                        "itemType": {
                          "kind": "enum",
                          "name": "PendingCharterChange",
                          "id": "__module__CapoDelegateHelpers__PendingCharterChange[]",
                          "variantTypes": [
                            {
                              "kind": "variant",
                              "tag": 0,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__delegateChange",
                              "name": "delegateChange",
                              "fieldTypes": [
                                {
                                  "name": "change",
                                  "type": {
                                    "kind": "struct",
                                    "format": "list",
                                    "id": "__module__CapoDelegateHelpers__PendingDelegateChange[]",
                                    "name": "PendingDelegateChange",
                                    "fieldTypes": [
                                      {
                                        "name": "action",
                                        "type": {
                                          "kind": "enum",
                                          "name": "PendingDelegateAction",
                                          "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Add",
                                              "name": "Add",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Remove",
                                              "name": "Remove",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__PendingDelegateAction[]__Replace",
                                              "name": "Replace",
                                              "fieldTypes": [
                                                {
                                                  "name": "seed",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "TxOutputId"
                                                  }
                                                },
                                                {
                                                  "name": "purpose",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "idPrefix",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                },
                                                {
                                                  "name": "replacesDgt",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "AssetClass"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "role",
                                        "type": {
                                          "kind": "enum",
                                          "name": "DelegateRole",
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                          "variantTypes": [
                                            {
                                              "kind": "variant",
                                              "tag": 0,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                              "name": "MintDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 1,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                              "name": "SpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 2,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                              "name": "MintInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 3,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                              "name": "SpendInvariant",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 4,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                              "name": "DgDataPolicy",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 5,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                              "name": "OtherNamedDgt",
                                              "fieldTypes": [
                                                {
                                                  "name": "name",
                                                  "type": {
                                                    "kind": "internal",
                                                    "name": "String"
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 6,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                              "name": "BothMintAndSpendDgt",
                                              "fieldTypes": []
                                            },
                                            {
                                              "kind": "variant",
                                              "tag": 7,
                                              "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                              "name": "HandledByCapoOnly",
                                              "fieldTypes": []
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "dgtLink",
                                        "type": {
                                          "kind": "option",
                                          "someType": {
                                            "kind": "struct",
                                            "format": "list",
                                            "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
                                            "name": "RelativeDelegateLink",
                                            "fieldTypes": [
                                              {
                                                "name": "uutName",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "String"
                                                }
                                              },
                                              {
                                                "name": "delegateValidatorHash",
                                                "type": {
                                                  "kind": "option",
                                                  "someType": {
                                                    "kind": "internal",
                                                    "name": "ValidatorHash"
                                                  }
                                                }
                                              },
                                              {
                                                "name": "config",
                                                "type": {
                                                  "kind": "internal",
                                                  "name": "ByteArray"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            {
                              "kind": "variant",
                              "tag": 1,
                              "id": "__module__CapoDelegateHelpers__PendingCharterChange[]__otherManifestChange",
                              "name": "otherManifestChange",
                              "fieldTypes": [
                                {
                                  "name": "activity",
                                  "type": {
                                    "kind": "enum",
                                    "name": "ManifestActivity",
                                    "id": "__module__CapoDelegateHelpers__ManifestActivity[]",
                                    "variantTypes": [
                                      {
                                        "kind": "variant",
                                        "tag": 0,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__retiringEntry",
                                        "name": "retiringEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 1,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__updatingEntry",
                                        "name": "updatingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 2,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__addingEntry",
                                        "name": "addingEntry",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "tokenName",
                                            "type": {
                                              "kind": "internal",
                                              "name": "ByteArray"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 3,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__forkingThreadToken",
                                        "name": "forkingThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "newThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "kind": "variant",
                                        "tag": 4,
                                        "id": "__module__CapoDelegateHelpers__ManifestActivity[]__burningThreadToken",
                                        "name": "burningThreadToken",
                                        "fieldTypes": [
                                          {
                                            "name": "key",
                                            "type": {
                                              "kind": "internal",
                                              "name": "String"
                                            }
                                          },
                                          {
                                            "name": "burnedThreadCount",
                                            "type": {
                                              "kind": "internal",
                                              "name": "Int"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "remainingDelegateValidations",
                                  "type": {
                                    "kind": "list",
                                    "itemType": {
                                      "kind": "enum",
                                      "name": "DelegateRole",
                                      "id": "__module__CapoDelegateHelpers__DelegateRole[]",
                                      "variantTypes": [
                                        {
                                          "kind": "variant",
                                          "tag": 0,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintDgt",
                                          "name": "MintDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 1,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendDgt",
                                          "name": "SpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 2,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__MintInvariant",
                                          "name": "MintInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 3,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__SpendInvariant",
                                          "name": "SpendInvariant",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 4,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__DgDataPolicy",
                                          "name": "DgDataPolicy",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 5,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__OtherNamedDgt",
                                          "name": "OtherNamedDgt",
                                          "fieldTypes": [
                                            {
                                              "name": "name",
                                              "type": {
                                                "kind": "internal",
                                                "name": "String"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 6,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__BothMintAndSpendDgt",
                                          "name": "BothMintAndSpendDgt",
                                          "fieldTypes": []
                                        },
                                        {
                                          "kind": "variant",
                                          "tag": 7,
                                          "id": "__module__CapoDelegateHelpers__DelegateRole[]__HandledByCapoOnly",
                                          "name": "HandledByCapoOnly",
                                          "fieldTypes": []
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "name": "utxo",
                "type": {
                  "kind": "internal",
                  "name": "TxInput"
                }
              }
            ]
          }
        ]
      }
    }
  ]
};

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = __getOwnPropDesc(target, key) ;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (decorator(target, key, result) ) || result;
  if (result) __defProp(target, key, result);
  return result;
};
class ReqtsController extends DelegatedDataContract {
  dataBridgeClass = ReqtsPolicyDataBridge;
  // dgDatumHelper: DelegateDatumHelper  = new DelegateDatumHelper()
  get delegateName() {
    return "ReqtsPolicy";
  }
  get idPrefix() {
    return "reqt";
  }
  get recordTypeName() {
    return "reqt";
  }
  exampleData() {
    return {
      // id: textToBytes("reqt-1234"),
      // type: "reqt",
      category: "SCALE",
      name: "Supports multiple users",
      purpose: "testing & type example data",
      description: "Some descriptive requirement information to clarify the short name field",
      image: "ipfs://...",
      target: encodeUtf8("something-1234"),
      details: ["more info", "more more info"],
      mech: ["how it's designed", "how it's implemented"],
      impl: "some method or class name providing the described functionality",
      mustFreshenBy: 42n,
      requires: [
        /* no deps */
      ]
    };
  }
  // this method is only needed if the app needs a class for
  // implementing app-specific "business logic" on the data,
  // e.g. for presentation in a UI
  // mkDatumAdapter(): DelegatedDatumAdapter<any> {
  //     return new ReqtsAdapter(this);
  // }
  scriptBundle() {
    return ReqtsConcreteBundle.create();
  }
  activityCreatingReqt(seedFrom) {
    const seed = this.getSeed(seedFrom);
    return this.mkSeededMintingActivity("CreatingRecord", { seed });
  }
  activityUpdatingReqt(id) {
    return this.mkSpendingActivity("UpdatingRecord", { id });
  }
  activityCreatingRequirement(seedFrom) {
    const seed = this.getSeed(seedFrom);
    return this.mkSeededMintingActivity("CreatingRecord", { seed });
  }
  async txnCreatingReqt(tcx, reqt, initialStake) {
    const tcx2 = await this.txnGrantAuthority(
      tcx,
      this.activityCreatingRequirement(tcx)
    );
    console.log(
      "\u{1F3D2} starting reqt for TODO add `target` id and implement a parent object... "
    );
    console.log("    -- initial stake: ", initialStake);
    const initialStakeValue = makeValue(initialStake);
    const reqtOutput = makeTxOutput(
      this.capo.address,
      this.uh.mkMinTv(this.capo.mph, tcx2.state.uuts.reqt).add(initialStakeValue),
      await this.mkDgDatum(
        {
          ...reqt,
          id: tcx.state.uuts.reqt.toString()
        }
        /* !!!!!!! */
      )
    );
    console.log("reqt: ", dumpAny(reqtOutput));
    const tcx4 = tcx2.addOutput(reqtOutput);
    return tcx4;
  }
  async txnUpdateReqt(tcx, reqtDetails, newDepositIncrement, newDatum) {
    if (newDatum) {
      throw new Error(
        `todo: support for iterating the reqt details here`
      );
    }
    tcx.state.settingsInfo.utxo;
    const id = reqtDetails.data.id;
    const tcx2 = await this.txnGrantAuthority(
      tcx,
      this.activityUpdatingReqt(id)
    );
    reqtDetails.utxo.value.lovelace;
    console.log("    ---- deposit increment: ", newDepositIncrement);
    let newUtxoValue = (
      // todo: change to $DEMU
      reqtDetails.utxo.value.add(makeValue(newDepositIncrement))
    );
    let updates = {};
    console.log("\u{1F3D2} updating reqt vault... ");
    const tcx3 = tcx2.addOutput(
      makeTxOutput(
        this.capo.address,
        newUtxoValue,
        this.mkDgDatum(
          {
            ...reqtDetails.datum,
            ...updates
          }
          /* !!!!!!! */
        )
      )
    );
    return tcx3;
  }
  requirements() {
    return hasReqts({
      "stores requirements connected to any target object": {
        purpose: "to create clear expectations, applicable in a variety of contexts",
        details: [
          "each requirement is a unique object, with a unique identifier",
          "a set of requirements comprises all the core expectations of a target object",
          "the target object must be a valid object in the system",
          "the set of requirements created for any object is captured by cryptographic proof",
          "the lifecycle of a requirement is shared between its internal state and the object referencing it",
          "a requirement can be suggested, iterated and adopted, and is intended to be immutable once adopted",
          "further iteration after a requirement achieving 'adopted' status should be captured in a new requirement",
          "a requirement can be retired, with its history preserved",
          "different target objects can subscribe to a requirement, indicating a mutual expectation"
        ],
        mech: [
          "each requirement is a unique object, with a unique identifier"
        ],
        requires: [
          // "a person can create a requirement on a target object having a reqts relationship",
          // "the target object is consulted during requirement creation",
          // "the target object can verify the reqt relationship using code provided by the reqts module",
          // "the target object can provide additional validation related to the requirement",
          "the target object can gradually adopt further requirements as needed"
        ]
      },
      "the target object can gradually adopt further requirements as needed": {
        purpose: "honoring the lifecycle of the target object",
        details: [
          "every target object supporting requirements gets a data structure for organizing its requirements workflow",
          "the requirements workflow centers on transactional iteration and consensual adoption",
          "the target's reqts structure contains all the details needed for the lifecycle to work"
        ],
        mech: [
          "the target object has a reqts structure",
          "the reqts structure contains a current-reqts list, and a hash of that list",
          "the reqts structure contains a next-reqts list, and a hash of that list",
          "each next-reqts list can have a 'replaces' entry and/or a 'new' entry",
          "a 'replaces' entry with no 'new' entry indicates a requirement that is being retired",
          "a 'new' entry with no 'replaces' entry indicates a new requirement",
          "a 'replaces' entry with a 'new' entry indicates a requirement that is being replaced",
          "adopting the next-reqts list updates the current-reqts list",
          "adopting the next-reqts list requires that all the new requirements are finalized"
        ],
        requires: []
      }
    });
  }
}
__decorateClass([
  Activity.redeemer
], ReqtsController.prototype, "activityCreatingReqt");
__decorateClass([
  Activity.redeemer
], ReqtsController.prototype, "activityUpdatingReqt");
__decorateClass([
  Activity.redeemer
], ReqtsController.prototype, "activityCreatingRequirement");
__decorateClass([
  partialTxn
], ReqtsController.prototype, "txnUpdateReqt");

class CapoWithoutSettings extends Capo {
  // initSettingsAdapter() {
  //     return new NoSettingsAdapter(this);
  // }
  // scriptBundle() {
  //     return new CapoHeliosBundle();
  // }
  initDelegateRoles() {
    return {
      ...this.basicDelegateRoles(),
      reqts: defineRole("dgDataPolicy", ReqtsController, {})
    };
  }
  async reqtsController() {
    return this.getDgDataController("reqts");
  }
}

class WrappedDgDataContract extends DelegatedDataContract {
  usesWrappedData = true;
  mkDgDatum(record) {
    const unwrapped = record.unwrapData?.() || record;
    return super.mkDgDatum(unwrapped);
  }
  /**
   * converts a record from the essential
   * on-chain data structure to a higher-level application-specific
   * class representation.
   * @remarks
   * When a wrapper is used, the results of Capo's findDelegatedDataUtxos() method
   * will include the data: property having the unwrapped data, as well as
   * the dataWrapped property with the unwrapped version of the data.
   */
  wrapData(data) {
    return this.mkDataWrapper(data);
  }
  /**
   * builds a txn creating a record of this type in the data store
   * @remarks
   * The \{activity\} option can be a {@link SeedActivity} object provided by
   * `this.activity.MintingActivities.$seeded$‹activityName›` accessors/methods,
   * which creates a record id based on the (unique) spend of a seed value.
   * @public
   */
  async mkTxnCreateRecord(options) {
    const data = options.wrapped?.unwrapData() || options.data;
    return super.mkTxnCreateRecord({
      ...options,
      data
    });
  }
  /**
   * builds a txn updating a record of this type in the data store
   * @remarks
   * Use `this.activity.SpendingActivities.*` to access the available
   * types of update offered by the contract.
   */
  async mkTxnUpdateRecord(txnName, item, options, tcx) {
    const updatedFields = options.updatedFields;
    return super.mkTxnUpdateRecord(txnName, item, {
      ...options,
      updatedFields: {
        ...options.updatedWrapped?.unwrapData() || {},
        ...updatedFields
      }
    }, tcx);
  }
}

if (typeof Promise.withResolvers !== "function") {
  Promise.withResolvers = function() {
    let resolve, reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    return { promise, resolve, reject };
  };
}
function mkCancellablePromise(options) {
  const {
    wrap: wrapped,
    timeout,
    onTimeout
  } = options || {};
  const { promise, resolve, reject } = Promise.withResolvers();
  const cancel = () => {
    cpObj.status = "cancelled";
    if (timeoutId) clearTimeout(timeoutId);
    reject(new Error("cancelled"));
  };
  const wrappedResolve = (x) => {
    resolve(x);
    cpObj.status = "fulfilled";
  };
  const wrappedReject = (e) => {
    cpObj.status = "rejected";
    reject(e);
  };
  const cpObj = {
    promise,
    status: "pending",
    resolve: wrappedResolve,
    reject: wrappedReject,
    cancel
  };
  let timeoutId = timeout ? setTimeout(() => {
    if (cpObj.status !== "cancelled") {
      cpObj.status = "timeout";
      onTimeout?.();
      reject(new Error("timeout"));
    }
  }, timeout) : void 0;
  promise.then(() => {
    if (timeoutId) clearTimeout(timeoutId);
    cpObj.status = "fulfilled";
    timeoutId = void 0;
  }, () => {
  });
  if (wrapped) {
    wrapped.then(wrappedResolve, wrappedReject);
    return {
      promise,
      isWrapped: "wraps an input promise; no separate resolve/reject",
      status: "pending",
      cancel
    };
  }
  return cpObj;
}

let instanceId = 0;
class StateMachine {
  $state;
  $notifier;
  destroyed = false;
  _deferredSMAction;
  instanceId;
  constructor() {
    this.instanceId = instanceId++;
    this.$state = this.initialState;
    this.$notifier = new EventEmitter();
    Object.defineProperty(this, "$notifier", {
      enumerable: false
    });
    this.resetState();
    this.onStateEntered = this.onStateEntered.bind(this);
    this.$notifier.on("state:entered", this.onStateEntered);
  }
  get $deferredAction() {
    const deferredAction = this._deferredSMAction;
    if (!deferredAction) return "";
    const { type, displayStatus } = deferredAction;
    return displayStatus;
  }
  get $describeDeferredAction() {
    const deferredAction = this._deferredSMAction;
    if (!deferredAction) return "";
    const { type, displayStatus } = deferredAction;
    const nextThing = deferredAction?.targetState || deferredAction?.transitionName;
    return `(deferred ${type} '${nextThing}'): ${displayStatus}`;
  }
  get deferredTargetState() {
    const deferredAction = this._deferredSMAction;
    if (!deferredAction) return "";
    return deferredAction.targetState ?? this.transitionTable[deferredAction.transitionName].to;
  }
  /**
   * schedules a deferred transition to be performed when the promise resolves
   * @remarks
   * When there is a deferred transition, the state-machine will not accept other
   * transitions until the promise resolves one way or the other.
   *
   * A prime use-case for a deferred transition is for an onEntry hook to
   * defer (with setTimeout()) an unconditional next activity that will be
   * triggered by transitioning to the next state.
   * 
   * The displayStatus is used to provide transparency about the
   * implied "activity" of waiting to trigger the transition.  For instance,
   * a "doneCooking" state on a microwave might have a displayStatus of
   * "food is ready", with a 2m-deferred transition to "remindingReady" state,
   * where it beeps three times and returns to doneCooking for further
   * reminders (opening the door or pressing Cancel would interrupt and
   * prevent the deferred transition).
   * 
   * ### Return-type notes
   * Note that the returned type is not usable as result of an
   * onTransition hook or onEntry hook.  In onTransition, you can return
   * `this.$deferredState(...)`.  To use `$deferredTransition(...)` in onEntry,
   * just call it and don't return it.
   */
  $deferredTransition(tn, displayStatus, promiseOrDelay) {
    if (this._deferredSMAction) {
      this.log("existing action: ", this._deferredSMAction);
      throw new Error(
        `\u{1F353}\u{1F378} ${this.stateMachineName} already has a deferred action pending`
      );
    }
    let promise = promiseOrDelay;
    let delay = "";
    if ("number" == typeof promiseOrDelay) {
      delay = `@ +${promiseOrDelay}ms`;
      promise = this.delayed(promiseOrDelay);
    }
    const pAction = {
      type: "transition",
      transitionName: tn,
      displayStatus,
      promise
    };
    this._deferredSMAction = pAction;
    const p = promise.promise ?? promise;
    this.log(`
  -- scheduled! ${delay} \u23F0`);
    this.ignoringListenerErrors("changed", () => {
      this.$notifier.emit("changed", this);
    });
    p.then(
      () => {
        if (!this._deferredSMAction) {
          this.log(
            `    -- deferred transition ${tn} already triggered \u{1F44D}`
          );
          return;
        }
        if (this.destroyed) {
          this.log(" -- was destroyed; abandoning deferred transition");
        }
        this._deferredSMAction = void 0;
        this.log("    -- triggering deferred state transition");
        this.transition(tn);
      },
      () => {
        this._deferredSMAction = void 0;
      }
    );
    return pAction;
  }
  ignoringListenerErrors(event, cb) {
    try {
      cb();
    } catch (e) {
      this.log(`ignoring error in '${event}' listener`, e);
    }
  }
  /**
   * Schedules the completion of a deferred transition, placing the
   * state-machine into the target state.
   * @remarks
   * When the context of a particular state-transition has a natural
   * affinity to a delayed effect of triggering a state-change (or to
   * re-initiating the current-state), this method can be used to
   * indicate that deferred effect.
   * 
   * The displayStatus is used to provide transparency about the cause
   * and context of the delayed change-of-state.
   *
   * The deferred transition will be cancelled if the promise is
   * cancelled or fails.
   *
   * A key use-case for this is to allow a transition that can re-trigger
   * the onEntry effects of the current state (or another next state), while
   * remaining cosmetically or semantically in the original state, deferred
   * the deferred entry to the target state; the target state's onEntry
   * hook will then be called after the transition is actually finished.
   * 
   * Meanwhile, there is an explicit block on other state-transitions, and
   * there is an explicit current displayStatus providing strong transparency
   * about the deferred switch to the target state.
   *
   * As an example, a kitchen-timer feature on a microwave might (once it
   * finishes its countdown to zero and is done beeping), trigger a 
   * `$deferredState("idle", ...)` with a deferred displayStatus of "timer finished".  
   * It would then move to idle when the Cancel button is pressed.  This example 
   * differs from that in $deferredTransition(), with the assumption that the
   * kitchen timer doesn't try to bug the user about it being finished,
   * the way the "doneCooking" state example describes. 
   * 
   * ### Return-type notes
   * Note that this type is only valid as the return value of an onTransition
   * callback, and not as a return value of an onEntry hook.  In an onEntry
   * hook, call and don't return the $deferredTransition(...).
   */
  $deferredState(transitionName, targetState, displayStatus, promiseOrDelay) {
    if (this._deferredSMAction) {
      this.log("existing action: ", this._deferredSMAction);
      throw new Error(
        `\u{1F353}\u{1F378} ${this.stateMachineName} already has a deferred action`
      );
    }
    let promise = promiseOrDelay;
    if ("number" == typeof promiseOrDelay) {
      promise = this.delayed(promiseOrDelay);
    }
    const pAction = {
      type: "state",
      promise,
      displayStatus,
      transitionName,
      targetState
    };
    this._deferredSMAction = pAction;
    const p = promise.promise ?? promise;
    p.catch(
      () => {
        this.log(
          `promise for deferred action cancelled or failed
  ... NOT committing state -> ${targetState}`
        );
        this._deferredSMAction = void 0;
      }
    );
    return pAction;
  }
  async delayed(delay) {
    return new Promise((res) => {
      setTimeout(res, delay);
    });
  }
  onStateEntered(sm, state) {
    const entryHook = this.onEntry[state];
    if (entryHook) {
      entryHook.call(this);
    }
  }
  destroy() {
    this.$notifier.emit("destroyed", this);
    this.$notifier.removeAllListeners();
    this.$notifier = "destroyed";
    this.destroyed = true;
  }
  notDestroyed() {
    if (this.destroyed) {
      throw new Error(
        `\u{1F353}\u{1F378} ${this.stateMachineName} has already  been destroyed`
      );
    }
  }
  log(...args) {
    const [msg, ...rest] = args;
    const deferredAction = this._deferredSMAction;
    let deferredStatus = deferredAction?.displayStatus;
    let deferredType = deferredAction?.type;
    let nextThing = deferredAction?.targetState || deferredAction?.transitionName;
    deferredStatus = deferredStatus ? `(deferred ${deferredType} ${nextThing}: ${deferredStatus})` : "";
    console.log(
      `\u{1F353}\u{1F378} ${this.instanceId} ${this.stateMachineName}
    @${this.$state} ${deferredStatus}: ` + msg,
      ...rest
    );
  }
  onEntry = {};
  get stateMachineName() {
    return this.constructor.name;
  }
  get initialState() {
    throw new Error("abstract");
  }
  /**
   * creates a transition function for the indicated transition name
   * @remarks
   * the prefix brings this most common method to the top for autocomplete
   *
   * the resulting callback will try to transition the state-machine
   * but can fail if the transition table doesn't permit the named transition
   * at the time of the call.
   * @public
   */
  $mkTransition(tn) {
    return this.mkTransition(tn);
  }
  /**
   * creates a transition function for the indicated transition name
   * @remarks
   * The resulting callback will try to transition the state-machine
   * but can fail if the transition table doesn't permit the named transition
   * at the time of the call.
   * @public
   */
  mkTransition(tn) {
    return this.transition.bind(this, tn);
  }
  /**
   * returns true if the state-machine can currently use the named transition
   * @public
   */
  $canTransition(tn) {
    if (this._deferredSMAction) return false;
    return !!this.transitionTable[this.$state][tn];
  }
  /**
   * transitions the state-machine through the indicated tx name
   * @remarks
   * can fail if the transition table doesn't permit the named transition
   * while in the current state.
   *
   * the prefix brings this most common method to the top for autocomplete
   * @public
   */
  $transition(tn) {
    return this.transition(tn);
  }
  /**
   * transitions the state-machine through the indicated tx name
   * @public
   */
  transition(tn) {
    const currentState = this.$state;
    const foundTransition = this.transitionTable[currentState][tn];
    if (!foundTransition) {
      debugger;
      throw new Error(
        ` \u{1F353}\u{1F378} ${this.stateMachineName}: invalid transition '${tn}' from state=${currentState}`
      );
    }
    const { to: targetState, onTransition } = foundTransition;
    if (this._deferredSMAction) {
      if (targetState == this.deferredTargetState) {
        this._deferredSMAction = void 0;
      } else {
        this.log(" -- can't transition with deferred action : ( ");
        throw new Error(
          `${this.stateMachineName} can't do transition ${tn} with deferred action '${this.$describeDeferredAction}' pending`
        );
      }
    }
    let error = "";
    let nextState;
    try {
      nextState = onTransition?.() || targetState;
    } catch (e) {
      nextState = false;
      error = e.message || e;
    }
    return this.finishTransition(tn, targetState, currentState, nextState, error);
  }
  finishTransition(tn, targetState, currentState, nextState, error) {
    if (this.destroyed) return void 0;
    let wasCancelled = false;
    if (!error) this.ignoringListenerErrors("transition", () => {
      function mayCancelTransition(reason) {
        wasCancelled = true;
        error = reason || "\u2039unknown reason\u203A";
        nextState = false;
      }
      this.$notifier.emit("transition", this, {
        from: currentState,
        transition: tn,
        to: targetState,
        cancelTransition: mayCancelTransition
      });
    });
    if (nextState == false) {
      this.log(
        `transition canceled: ${currentState}: ${tn} XXX ${targetState}` + (wasCancelled ? `
 -- cancelled by 'transition' listener` : "") + (!!error ? ` -- ${error}` : "") + `
  -- staying in state ${currentState}`
      );
      return;
    }
    if (nextState && "string" != typeof nextState) {
      const ns = nextState;
      const {
        displayStatus,
        promise,
        targetState: targetState2,
        type
      } = ns;
      this._deferredSMAction = ns;
      const p = promise.promise ?? promise;
      p.then(
        () => {
          if (this._deferredSMAction) {
            this._deferredSMAction = void 0;
            this.log(
              `    --  commit deferred ${type} -> ${targetState2}`
            );
            return this.finishTransition(
              tn,
              targetState2,
              currentState,
              targetState2,
              ""
            );
          }
        }
      );
    } else if (this.$state != currentState) {
      const trampolineState = this.$state;
      this.log(
        `  -- trampolined ^^ ${currentState}: ${tn} \u{1F3D2} -> ~~${nextState}~~  \u{1F945} ${trampolineState} during ${tn} `
      );
    } else {
      nextState = nextState || targetState;
      const stateRedirect = nextState == targetState ? "" : `~~${targetState}~~  -> `;
      this.log(` -- ${tn} \u{1F3D2} -> ${stateRedirect} \u{1F945} ${nextState}`);
      this.$state = nextState || targetState;
      this.ignoringListenerErrors("changed", () => {
        this.$notifier.emit("changed", this);
      });
      return new Promise((resolve) => {
        resolve();
        this.ignoringListenerErrors("state:entered", () => {
          this.$notifier.emit("state:entered", this, this.$state);
        });
      });
    }
  }
}

const gradualBackoff = 1.27;
const firmBackoff = (
  /* ~1.61 */
  gradualBackoff * gradualBackoff
);
const noTransitionsExcept$1 = {
  submitted: null,
  confirmed: null,
  unconfirmed: null,
  hardConfirm: null,
  failed: null,
  notOk: null,
  timeout: null,
  txExpired: null,
  reconfirm: null,
  otherSubmitterProblem: null
};
class TxSubmitMgr extends StateMachine {
  name;
  // name of the submitter
  submitter;
  txd;
  // state: SubmissionStates;
  get $$statusSummary() {
    const {
      totalSubmissionAttempts,
      totalSubmissionSuccesses,
      totalConfirmationAttempts,
      totalConfirmationSuccesses,
      confirmationFailures,
      confirmations,
      expirationDetected,
      pendingActivity,
      signsOfServiceLife,
      battleDetected: slotBattleDetected,
      isBadTx,
      nextActivityStartTime
    } = this.$mgrState;
    const { $describeDeferredAction: deferredAction } = this;
    return {
      status: this.$state,
      currentActivity: pendingActivity,
      deferredAction,
      confirmations,
      hasConfirmationProblems: confirmationFailures > 1,
      expirationDetected,
      isHealthy: signsOfServiceLife > 2,
      isBadTx,
      recovering: slotBattleDetected,
      nextActivityStartTime,
      stats: {
        totalSubmissionAttempts,
        totalSubmissionSuccesses,
        totalConfirmationAttempts,
        totalConfirmationSuccesses,
        confirmationFailures,
        signsOfServiceLife
      }
    };
  }
  $mgrState;
  setup;
  submitIssue = void 0;
  pending;
  retryIntervals;
  constructor(args) {
    super();
    const { name, txd, submitter, setup, retryIntervals = {} } = args;
    this.retryIntervals = {
      reconfirm: 1e4,
      submit: 5e3,
      confirm: 7e3,
      startup: 0,
      maximum: 60 * 1e3,
      ...retryIntervals
    };
    this.name = name;
    this.txd = txd;
    this.submitter = submitter;
    this.setup = setup;
    this.pending = void 0;
    this.resetState();
    this.notSubmitted = this.notSubmitted.bind(this);
    this.notConfirmed = this.notConfirmed.bind(this);
    this.delayed(this.retryIntervals.startup).then(() => {
      this.trySubmit().catch((e) => {
        console.log("submitter startup error", e);
      });
    });
  }
  destroy() {
    this.pending?.cancel();
    super.destroy();
  }
  get networkParams() {
    return this.setup.networkParams;
  }
  get network() {
    return this.setup.network;
  }
  get stateMachineName() {
    return `submitMgr '${this.txId}' via ${this.name}`;
  }
  get txDescription() {
    return this.txd.description;
  }
  /**
   * the locally-unique id-ish label of the tx description
   * @remarks
   * see {@link txId} for the actual txId available after the tx is built
   */
  get id() {
    return this.txd.id;
  }
  get txId() {
    return this.txd.txId;
  }
  get tx() {
    return this.txd.tx;
  }
  wasUpdated() {
    this.$mgrState = {
      ...this.$mgrState
    };
  }
  get initialState() {
    return "submitting";
  }
  resetState() {
    this.$mgrState = {
      pendingActivity: "none",
      lastSubmissionAttempt: void 0,
      // nextSubmissionAttempt: undefined,
      expirationDetected: false,
      failedSubmissions: 0,
      successfulSubmitAt: void 0,
      confirmations: 0,
      firstConfirmedAt: void 0,
      lastConfirmedAt: void 0,
      confirmationFailures: 0,
      lastConfirmationFailureAt: void 0,
      // nextConfirmAttempt: Date.now(),
      serviceFailures: 0,
      signsOfServiceLife: 0,
      battleDetected: false,
      totalSubmissionAttempts: 0,
      totalSubmissionSuccesses: 0,
      totalConfirmationAttempts: 0,
      totalConfirmationSuccesses: 0,
      nextActivityStartTime: void 0
    };
  }
  otherSubmitterProblem() {
    this.transition("otherSubmitterProblem");
  }
  // whenAvailable() {
  //     if (this.pending) {
  //         return this.pending.promise
  //     }
  //     return Promise.resolve()
  // }
  //
  nothingPendingAllowed(that) {
    if (this.pending) {
      debugger;
      throw new Error(
        `submitter ${this.name}: can't start activity '${that}' 
  ...while activity '${this.pending.activity}' is pending`
      );
    }
  }
  async pendingActivity(activityName, p) {
    this.nothingPendingAllowed(activityName);
    const pending = mkCancellablePromise({
      wrap: p,
      timeout: 3e3,
      onTimeout: () => {
        if (this.destroyed) return;
        this.transition("timeout");
      }
    });
    this.pending = {
      activity: activityName,
      ...pending
    };
    this.$mgrState.pendingActivity = activityName;
    this.wasUpdated();
    return pending.promise.then(
      (x) => {
        debugger;
        this.done(activityName);
        return x;
      },
      (e) => {
        this.done(activityName);
        if (e.message == "timeout" || e.message == "cancelled") {
          this.pending = void 0;
          return void 0;
        }
        console.debug(`  -- activity ${activityName} failed`);
        debugger;
        throw e;
      }
    );
  }
  done(activityName) {
    if (this.pending && this.pending.activity == activityName) {
      this.pending.status;
      this.pending.cancel();
      this.pending = void 0;
      this.$mgrState.pendingActivity = "";
    } else {
      console.warn(
        `submitter ${this.name}: done() called for ${activityName} but the pending activity is ${this.pending?.activity ?? "\u2039none\u203A"}`
      );
      throw new Error("invalid done() call");
    }
  }
  async tryConfirm() {
    this.$mgrState.lastConfirmAttempt = Date.now();
    try {
      this.$mgrState.totalConfirmationAttempts++;
      const result = await this.pendingActivity(
        "confirming",
        this.confirmTx()
      ).catch(() => {
        debugger;
        this.notConfirmed();
      }).then((txOk) => {
        if (!!txOk) {
          this.log("  ---- confirmed ok", txOk);
          this.transition("confirmed");
          return txOk;
        } else {
          this.notConfirmed();
          return;
        }
      });
    } catch (e) {
      console.error("unhandled confirmation error?", e);
      debugger;
    }
  }
  didConfirm() {
    this.$mgrState.confirmations++;
    this.$mgrState.totalConfirmationSuccesses++;
    this.$mgrState.signsOfServiceLife++;
    if (!this.$mgrState.firstConfirmedAt) {
      this.$mgrState.firstConfirmedAt = Date.now();
    }
    this.$mgrState.lastConfirmedAt = Date.now();
  }
  notConfirmed(problem) {
    const { stack, message, ...details } = problem || {};
    console.log(`submitter ${this.name}: not confirmed:`, {
      message,
      ...details
    });
    this.transition("notOk");
  }
  scheduleAnotherConfirmation(transitionName, reason, backoff = gradualBackoff) {
    const r = reason ? `(${reason}) ` : "";
    const { confirmationFailures } = this.$mgrState;
    const retryInterval = this.gradualBackoff(
      this.retryIntervals.confirm,
      confirmationFailures,
      backoff
    );
    this.nextStartTime(retryInterval);
    this.ignoringListenerErrors("backoff", () => {
      this.$notifier.emit("backoff", this, retryInterval, "confirming");
    });
    return this.$deferredState(
      transitionName,
      "confirming",
      `${r}will confirm again`,
      retryInterval
    );
  }
  async trySubmit() {
    this.$mgrState.lastSubmissionAttempt = Date.now();
    this.$mgrState.totalSubmissionAttempts++;
    const result = this.pendingActivity(
      "submitting",
      this.doSubmit()
      // this.submitter.submitTx(this.tx)
    ).catch(this.notSubmitted);
    try {
      if (await result) {
        this.$mgrState.totalSubmissionSuccesses++;
        this.transition("submitted");
      }
    } catch (e) {
      console.error("unhandled submit error?", e);
      debugger;
    }
  }
  async inputUtxosAreResolvable() {
    const inputTxns = this.txd.tcx.inputs.map((input) => input.id.txId);
    if (!this.submitter?.getTx) {
      throw new Error(`submitter ${this.name} has no getTx method`);
    }
    return Promise.all(inputTxns.map((txId) => {
      return this.submitter.getTx(txId);
    })).then((txns) => {
      return txns.every((tx) => !!tx);
    }).catch((e) => {
      return false;
    });
  }
  async notSubmitted(problem) {
    const { stack, message, ...details } = problem;
    this.log(`submission failed with this error:`, {
      message,
      ...details
    });
    if (this.isExpiryError(problem)) {
      if (this.isTxExpired(this.tx)) {
        return this.transition("txExpired");
      }
      this.submitIssue = "wait for validity period";
      return this.transition("notOk");
    }
    if (this.isUnknownUtxoError(problem)) {
      if (await this.confirmTx()) {
        return this.transition("confirmed");
      }
      if (await this.inputUtxosAreResolvable()) {
        this.submitIssue = "input utxo already spent";
        this.$mgrState.isBadTx = problem;
      } else {
        this.submitIssue = "wait for available utxo";
      }
      return this.transition("notOk");
    }
    this.log(
      `unknown error: ${message}
  - details: `,
      details,
      "\n\n   ... if this error is really not an expired tx or not-yet-valid, \n    ... then the tx is almost certainly invalid and will never work"
    );
    this.$mgrState.isBadTx = problem;
    this.transition("failed");
  }
  scheduleAnotherSubmit(transitionName, displayStatus, backoff = gradualBackoff) {
    this.$mgrState.failedSubmissions;
    const retryInterval = this.gradualBackoff(
      this.retryIntervals.submit,
      this.$mgrState.failedSubmissions,
      backoff
    );
    this.$mgrState.lastSubmissionAttempt = Date.now();
    this.nextStartTime(retryInterval);
    this.ignoringListenerErrors("backoff", () => {
      this.$notifier.emit("backoff", this, retryInterval, "submitting");
    });
    return this.$deferredState(
      transitionName,
      "submitting",
      `(${displayStatus}) - will resubmit`,
      retryInterval
    );
  }
  nextStartTime(retryInterval) {
    const now = Date.now();
    this.$mgrState.nextActivityStartTime = now + retryInterval;
    this.ignoringListenerErrors("changed", () => {
      this.$notifier.emit("changed", this);
    });
  }
  txExpired() {
    this.$mgrState.expirationDetected = true;
    this.$mgrState.signsOfServiceLife++;
  }
  resetConfirmationStats() {
    this.$mgrState.confirmations = 0;
    this.$mgrState.confirmationFailures = 0;
    this.$mgrState.lastConfirmationFailureAt = void 0;
    this.$mgrState.lastConfirmAttempt = void 0;
  }
  /**
   * mockable method for checking an error (provided by the submitter)
   * to see if the submitter understands it to be of the "unknown UTXO" type
   * @remarks
   * When a utxo is unknown, it can mean it was existing and is now spent,
   * or it can mean it was not yet known to exist.  The error message can
   * potentially indicate either of these cases, and ideally the submitter can
   * tell the difference.  In any case, a truthy response indicates that the
   * tx is not yet submittable.
   */
  isUnknownUtxoError(problem) {
    if (problem.kind == "SubmissionUtxoError") {
      return true;
    }
    return false;
  }
  /**
   * ?? can the expiry error indicate not-yet-valid?  Or only no-longer-valid??  
   */
  isExpiryError(problem) {
    if (problem.kind == "SubmissionExpiryError") {
      return true;
    }
    return false;
  }
  gradualBackoff(baseInterval, thisAttempt, backoff = gradualBackoff) {
    const result = Math.min(
      baseInterval * Math.pow(backoff, thisAttempt - 1),
      this.retryIntervals.maximum
    );
    console.log(
      `gradualBackoff(${baseInterval} * ${backoff} ^ ${thisAttempt} = ${result})`
    );
    return result;
  }
  firmBackoff(baseInterval, thisAttempt) {
    return this.gradualBackoff(baseInterval, thisAttempt, firmBackoff);
  }
  /**
   * mockable method for finding the tx from the submitter, which
   * is a confirmation that it was submitted successfully
   */
  async confirmTx() {
    debugger;
    if (this.submitter.getTx) {
      return this.submitter.getTx(this.tx.id()).then(
        (tx) => {
          console.log(
            "submitter getTx: found \u{1F44D}",
            tx.id().toString()
          );
          return !!tx;
        },
        (e) => {
          console.log("submitter getTx: not found:", e);
          return false;
        }
      );
    } else {
      return this.submitter.hasUtxo(makeTxOutputId(this.tx.id(), 0));
    }
  }
  onEntry = {
    [`submitting`]: () => {
      this.submitIssue = void 0;
      this.trySubmit();
    },
    [`confirming`]: () => {
      return this.tryConfirm();
    },
    [`softConfirmed`]: () => {
      if (!this.$mgrState.battleDetected && this.$mgrState.confirmations > 5) {
        return this.transition("hardConfirm");
      }
      if (this.$mgrState.confirmations > 3)
        return this.transition("hardConfirm");
      this.$deferredTransition(
        "reconfirm",
        "will confirm again",
        this.retryIntervals.reconfirm
      );
    },
    [`failed`]: () => {
      this.$deferredTransition(
        "reconfirm",
        "possible rescue of failure",
        this.retryIntervals.reconfirm
      );
    }
  };
  transitionTable = {
    [`submitting`]: {
      ...noTransitionsExcept$1,
      otherSubmitterProblem: {
        to: "submitting",
        onTransition: () => {
          return false;
        }
      },
      failed: {
        // not on the diagram.  We try to confirm it even though it's probably a fail.
        to: "confirming"
      },
      notOk: {
        to: "submitting",
        onTransition: () => {
          this.$mgrState.signsOfServiceLife++;
          this.$mgrState.failedSubmissions++;
          if (!this.submitIssue) {
            throw new Error(`must have a submitIssue`);
          }
          if (this.$mgrState.isBadTx) {
            return "failed";
          }
          this.scheduleAnotherSubmit(
            "notOk",
            this.submitIssue
          );
        }
      },
      confirmed: { to: "confirming" },
      submitted: {
        to: "confirming",
        onTransition: () => {
          this.$mgrState.signsOfServiceLife++;
          this.$mgrState.successfulSubmitAt = Date.now();
          this.resetConfirmationStats();
        }
      },
      txExpired: {
        to: "confirming",
        onTransition: () => {
          this.txExpired();
        }
      },
      timeout: {
        to: "submitting",
        onTransition: () => {
          this.$mgrState.serviceFailures++;
          this.$mgrState.lastServiceFailureAt = Date.now();
          this.$mgrState.failedSubmissions++;
          this.scheduleAnotherSubmit("timeout", "timed out");
        }
      }
    },
    [`confirming`]: {
      ...noTransitionsExcept$1,
      otherSubmitterProblem: {
        // nothing special to do, as we're still confirming
        to: "confirming"
      },
      unconfirmed: {
        to: "submitting"
      },
      confirmed: {
        to: "softConfirmed",
        onTransition: () => {
          this.didConfirm();
        }
      },
      txExpired: {
        to: "confirming",
        onTransition: () => {
          throw new Error(`unreachable??`);
        }
      },
      notOk: {
        to: "confirming",
        onTransition: () => {
          debugger;
          if (this.$mgrState.isBadTx) {
            console.log(
              "       BAD TX ------------------------------"
            );
            return "failed";
          }
          this.$mgrState.signsOfServiceLife++;
          this.$mgrState.confirmationFailures++;
          this.$mgrState.lastConfirmationFailureAt = Date.now();
          const { confirmationFailures } = this.$mgrState;
          if (this.$mgrState.expirationDetected) {
            return "failed";
          }
          if (this.$mgrState.battleDetected) {
            return this.scheduleAnotherConfirmation(
              "notOk",
              "slot/height battle?"
            );
          } else if (!this.$mgrState.successfulSubmitAt) {
            this.log(
              "  -- no initial submit success; probably need to wait for utxo to become available"
            );
            return this.$deferredState(
              "notOk",
              "submitting",
              "will resubmit",
              this.retryIntervals.submit
            );
          } else if (confirmationFailures > 10) {
            this.$mgrState.successfulSubmitAt = void 0;
            debugger;
            return "submitting";
          } else {
            return this.scheduleAnotherConfirmation(
              "notOk",
              "waiting"
            );
          }
        }
      },
      timeout: {
        to: "confirming",
        onTransition: () => {
          this.$mgrState.serviceFailures++;
          this.$mgrState.confirmationFailures++;
          this.$mgrState.lastServiceFailureAt = Date.now();
          return this.scheduleAnotherConfirmation(
            "timeout",
            "timed out"
          );
        }
      }
    },
    [`softConfirmed`]: {
      ...noTransitionsExcept$1,
      timeout: { to: "confirming" },
      confirmed: {
        to: "softConfirmed",
        onTransition: () => {
          this.didConfirm();
        }
      },
      hardConfirm: {
        to: "confirmed"
      },
      // failed: null,
      // notOk: null,
      // submitted: null,
      // txExpired: null,
      otherSubmitterProblem: {
        to: "confirming",
        onTransition: () => {
          this.resetConfirmationStats();
          return this.scheduleAnotherConfirmation(
            "otherSubmitterProblem",
            "other submitter problem"
          );
        }
      },
      reconfirm: {
        // not on the diagram
        to: "confirming"
        // ^^ its onEntry does another confirmation right away
      }
    },
    [`confirmed`]: {
      ...noTransitionsExcept$1,
      otherSubmitterProblem: {
        to: "confirming",
        onTransition: () => {
          this.resetConfirmationStats();
          return this.scheduleAnotherConfirmation(
            "confirmed",
            "other submitter problem"
          );
        }
      },
      reconfirm: {
        // not on the diagram
        to: "confirming"
        // ^^ its onEntry does another confirmation right away
      }
    },
    [`failed`]: {
      ...noTransitionsExcept$1,
      failed: {
        to: "failed"
      },
      otherSubmitterProblem: {
        // nothing special to do, since we're already in a failed state
        // ... we'll still do the periodic attempt to reconfirm
        to: "confirming"
      },
      reconfirm: {
        // not on the diagram yet
        to: "confirming"
        // ^^ its onEntry does another confirmation right away
      }
    }
  };
  get currentSlot() {
    return makeNetworkParamsHelper(this.networkParams).timeToSlot(
      this.network.now
    );
  }
  /**
   * Mockable method for submitting the transaction
   */
  async doSubmit() {
    const {
      description,
      tcx: { logger },
      tx,
      options,
      signedTxCborHex
    } = this.txd;
    const { onSubmitError } = options;
    try {
      const submitting = this.submitter.submitTx(
        tx
      );
      return submitting.then(
        async (netTxId) => {
          console.log(
            "submitTx() success via network: ",
            netTxId.toString()
          );
          const txId = tx.id();
          if (!txId.isEqual(netTxId)) {
            throw new Error(
              `txId mismatch: ${txId.toString()} vs ${netTxId.toString()}`
            );
          }
          options.onSubmitted?.({
            ...this.txd,
            txId
          });
          console.timeStamp?.(`submit(): success`);
          logger.logPrint(
            `


\u{1F389}\u{1F389} tx submitted: ${description} \u{1F389}\u{1F389}`
          );
          logger.finish();
          return netTxId;
        },
        (e) => {
          if ("currentSlot" in this.network && e.message.match(/or slot out of range/)) {
            this.checkTxValidityDetails(this.tx);
          }
          onSubmitError?.({
            ...this.txd,
            error: e.message
          });
          console.warn(
            "\u26A0\uFE0F  submitting via helios CardanoClient failed: ",
            e.message
          );
          debugger;
          throw e;
        }
      );
    } catch (e) {
      logger.logError(
        `submitting tx failed: ${description}: \u274C ${e.message}`
      );
      logger.flushError();
      const asHex = bytesToHex(tx.toCbor());
      decodeTx(asHex);
      debugger;
      if (!options.expectError) {
        console.warn(
          "------------------- failed tx as cbor-hex -------------------\n" + asHex,
          "\n------------------^ failed tx details ^------------------\n(debugging breakpoint available)"
        );
      }
    }
  }
  isTxExpired(tx) {
    let { currentSlot } = this;
    currentSlot -= 60;
    tx.body.firstValidSlot;
    const validTo = tx.body.lastValidSlot;
    if (validTo && validTo < currentSlot) {
      return true;
    }
    return false;
  }
  checkTxValidityDetails(tx) {
    tx.body;
    function getAttr(x) {
      const qq = tx.body[x];
      if (!qq) {
        throw new Error(`no ${x} in tx.body: `);
      }
      return qq;
    }
    const validFrom = getAttr("firstValidSlot");
    const validTo = getAttr("lastValidSlot");
    debugger;
    const { currentSlot } = this;
    const diff1 = validFrom - currentSlot;
    const diff2 = validTo - currentSlot;
    const disp1 = diff1 > 0 ? `NOT VALID for +${diff1}s` : `${diff2 > 0 ? "starting" : "was valid"} ${diff1}s ago`;
    const disp2 = diff2 > 0 ? `${diff1 > 0 ? "would be " : ""}VALID until now +${diff2}s` : `EXPIRED ${0 - diff2}s ago`;
    console.log(
      `  \u26A0\uFE0F  slot validity issue?
    - validFrom: ${validFrom} - ${disp1}
    - validTo: ${validTo} - ${disp2}
    - current: ${currentSlot}
`
    );
  }
}

const noTransitionsExcept = {
  registered: null,
  building: null,
  built: null,
  signingSingle: null,
  submitting: null,
  confirming: null,
  confirmed: null,
  failed: null,
  "mostly confirmed": null,
  reconfirm: null,
  alreadyDone: null,
  isFacade: null
};
const terminalState = noTransitionsExcept;
const emulator = process.env.NODE_ENV === "test";
class TxSubmissionTracker extends StateMachine {
  txd;
  submitters;
  txSubmitters;
  setup;
  isSigned = false;
  get initialState() {
    return "registered";
  }
  constructor({
    txd,
    submitters,
    setup
  }) {
    super();
    this.txd = txd;
    this.setup = setup;
    this.submitters = submitters;
    this.txSubmitters = {};
    if (txd.tcx) {
      this.log("created directly from tcx");
      this.transition("built");
    } else {
      this.log("\u{1F4E5} registered");
    }
  }
  destroy() {
    for (const submitter of Object.values(this.txSubmitters)) {
      submitter.destroy();
    }
    super.destroy();
    this.txSubmitters = {};
  }
  get id() {
    return this.txd.id;
  }
  get txLabel() {
    return this.txd.txName || this.txd.description;
  }
  get stateMachineName() {
    return `\u{1F4B3} TxSubmissionTracker ${this.id} ${this.txLabel}`;
  }
  get txId() {
    return this.txd.tx.id().toString();
  }
  resetState() {
    this.$state = this.initialState;
  }
  isBuilt = false;
  onEntry = {
    [`registered`]: () => {
    },
    [`building`]: () => {
    },
    [`built`]: () => {
      this.isBuilt = true;
    },
    [`signingSingle`]: () => {
      this.$signAndSubmit();
    },
    [`submitting`]: () => {
      this.$startSubmitting();
    }
  };
  async $signAndSubmit() {
    //!!! signs one tx in the batch
    const {
      actorContext: { wallet }
    } = this.setup;
    const txd = this.txd;
    const { tcx, tx, options } = txd;
    if (!this.isBuilt || !tx || !tcx) {
      throw new Error(`tx must be built before signing`);
    }
    const { logger } = tcx;
    if (!wallet) {
      throw new Error(`no wallet available for signing`);
    }
    if (this.isSigned) {
      return;
    }
    const walletSign = wallet.signTx(tx);
    const sigs = await walletSign.catch((e) => {
      logger.logError("signing via wallet failed: " + e.message);
      logger.logPrint(tcx.dump(tx));
      logger.flushError();
      return null;
    });
    console.timeStamp?.(`submit(): tx.addSignatures()`);
    if (sigs) {
      //! doesn't need to re-verify a sig it just collected
      tx.addSignatures(sigs, false);
      this.isSigned = true;
      txd.signedTxCborHex = bytesToHex(tx.toCbor());
      const txdSigned = txd;
      txdSigned.signedTxCborHex = bytesToHex(tx.toCbor());
      this.$didSignTx();
      setTimeout(() => {
        wallet.submitTx(tx).then((txid) => {
          console.log(`submitted signed tx ${txid} via wallet`);
        }, (e) => {
          if (e.message.includes("UtxoFailure")) {
            console.warn(`error submitting signed tx via wallet`, e);
            console.warn("^^ probably this means the tx is already submitted");
          } else {
            console.error(`error submitting signed tx via wallet`, e);
          }
        });
      }, 3e3);
    } else {
      options.onSubmitError?.({
        ...txd,
        error: "wallet signing failed"
      });
      throw new Error(`wallet signing failed`);
    }
  }
  update(txd, transition) {
    const {
      txd: { tcx: { id: oldId } = {} }
    } = this;
    const { tcx: { id: newId } = {} } = txd;
    if (oldId && newId && oldId !== newId) {
      debugger;
      throw new Error(`txd.id ${oldId} !== ${newId}`);
    }
    this.txd = { ...txd };
    const { tcx, tx } = txd;
    if (tcx && tx && !this.isBuilt) {
      this.transition("built");
    }
    if (transition) {
      this.transition(transition);
    } else {
      this.$notifier.emit("changed", this);
    }
  }
  /**
   * signals that the tx was signed, and automatically triggers submission
   * @remarks
   * this should be triggered by the batch-controller's tx-submit strategy
   * either in bulk or on individual txns
   * @public
   */
  $didSignTx() {
    this.isSigned = true;
    this.transition("submitting");
  }
  $startSubmitting() {
    if (!this.isBuilt) {
      throw new Error(`tx must be built before submitting`);
    }
    if (!this.isSigned) {
      throw new Error(`tx must be signed before submitting`);
    }
    const txd = this.txd;
    const { id, tx } = txd;
    if (!tx) {
      throw new Error(
        `incontheeivable! tx must be set before submitting`
      );
    }
    tx.id().toString();
    this.txSubmitters = Object.fromEntries(
      Object.entries(this.submitters).map(([name, submitter]) => {
        const mgr = new TxSubmitMgr({
          name,
          submitter,
          txd,
          setup: this.setup
        });
        mgr.$notifier.on(
          "changed",
          this.updateSubmitterState.bind(this, name)
        );
        return [name, mgr];
      })
    );
  }
  transitionTable = {
    [`registered`]: {
      ...noTransitionsExcept,
      built: { to: "built" },
      building: { to: "building" },
      isFacade: { to: "nested batch" },
      failed: { to: "failed" }
    },
    [`building`]: {
      ...noTransitionsExcept,
      alreadyDone: { to: "not needed" },
      built: { to: "built" },
      isFacade: { to: "nested batch" },
      failed: { to: "failed" },
      // this option is purposely left out of the types
      ...emulator ? { emulatorConfirmed: { to: "confirmed" } } : {}
    },
    [`not needed`]: terminalState,
    [`nested batch`]: {
      ...noTransitionsExcept,
      isFacade: { to: "nested batch" }
    },
    [`built`]: {
      ...noTransitionsExcept,
      isFacade: { to: "nested batch" },
      signingSingle: { to: "signingSingle" },
      submitting: {
        to: "submitting",
        onTransition: () => {
          if (!this.isSigned) {
            throw new Error(`tx must be signed before submitting`);
          }
          this.isBuilt = true;
        }
      }
    },
    [`signingSingle`]: {
      ...noTransitionsExcept,
      // special case of failure in signing; send it back to built state
      // ... where it can be signed again as single or as part of the batch
      failed: { to: `built` },
      submitting: { to: "submitting" }
    },
    [`submitting`]: {
      ...noTransitionsExcept,
      confirming: { to: "confirming" },
      failed: { to: "failed" }
    },
    [`confirming`]: {
      ...noTransitionsExcept,
      confirming: { to: "confirming" },
      confirmed: { to: "confirmed" },
      "mostly confirmed": { to: "mostly confirmed" },
      failed: { to: "failed" }
    },
    [`mostly confirmed`]: {
      ...noTransitionsExcept,
      confirming: { to: "confirming" },
      "mostly confirmed": { to: "mostly confirmed" },
      confirmed: { to: "confirmed" },
      failed: { to: "failed" }
    },
    // this option is purposely left out of the types
    ...emulator ? {
      emulatorConfirmed: {
        ...noTransitionsExcept,
        emulatorConfirmed: { to: "emulatorConfirmed" }
      }
    } : {},
    [`confirmed`]: terminalState,
    [`failed`]: {
      ...noTransitionsExcept,
      reconfirm: { to: "confirming" }
    }
  };
  /**
   * aggregates the states of all the various submitters of a single tx
   * @remarks
   * Called every time one of the submit-managers' state is changed.  Based
   * on the status of that submitter, the tx-tracker's state is updated.
   *
   * If there is a failure detected in the submit-manager, the other submit
   * managers are notified of the problem, which typically triggers them to
   * re-confirm and/or re-submit the transaction to the network, to recover
   * from txns that might otherwise have been dropped due to a slot/height
   * battle.
   *
   * Switches the tx-tracker's state to match the aggregated state of its
   * submitters.  This aggregated state is suitable for presenting to the user
   */
  updateSubmitterState(name, mgr) {
    this.notDestroyed();
    mgr.$mgrState;
    const isFail = mgr.$state == "failed";
    const submitters = Object.values(this.txSubmitters);
    const allConfirmed = submitters.every((s) => s.$state == "confirmed");
    const allFailed = submitters.every((s) => s.$state == "failed");
    const countConfirming = submitters.filter(
      (s) => s.$state == "confirming"
    ).length;
    const countSubmitting = submitters.filter(
      (s) => s.$state == "submitting"
    ).length;
    const countConfirmed = submitters.filter(
      (s) => s.$state == "confirmed" || s.$state == "softConfirmed"
    ).length;
    const transition = allConfirmed ? "confirmed" : allFailed ? "failed" : (
      // : countBuilt > 1 ? "built"
      countSubmitting > Math.max(countConfirming, countConfirmed) ? "submitting" : countConfirming > Math.max(countSubmitting, countConfirmed) ? "confirming" : countConfirmed > Math.max(countSubmitting, countConfirming) ? "mostly confirmed" : void 0
    );
    if (!transition) {
      debugger;
      throw new Error(
        `don't know how to proceed for aggregated state on ${this.txId} (debugging breakpoint available)
   ${JSON.stringify(
          submitters
        )}`
      );
    }
    this.transition(transition);
    if (isFail) {
      const mgrsThisTx = this.txSubmitters;
      const otherSubmitters = Object.entries(mgrsThisTx).filter(
        ([n]) => n !== name
      );
      for (const [name2, mgr2] of otherSubmitters) {
        mgr2.otherSubmitterProblem();
      }
    }
  }
  /**
   * private internal method for forcing the state into an indication
   * of confirmed, without triggering any other state changes
   * @remarks
   * helps prevent the test env from being affected by particularities
   * of the tx batcher that are good for user-facing context but disruptive
   * for test automation
   * @internal
   */
  _emulatorConfirmed() {
    if (!emulator) {
      throw new Error(`not in test mode`);
    }
    this.$state = "emulatorConfirmed";
    this.isBuilt = true;
    this.log(` --  \u2697\uFE0F \u2697\uFE0F  \u{1F945} emulatorConfirmed \u2697\uFE0F \u2697\uFE0F`);
  }
}

const nanoid = customAlphabet("0123456789abcdefghjkmnpqrstvwxyz", 12);
class BatchSubmitController {
  submitters;
  setup;
  submitOptions;
  $stateInfoCombined;
  $stateShortSummary;
  $txStates = {};
  $registeredTxs = {};
  isOpen = false;
  isConfirmationComplete = false;
  _mainnet;
  nextUpdate;
  signingStrategy;
  $txChanges;
  // releaseAllOption?: TxBatchOptions["releaseAll"];
  destroyed = false;
  // submitAll?:
  //     | ResolveablePromise<void>
  //     | {
  //           promise: Promise<void>;
  //           status: "automatic";
  //       };
  get chainBuilder() {
    return this.setup.chainBuilder;
  }
  destroy() {
    for (const [txIdStr, submitTracker] of Object.entries(
      this.$registeredTxs
    )) {
      submitTracker.destroy();
    }
    for (const [txIdStr, submitTracker] of Object.entries(this.$txStates)) {
      submitTracker.destroy();
    }
    this.$txChanges.emit("destroyed", this);
    this.$txChanges.removeAllListeners();
    this.$txStates = {};
    this.destroyed = true;
  }
  notDestroyed() {
    if (this.destroyed) {
      throw new Error("submitter-multi-client has been destroyed");
    }
  }
  constructor(options) {
    const {
      submitters,
      setup,
      signingStrategy,
      submitOptions = {}
    } = options;
    this.submitters = submitters;
    this.setup = setup;
    if (!this.setup.network) {
      debugger;
    }
    this.signingStrategy = signingStrategy;
    this.submitOptions = submitOptions;
    this.$stateInfoCombined = ["pending"];
    this.$stateShortSummary = "pending";
    this.$txChanges = new EventEmitter();
    if (Object.keys(submitters).length == 0) {
      throw new Error("expected at least one submitter");
    }
    const s = Object.values(this.submitters);
    this._mainnet = s.every((client) => client.isMainnet());
    if (s.some((submitter) => submitter.isMainnet() !== this._mainnet)) {
      throw new Error(
        "some submitters are for mainnet and some for testnet"
      );
    }
  }
  isMainnet() {
    return this._mainnet;
  }
  // async hasTx(submitter: CardanoTxSubmitter, tx: Tx): Promise<boolean> {
  //     return submitter.hasUtxo(makeTxOutputId(tx.id(), 0));
  // }
  txId(tx) {
    const id = tx.id();
    return id.toHex();
  }
  changeTxId(oldId, newId) {
    const where = this.$txStates[oldId] ? this.$txStates : this.$registeredTxs;
    const tracker = where[oldId];
    if (!tracker) {
      throw new Error(`no tracker found for tx '${oldId}'`);
    }
    tracker.txd.id = newId;
    delete where[oldId];
    where[newId] = tracker;
  }
  map(fn) {
    return [
      ...Object.values(this.$txStates),
      ...Object.values(this.$registeredTxs)
    ].map(fn);
  }
  //, options?: TxBatchOptions);
  async $addTxns(tcxd) {
    this.notDestroyed();
    if (!tcxd.isFacade && !!tcxd.state) {
      const tcx = tcxd;
      tcx._builtTx ? await tcx._builtTx : void 0;
      const id = tcx?.id ?? nanoid(5);
      debugger;
      this.addTxDescr({
        description: tcx.txnName || "\u2039unnamed txn\u203A",
        id,
        tcx,
        txName: tcx.txnName,
        depth: tcx.depth,
        // should typically be 0
        parentId: tcx.parentId
        // should typically be empty
      });
      for (const [name, txd] of Object.entries(tcx.addlTxns)) {
        this.addTxDescr(txd);
      }
    } else if (
      //prettier-ignore
      //@ts-ignore-error on type probe
      !!tcxd.state && tcxd.addlTxns
    ) {
      const tcx = tcxd;
      return this.$addTxns(Object.values(tcx.addlTxns));
    } else if (Array.isArray(tcxd)) {
      for (const txd of tcxd) {
        this.addTxDescr(txd);
      }
    } else {
      const txd = tcxd;
      this.addTxDescr(txd);
    }
  }
  $txInfo(id) {
    this.notDestroyed();
    return this.$txStates[id] || this.$registeredTxs[id];
  }
  submitToTestnet(txd, tracker) {
    if (!this.setup.isTest) return;
    const { network } = this.setup;
    const {
      tcx,
      tx,
      tcx: { logger, _builtTx }
    } = txd;
    tracker.isSigned = true;
    network.submitTx(tx);
    this.setup.network?.tick(1);
    tracker._emulatorConfirmed();
  }
  addTxDescr(txd) {
    this.notDestroyed();
    const { id, depth, parentId } = txd;
    this.isOpen = true;
    const pendingTracker = this.$registeredTxs[id];
    const builtTracker = this.$txStates[id];
    if (builtTracker && pendingTracker) {
      throw new Error(
        `impossible membership in both registered- and built-tx list: ${id}`
      );
    }
    let tracker = builtTracker || pendingTracker;
    if (tracker) {
      if (Object.keys(tracker.txSubmitters).length) {
        throw new Error(`tx '${id}' already present and submitting`);
      }
    }
    if (pendingTracker && txd.tcx) {
      delete this.$registeredTxs[id];
      this.$txStates[id] = pendingTracker;
      if (txd.tcx?.alreadyPresent) {
        pendingTracker.transition("alreadyDone");
      } else if (txd.tcx?.isFacade) {
        pendingTracker.transition("isFacade");
      } else {
        this.submitToTestnet(
          txd,
          pendingTracker
        );
      }
      tracker.update(txd);
    } else if (!builtTracker) {
      const { parentId: parentId2, depth: depth2 } = txd;
      const patchedTxd = (() => {
        if (!parentId2) return txd;
        const parent = this.$txInfo(parentId2);
        if (!parent) {
          console.warn("tx batcher: no parent", parentId2);
          return txd;
        }
        const pDepth = parent.txd.depth;
        return { ...txd, depth: 1 + pDepth };
      })();
      tracker = new TxSubmissionTracker({
        txd: patchedTxd,
        submitters: this.submitters,
        setup: this.setup
      });
      tracker.$notifier.on(
        "changed",
        this.updateAggregateState.bind(this)
      );
      if (txd.tcx) {
        this.$txStates[id] = tracker;
        this.submitToTestnet(
          txd,
          tracker
        );
      } else {
        const [others, sameParentId] = Object.entries(
          this.$registeredTxs
        ).reduce(
          ([others2, sameParentId2], [k, v]) => {
            if (v.txd.parentId == parentId2) {
              sameParentId2[k] = v;
            } else {
              others2[k] = v;
            }
            return [others2, sameParentId2];
          },
          [{}, {}]
        );
        this.$registeredTxs = {
          ...sameParentId,
          [id]: tracker,
          ...others
        };
      }
      tracker.update(patchedTxd);
      this.$txChanges.emit("txAdded", tracker);
      this.$txChanges.emit("txListUpdated", this);
    }
    this.$txChanges.emit("txListUpdated", this);
  }
  get $allTxns() {
    return [
      ...Object.values(this.$txStates),
      ...Object.values(this.$registeredTxs)
    ];
  }
  async txError(txd) {
    this.notDestroyed();
    const { id, tcx, tx, error } = txd;
    if (this.$txStates[id]) {
      const existing = this.$txStates[id];
      existing.update(txd, "failed");
      this.updateAggregateState();
    }
  }
  /**
   * triggers all the transactions in the batch to be signed
   * and submitted.
   * @remarks
   * While the transactions are being signed, the signing-strategy
   * object will emit incremental status updates (the "signingSingleTx" event)
   * if it only supports signing one tx at a time.  If it supports multiple
   * tx signing, it should emit a single "signingAll" event instead.
   *
   * UI implementations are expected to listen for signingSingleTx events
   * and present a useful summary of the current transation being signed,
   * to ease the user's understanding of the signing process.
   *
   * If signing is successful, the batch controller will continue by
   * submitting each transation for submission through each of
   * the submitters configured on the batch controller.
   *
   * The controller and individual tx-submission trackers will continue
   * emitting status update events as each tx makes progress.  UIs
   * should continue reflecting updated state information to the user.
   * @public
   */
  async $signAndSubmitAll() {
    if (!this.setup.isTest) {
      const result = await this.signingStrategy.signTxBatch(this);
      console.log("signingStrategy result: ", result);
      debugger;
    }
  }
  // async $submitTxDescr(txd: TxDescription<any, "built">): Promise<TxId> {
  //     this.notDestroyed();
  //     const {
  //         tx,
  //         tcx: { id },
  //     } = txd;
  //     // const txId = tx.id().toString();
  //     if (!this.$txStates[id]) {
  //         this.addTxDescr(txd);
  //     }
  //     return tx.id();
  // }
  /**
   * Updates the aggregate state of the tx batch and notifies listeners
   * @remarks
   * The aggregate state is a summary of the state of all the tx's in the batch.
   *
   * It counts the number of tx's in each state, and emits a  `statusUpdate`
   * event to the batch-controller's {@link BatchSubmitController.$txChanges|txChanges}
   * event stream.
   *
   * The result is
   * @public
   */
  updateAggregateState() {
    this.notDestroyed();
    const txTrackers = [
      ...Object.values(this.$registeredTxs),
      ...Object.values(this.$txStates)
    ];
    const count = txTrackers.length;
    const allConfirmed = count && txTrackers.every((t) => t.$state == "confirmed");
    const allFailed = count && txTrackers.every((txTracker) => txTracker.$state == "failed");
    if (!count) {
      console.warn(
        "unreachable updateAggregateState before having tx trackers?"
      );
      this.$stateInfoCombined = ["pending"];
      this.$stateShortSummary = "pending";
    } else if (allConfirmed) {
      this.$stateInfoCombined = [`${txTrackers.length} confirmed`];
      this.$stateShortSummary = "confirmed";
      this.isConfirmationComplete = true;
    } else if (allFailed) {
      this.$stateInfoCombined = [`${txTrackers.length} failed`];
      this.$stateShortSummary = "failed";
    } else {
      const countConfirming = txTrackers.filter(
        (t) => t.$state == "confirming"
      ).length;
      const countSubmitting = txTrackers.filter(
        (t) => t.$state == "submitting"
      ).length;
      const countConfirmed = txTrackers.filter(
        (t) => t.$state == "confirmed"
      ).length;
      const countFailed = txTrackers.filter(
        (t) => t.$state == "failed"
      ).length;
      const countMostlyConfirmed = txTrackers.filter(
        (t) => t.$state == "mostly confirmed"
      ).length;
      const countRegistered = txTrackers.filter(
        (t) => t.$state == "registered"
      ).length;
      const countBuilding = txTrackers.filter(
        (t) => t.$state == "building"
      ).length;
      this.$stateInfoCombined = [
        countConfirming ? `${countConfirming} confirming` : null,
        countSubmitting ? `${countSubmitting} submitting` : null,
        countConfirmed ? `${countConfirmed} confirmed` : null,
        countMostlyConfirmed ? `${countMostlyConfirmed} mostly confirmed` : null,
        countFailed ? `${countFailed} failed` : null
      ].filter((s) => s != null);
      if (count == countConfirmed) {
        this.$stateShortSummary = "confirmed";
      } else if (count == countFailed) {
        this.$stateShortSummary = "failed";
      } else if (count == countConfirmed + countConfirming + countMostlyConfirmed) {
        this.$stateShortSummary = "confirming";
      } else if (count == countConfirmed + countMostlyConfirmed) {
        this.$stateShortSummary = "mostly confirmed";
      } else if (!countBuilding && !countRegistered) {
        this.$stateShortSummary = "pending";
      } else if (countRegistered + countBuilding > 0) {
        this.$stateShortSummary = "building";
      } else {
        this.$stateShortSummary = "submitting";
      }
    }
    this.$txChanges.emit("statusUpdate", this.$stateInfoCombined);
  }
  reqts() {
    return {
      "allows multiple underlying submitters": {
        purpose: "enables multiple paths to distributing a tx to the network",
        mech: [
          "? each submitter is a MinimalCardanoClient with submitTx() and hasUtxo()",
          "? each submitter can be of a different underlying type",
          "? all submitters should be connected to different nodes on the same network"
        ]
      },
      "uses the basic hasUtxo() function to check for transaction inclusion": {
        purpose: "uses lowest common functionality for simplicity",
        mech: [
          "? each submitter has a hasUtxo() function",
          "? checking for any txn needs only to check for one of its output-ids' presence"
        ]
      },
      "accepts multiple txns for persistent async submission": {
        purpose: "ensures that each transaction is reliably delivered to the network",
        mech: [
          "? each transaction is queued for delivery through each submitter",
          "? allows that each transaction may not be acceptable at the same time",
          "? ensures that txns are retried as needed until confirmed at all submitters",
          "? doesn't give up until the tx is confirmed or until least 3m after its expiration"
        ]
      },
      "is resistant to slot battles and rollbacks": {
        purpose: "ensures persistent delivery of txns into the network",
        mech: [
          "? continues to check each submitter for tx confirmation",
          "? each a transaction must be found at the submitter 3 separate times"
        ]
      },
      "has an organized structure for the state of submitting each txn": {
        purpose: "transparency of submission progress and responsiveness to possible problems",
        mech: [
          "? each transaction has a state object with its description and submission state",
          "? each transaction's state object has a record of the submission state for each submitter",
          "? the state is 'submitting' until the txn is accepted by all submitters",
          "? the state is 'confirming' until the txn is confirmed by all submitters",
          "? if a txn is not confirmed by all submitters after 30s, it changes to  'resubmitting' state",
          "? after a txn is confirmed by all submitters, its state is 'confirmed'"
        ]
      }
    };
  }
}

class TxBatcher {
  previous;
  _current;
  signingStrategy;
  submitters;
  setup;
  $notifier = new EventEmitter();
  constructor(options) {
    const { signingStrategy, submitters, setup } = options;
    this.submitters = submitters;
    this.signingStrategy = signingStrategy;
    this.setup = setup;
  }
  get current() {
    if (!this.setup) {
      throw new Error(
        `Finish initializing txBatcher by assigning txBatcher.setup = <setup from a StellarContracts class or StellarTxnContext>`
      );
    }
    if (!this.signingStrategy) {
      throw new Error(
        `Finish initializing txBatcher by assigning txBatcher.signingStrategy = <a WalletSigningStrategy>`
      );
    }
    if (!this._current) {
      if (this.setup.chainBuilder) {
        throw new Error(
          `surprise! txBatcher's setup wasn't expected to have a chainBuilder yet (was it not cleaned up from an earlier batch?)`
        );
      }
      const chainBuilder = this.setup.isTest ? void 0 : makeTxChainBuilder(this.setup.network);
      this.setup.chainBuilder = chainBuilder;
      this._current = new BatchSubmitController({
        submitters: this.submitters,
        setup: this.setup,
        signingStrategy: this.signingStrategy
      });
      this.$notifier.emit("rotated", this._current);
    }
    return this._current;
  }
  canRotate() {
    const mostCurrent = this.previous || this._current;
    if (!mostCurrent) return true;
    const { $stateShortSummary } = mostCurrent;
    if ("failed" == $stateShortSummary || "confirmed" == $stateShortSummary) {
      return true;
    }
    return false;
  }
  rotate(chainBuilder) {
    if (!this.setup) {
      throw new Error(`setup not set`);
    }
    if (!this.signingStrategy) {
      throw new Error(`signingStrategy not set`);
    }
    if (!this.canRotate()) {
      throw new Error(`must verify canRotate() before rotating`);
    }
    this.previous?.destroy();
    this.previous = this.current;
    this._current = new BatchSubmitController({
      submitters: this.submitters,
      setup: {
        ...this.setup,
        chainBuilder
      },
      signingStrategy: this.signingStrategy
    });
    this.$notifier.emit("rotated", this._current);
  }
}

async function makeOgmiosConnection(conn) {
  const connection = typeof conn === "string" ? {
    address: {
      http: conn,
      webSocket: conn.replace(/^http(s)?:\/\//, "ws$1://")
    }
  } : conn;
  const context = await createInteractionContext(
    (err) => console.error(err),
    () => console.log("Connection closed"),
    {
      connection
    }
  );
  return {
    submitter: await createTransactionSubmissionClient(context),
    ledgerState: await createLedgerStateQueryClient(context),
    context
  };
}
class OgmiosTxSubmitter {
  static async withOgmiosConn(isMainnet, conn) {
    const ogmios = await makeOgmiosConnection(conn);
    return new this(isMainnet, ogmios);
  }
  mainnet;
  ogmios;
  constructor(isMainnet, conn) {
    this.mainnet = isMainnet;
    this.ogmios = conn;
  }
  get stateQuery() {
    return this.ogmios.ledgerState;
  }
  get submitter() {
    return this.ogmios.submitter;
  }
  isMainnet() {
    return this.mainnet;
  }
  async hasUtxo(txoId) {
    try {
      const result = await this.stateQuery.utxo({
        outputReferences: [{
          transaction: {
            id: txoId.txId.toString()
          },
          index: txoId.index
        }]
      });
      for (const {
        transaction: { id: txIdString },
        index,
        address,
        value
      } of result) {
        if (txIdString === txoId.txId.toString() && index === txoId.index) {
          return true;
        }
      }
      return false;
    } catch (e) {
      const { message, stack, otherDetails } = e;
      console.error("ogmios client: getUtxo failed:", {
        message,
        ...otherDetails
      });
      return false;
    }
  }
  async submitTx(tx) {
    try {
      const result = await this.submitter.submitTransaction(
        bytesToHex(tx.toCbor())
      );
      return makeTxId(result);
    } catch (e) {
      console.error("ogmios client: submitTx failed:", e);
      throw e;
    }
  }
  isUnknownUtxoError(e) {
    debugger;
    return false;
  }
  isSubmissionExpiryError(e) {
    debugger;
    return false;
  }
  // ledgerStateQuery: 
  //  utxo(context, txoutputref[])
  // https://ogmios.dev/typescript/api/interfaces/_cardano_ogmios_client.Schema.TransactionOutputReference.html
  //
  // TransactionOutputReference: {
  //  index: number
  //  transaction: {
  //      id: string
  //  }
  // }
}

class WalletSigningStrategy {
  wallet;
  // wHelper: WalletHelper
  constructor(wallet) {
    this.wallet = wallet;
  }
  /**
   * has the wallet sign the txns in the batch
   * @remarks
   * implements a fallback for strategies that don't support batching
   *
   * You must override this method if your wallet can batch sign.  Also,
   * set canBatch = true.
   *
   * Adds the signatures to the txns and also returns the signatures
   * in case that's helpful.
   */
  async signTxBatch(batch) {
    if (this.canBatch) {
      throw new Error(
        `${this.constructor.name}: signTxBatch must be implemented if canBatch is true`
      );
    }
    const rv = [];
    for (const txTracker of batch.map((txTracker2) => txTracker2)) {
      if (!txTracker.isBuilt) {
        throw new Error(`all txns must be built before signing`);
      }
      const sigs = await this.signTx(txTracker);
      if (sigs) {
        txTracker.txd.tx.addSignatures(sigs);
        rv.push(sigs);
      }
      txTracker.$didSignTx();
    }
    return rv;
  }
  async signTx(txTracker) {
    txTracker.transition("signingSingle");
    return this.signSingleTx(txTracker.txd.tx).then((sigs) => {
      console.log(`${sigs.length} sigs for ${txTracker.txLabel}`);
      debugger;
      txTracker.txd.tx.addSignatures(sigs);
      debugger;
      txTracker.$didSignTx.bind(txTracker);
      return sigs;
    }).catch((e) => {
      debugger;
      console.warn("signing error: " + e.message);
    });
  }
}
class GenericSigner extends WalletSigningStrategy {
  canBatch = false;
  signSingleTx(tx) {
    return this.wallet.signTx(tx);
  }
}
class DraftEternlMultiSigner extends GenericSigner {
  canBatch = true;
  async signTxBatch(batch) {
    debugger;
    const w = this.wallet.handle;
    return w.experimental.signTxs(
      batch.map((txTracker) => {
        return {
          cbor: bytesToHex(txTracker.txd.tx.toCbor()),
          partialSign: true
        };
      })
    ).then((signatures) => {
      debugger;
      batch.map((txTracker, i) => {
        const wits = signatures[i];
        debugger;
        decodeTxWitnesses(wits).signatures;
        txTracker.txd.tx;
        txTracker.txd.tx?.addSignatures(wits);
        txTracker.$didSignTx();
        return wits;
      });
      return signatures;
    });
  }
}

export { Activity, AlreadyPendingError, AnyAddressAuthorityPolicy, AuthorityPolicy, BasicMintDelegate, BatchSubmitController, Capo, CapoDelegateBundle, CapoHeliosBundle, CapoMinter, CapoWithoutSettings, ContractBasedDelegate, ContractDataBridge, DataBridge, DataBridgeReaderClass, DelegateConfigNeeded, DelegatedDataContract, DraftEternlMultiSigner, EnumBridge, GenericSigner, MintSpendDelegateBundle, OgmiosTxSubmitter, StellarContract, StellarDelegate, StellarTxnContext, TxBatcher, TxNotNeededError, TxSubmissionTracker, TxSubmitMgr, UnspecializedDelegateBridge, UnspecializedDelegate_hl as UnspecializedDelegateScript, UnspecializedMintDelegate, UutName, WalletSigningStrategy, WrappedDgDataContract, capoConfigurationDetails, datum, defineRole, delegateRoles, dumpAny, errorMapAsString, hasReqts, impliedSeedActivityMaker, makeOgmiosConnection, mkCancellablePromise, mkDgtStateKey, mkUutValuesEntries, mkValuesEntry, partialTxn, txn, uplcDataSerializer };
//# sourceMappingURL=stellar-contracts.mjs.map
