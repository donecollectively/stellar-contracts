{"version":3,"file":"DelegatedDataContract.mjs","sources":["../src/delegation/DelegatedDataContract.ts"],"sourcesContent":["import {\n    makeTxOutput,\n    makeValue,\n    type TxInput,\n    type Value,\n} from \"@helios-lang/ledger\";\nimport { makeIntData } from \"@helios-lang/uplc\";\n\nimport type {\n    CharterData,\n    FoundDatumUtxo,\n    hasCharterRef,\n    hasUutContext,\n} from \"../CapoTypes.js\";\nimport type { hasSettingsRef } from \"../CapoTypes.js\";\nimport type { ReqtsMap } from \"../Requirements.js\";\nimport type { StellarTxnContext, hasSeedUtxo } from \"../StellarTxnContext.js\";\nimport { ContractBasedDelegate } from \"./ContractBasedDelegate.js\";\nimport type { UutName } from \"./UutName.js\";\nimport { betterJsonSerializer, dumpAny } from \"../diagnostics.js\";\nimport {\n    type seedActivityFunc,\n    type SeedActivityArg,\n    SeedActivity,\n    type isActivity,\n} from \"../ActivityTypes.js\";\nimport type {\n    AnyData,\n    AnyDataLike,\n    ErgoAnyData,\n    minimalAnyData,\n} from \"./UnspecializedDelegate.typeInfo.js\";\nimport { textToBytes, type InlineDatum } from \"../HeliosPromotedTypes.js\";\nimport type {\n    CapoHeliosBundle,\n    CapoHeliosBundleClass,\n} from \"../helios/scriptBundling/CapoHeliosBundle.js\";\nimport type { CapoDelegateBundle } from \"../helios/scriptBundling/CapoDelegateBundle.js\";\nimport type { AnyDataTemplate, minimalData } from \"./DelegatedData.js\";\nimport { uplcDataSerializer } from \"./jsonSerializers.js\";\nimport type { DelegatedDataBundle } from \"../helios/scriptBundling/DelegatedDataBundle.js\";\n\n/**\n * @public\n */\nexport type DgDataType<T extends DelegatedDataContract<any, any>> =\n    T extends DelegatedDataContract<infer T, infer TLike> ? T : never;\n\n/**\n * @public\n */\nexport type DgDataTypeLike<T extends DelegatedDataContract<any, any>> =\n    T extends DelegatedDataContract<infer T, infer TLike> ? TLike : never;\n\n/**\n * use for new or updated record data, where id and type can\n * be implied instead of explicitly provided\n * @public\n */\nexport type minimalDgDataTypeLike<T extends DelegatedDataContract<any, any>> =\n    minimalData<DgDataTypeLike<T>>;\n\n/**\n * @public\n * @deprecated use minimalDgDataTypeLike instead\n */\nexport type DgDataCreationAttrs<\n    T extends DelegatedDataContract<any, any> // | DelegatedDatumAdapter<any>\n> = Omit<DgDataTypeLike<T>, \"id\" | \"type\">;\n\n/**\n * @public\n */\nexport type DelegatedDatumTypeName<\n    T extends DelegatedDataContract<any, any>,\n    TN extends string = T[\"recordTypeName\"]\n> = TN;\n\nexport type DelegatedDatumIdPrefix<\n    T extends DelegatedDataContract<any, any>,\n    TN extends string = T[\"idPrefix\"]\n> = TN;\n\n/**\n * DelegatedDataContract provides a base class for utility functions\n * to simplify implementation of delegate controllers.  They are used\n * to manage the creation and updating of records in a delegated data store,\n * where the data is stored in a Capo, and the controller is forced into the\n * transaction by the Capo's delegate policy (or its spend-delegate's).\n *@public\n */\nexport abstract class DelegatedDataContract<\n    T extends AnyDataTemplate<any, any>,\n    TLike extends AnyDataTemplate<any, any>\n> extends ContractBasedDelegate {\n    static isDgDataPolicy = true;\n    static isMintDelegate = false;\n\n    usesWrappedData?: boolean;\n    dgDatumHelper = this.dataBridgeClass?.prototype.DelegateDatum;\n\n    /**\n     * when set to true, the controller class will include the Capo's\n     * gov authority in the transaction, to ease transaction setup.\n     * @remarks\n     * This is a convenience for the controller, and should be used along with\n     * the appropriate on-chain policy to require the gov token's presence.\n     * @public\n     * @deprecated - set requiresGovAuthority in the contract-bundle instead\n     */\n    get needsGovAuthority() {\n        return this._bundle!.requiresGovAuthority;\n    }\n\n    abstract get recordTypeName(): string;\n    abstract get idPrefix(): string;\n\n    abstract exampleData(): minimalData<TLike>;\n\n    /**\n     * Provides a customized label for the delegate, used in place of\n     * a generic script name (\"BasicDelegate\").  DelegatedDataContract\n     * provides a default name with the record type name and \"Pol\" suffix.\n     *\n     * Affects the on-chain logging for the policy and the compiled script\n     * output in the script-cache on-disk or in browser's storage.\n     */\n    get delegateName() {\n        return `${this.recordTypeName}Pol`;\n    }\n\n    // abstract get capo(): Capo<any>;\n    abstract requirements(): ReqtsMap<any, any> | ReqtsMap<any, never>;\n\n    // async findRecord(id: string | UutName) {\n    //     return this.capo\n    //         .findDelegatedDataUtxos({\n    //             type: this.recordTypeName,\n    //             id,\n    //         })\n    //         .then(this.capo.singleItem);\n    // }\n\n    get abstractBundleClass(): undefined | typeof DelegatedDataBundle {\n        return undefined;\n    }\n\n    async scriptBundleClass() : Promise<typeof DelegatedDataBundle> {\n        if (this.abstractBundleClass) {\n            throw new Error(\n                `${this.constructor.name}: this pluggable delegate requires a bit of setup that doesn't seem to be done yet.\\n` +\n                    `First, ensure you have derived a subclass for the controller, with a scriptBundle() method.\\n` +\n                    `\\nThat method should \\`return YourConcreteBundleClass\\`\\n` +\n                    `\\n  ... where YourConcreteBundle is a subclass of CapoDelegateBundle that you've created.\\n` +\n                    `\\nA concrete bundle class should be defined in \\`${this.delegateName}.concrete.hlb.ts\\`\\n` +\n                    `  ... in the same directory as your derived controller class:\\n\\n` +\n                    `    import {YourAppCapo} from \"./YourAppCapo.js\";\\n` +\n                    `    import {${this.abstractBundleClass.name}} from ...\\n` +\n                    `    export class YourConcreteBundle extends ${this.abstractBundleClass.name}} {\\n` +\n                    `        // ... \\n` +\n                    `    }\\nexport default YourConcreteBundle;`\n            );\n        }\n\n        throw new Error(\n            `${this.constructor.name}: missing required implementation of scriptBundleClass()\\n` +\n                `\\nThat method may dynamically \\`import(''./YourBundle.hlb.ts\")\\` file, and should \\`return YourScriptBundleClass\\`\\n` +\n                `\\n  ... where YourScriptBundle is a subclass of DelegateDataBundle that you've created.\\n` +\n                `\\nDefined in a \\`*.hlb.ts\\` file, it should have at minimum:\\n` +\n                `    import {YourAppCapo} from \"./YourAppCapo.js\";\\n\\n` +\n                `    import SomeSpecializedDelegate from \"./YourSpecializedDelegate.hl\";\\n\\n` +\n                `    export class SomeDelegateBundle extends CapoHeliosBundle {\\n` +\n                `        specializedDelegateModule = SomeSpecializedDelegate;\\n` +\n                `    }\\nexport default SomeDelegateBundle;\\n` +\n                `We'll generate types in a .typeInfo.d.ts file, based on the types in your Helios sources,\\n` +\n                `  ... and a .bridge.ts file having data-conversion classes for your on-chain types.` +\n                `\\nWhen your delegated-data controller is used within your Capo, your bundle will\\n` +\n                `have access via import {...} to any helios modules provided by that Capo's .hlb.ts. `\n        );\n\n        return null as unknown as typeof DelegatedDataBundle;\n    }\n\n    /**\n     * Finds records of this delegate's type, optionally by ID.\n     * @remarks\n     * Returns a record list when no ID is provided, or a single record when an ID is provided.\n     */\n    async findRecords<THIS extends DelegatedDataContract<any, any>>(\n        this: THIS\n    ): Promise<FoundDatumUtxo<T, TLike>[]>;\n    /**\n     * Finds one record of this delegate's type by id\n     * @remarks\n     * Returns a record list when no ID is provided, or a single record when an ID is provided.\n     */\n    async findRecords<\n        THIS extends DelegatedDataContract<any, any>,\n        ID extends undefined | string | UutName | number[]\n    >(\n        this: THIS,\n        options: {\n            id: ID;\n            // TODO: support single/predicate/query options by passing them through\n            // single : boolean\n            // predicate: ...\n            // query\n        }\n    ): Promise<FoundDatumUtxo<T, TLike>>;\n    async findRecords<\n        THIS extends DelegatedDataContract<any, any>,\n        ID extends undefined | string | UutName | number[]\n    >(\n        this: THIS,\n        options: {\n            id?: ID;\n            // TODO: support single/predicate/query options by passing them through\n            // single : boolean\n            // predicate: ...\n            // query\n        } = {}\n    ): Promise<\n        ID extends undefined\n            ? FoundDatumUtxo<T, TLike>[]\n            : FoundDatumUtxo<T, TLike>\n    > {\n        const result = await this.capo.findDelegatedDataUtxos({\n            type: this.recordTypeName,\n            id: options.id,\n            // single, // todo: support single in the options\n            // predicate\n        });\n        if (options.id == undefined) {\n            // this is the typed-array case.  We could get more explicit\n            // about casting the result type, but that's already provided by the\n            // definition of ***this function's*** return type.\n            return result as any;\n        }\n        // the caller will already know whether the expected type is an array above,\n        // or a  single item below.\n        return this.capo.singleItem(result) as any;\n    }\n\n    mkDgDatum<THIS extends DelegatedDataContract<any, any>>(\n        this: THIS,\n        record: TLike\n    ): InlineDatum {\n        // console.log({record}, \"8888888888888888888888888888888888888\")\n\n        return this.mkDatum.capoStoredData({\n            data: record,\n            version: 2n,\n            otherDetails: makeIntData(0),\n        });\n    }\n\n    /**\n     * Intuition hook redirecting to activity.MintingActivities.$seeded$...\n     * @remarks\n     * @deprecated use activites.MintingActivites.$seeded$* accessors/methods instead.\n     */\n    usesSeedActivity<SA extends seedActivityFunc<any, any>>(\n        a: SA,\n        seedPlaceholder: \"...seed\",\n        ...args: SeedActivityArg<SA>\n    ) {\n        throw new Error(\n            `make an implied-seed activity with this.activity.MintingActivites.$seeded$*`\n        );\n        // console.log(\"seed activity with function \", a.name, a)\n        // return new SeedActivity(this, a, args);\n    }\n\n    /**\n     * builds a txn creating a record of this type in the data store\n     * @remarks\n     * The \\{activity\\} option can be a {@link SeedActivity} object provided by\n     * `this.activity.MintingActivities.$seeded$‹activityName›` accessors/methods,\n     * which creates a record id based on the (unique) spend of a seed value.\n     */\n    async mkTxnCreateRecord<\n        THIS extends DelegatedDataContract<any, any>,\n        TCX extends StellarTxnContext\n        // DDType extends MaybeWrappedDataType<THIS> = MaybeWrappedDataType<THIS>,\n        // minDDType extends DgDataCreationAttrs<THIS> = DgDataCreationAttrs<THIS>\n    >(this: THIS, options: DgDataCreationOptions<TLike>, tcx?: TCX) {\n        // ... it does the setup for the creation activity,\n        //   so that the actual \"creation\" part of the transaction will be ready to go\n\n        tcx = tcx || (this.mkTcx(`create ${this.recordTypeName}`) as TCX);\n        // all the reference data that can be needed by the creation policy\n        const tcx1a = await this.tcxWithCharterRef(tcx);\n        const tcx1b = await this.tcxWithSeedUtxo(tcx1a);\n        const tcx1c = tcx1b;\n        // const tcx1c = await this.tcxWithSettingsRef(tcx1b);\n        const { capo } = this;\n        const mintDelegate = await capo.getMintDelegate();\n\n        const dataType = this.recordTypeName;\n        // mints the UUT needed to create the record, which triggers the mint delegate\n        // to enforce the data delegate creation policy\n        const tcx2 = await capo.txnMintingUuts(\n            tcx1c,\n            [this.idPrefix as THIS[\"idPrefix\"]],\n            {\n                mintDelegateActivity:\n                    mintDelegate.activity.CreatingDelegatedData(tcx1c, {\n                        dataType,\n                    }),\n            },\n            {\n                recordId: this.idPrefix,\n            }\n        );\n\n        const effectiveActivity: isActivity | SeedActivity<any> =\n            options.activity ??\n            //@ts-expect-error on a default activity name that SHOULD be there by convention\n            this.activity.MintingActivities.$seeded$CreatingRecord;\n\n        const activity: isActivity =\n            effectiveActivity &&\n            //@ts-expect-error hitting up the SeedActivity object with a conditional func call\n            // ... that might be just an activity object\n            (effectiveActivity.mkRedeemer?.(tcx2) ?? effectiveActivity);\n        // ^ this probes for SeedActivity, producing an activity with redeemer.\n        if (!activity) {\n            throw new Error(\n                `no activity provided, and the default activity name (this.activity.MintingActivities.$seeded$CreatingRecord) is missing from the type bridge`\n            );\n        }\n        // vv this expects there to be a 'redeemer' attribute on the activity object.\n\n        // ... now the transaction has what it needs to trigger the creation policy\n        // ... and be approved by it creation policy.\n        // this method is the only part of the process that is actually triggering the\n        // delegate policy that checks the creation.\n        return this.txnCreatingRecord(tcx2, {\n            ...options,\n            activity,\n        }).then((tcx3) => tcx3);\n    }\n\n    creationDefaultDetails(): Partial<TLike> {\n        return {};\n    }\n\n    beforeCreate(record: TLike): TLike {\n        return record;\n    }\n\n    async txnCreatingRecord<\n        THIS extends DelegatedDataContract<any, any>,\n        TCX extends StellarTxnContext &\n            hasCharterRef &\n            hasSeedUtxo &\n            // hasSettingsRef &\n            hasUutContext<\"recordId\">\n    >(\n        this: THIS,\n        tcx: TCX,\n        // record: minDDType,\n        options: CoreDgDataCreationOptions<TLike>\n    ): Promise<\n        TCX &\n            hasUutContext<\n                | \"recordId\"\n                | (string extends DelegatedDatumIdPrefix<THIS>\n                      ? \"‹idPrefix (hint: declare with 'idPrefix = \\\"...\\\" as const')›\"\n                      : DelegatedDatumIdPrefix<THIS>)\n            >\n    > {\n        const newType = this.recordTypeName as DelegatedDatumTypeName<this>;\n        const idPrefix = this.idPrefix as DelegatedDatumIdPrefix<this>;\n\n        const {\n            addedUtxoValue: extraCreationValue = makeValue(0n),\n            data: typedData,\n            activity,\n        } = options;\n\n        const tcx2 = await this.txnGrantAuthority(tcx, activity);\n\n        const uut = tcx.state.uuts[idPrefix] as UutName;\n        let newRecord: DgDataTypeLike<this> = typedData as any;\n\n        const defaults = this.creationDefaultDetails() || {};\n        const fullRecord = this.beforeCreate({\n            // the type-name itself is sometimes const and fully type-safe, but sometimes is just stringy - but it's there\n            id: textToBytes(uut.toString()),\n            type: newType,\n            ...defaults,\n            ...newRecord,\n        } as DgDataTypeLike<this>);\n\n        const newDatum = this.mkDatum.capoStoredData({\n            // data: new Map(Object.entries(beforeSave(fullRecord) as any)),\n            data: fullRecord,\n            version: 2n,\n            otherDetails: makeIntData(0),\n        });\n        console.log(\n            `🏒 creating ${newType} -> ` +\n                uplcDataSerializer(newType, fullRecord, 1)\n        );\n        let tcx3 = tcx2;\n        if (this.needsGovAuthority) {\n            tcx3 = await this.capo.txnAddGovAuthority(tcx2);\n        }\n\n        return tcx3.addOutput(\n            makeTxOutput(\n                this.capo.address,\n                this.uh.mkMinTv(this.capo.mph, uut).add(extraCreationValue),\n                newDatum\n            )\n        ) as any; // the return type above provides the result type directly to the caller.\n    }\n\n    /**\n     * Creates an indirect reference to an an update activity with arguments,\n     * using a record-id placeholder.\n     *\n     * @remarks\n     * Provide an update activity function, a placeholder for the record-id, any other args\n     * for the on-chain activity/redeemer.  The update-activity function can be any of this\n     * contract's `activity.SpendingActivities.*` functions.\n     *\n     * This approach is similar to the creation-time {@link DelegatedDataContract.usesSeedActivity|usesSeedActivity()} method,\n     * with a \"...recId\" placeholder instead of a \"...seed\" placeholder.\n     *\n     * The arguments are passed to the update activity function, which is expected to return\n     * an {@link isActivity} object serializing the `{redeemer}` data as a UplcData object.\n     * Normally that's done with {@link ContractBasedDelegate.mkSpendingActivity | mkSpendingActivity()}.\n     */\n    usesUpdateActivity<\n        UA extends updateActivityFunc<any>\n        // (...args: [hasRecId, ...any]) => isActivity\n    >(a: UA, _idPlaceholder: \"...recId\", ...args: UpdateActivityArgs<UA>) {\n        return new UpdateActivity(this, a, args);\n    }\n\n    /**\n     * Creates a transaction for updating a record in the delegated data store\n     *\n     * @remarks\n     * Provide a transaction name, an existing item, and a controller activity to trigger.\n     * The activity MUST either be an activity triggering one of the controller's SpendingActivity variants,\n     * or the result of calling {@link DelegatedDataContract.usesUpdateActivity | usesUpdateActivity()}.\n     *   **or TODO support a multi-activity**\n     *\n     * The updatedRecord only needs to contain the fields that are being updated.\n     */\n    async mkTxnUpdateRecord<TCX extends StellarTxnContext>(\n        this: DelegatedDataContract<any, any>,\n        txnName: string,\n        item: FoundDatumUtxo<T, any>,\n        options: DgDataUpdateOptions<TLike>,\n        tcx?: TCX\n    ): Promise<TCX> {\n        tcx = tcx || (this.mkTcx(txnName) as TCX);\n        const { capo } = this;\n        const mintDelegate = await capo.getMintDelegate();\n        const /* tcx1a*/ tcx1 = await this.tcxWithCharterRef(tcx);\n        // const tcx1 = await this.tcxWithSettingsRef(tcx1a);\n\n        const {\n            activity,\n            addedUtxoValue,\n            // beforeSave = (x) => x,\n            updatedFields,\n        } = options;\n        // tell Capo to spend the DD record\n        const tcx2 = await capo.txnAttachScriptOrRefScript(\n            tcx1,\n            await capo.asyncCompiledScript()\n        );\n        const tcx2a = tcx2.addInput(\n            item.utxo,\n            capo.activitySpendingDelegatedDatum()\n        );\n        const existingTypedData = item.data as DgDataType<this>;\n        let recId: string | number[] = existingTypedData.id;\n        if (!Array.isArray(recId)) {\n            recId = textToBytes(recId);\n        }\n        // tell the spend delegate to allow the spend,\n        // ... by authority of the delegated-data controller\n        const spendDelegate = await capo.getSpendDelegate(\n            tcx2a.state.charterData\n        );\n        const dataType = this.recordTypeName;\n        const tcx2b = await spendDelegate.txnGrantAuthority(\n            tcx2a,\n            spendDelegate.activity.UpdatingDelegatedData({\n                dataType,\n                recId,\n            })\n        );\n\n        const materializedActivity: isActivity =\n            activity instanceof UpdateActivity\n                ? activity.mkRedeemer(recId)\n                : activity;\n\n        let recordWithUpdates: DgDataTypeLike<this> = {\n            ...(existingTypedData as any),\n            ...updatedFields,\n        };\n\n        // const patchedRecord = beforeSave(recordWithUpdates);\n\n        let tcx2c = tcx2b;\n        if (this.needsGovAuthority) {\n            tcx2c = await this.capo.txnAddGovAuthority(tcx2b);\n        }\n\n        return this.txnUpdatingRecord(tcx2b, recId, item, {\n            activity: materializedActivity,\n            addedUtxoValue,\n            updatedFields: recordWithUpdates as any,\n        });\n    }\n\n    async txnUpdatingRecord<\n        TCX extends StellarTxnContext & hasCharterRef\n        // hasSeedUtxo &\n        // hasSettingsRef\n    >(\n        tcx: TCX,\n        id: hasRecId,\n        item: FoundDatumUtxo<T, any>,\n        // controllerActivity: isActivity,\n        // record: WrappedDataType<THIS>,\n        options: CoreDgDataUpdateOptions<TLike>\n    ): Promise<TCX> {\n        const recType = this.recordTypeName as DelegatedDatumTypeName<this>;\n\n        const {\n            addedUtxoValue = makeValue(0),\n            // beforeSave = (x) => x,\n            activity,\n            updatedFields: updatedRecord,\n        } = options;\n\n        const fullUpdatedRecord: TLike = {\n            ...(item.data as TLike),\n            ...updatedRecord,\n        };\n\n        console.log(\n            `🏒 updating ${recType} ->`,\n            uplcDataSerializer(\n                recType,\n                JSON.parse(\n                    JSON.stringify(updatedRecord, betterJsonSerializer, 2)\n                ),\n                1\n            )\n        );\n\n        const tcx2 = await this.txnGrantAuthority(tcx, activity);\n        console.log(\n            \"    -- prev value in dgData utxo:\",\n            dumpAny(item.utxo.value)\n        );\n        console.log(\n            \"    -- addedUtxoValue in dgData utxo:\",\n            dumpAny(addedUtxoValue)\n        );\n        return this.returnUpdatedRecord(\n            tcx,\n            item.utxo.value.add(addedUtxoValue), // .add(this.mkMinTv(this.capo.mph, id))\n            fullUpdatedRecord\n        );\n    }\n    getReturnAddress() {\n        return this.capo.address;\n    }\n    returnUpdatedRecord<TCX extends StellarTxnContext & hasCharterRef>(\n        tcx: TCX,\n        returnedValue: Value,\n        updatedRecord: TLike\n    ): TCX {\n        return tcx.addOutput(\n            makeTxOutput(\n                this.getReturnAddress(),\n                returnedValue,\n                this.mkDatum.capoStoredData({\n                    data: updatedRecord,\n                    version: 2n,\n                    otherDetails: makeIntData(0),\n                })\n\n                // this.mkDatumDelegatedDataRecord(beforeSave(record))\n            )\n        );\n    }\n\n    moreInfo(): string {\n        return `This delegate helps manage the on-chain delegated data store for ${this.idPrefix}-* records with type=${this.recordTypeName}`;\n    }\n\n    /**\n     * Generates any needed transactions for updating the Capo manifest\n     * to install or (todo: support for update) the policy for this delegate.\n     * @remarks\n     * The default implementation checks for the presence of the delegate policy\n     * in the Capo's manifest, and if not found, creates a transaction to install it.\n     *\n     * The data-controller class's recordTypeName and idPrefix are used to\n     * initialize the Capo's registry of data-controllers.  You may also implement\n     * a moreInfo() method to provide more on-screen context about the\n     * data-controller's role for administrators and/or end-users; the moreInfo\n     * will be displayed in the Capo's on-screen policy-management (administrative)\n     * interface, and you may also display it elsewhere in your application.\n     *\n     * To add any other transactions that may be needed for the delegate to operate\n     * effectively, override this method, call `super(...args)`, and then add your\n     * additional transactions using tcx.includeAddlTxn(...).  In that case, be sure to\n     * perform any needed queries for ***fresh state of the on-chain data***, such as\n     * for settings or the Capo's fresh charter data, INSIDE your mkTcx() function.\n     */\n    async setupCapoPolicy(\n        tcx: StellarTxnContext,\n        typeName: string,\n        options: {\n            charterData: CharterData;\n            capoUtxos: TxInput[];\n        }\n    ) {\n        const { charterData, capoUtxos } = options;\n        const { recordTypeName, idPrefix } = this;\n\n        if (!this.capo.featureEnabled(typeName)) {\n            console.warn(`❌❌❌ ${this.constructor.name}: skipping setup for data-type '${typeName}' because it is not enabled in my featureFlags`)\n            return undefined;\n        }\n\n        const existing = await this.capo.getDgDataController(\n            recordTypeName,\n            {\n                charterData,\n                optional: true,\n            }\n        );\n        const action = existing ? \"update\" : \"create\";\n        tcx.includeAddlTxn(`${action} ${typeName} delegate`, {\n            description: `${action} on-chain policy for ${idPrefix}-* records of type ${recordTypeName}`,\n            moreInfo: this.moreInfo(),\n            mkTcx: async () => {\n                const charterData = await this.capo.findCharterData();\n                console.warn(\n                    \"---- vvv   when multiple policies can be queued and installed at once, use mkTxnInstall**ing**PolicyDelegate instead\"\n                );\n                return this.capo.mkTxnInstallPolicyDelegate({\n                    typeName: recordTypeName,\n                    idPrefix,\n                    charterData,\n                });\n            },\n        });\n    }\n}\n\n/**\n * @public\n */\nexport type updateActivityFunc<ARGS extends [...any]> = (\n    recId: hasRecId,\n    ...args: ARGS\n) => isActivity;\n\ntype UpdateActivityArgs<\n    UA extends updateActivityFunc<any> //  (...args: [hasRecId, ...any]) => isActivity\n> = UA extends updateActivityFunc<infer ARGS> ? ARGS : never;\n\nexport class UpdateActivity<\n    FactoryFunc extends updateActivityFunc<any>,\n    ARGS extends [...any] = FactoryFunc extends updateActivityFunc<infer ARGS>\n        ? ARGS\n        : never\n> {\n    args: ARGS;\n    host: DelegatedDataContract<any, any>;\n    factoryFunc: FactoryFunc;\n    constructor(\n        host: DelegatedDataContract<any, any>,\n        factoryFunc: FactoryFunc,\n        args: ARGS\n    ) {\n        this.args = args;\n        this.host = host;\n        this.factoryFunc = factoryFunc;\n    }\n\n    mkRedeemer(recId: hasRecId) {\n        return this.factoryFunc.call(this.host, recId, ...this.args);\n    }\n}\n\ntype hasRecId = string | number[] | UutName;\n\n/**\n * @public\n */\nexport type DgDataCreationOptions<TLike extends AnyDataTemplate<any, any>> = {\n    data: minimalData<TLike>;\n    activity?: isActivity | SeedActivity<any>;\n    // beforeSave?(x: DT): DT;\n\n    addedUtxoValue?: Value;\n};\n\nexport type CoreDgDataCreationOptions<TLike extends AnyDataTemplate<any, any>> =\n    {\n        activity: isActivity;\n        data: minimalData<TLike>;\n        // beforeSave?(x: DT): DT;\n\n        addedUtxoValue?: Value;\n    };\n\n/**\n * @public\n */\nexport type DgDataUpdateOptions<TLike extends AnyDataTemplate<any, any>> = {\n    activity: isActivity | UpdateActivity<any>;\n    updatedFields: Partial<minimalData<TLike>>;\n\n    addedUtxoValue?: Value;\n    // beforeSave?(x: DTL): DTL;\n};\n\n// omits type-wrapper and requires all fields for data-type-like\nexport type CoreDgDataUpdateOptions<TLike extends AnyDataTemplate<any, any>> = {\n    activity: isActivity;\n    updatedFields: minimalData<TLike>;\n\n    addedUtxoValue?: Value;\n    // beforeSave?(x: DTL): DTL;\n};\n"],"names":["textToBytes","charterData"],"mappings":"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"}