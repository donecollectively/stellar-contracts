{"version":3,"file":"environment.mjs","sources":["../src/environment.ts"],"sourcesContent":["let DEBUG : number;\nlet CARDANO_NETWORK: string;\nlet NODE_ENV: string;\nlet OPTIMIZE: number;\nlet BF_API_KEY: string;\n\nconst isNodeJS =typeof process !== 'undefined' \nconst cwd = isNodeJS ? process.cwd() : \"\"\n\nlet anyNEXTjsCue = isNodeJS && (process.env.NEXT_PUBLIC_DEBUG || \n    process.env.NEXT_PUBLIC_CARDANO_NETWORK || \n    process.env.NEXT_PUBLIC_OPTIMIZE || \n    process.env.NEXT_RUNTIME \n) \n\nif (\n    ( () => {\n        try {\n            //@ts-expect-error\n            return import.meta.env\n        } catch (e) {\n            return undefined\n        }\n    }\n)()) {\n    console.log(\"VITE env - using import.meta.env\");\n    //@ts-expect-error\n    DEBUG = parseInt(import.meta.env.VITE_DEBUG || \"0\");\n    //@ts-expect-error\n    CARDANO_NETWORK = import.meta.env.VITE_CARDANO_NETWORK || \"preprod\";\n    //@ts-expect-error\n    NODE_ENV = import.meta.env.DEV ? \"development\" : \"production\";\n    //@ts-expect-error\n    BF_API_KEY = import.meta.env.VITE_BF_API_KEY || \"\";\n    //@ts-expect-error\n    OPTIMIZE = parseInt(import.meta.env.VITE_OPTIMIZE || \"0\");\n} else if (anyNEXTjsCue) {\n    console.log(\"nextjs worker env - using NODE_ENV and NEXT_PUBLIC_*\");\n    DEBUG = parseInt(process.env.NEXT_PUBLIC_DEBUG || \"0\");\n    CARDANO_NETWORK = process.env.NEXT_PUBLIC_CARDANO_NETWORK || \"preprod\";\n    NODE_ENV = process.env.NODE_ENV || \"development\";\n    BF_API_KEY = process.env.NEXT_PUBLIC_BF_API_KEY || \"\";\n    OPTIMIZE = parseInt(process.env.NEXT_PUBLIC_OPTIMIZE || \"0\");\n} else {\n    console.log(\"non-vite, non-nextjs - consulting process.env keys directly\");\n    DEBUG = parseInt(process.env.DEBUG || \"0\");\n    CARDANO_NETWORK = process.env.CARDANO_NETWORK || \"preprod\";\n    NODE_ENV = process.env.NODE_ENV || \"development\";\n    BF_API_KEY = process.env.BF_API_KEY || \"\";\n    OPTIMIZE = parseInt(process.env.OPTIMIZE || \"0\");\n}\n\n// console.log(process.env);\nconsole.log(\"env:\", {DEBUG, CARDANO_NETWORK, NODE_ENV, BF_API_KEY, OPTIMIZE, cwd, });\n\n/**\n * @public\n */\nexport const environment = {\n    DEBUG,\n    CARDANO_NETWORK,\n    BF_API_KEY,\n    NODE_ENV,\n    OPTIMIZE,\n    cwd,\n};\n"],"names":[],"mappings":"AAAA,IAAI,KAAA;AACJ,IAAI,eAAA;AACJ,IAAI,QAAA;AACJ,IAAI,QAAA;AACJ,IAAI,UAAA;AAEJ,MAAM,QAAA,GAAU,OAAO,OAAY,KAAA,WAAA;AACnC,MAAM,GAAM,GAAA,QAAA,GAAW,OAAQ,CAAA,GAAA,EAAQ,GAAA,EAAA;AAEvC,IAAI,YAAe,GAAA,QAAA,KAAa,OAAQ,CAAA,GAAA,CAAI,iBACxC,IAAA,OAAA,CAAQ,GAAI,CAAA,2BAAA,IACZ,OAAQ,CAAA,GAAA,CAAI,oBACZ,IAAA,OAAA,CAAQ,GAAI,CAAA,YAAA,CAAA;AAGhB,IAAA,CACM,MAAM;AACJ,EAAI,IAAA;AAEA,IAAA,OAAO,MAAY,CAAA,IAAA,CAAA,GAAA;AAAA,WACd,CAAG,EAAA;AACR,IAAO,OAAA,MAAA;AAAA;AAEf,CAAA,GACC,EAAA;AACD,EAAA,OAAA,CAAQ,IAAI,kCAAkC,CAAA;AAE9C,EAAA,KAAA,GAAQ,QAAS,CAAA,MAAA,CAAA,IAAA,CAAY,GAAI,CAAA,UAAA,IAAc,GAAG,CAAA;AAElD,EAAkB,eAAA,GAAA,MAAA,CAAA,IAAA,CAAY,IAAI,oBAAwB,IAAA,SAAA;AAE1D,EAAW,QAAA,GAAA,MAAA,CAAA,IAAA,CAAY,GAAI,CAAA,GAAA,GAAM,aAAgB,GAAA,YAAA;AAEjD,EAAa,UAAA,GAAA,MAAA,CAAA,IAAA,CAAY,IAAI,eAAmB,IAAA,EAAA;AAEhD,EAAA,QAAA,GAAW,QAAS,CAAA,MAAA,CAAA,IAAA,CAAY,GAAI,CAAA,aAAA,IAAiB,GAAG,CAAA;AAC5D,CAAA,MAAA,IAAW,YAAc,EAAA;AACrB,EAAA,OAAA,CAAQ,IAAI,sDAAsD,CAAA;AAClE,EAAA,KAAA,GAAQ,QAAS,CAAA,OAAA,CAAQ,GAAI,CAAA,iBAAA,IAAqB,GAAG,CAAA;AACrD,EAAkB,eAAA,GAAA,OAAA,CAAQ,IAAI,2BAA+B,IAAA,SAAA;AAC7D,EAAW,QAAA,GAAA,OAAA,CAAQ,IAAI,QAAY,IAAA,aAAA;AACnC,EAAa,UAAA,GAAA,OAAA,CAAQ,IAAI,sBAA0B,IAAA,EAAA;AACnD,EAAA,QAAA,GAAW,QAAS,CAAA,OAAA,CAAQ,GAAI,CAAA,oBAAA,IAAwB,GAAG,CAAA;AAC/D,CAAO,MAAA;AACH,EAAA,OAAA,CAAQ,IAAI,6DAA6D,CAAA;AACzE,EAAA,KAAA,GAAQ,QAAS,CAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,IAAS,GAAG,CAAA;AACzC,EAAkB,eAAA,GAAA,OAAA,CAAQ,IAAI,eAAmB,IAAA,SAAA;AACjD,EAAW,QAAA,GAAA,OAAA,CAAQ,IAAI,QAAY,IAAA,aAAA;AACnC,EAAa,UAAA,GAAA,OAAA,CAAQ,IAAI,UAAc,IAAA,EAAA;AACvC,EAAA,QAAA,GAAW,QAAS,CAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,IAAY,GAAG,CAAA;AACnD;AAGA,OAAQ,CAAA,GAAA,CAAI,QAAQ,EAAC,KAAA,EAAO,iBAAiB,QAAU,EAAA,UAAA,EAAY,QAAU,EAAA,GAAA,EAAM,CAAA;AAK5E,MAAM,WAAc,GAAA;AAAA,EACvB,KAAA;AAAA,EACA,eAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA;AACJ;;;;"}