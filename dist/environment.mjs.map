{"version":3,"file":"environment.mjs","sources":["../src/environment.ts"],"sourcesContent":["let DEBUG : number;\nlet CARDANO_NETWORK: string;\nlet NODE_ENV: string;\nlet OPTIMIZE: number;\nlet BF_API_KEY: string;\n\nconst isNodeJS =typeof process !== 'undefined' \nconst cwd = isNodeJS ? process.cwd() : \"\"\n\nlet anyNEXTjsCue = isNodeJS && (process.env.NEXT_PUBLIC_DEBUG || \n    process.env.NEXT_PUBLIC_CARDANO_NETWORK || \n    process.env.NEXT_PUBLIC_OPTIMIZE || \n    process.env.NEXT_RUNTIME \n) \n\nif (\n    ( () => {\n        try {\n            //@ts-expect-error\n            return import.meta.env\n        } catch (e) {\n            return undefined\n        }\n    }\n)()) {\n    console.log(\"VITE env - using import.meta.env\");\n    //@ts-expect-error\n    DEBUG = parseInt(import.meta.env.VITE_DEBUG || \"0\");\n    //@ts-expect-error\n    CARDANO_NETWORK = import.meta.env.VITE_CARDANO_NETWORK || \"preprod\";\n    //@ts-expect-error\n    NODE_ENV = import.meta.env.DEV ? \"development\" : \"production\";\n    //@ts-expect-error\n    BF_API_KEY = import.meta.env.VITE_BF_API_KEY || \"\";\n    //@ts-expect-error\n    OPTIMIZE = parseInt(import.meta.env.VITE_OPTIMIZE || \"0\");\n} else if (anyNEXTjsCue) {\n    console.log(\"nextjs worker env - using NODE_ENV and NEXT_PUBLIC_*\");\n    DEBUG = parseInt(process.env.NEXT_PUBLIC_DEBUG || \"0\");\n    CARDANO_NETWORK = process.env.NEXT_PUBLIC_CARDANO_NETWORK || \"preprod\";\n    NODE_ENV = process.env.NODE_ENV || \"development\";\n    BF_API_KEY = process.env.NEXT_PUBLIC_BF_API_KEY || \"\";\n    OPTIMIZE = parseInt(process.env.NEXT_PUBLIC_OPTIMIZE || \"0\");\n} else {\n    console.log(\"non-vite, non-nextjs - consulting process.env keys directly\");\n    DEBUG = parseInt(process.env.DEBUG || \"0\");\n    CARDANO_NETWORK = process.env.CARDANO_NETWORK || \"preprod\";\n    NODE_ENV = process.env.NODE_ENV || \"development\";\n    BF_API_KEY = process.env.BF_API_KEY || \"\";\n    OPTIMIZE = parseInt(process.env.OPTIMIZE || \"0\");\n}\n\n// console.log(process.env);\nconsole.log(\"env:\", {DEBUG, CARDANO_NETWORK, NODE_ENV, BF_API_KEY, OPTIMIZE, cwd, });\n\n/**\n * @public\n */\nexport const environment = {\n    DEBUG,\n    CARDANO_NETWORK,\n    BF_API_KEY,\n    NODE_ENV,\n    OPTIMIZE,\n    cwd,\n};\n"],"names":[],"mappings":"AAAA,IAAI,KAAA;AACJ,IAAI,eAAA;AACJ,IAAI,QAAA;AACJ,IAAI,QAAA;AACJ,IAAI,UAAA;AAEJ,MAAM,QAAA,GAAU,OAAO,OAAA,KAAY,WAAA;AACnC,MAAM,GAAA,GAAM,QAAA,GAAW,OAAA,CAAQ,GAAA,EAAI,GAAI,EAAA;AAEvC,IAAI,YAAA,GAAe,QAAA,KAAa,OAAA,CAAQ,GAAA,CAAI,iBAAA,IACxC,OAAA,CAAQ,GAAA,CAAI,2BAAA,IACZ,OAAA,CAAQ,GAAA,CAAI,oBAAA,IACZ,OAAA,CAAQ,GAAA,CAAI,YAAA,CAAA;AAGhB,IAAA,CACM,MAAM;AACJ,EAAA,IAAI;AAEA,IAAA,OAAO,MAAA,CAAA,IAAA,CAAY,GAAA;AAAA,EACvB,SAAS,CAAA,EAAG;AACR,IAAA,OAAO,MAAA;AAAA,EACX;AACJ,CAAA,GACF,EAAG;AACD,EAAA,OAAA,CAAQ,IAAI,kCAAkC,CAAA;AAE9C,EAAA,KAAA,GAAQ,QAAA,CAAS,MAAA,CAAA,IAAA,CAAY,GAAA,CAAI,UAAA,IAAc,GAAG,CAAA;AAElD,EAAA,eAAA,GAAkB,MAAA,CAAA,IAAA,CAAY,IAAI,oBAAA,IAAwB,SAAA;AAE1D,EAAA,QAAA,GAAW,MAAA,CAAA,IAAA,CAAY,GAAA,CAAI,GAAA,GAAM,aAAA,GAAgB,YAAA;AAEjD,EAAA,UAAA,GAAa,MAAA,CAAA,IAAA,CAAY,IAAI,eAAA,IAAmB,EAAA;AAEhD,EAAA,QAAA,GAAW,QAAA,CAAS,MAAA,CAAA,IAAA,CAAY,GAAA,CAAI,aAAA,IAAiB,GAAG,CAAA;AAC5D,CAAA,MAAA,IAAW,YAAA,EAAc;AACrB,EAAA,OAAA,CAAQ,IAAI,sDAAsD,CAAA;AAClE,EAAA,KAAA,GAAQ,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,iBAAA,IAAqB,GAAG,CAAA;AACrD,EAAA,eAAA,GAAkB,OAAA,CAAQ,IAAI,2BAAA,IAA+B,SAAA;AAC7D,EAAA,QAAA,GAAW,OAAA,CAAQ,IAAI,QAAA,IAAY,aAAA;AACnC,EAAA,UAAA,GAAa,OAAA,CAAQ,IAAI,sBAAA,IAA0B,EAAA;AACnD,EAAA,QAAA,GAAW,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,oBAAA,IAAwB,GAAG,CAAA;AAC/D,CAAA,MAAO;AACH,EAAA,OAAA,CAAQ,IAAI,6DAA6D,CAAA;AACzE,EAAA,KAAA,GAAQ,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,KAAA,IAAS,GAAG,CAAA;AACzC,EAAA,eAAA,GAAkB,OAAA,CAAQ,IAAI,eAAA,IAAmB,SAAA;AACjD,EAAA,QAAA,GAAW,OAAA,CAAQ,IAAI,QAAA,IAAY,aAAA;AACnC,EAAA,UAAA,GAAa,OAAA,CAAQ,IAAI,UAAA,IAAc,EAAA;AACvC,EAAA,QAAA,GAAW,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,QAAA,IAAY,GAAG,CAAA;AACnD;AAGA,OAAA,CAAQ,GAAA,CAAI,QAAQ,EAAC,KAAA,EAAO,iBAAiB,QAAA,EAAU,UAAA,EAAY,QAAA,EAAU,GAAA,EAAM,CAAA;AAK5E,MAAM,WAAA,GAAc;AAAA,EACvB,KAAA;AAAA,EACA,eAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA;AACJ;;;;"}