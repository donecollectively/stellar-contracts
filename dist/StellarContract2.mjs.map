{"version":3,"file":"StellarContract2.mjs","sources":["../src/delegation/UutName.ts","../src/colors.ts","../src/utils.ts","../src/delegation/jsonSerializers.ts","../src/diagnostics.ts","../src/UplcConsoleLogger.ts","../src/StellarTxnContext.ts","../src/UtxoHelper.ts","../src/ActivityTypes.ts","../src/helios/dataBridge/DataBridge.ts","../src/StellarContract.ts"],"sourcesContent":["import { bytesToText } from \"../HeliosPromotedTypes.js\";\n\nexport const maxUutName = 32;\n\n/**\n * a unique utility token having a unique name\n * @remarks\n *\n * This class contains a general 'purpose' name, mapped to a unique\n * `name`, which is generated using a seed-utxo pattern.\n *\n * @public\n **/\nexport class UutName {\n    _uutName: string;\n    purpose: string;\n    constructor(purpose: string, fullUutName: string | number[]) {\n        this.purpose = purpose;\n        if (Array.isArray(fullUutName)) {\n            fullUutName = bytesToText(fullUutName);\n        }\n        if (fullUutName.length > maxUutName) {\n            throw new Error(\n                `uut name '${fullUutName}' exceeds max length of ${maxUutName}`\n            );\n        }\n        this._uutName = fullUutName;\n    }\n    /**\n     * the full uniquified name of this UUT\n     * @remarks\n     *\n     * format: `purpose-‹...uniqifier...›`\n     * @public\n     **/\n    get name() {\n        return this._uutName;\n    }\n    toString() {\n        return this._uutName;\n    }\n}\n","// local copy of picocolors.js\n// guards against supply chain attacks\n// original ISC license preserved:\n\n// ISC License\n\n// Copyright (c) 2021-2024 Oleksii Raspopov, Kostiantyn Denysov, Anton Verinov\n\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\nlet p = typeof process == \"undefined\" ? {\n    platform: \"browser\",\n    argv: [] as string[],\n    env: {} as Record<string, string>\n} : process, argv = p.argv, env = p.env\nlet isColorSupported =\n\t!(!!env.NO_COLOR || argv.includes(\"--no-color\")) &&\n\t(!!env.FORCE_COLOR || argv.includes(\"--color\") || \n        p.platform === \"win32\" || \n        (\n            true \n        //  && (p.stdout || {}).isTTY \n        // && env.TERM !== \"dumb\"\n        ) || \n        !!env.CI\n        )\n\nlet formatter = (open, close, replace = open) => {\n    const f = (input) => {\n\t\tlet string = \"\" + input, index = string.indexOf(close, open.length)\n\t\treturn ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close\n\t}\n    f.start = open\n    f.close = close\n    return f\n}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\", cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet f = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: f(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: f(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: f(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: f(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: f(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: f(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: f(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: f(\"\\x1b[9m\", \"\\x1b[29m\"),\n\n\t\tblack: f(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: f(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: f(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: f(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: f(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: f(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: f(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: f(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\n\t\tbgBlack: f(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: f(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: f(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: f(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: f(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: f(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: f(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: f(\"\\x1b[47m\", \"\\x1b[49m\"),\n\n\t\tblackBright: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tredBright: f(\"\\x1b[91m\", \"\\x1b[39m\"),\n\t\tgreenBright: f(\"\\x1b[92m\", \"\\x1b[39m\"),\n\t\tyellowBright: f(\"\\x1b[93m\", \"\\x1b[39m\"),\n\t\tblueBright: f(\"\\x1b[94m\", \"\\x1b[39m\"),\n\t\tmagentaBright: f(\"\\x1b[95m\", \"\\x1b[39m\"),\n\t\tcyanBright: f(\"\\x1b[96m\", \"\\x1b[39m\"),\n\t\twhiteBright: f(\"\\x1b[97m\", \"\\x1b[39m\"),\n\n\t\tbgBlackBright: f(\"\\x1b[100m\", \"\\x1b[49m\"),\n\t\tbgRedBright: f(\"\\x1b[101m\", \"\\x1b[49m\"),\n\t\tbgGreenBright: f(\"\\x1b[102m\", \"\\x1b[49m\"),\n\t\tbgYellowBright: f(\"\\x1b[103m\", \"\\x1b[49m\"),\n\t\tbgBlueBright: f(\"\\x1b[104m\", \"\\x1b[49m\"),\n\t\tbgMagentaBright: f(\"\\x1b[105m\", \"\\x1b[49m\"),\n\t\tbgCyanBright: f(\"\\x1b[106m\", \"\\x1b[49m\"),\n\t\tbgWhiteBright: f(\"\\x1b[107m\", \"\\x1b[49m\"),\n\t} as any\n}\n\n/**\n * @public\n */\nexport const colors : Colors = createColors()\n\n\n/**\n * @public\n */\nexport type Formatter = {\n    start: string;\n    end: string;\n} & ((input: string | number | null | undefined) => string);\n\n/**\n * @public\n */\nexport interface Colors {\n    isColorSupported: boolean;\n\n    reset: Formatter;\n    bold: Formatter;\n    dim: Formatter;\n    italic: Formatter;\n    underline: Formatter;\n    inverse: Formatter;\n    hidden: Formatter;\n    strikethrough: Formatter;\n\n    black: Formatter;\n    red: Formatter;\n    green: Formatter;\n    yellow: Formatter;\n    blue: Formatter;\n    magenta: Formatter;\n    cyan: Formatter;\n    white: Formatter;\n    gray: Formatter;\n\n    bgBlack: Formatter;\n    bgRed: Formatter;\n    bgGreen: Formatter;\n    bgYellow: Formatter;\n    bgBlue: Formatter;\n    bgMagenta: Formatter;\n    bgCyan: Formatter;\n    bgWhite: Formatter;\n\n    blackBright: Formatter;\n    redBright: Formatter;\n    greenBright: Formatter;\n    yellowBright: Formatter;\n    blueBright: Formatter;\n    magentaBright: Formatter;\n    cyanBright: Formatter;\n    whiteBright: Formatter;\n\n    bgBlackBright: Formatter;\n    bgRedBright: Formatter;\n    bgGreenBright: Formatter;\n    bgYellowBright: Formatter;\n    bgBlueBright: Formatter;\n    bgMagentaBright: Formatter;\n    bgCyanBright: Formatter;\n    bgWhiteBright: Formatter;\n}\n\n","import { isValidUtf8 } from \"@helios-lang/codec-utils\";\nimport type { uutPurposeMap } from \"./CapoTypes.js\";\nimport { textToBytes, type valuesEntry } from \"./HeliosPromotedTypes.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport {\n    makeAssets,\n    makeValue,\n    type Value,\n    type MintingPolicyHash,\n} from \"@helios-lang/ledger\";\n\n/**\n * Creates Value-creation entires for a list of uuts\n * @remarks\n *\n * returns a list of `entries` usable in Value's `[mph, entries[]]` tuple.\n * @param uuts - a list of {@link UutName}s or a {@link uutPurposeMap}\n * @public\n **/\nexport function mkUutValuesEntries(uuts: UutName[]): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(uuts: uutPurposeMap<any>): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[];\n/** @public **/\nexport function mkUutValuesEntries(\n    uuts: UutName[] | uutPurposeMap<any>\n): valuesEntry[] {\n    const uutNs = Array.isArray(uuts) ? uuts : Object.values(uuts);\n    const uniqs: UutName[] = [];\n    for (const un of uutNs) {\n        if (!uniqs.includes(un)) uniqs.push(un);\n    }\n    return uniqs.map((uut) => mkValuesEntry(uut.name, BigInt(1)));\n}\n\n/**\n * Creates a tuple usable in a Value, converting token-name to byte-array if needed\n * @public\n **/\nexport function mkValuesEntry(\n    tokenName: string | number[],\n    count: bigint\n): valuesEntry {\n    const tnBytes = Array.isArray(tokenName)\n        ? tokenName\n        : textToBytes(tokenName);\n\n    // addrHint,  //moved to config\n    // reqdAddress,  // removed\n\n    return [tnBytes, count];\n}\n\n/**\n * construct a Value based on a token-name\n * @remarks\n *\n * A simpler version of the Value constructor to serve the\n * common case of a single, string-based token name.\n *\n * If you need the Value to contain its minUtx computed based\n * on network parameters, use the StellarContract's mkMinTv()\n * method instead.\n *\n * @param mph - policy-hash of the token\n * @param tokenName - string name of the token\n * @param count: number of the tokens to include in the value\n * @public\n **/\nexport function mkTv(\n    mph: MintingPolicyHash,\n    tokenName: string | number[],\n    count: bigint = 1n\n): Value {\n    const v = makeValue(\n        0,\n        makeAssets([[mph, [mkValuesEntry(tokenName, count)]]])\n    );\n    return v;\n}\n\n/**\n * Multiplies two numbers using integer math semantics for matching with Helios on-chain Real math\n *\n * @remarks\n * The numbers can be whole or fractional, with 6 decimal places of honored precision.\n * The result is rounded to 6 decimal places.\n * @todo - delegate this to a call into the on-chain version of same\n * @public\n */\nexport function realMul(a: number, b: number) {\n    const a2 = Math.trunc(1000000 * a);\n    const b2 = Math.trunc(1000000 * b);\n    const result1 = a2 * b2;\n    const result2 = result1 / 1_000_000_000_000;\n    if (debugRealMath) {\n        console.log(\"    ---- realMul\", a2, b2);\n        console.log(\"    ---- realMul result1\", result1);\n        console.log(\"    ---- realMul result2\", result2);\n    }\n    return result2;\n}\n\n/**\n * Divides two numbers using integer math semantics for matching with Helios on-chain Real math\n *\n * @remarks\n * The numbers can be whole or fractional, with 6 decimal places of honored precision.\n * The result is rounded to 6 decimal places.\n * @todo - delegate this to a call into the on-chain version of same\n * @public\n */\nexport function realDiv(a: number, b: number) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    const a2 = Math.trunc(1_000_000 * a);\n    const b2 = Math.trunc(1_000_000 * b);\n    const result1 = a2 / b;\n    // const result2 = toFixedReal(result1 / 1_000_000);\n    const result2 = Math.round(result1) / 1_000_000;\n    if (debugRealMath) {\n        console.log(\"    ---- realDiv\", a, \"/\", b);\n        console.log(\"    ---- realDiv\", a2);\n        console.log(\"    ---- realDiv result1\", result1);\n        console.log(\"    ---- realDiv result2\", result2);\n    }\n    return result2;\n}\n\n/**\n * Rounds a number to 6 decimal places, with correction for low-value floating-point\n * errors e.g. `(2.999999999) -> 3.0`\n * @public\n */\nexport function toFixedReal(n: number) {\n    return parseFloat((Math.floor(n * 1_000_000 + 0.1) / 1_000_000).toFixed(6));\n}\n/**\n * Temporarily enable debugRealMath for the duration of the callback\n * @internal\n */\nexport function debugMath<T extends number>(callback: () => T): T {\n    const old = debugRealMath;\n    debugRealMath = true;\n    const result = callback();\n    debugRealMath = old;\n    return result;\n}\n\nlet debugRealMath = false;\n\n\n\n/**\n * @public\n */\nexport class TxNotNeededError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"TxAlreadyPresentError\";\n    }\n}\n\n/**\n * @public\n */\nexport class AlreadyPendingError extends TxNotNeededError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"AlreadyPendingError\";\n    }\n}\n\n/**\n * @public\n */\nexport function checkValidUTF8(data: number[]) {\n  // quickly check, without throwing errors, for invalid UTF-8 sequences:\n  let i = 0;\n  while (i < data.length) {\n    if ((data[i] & 0x80) === 0x00) {\n      i++;\n    } else if ((data[i] & 0xE0) === 0xC0) {\n      if (i + 1 >= data.length || (data[i + 1] & 0xC0) !== 0x80) return false;\n      i += 2;\n    } else if ((data[i] & 0xF0) === 0xE0) {\n      if (i + 2 >= data.length || (data[i + 1] & 0xC0) !== 0x80 || (data[i + 2] & 0xC0) !== 0x80) return false;\n      i += 3\n    } else if ((data[i] & 0xF8) === 0xF0) {\n      if (i + 3 >= data.length || (data[i + 1] & 0xC0) !== 0x80 || (data[i + 2] & 0xC0) !== 0x80 || (data[i + 3] & 0xC0) !== 0x80) return false;\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n  // if it didn't fail above, fine - but still defer to isValidUtf8.  it CAN throw (and catch) an error,\n  // but the above checks are much likelier to return false with NO caught error.\n  return isValidUtf8(data);\n}\n\nexport {colors} from \"./colors.js\"","import { bytesToHex } from \"@helios-lang/codec-utils\";\nimport { encodeBech32 } from \"@helios-lang/crypto\";\nimport { type Address, type AssetClass } from \"@helios-lang/ledger\";\nimport { type MintingPolicyHash } from \"@helios-lang/ledger\";\nimport { bytesToText } from \"../HeliosPromotedTypes.js\";\nimport {\n    txOutputIdAsString,\n    valueAsString,\n    assetsAsString,\n    policyIdAsString,\n    displayTokenName,\n} from \"../diagnostics.js\";\nimport type { ByteArrayData, IntData } from \"@helios-lang/uplc\";\nimport { checkValidUTF8 } from \"../utils.js\";\n\n/**\n * toJSON adapter for delegate links\n * @remarks\n * used for on-chain serialization of contract config details\n * @internal\n **/\nexport function delegateLinkSerializer(key: string, value: any) {\n    if (typeof value === \"bigint\") {\n        return value.toString();\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        return bytesToHex(value);\n    } else if (value?.kind == \"Address\") {\n        return value.toString();\n    } else if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value);\n    }\n    if (\"capo\" == key) return undefined;\n    if (\"uh\" == key) return '\"‹utxo helper›\"';\n    if (\"capoBundle\" == key) return '\"‹capo bundle›\"';\n\n    return value; // return everything else unchanged\n}\n\n/**\n *  this is NOT a jsonifier, but it emits nice-looking info onscreen when used with JSON.stringify (in arg2)\n * @public\n */\nexport function uplcDataSerializer(key: string, value: any, depth = 0) {\n    const indent = \"    \".repeat(depth);\n    const outdent = \"    \".repeat(Math.max(0, depth - 1));\n\n    if (typeof value === \"bigint\") {\n        return `big‹${value.toString()}n›`;\n    } else if (\"bytes\" == key && Array.isArray(value)) {\n        // return `‹bytes‹${value.length}›=${bytesToHex(value)}›`;\n        return abbreviatedDetailBytes(`bytes‹${value.length}›`, value, 40);\n    } else if (\"string\" == typeof value) {\n        return `'${value}'`; // JSON.stringify(value, null, 4);\n    } else if (value === null) {\n        return `‹null›`;\n    } else if (\"undefined\" == typeof value) {\n        return `‹und›`;\n    } else if (value.kind == \"Address\") {\n        const a = value as Address;\n        const cbor = a.toCbor();\n        // const b = decodeAddress(cbor)\n        return (\n            `‹${abbrevAddress(value)}› = ` +\n            abbreviatedDetailBytes(`cbor‹${cbor.length}›:`, cbor, 99)\n        );\n    } else if (value.kind == \"ValidatorHash\") {\n        return abbreviatedDetailBytes(\n            `script‹${value.bytes.length}›`,\n            value.bytes\n        );\n    } else if (value.kind == \"MintingPolicyHash\") {\n        const v: MintingPolicyHash = value;\n        return `mph‹${policyIdAsString(v)}›`;\n        // .toHex())}›`;\n    } else if (value.kind == \"TxOutputId\") {\n        return `‹txoid:${txOutputIdAsString(value, 8)}›`;\n    }\n    if (value.rawData) {\n        return uplcDataSerializer(key, value.rawData, Math.max(depth, 3));\n    }\n    if (value.kind == \"int\") {\n        const v: IntData = value;\n        return `IntData‹${v.value}›`;\n    }\n    if (value.kind == \"bytes\") {\n        const v = value as ByteArrayData;\n        return abbreviatedDetailBytes(\n            `ByteArray‹${v.bytes.length}›`,\n            v.bytes,\n            40\n        );\n    }\n    if (value.kind == \"Value\") {\n        return valueAsString(value);\n    }\n    if (value.kind == \"Assets\") {\n        return `assets:‹${assetsAsString(value)}›`;\n    }\n    if (value.kind == \"AssetClass\") {\n        const ac = value as AssetClass;\n        return `assetClass:‹${policyIdAsString(ac.mph)} ${displayTokenName(\n            ac.tokenName\n        )}}›`;\n    }\n    if (value.kind)\n        console.log(\"info: no special handling for KIND = \", value.kind);\n\n    if (\"tn\" == key && Array.isArray(value)) {\n        return bytesToText(value);\n    } else if (\"number\" == typeof value) {\n        return value.toString();\n    } else if (value instanceof Map) {\n        return `map‹${value.size}›: { ${uplcDataSerializer(\n            \"\",\n            Object.fromEntries(value.entries()),\n            Math.max(depth, 3)\n        )}    }`;\n    } else if (Array.isArray(value) && value.length == 0) {\n        return \"[]\";\n    } else if (\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"number\")\n    ) {\n        return `${abbreviatedDetailBytes(`bytes‹${value.length}›`, value, 40)}`;\n        // } else if (value.toString) {\n        //     return value.toString();\n    } else if (Array.isArray(value)) {\n        const inner = value.map((v) =>\n            uplcDataSerializer(\"\", v, Math.max(depth + 1, 3))\n        );\n        let extraNewLine = \"\";\n        let usesOutdent = \"\";\n        const multiLine = inner\n            .map((s) => {\n                const hasNewline = s.trim().includes(\"\\n\");\n                if (s.length > 40) {\n                    extraNewLine = \"\\n\";\n                    usesOutdent = outdent;\n                    return `${indent}${s}`;\n                } else {\n                    // console.log(\"length, hasNewline = \", s.length, hasNewline)\n                }\n                return s;\n            })\n            .join(`, ${extraNewLine}`);\n        // console.log(\"array uses newline/outdent\", {extraNewLine, usesOutdent});\n\n        return `[ ${extraNewLine}${multiLine}${extraNewLine}${usesOutdent} ]`;\n    }\n\n    if (!value) {\n        return JSON.stringify(value);\n    }\n    const keys = Object.keys(value);\n    if (keys.length == 0) {\n        return key ? \"\" : \"{}\";\n    }\n    if (keys.length == 1) {\n        const singleKey = keys[0];\n        const thisValue = value[singleKey];\n        let inner = uplcDataSerializer(\"\", thisValue, Math.max(depth, 3)) || \"\";\n        if (Array.isArray(thisValue)) {\n            if (!inner.length) {\n                inner = \"[ ‹empty list› ]\";\n            }\n        } else {\n            if (inner.length) inner = `{ ${inner} }`;\n        }\n        let s = `${singleKey}: ${inner}`;\n        // if (key) return `**1k** ${key}: ${s}`\n        return s;\n    }\n    let extraNewLine = \"\";\n    let usesOutdent = \"\";\n    let s = keys.map(\n        (k) =>\n            `${indent}${k}: ${\n                uplcDataSerializer(k, value[k], Math.max(depth + 1, 2))\n                //    JSON.stringify(value[k], datumSerializer, 4)\n                // }`).join(`,\\nz${indent}`);\n            }`\n    );\n    const multiLineItems = s.map((s) => {\n        if (s.length < 40 && !s.includes(\"\\n\")) {\n            return `${s}`;\n        } else {\n            extraNewLine = \"\\n\";\n            usesOutdent = outdent;\n            return `${s}`;\n        }\n        return s;\n    });\n    const multiLine = multiLineItems.join(`, ${extraNewLine}`);\n    s = `${multiLine}${extraNewLine}${usesOutdent}`;\n\n    if (key) return `{${extraNewLine}${s}}`;\n    return `\\n${s}`;\n}\n/**\n * short version of address for compact display\n * @public\n */\nexport function abbrevAddress(address: Address) {\n    return abbreviatedDetail(address.toString(), 12, false);\n}\n\n/**\n * short representation of bytes for compact display\n * @public\n */\nexport function abbreviatedDetailBytes(\n    prefix: string,\n    value: number[],\n    initLength = 8\n) {\n    const hext = bytesToHex(value);\n    const Len = value.length;\n    const text = checkValidUTF8(value)\n        ? ` ‹\"${abbreviatedDetail(bytesToText(value), initLength)}\"›`\n        : ``;\n\n    if (value.length <= initLength) return `${prefix}${hext}${text}`;\n    const checksumString = encodeBech32(\"_\", value).slice(-4);\n    return `${prefix}${hext.slice(0, initLength)}… ‹${checksumString}›${text}`;\n}\n\n/**\n * short version of hex string for compact display\n * @internal\n */\nexport function abbreviatedDetail(\n    hext: string,\n    initLength = 8,\n    countOmitted: boolean = false\n) {\n    const p = typeof process == \"undefined\" ? {\n        env: {} as Record<string, string>\n    } : process;\n    if (p?.env?.EXPAND_DETAIL) {\n        return hext;\n    } else {\n        if (hext.length <= initLength) return hext;\n        const omittedCount = countOmitted ? hext.length - initLength - 4 : 0;\n        let omittedString = countOmitted ? `‹…${omittedCount}…›` : \"…\";\n        if (countOmitted && omittedCount < omittedString.length) {\n            omittedString = hext.slice(initLength, -4);\n        }\n        return `${hext.slice(0, initLength)}${omittedString}${hext.slice(-4)}`;\n    }\n}\n","import type { ErrorMap } from \"./delegation/RolesAndDelegates.js\";\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\nimport {\n    makeByteArrayData,\n    type ByteArrayData,\n    type UplcProgramV2,\n} from \"@helios-lang/uplc\";\nimport {\n    uplcDataSerializer,\n    abbreviatedDetail,\n    abbreviatedDetailBytes,\n} from \"./delegation/jsonSerializers.js\";\nimport {\n    type Value,\n    type Address,\n    type Tx,\n    type TxId,\n    type TxInput,\n    type TxOutput,\n    type TxOutputId,\n    type NetworkParams,\n    type Assets,\n    type MintingPolicyHash,\n    type TxRedeemer,\n    type TxOutputDatum,\n    makeAddress,\n    makeNetworkParamsHelper,\n} from \"@helios-lang/ledger\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\nimport {\n    bytesToText,\n    textToBytes,\n    type InlineDatum,\n} from \"./HeliosPromotedTypes.js\";\nimport type { UtxoDisplayCache } from \"./StellarContract.js\";\n\n/**\n * converts a hex string to a printable alternative, with no assumptions about the underlying data\n * @remarks\n *\n * Unlike Helios' bytesToText, hexToPrintable() simply changes printable characters to characters,\n * and represents non-printable characters in '‹XX›' format.\n * @param hexStr - hex input\n * @public\n **/\nexport function hexToPrintableString(hexStr: string) {\n    let result = \"\";\n    for (let i = 0; i < hexStr.length; i += 2) {\n        let hexChar = hexStr.substring(i, i + 2);\n        let charCode = parseInt(hexChar, 16);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += String.fromCharCode(charCode);\n        } else {\n            result += `‹${hexChar}›`;\n        }\n\n        // todo decode utf8 parts using bytesToText(...substring...)\n        // int         required_len;\n        // if (key[0] >> 7 == 0)\n        //     required_len = 1;\n        // else if (key[0] >> 5 == 0x6)\n        //     required_len = 2;\n        // else if (key[0] >> 4 == 0xE)\n        //     required_len = 3;\n        // else if (key[0] >> 5 == 0x1E)\n        //     required_len = 4;\n        // else\n        //     return (0);\n        // return (strlen(key) == required_len && chars_are_folow_uni(key + 1));\n    }\n    return result;\n}\n\n/**\n * Displays a token name in a human-readable form\n * @remarks\n * Recognizes CIP-68 token names and displays them in a special format.\n * @param nameBytesOrString - the token name, as a string or byte array\n * @public\n */\nexport function displayTokenName(nameBytesOrString: string | number[]) {\n    // check if it is a cip-68 token name by inspecting the first 4 bytes.  If they don't match the cip-68 pattern, display using stringToPrintableString.\n    // if it has a cip-68 tag in the first 4 bytes, show the cip-68 tag as `‹cip68/{tag}›` and append the rest of the token name as a string.\n    // inspect the first 4 bytes by:\n    //  - converting them to hex\n    //  - checking if the first and last nibbles are 0's (if not, then it is not a cip-68 token name)\n    //  - removing the first and last nibbles, shifting the hex string to the left by 1 nibble to get a 2-byte tag and 1 byte of checksum\n    //  - separating the cip-68 tag from the checksum\n    //  - parsing the cip-68 tag as a number (parseInt(numHex, 16))\n\n    let nameString = \"\";\n    let cip68Tag = \"\";\n    let cip68TagHex = \"\";\n    let checksum = \"\";\n    let tagBytes = \"\";\n    let nameBytesHex = \"\";\n    let nameBytesString = \"\";\n    let isCip68 = false;\n    if (typeof nameBytesOrString === \"string\") {\n        // convert the bytes of the string to hex\n        // function(byte) {\n        //     return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n        //   }).join('');\n        nameBytesHex = textToBytes(nameBytesOrString)\n            .map((byte) => ('0' + (byte & 0xFF).toString(16)).slice(-2))\n            .join('');\n        nameString = nameBytesOrString;\n    } else {\n        nameBytesHex = nameBytesOrString\n            .map((byte) => ('0' + (byte & 0xFF).toString(16)).slice(-2))\n            .join('');\n        nameString = stringToPrintableString(nameBytesOrString);\n    }\n    // check if the first 4 bytes are a cip-68 token name\n    if (nameBytesHex.length >= 8) {\n        // check if the first and last nibbles are 0's\n        if (\n            nameBytesHex.substring(0, 1) === \"0\" &&\n            nameBytesHex.substring(7, 8) === \"0\"\n        ) {\n            // remove the first and last nibbles\n            cip68TagHex = nameBytesHex.substring(1, 5);\n            checksum = nameBytesHex.substring(5, 7);\n\n            // separate the cip-68 tag from the checksum\n            cip68Tag = parseInt(cip68TagHex, 16).toString();\n            nameString = stringToPrintableString(nameBytesOrString.slice(4));\n\n            // TODO: check the crc-8 checksum of the tag\n            isCip68 = true;\n        }\n    }\n    if (isCip68) {\n        nameString = `‹cip68/${cip68Tag}›${nameString}`;\n    } else {\n        nameString = stringToPrintableString(nameBytesOrString);\n    }\n    return nameString;\n}\n\n/**\n * Presents a string in printable form, even if it contains non-printable characters\n *\n * @remarks\n * Non-printable characters are shown in '‹XX›' format.\n * @public\n */\nexport function stringToPrintableString(str: string | number[]) {\n    if (\"string\" != typeof str) {\n        // use a TextEncoder to identify if it is a utf8 string\n        try {\n            return new TextDecoder(\"utf-8\", { fatal: true }).decode(\n                new Uint8Array(str as number[])\n            );\n        } catch (e) {\n            // if it is not a utf8 string, fall back to printing what's printable and showing hex for other bytes\n            str = Buffer.from(str as number[]).toString(\"hex\");\n        }\n    }\n    let result = \"\";\n    for (let i = 0; i < str.length; i++) {\n        let charCode = str.charCodeAt(i);\n\n        // ASCII printable characters are in the range 32 (space) to 126 (~)\n        if (charCode >= 32 && charCode <= 126) {\n            result += str[i];\n        } else {\n            result += `‹${charCode.toString(16)}›`;\n        }\n    }\n    return result;\n}\n\n/**\n * Converts an array of [ policyId, ‹tokens› ] tuples for on-screen presentation\n * @remarks\n *\n * Presents policy-ids with shortened identifiers, and shows a readable & printable\n * representation of token names even if they're not UTF-8 encoded.\n * @public\n **/\nexport function assetsAsString(\n    a: Assets,\n    joiner = \"\\n    \",\n    showNegativeAsBurn?: \"withBURN\",\n    mintRedeemers?: Record<number, string>\n) {\n    const assets = a.assets;\n    return (\n        assets?.map(([policyId, tokenEntries], index) => {\n            let redeemerInfo = mintRedeemers?.[index] || \"\";\n            if (redeemerInfo) {\n                redeemerInfo = `\\n        r = ${redeemerInfo} `;\n            }\n            const tokenString = tokenEntries\n                .map(([nameBytes, count]: [number[], bigint]) => {\n                    // const nameString =  hexToPrintableString(nameBytes.hex);\n                    const nameString = displayTokenName(nameBytes);\n\n                    const negWarning =\n                        count < 1n\n                            ? showNegativeAsBurn\n                                ? \"🔥 \"\n                                : \" ⚠️ NEGATIVE⚠️\"\n                            : \"\";\n                    const burned =\n                        count < 1\n                            ? showNegativeAsBurn\n                                ? \"- BURN 🔥 \"\n                                : \"\"\n                            : \"\";\n                    return `${negWarning} ${count}×💴 ${nameString} ${burned}`;\n                })\n                .join(\"+\");\n            return `⦑${policyIdAsString(\n                policyId\n            )} ${tokenString} ${redeemerInfo}⦒`;\n        }) || []\n    ).join(joiner);\n}\n\n/**\n * Converts a MintingPolicyHash to a printable form\n * @public\n **/\nexport function policyIdAsString(p: MintingPolicyHash) {\n    const pIdHex = p.toHex();\n    const abbrev = abbreviatedDetail(pIdHex);\n    return `🏦 ${abbrev}`;\n}\n\n/**\n * Converts lovelace to approximate ADA, in consumable 3-decimal form\n * @public\n **/\nexport function lovelaceToAdaOld(l: bigint | number) {\n    const asNum = parseInt(l.toString());\n    const ada =\n        (asNum && `${(Math.round(asNum / 1000) / 1000).toFixed(3)} ADA`) || \"\";\n    return ada;\n}\n\n/**\n * Converts lovelace to approximate ADA, in consumable 3-decimal form\n * @public\n */\nexport function lovelaceToAda(lovelace: bigint | number): string {\n    const asNum = parseInt(lovelace.toString());\n    // input: 6004000 should output 6_004.000\n    // input: 700396001000 should output 700_396.001\n    // input: 400202 should output 0.400_202\n    const whole = Math.floor(asNum / 1_000_000).toFixed(0);\n    let fraction = (asNum % 1_000_000).toFixed(0); // \"\"\n    fraction = fraction.padStart(6, \"0\");\n    const wholeWithSeparators = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"_\");\n    let fractionWithSeparators = fraction\n        .replace(/(\\d{3})(?=\\d)/g, \"$1_\")\n        .replace(/^-/, \"\"); // remove leading - if any\n    return `${wholeWithSeparators}.${fractionWithSeparators} ADA`;\n}\n\n/**\n * Converts a bigint or number to a string with commas as thousands separators\n * @public\n */\nexport function intWithGrouping(i : bigint | number) {\n    const whole = Math.floor(Number(i)).toFixed(0);\n    const fraction = Math.abs(Number(i) - Math.floor(Number(i))).toFixed(0);\n    const wholeWithSeparators = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"_\");\n    const fractionWithSeparators = fraction\n        .replace(/(\\d{3})(?=\\d)/g, \"$1_\")\n    return `${wholeWithSeparators}.${fractionWithSeparators}`;\n}\n/**\n * Converts a Value to printable form\n * @public\n **/\nexport function valueAsString(v: Value) {\n    const ada = lovelaceToAda(v.lovelace);\n    const assets = assetsAsString(v.assets);\n    return [ada, assets].filter((x) => !!x).join(\" + \");\n}\n\n/**\n * Converts a Tx to printable form\n * @public\n **/\nexport function txAsString(tx: Tx, networkParams?: NetworkParams): string {\n    const outputOrder = [\n        [\"body\", \"inputs\"],\n        [\"body\", \"minted\"],\n        [\"body\", \"outputs\"],\n        [\"body\", \"refInputs\"],\n        [\"witnesses\", \"redeemers\"],\n        [\"body\", \"signers\"],\n        [\"witnesses\", \"v2refScripts\"],\n        [\"witnesses\", \"v2scripts\"],\n        [\"witnesses\", \"nativeScripts\"],\n        [\"body\", \"collateral\"],\n        [\"body\", \"collateralReturn\"],\n        [\"body\", \"scriptDataHash\"],\n        [\"body\", \"metadataHash\"],\n        [\"witnesses\", \"signatures\"],\n        [\"witnesses\", \"datums\"],\n        [\"body\", \"lastValidSlot\"],\n        [\"body\", \"firstValidSlot\"],\n        [\"body\", \"fee\"],\n    ];\n\n    let details = \"\";\n    if (!networkParams) {\n        console.warn(\n            new Error(`dumpAny: no networkParams; can't show txn size info!?!`)\n        );\n    }\n\n    const networkParamsHelper = networkParams\n        ? makeNetworkParamsHelper(networkParams)\n        : undefined;\n\n    // const d = tx.dump();\n    const seenRedeemers = new Set();\n\n    const allRedeemers = tx.witnesses.redeemers as any;\n    let hasIndeterminate = false;\n    const inputRedeemers: Record<\n        string | number,\n        { r?: TxRedeemer; display: string }\n    > = Object.fromEntries(\n        allRedeemers\n            .map((x: TxRedeemer, index: number) => {\n                // debugger;\n                if (x.kind != \"TxSpendingRedeemer\") return undefined;\n                // if (!(\"inputIndex\" in x)) return undefined;\n                const { inputIndex } = x;\n                const isIndeterminate = inputIndex == -1;\n                if (isIndeterminate) hasIndeterminate = true;\n                const inpIndex = isIndeterminate ? `‹unk${index}›` : inputIndex;\n                if (!x.data) debugger;\n                const showData = x.data.rawData\n                    ? uplcDataSerializer(\"\", x.data.rawData)\n                    : x.data?.toString() || \"‹no data›\";\n                return [inpIndex, { r: x, display: showData }];\n            })\n            .filter((x) => !!x)\n    );\n    if (hasIndeterminate)\n        inputRedeemers[\"hasIndeterminate\"] = {\n            r: undefined,\n            display: \"‹unk›\",\n        };\n\n    const mintRedeemers = Object.fromEntries(\n        allRedeemers\n            .map((x) => {\n                if (\"TxMintingRedeemer\" != x.kind) return undefined;\n                if (\"number\" != typeof x.policyIndex) {\n                    debugger;\n                    throw new Error(`non-mint redeemer here not yet supported`);\n                }\n                if (!x.data) debugger;\n\n                const showData =\n                    (x.data.rawData\n                        ? uplcDataSerializer(\"\", x.data.rawData)\n                        : x.data?.toString() || \"‹no data›\") +\n                    \"\\n\" +\n                    bytesToHex(x.data.toCbor());\n\n                return [x.policyIndex, showData];\n            })\n            .filter((x) => !!x)\n    );\n\n    //!!! todo: improve interface of tx so useful things have a non-private api\n    //!!! todo: get back to type-safety in this diagnostic suite\n    for (const [where, x] of outputOrder) {\n        let item = tx[where][x];\n        let skipLabel = false;\n        if (Array.isArray(item) && !item.length) continue;\n\n        if (!item) continue;\n        if (\"inputs\" == x) {\n            item = `\\n  ${item\n                .map((x: TxInput, i) => {\n                    const { r, display } =\n                        inputRedeemers[i] ||\n                        inputRedeemers[\"hasIndeterminate\"] ||\n                        {};\n                    if (!display && x.datum?.data) debugger;\n                    tx;\n                    if (r) seenRedeemers.add(r);\n                    return txInputAsString(\n                        x,\n                        /* unicode blue arrow right -> */ \"➡️  \" + `@${1 + i} `,\n                        i,\n                        display // || \"‹failed to find redeemer info›\"\n                    );\n                })\n                .join(\"\\n  \")}`;\n        }\n        if (\"refInputs\" == x) {\n            item = `\\n  ${item\n                .map((x) => txInputAsString(x, \"ℹ️  \"))\n                .join(\"\\n  \")}`;\n        }\n        if (\"collateral\" == x) {\n            //!!! todo: group collateral with inputs and reflect it being spent either way,\n            //     IFF it is also a tx `input`\n            //!!! todo: move collateral to bottom with collateralReturn,\n            //     IFF it is not part of the tx `inputs`\n            item = item.map((x) => txInputAsString(x, \"🔪\")).join(\"\\n    \");\n        }\n        if (\"minted\" == x) {\n            if (!item.assets.length) {\n                continue;\n            }\n            item = `\\n   ❇️  ${assetsAsString(\n                item,\n                \"\\n   ❇️  \",\n                \"withBURN\",\n                mintRedeemers\n            )}`;\n        }\n        if (\"outputs\" == x) {\n            item = `\\n  ${item\n                .map((x, i) =>\n                    txOutputAsString(\n                        x,\n                        \"🔹\" /* <-- unicode blue bullet */ + `${i} <-`\n                    )\n                )\n                .join(\"\\n  \")}`;\n        }\n        if (\"firstValidSlot\" == x || \"lastValidSlot\" == x) {\n            if (networkParamsHelper) {\n                const slotTime = new Date(networkParamsHelper.slotToTime(item));\n                const timeDiff = (slotTime.getTime() - Date.now()) / 1000;\n                // format timeDiff with explicit plus or minus sign:\n                const sign = timeDiff > 0 ? \"+\" : \"-\";\n                const timeDiffString =\n                    sign + Math.abs(timeDiff).toFixed(1) + \"s\";\n\n                item = `${item} ${slotTime.toLocaleDateString()} ${slotTime.toLocaleTimeString()} (now ${timeDiffString})`;\n            }\n        }\n\n        if (\"signers\" == x) {\n            item = item.map((x) => {\n                const hex = x.toHex();\n                return `🔑#${hex.slice(0, 6)}…${hex.slice(-4)}`;\n            });\n        }\n\n        if (\"fee\" == x) {\n            item = lovelaceToAda(item);\n\n            // tx.profileReport.split(\"\\n\")[0];\n            // todo: find profile info and restore it here\n        }\n\n        if (\"collateralReturn\" == x) {\n            skipLabel = true;\n            item = `  ${txOutputAsString(\n                item,\n                `0  <- ❓`\n            )} conditional: collateral change (returned in case of txn failure)`;\n        }\n        if (\"scriptDataHash\" == x) {\n            item = bytesToHex(item);\n        }\n\n        if (\"datums\" == x && !Object.entries(item || {}).length) continue;\n        if (\"signatures\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                const addr = makeAddress(true, s.pubKeyHash);\n                const hashHex = s.pubKeyHash.toHex();\n                return `🖊️ ${addrAsString(addr)} = 🔑…${hashHex.slice(-4)}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"redeemers\" == x) {\n            if (!item) continue;\n\n            //!!! todo: augment with mph when that's available from the Activity.\n            item = item.map((x) => {\n                // console.log(\"redeemer keys\", ...[ ...Object.keys(x2) ], x2.dump());\n                // const isIndeterminate = x.inputIndex == -1;\n                // if (isIndeterminate) indeterminateRedeemerDetails = true;\n                // debugger\n                // const indexInfo = isIndeterminate\n                //     ? `spend txin #‹tbd›`\n                // if (x.kind == \"TxSpendingRedeemer\") {\n                //     debugger\n                // }\n                const indexInfo =\n                    x.kind == \"TxMintingRedeemer\"\n                        ? `minting policy ${x.policyIndex}`\n                        : `spend txin ➡️  @${1 + x.inputIndex}`;\n\n                const showData = seenRedeemers.has(x)\n                    ? \"(see above)\"\n                    : x.data.fromData\n                    ? uplcDataSerializer(\"\", x.data.fromData)\n                    : x.data.toString();\n                return `🏧  ${indexInfo} ${showData}`;\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"v2Scripts\" == x) {\n            if (!item) continue;\n            item = item.map((s) => {\n                try {\n                    const mph = s.mintingPolicyHash.toHex();\n                    // debugger\n                    return `🏦 ${mph.slice(0, 8)}…${mph.slice(-4)} (minting): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                } catch (e) {\n                    const vh = s.validatorHash;\n\n                    const vhh = vh.toHex();\n                    const addr = makeAddress(true, vh);\n                    // debugger\n                    return `📜 ${vhh.slice(0, 8)}…${vhh.slice(\n                        -4\n                    )} (validator at ${addrAsString(addr)}): ${\n                        s.serializeBytes().length\n                    } bytes`;\n                }\n            });\n            if (item.length > 1) item.unshift(\"\");\n            item = item.join(\"\\n    \");\n        }\n        if (\"v2RefScripts\" == x) {\n            item = `${item.length} - see refInputs`;\n            // todo: @helios give us refScripts outside of dump(), which only shows us hex.\n        }\n\n        if (!item) continue;\n        details += `${skipLabel ? \"\" : \"  \" + x + \": \"}${item}\\n`;\n    }\n    try {\n        details += `  txId: ${tx.id().toHex()}`;\n        if (networkParams) details += `  \\n\\nsize: ${tx.toCbor().length} bytes`;\n    } catch (e) {\n        details = details + `(Tx not yet finalized!)`;\n        if (networkParams) details += `\\n  - NOTE: can't determine txn size\\n`;\n    }\n    return details;\n}\n\n/**\n * Converts a TxInput to printable form\n * @remarks\n *\n * Shortens address and output-id for visual simplicity; doesn't include datum info\n * @public\n **/\nexport function txInputAsString(\n    x: TxInput,\n    prefix = \"-> \",\n    index?: number,\n    redeemer?: string\n): string {\n    const { output: oo } = x;\n    const redeemerInfo = redeemer ? `\\n    r = ${redeemer}` : \" ‹no redeemer›\";\n    const datumInfo =\n        oo.datum?.kind == \"InlineTxOutputDatum\" ? datumSummary(oo.datum) : \"\";\n\n    return `${prefix}${addrAsString(x.address)}${showRefScript(\n        oo.refScript as any\n    )} ${valueAsString(x.value)} ${datumInfo} = 📖 ${txOutputIdAsString(\n        x.id\n    )}${redeemerInfo}`;\n}\n\n/**\n * Converts a list of UTxOs to printable form\n * @remarks\n *\n * ... using {@link utxoAsString}\n * @public\n **/\nexport function utxosAsString(\n    utxos: TxInput[],\n    joiner = \"\\n\",\n    utxoDCache?: UtxoDisplayCache\n): string {\n    return utxos.map((u) => utxoAsString(u, \" 💵\", utxoDCache)).join(joiner);\n}\n/**\n * Converts a TxOutputId to printable form\n * @public\n */\nexport function txOutputIdAsString(x: TxOutputId, length = 8): string {\n    return (\n        txidAsString(x.txId, length) +\n        \"🔹\" /* <-- unicode blue bullet */ +\n        `#${x.index}`\n    );\n}\n\n/**\n * Converts a TxId to printable form\n * @remarks\n *\n * ... showing only the first 6 and last 4 characters of the hex\n * @public\n **/\nexport function txidAsString(x: TxId, length = 8): string {\n    const tid = x.toHex();\n    return `${tid.slice(0, length)}…${tid.slice(-4)}`;\n}\n\n/**\n * converts a utxo to printable form\n * @remarks\n *\n * shows shortened output-id and the value being output, plus its datum\n * @internal\n **/\nexport function utxoAsString(\n    x: TxInput,\n    prefix = \"💵\",\n    utxoDCache?: UtxoDisplayCache\n): string {\n    return ` 📖 ${txOutputIdAsString(x.id)}: ${txOutputAsString(\n        x.output,\n        prefix,\n        utxoDCache,\n        x.id\n    )}`;\n}\n\n/**\n * converts a Datum to a printable summary\n * @remarks\n *\n * using shortening techniques for the datumHash\n * @public\n **/\nexport function datumSummary(d: TxOutputDatum | null | undefined): string {\n    if (!d) return \"\"; //\"‹no datum›\";\n\n    // debugger\n    const dh = d.hash.toHex();\n    const dhss = `${dh.slice(0, 8)}…${dh.slice(-4)}`;\n    if (d.kind == \"InlineTxOutputDatum\") {\n        const attachedData = d.data.rawData;\n        if (attachedData) {\n            return `\\n    d‹inline:${dhss} - ${\n                uplcDataSerializer(\"\", attachedData) //.slice(1,-1)\n            }=${d.toCbor().length} bytes›`;\n        } else {\n            return `d‹inline:${dhss} - ${d.toCbor().length} bytes›`;\n        }\n    }\n    return `d‹hash:${dhss}…›`;\n}\n// /**\n//  * @internal\n//  */\n// export function datumExpanded(d: Datum | null | undefined): string {\n//     if (!d) return \"\";\n//     if (!d.isInline()) return \"\";\n//     const data = bytesToHex(d.data?.toCbor());\n//     return `\\n    d = ${data}`;\n// }\n\n/**\n * Displays a short summary of any provided reference script\n * @remarks\n *\n * detailed remarks\n * @param ‹pName› - descr\n * @typeParam ‹pName› - descr (for generic types)\n * @public\n **/\nexport function showRefScript(rs?: UplcProgramV2 | null) {\n    if (!rs) return \"\";\n    const hash = rs.hash();\n    const hh = bytesToHex(hash);\n    const size = rs.toCbor().length;\n    const rshInfo = `${hh.slice(0, 8)}…${hh.slice(-4)}`;\n    return ` ‹📀 refScript📜 ${rshInfo}: ${size} bytes› +`;\n}\n\n/**\n * Converts a txOutput to printable form\n * @remarks\n *\n * including all its values, and shortened Address.\n * @public\n **/\nexport function txOutputAsString(\n    x: TxOutput,\n    prefix = \"<-\",\n    utxoDCache?: UtxoDisplayCache,\n    txoid?: TxOutputId\n): string {\n    if (utxoDCache && !txoid) {\n        throw new Error(\n            `txOutputAsString: must provide txoid when using cache`\n        );\n    }\n    let cache = utxoDCache?.get(txoid!);\n    if (cache) {\n        return `♻️ ${cache} (same as above)`;\n    }\n    cache = `${prefix} ${addrAsString(x.address)}${showRefScript(\n        x.refScript as any\n    )} ${valueAsString(x.value)}`;\n    utxoDCache?.set(txoid!, cache);\n\n    return `${cache} ${datumSummary(x.datum)}`;\n}\n\n/**\n * Renders an address in shortened bech32 form, with prefix and part of the bech32 suffix\n * @remarks\n * @param address - address\n * @public\n **/\nexport function addrAsString(address: Address): string {\n    const bech32 = address.toString();\n    // const uplc = address.toUplcData?.();\n    // const hex = bytesToHex(uplc.toCbor());\n    return `${bech32.slice(0, 14)}…${bech32.slice(-4)}`;\n    // + ` = `+abbreviatedDetailBytes(\"‹cbor:\", uplc.toCbor(), 99)+\"›\"\n}\n\n/**\n * Converts an Errors object to a string for onscreen presentation\n * @public\n **/\nexport function errorMapAsString(em: ErrorMap, prefix = \"  \") {\n    return Object.keys(em)\n        .map((k) => `in field ${prefix}${k}: ${JSON.stringify(em[k])}`)\n        .join(\"\\n\");\n}\n\n/**\n * Converts a list of ByteArrays to printable form\n * @remarks\n *\n * ... using {@link hexToPrintableString}\n * @public\n **/\nexport function byteArrayListAsString(\n    items: ByteArrayData[],\n    joiner = \"\\n  \"\n): string {\n    return (\n        \"[\\n  \" +\n        items.map((ba) => byteArrayAsString(ba)).join(joiner) +\n        \"\\n]\\n\"\n    );\n}\n\n/**\n * Renders a byteArray in printable form, assuming it contains (mostly) text\n * @remarks\n *\n * Because it uses {@link hexToPrintableString | hexToPrintableString()}, it will render any non-printable\n * characters using ‹hex› notation.\n * @param ba - the byte array\n * @public\n **/\nexport function byteArrayAsString(ba: ByteArrayData): string {\n    return hexToPrintableString(ba.toHex());\n}\n\n/**\n * Converts any (supported) input arg to string\n * @remarks\n *\n * more types to be supported TODO\n * @public\n **/\nexport function dumpAny(\n    x:\n        | undefined\n        | Tx\n        | StellarTxnContext\n        | Address\n        | MintingPolicyHash\n        | Value\n        | Assets\n        | TxOutputId\n        | TxOutput\n        | TxOutput[]\n        | TxInput\n        | TxInput[]\n        | TxId\n        | number[]\n        | ByteArrayData\n        | ByteArrayData[],\n    networkParams?: NetworkParams,\n    forJson = false\n) {\n    if (\"undefined\" == typeof x) return \"‹undefined›\";\n    //@ts-expect-error probing type \n    if (x?.kind == \"Assets\") {\n        return `assets: ${assetsAsString(x as Assets)}`;\n    }\n    if (Array.isArray(x)) {\n        if (!x.length) return \"‹empty array›\";\n\n        const firstItem = x[0];\n        if (\"number\" == typeof firstItem) {\n            return (\n                `num array: ‹\"${ \n                    byteArrayAsString(makeByteArrayData(x as number[]))\n                }\"›`\n            );\n        }\n        if (firstItem.kind == \"TxOutput\") {\n            return (\n                \"tx outputs: \\n\" +\n                (x as TxOutput[]).map((txo: TxOutput) => txOutputAsString(txo)).join(\"\\n\")\n            );\n        }\n\n        if (firstItem.kind == \"TxInput\") {\n            return \"utxos: \\n\" + utxosAsString(x as TxInput[]);\n        }\n\n        //@ts-expect-error on this type probe\n        if (firstItem.kind == \"ByteArrayData\") {\n            return (\n                \"byte array list:\\n\" + byteArrayListAsString(x as ByteArrayData[])\n            );\n        }\n\n        if (\"object\" == typeof firstItem) {\n            // debugger;\n            if (firstItem instanceof Uint8Array) {\n                return `byte array: ‹\"${byteArrayAsString(firstItem)}\"›`;\n            }\n            return (\n                `[` +\n                x\n                    .map((item) => JSON.stringify(item, betterJsonSerializer))\n                    .join(\", \") +\n                `]`\n            );\n        }\n\n        console.log(\"firstItem\", firstItem);\n        throw new Error(\n            `dumpAny(): unsupported array type: ${typeof firstItem}`\n        );\n    }\n\n    if (\"bigint\" == typeof x) {\n        return (x as bigint).toString();\n    }\n    if (x instanceof StellarTxnContext) {\n        debugger;\n        throw new Error(`use await build() and dump the result instead.`);\n    }\n\n    const xx = x;\n\n    if (x.kind == \"TxOutput\") {\n        return txOutputAsString(x as TxOutput);\n    }\n\n    if (xx.kind == \"Tx\") {\n        return txAsString(xx, networkParams);\n    }\n\n    if (xx.kind == \"TxOutputId\") {\n        return txOutputIdAsString(xx);\n    }\n\n    if (xx.kind == \"TxId\") {\n        return txidAsString(xx);\n    }\n\n    if (xx.kind == \"TxInput\") {\n        return utxoAsString(xx);\n    }\n    if (xx.kind == \"Value\") {\n        return valueAsString(xx);\n    }\n    if (xx.kind == \"Address\") {\n        return addrAsString(xx);\n    }\n    if (xx.kind == \"MintingPolicyHash\") {\n        return policyIdAsString(xx);\n    }\n    if (forJson) return xx;\n\n    if (\"object\" == typeof x) {\n        return `{${Object.entries(x)\n            .map(([k, v]) => `${k}: ${dumpAny(v as any, networkParams)}`)\n            .join(\",\\n\")}}`;\n    }\n    debugger;\n    return \"dumpAny(): unsupported type or library mismatch\";\n}\n\n/**\n * @public\n */\nexport const betterJsonSerializer = (key, value) => {\n    return dumpAny(value, undefined, true);\n};\n\nif (\"undefined\" == typeof window) {\n    globalThis.peek = dumpAny;\n} else {\n    //@ts-expect-error\n    window.peek = dumpAny;\n}\n","import type { Site } from \"@helios-lang/compiler-utils\";\nimport type { UplcLogger } from \"@helios-lang/uplc\";\n\nconst proc = typeof process == \"undefined\" ? {\n    stdout: {\n        columns: 65\n    },\n    env: {} as Record<string, string>\n} : process;\n\ntype Group = {\n    name: string;\n    lines: (LineOrGroup)[];\n    result?: string;\n    collapsed?: boolean\n}\n\ntype LineOrGroup = string | Group;\n\nexport class UplcConsoleLogger implements UplcLogger {\n    didStart: boolean = false;\n    // lines: LineOrGroup[] = [];\n    lastMessage: string = \"\";\n    lastReason?: \"build\" | \"validate\";\n    history: string[] = [];\n    groupStack: Group[] = [{\n        name: \"\",\n        lines: []\n    }];\n\n    constructor() {\n        this.logPrint = this.logPrint.bind(this);\n        // this.printlnFunction = this.printlnFunction.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    get currentGroupLines() {\n        return this.groupStack.at(-1)!.lines;\n    }\n\n    get topLines() {\n        return this.groupStack.at(0)!.lines;\n    }\n\n    reset(reason: \"build\" | \"validate\") {\n        this.lastMessage = \"\";\n        this.lastReason = reason;\n        this.groupStack = [{\n            name: \"\",\n            lines: []\n        }];\n        // console.log(\"    ---- resetting printer due to \" + reason);\n        // this.didStart = false;\n        if (reason == \"build\") {\n            // throw new Error(`unexpected`)\n            // this.lines = [];\n            this.groupStack[0].lines = [];\n            return;\n        }\n        if (reason == \"validate\") {\n            this.flush();\n            return;\n        }\n    }\n    // log(...msgs: string[]) {\n    //     return this.logPrint(...msgs);\n    // }\n    // error(...msgs: string[]) {\n    //     return this.logError(...msgs, \"\\n\");\n    // }\n\n    // logPrintLn(...msgs: string[]) {\n    //     return this.logPrint(...msgs, \"\\n\");\n    // }\n\n    interesting = 0\n    logPrint(message: string, site?: Site) {\n        // if ( global.validating) debugger\n        // if (msg == \"no\") { debugger }\n        // if (this.lastReason && this.lastReason == \"validate\") {\n        //     debugger\n        // }\n\n        if (message.match(/STokMint/)) {\n            this.interesting = 1\n        }\n        // 🐣 = bird in egg (think \"nest\")\n        if (message.startsWith(\"🐣\")) {\n            const groupName = message.replace(\"🐣\", \"\").replace(\"🗜️\", \"\");\n            const collapse = !!message.match(/^🐣🗜️/) \n\n            const nextGroup = {\n                name: groupName.replace(/^\\s+/, \"\"),\n                lines: [],\n                collapse\n            };\n            // console.log(\"Group start: \" + groupName);\n            this.currentGroupLines.push(nextGroup)\n            this.groupStack.push(nextGroup);\n            \n            return this;\n        } else if (message.startsWith(\"🥚 \")) {\n            // 🥚 = egg (think \"close up that container\")\n            const rest = message.replace(\"🥚 \", \"\");\n            if (this.groupStack.length == 1) {\n                const t = this.formatLines(this.topLines)\n                debugger\n                console.warn(\n                    \"Ignoring extra groupEnd() called in contract script\\n\"+t.join(\"\\n\")\n                );\n            } else {\n                // console.log(\"Group end: \" + rest);\n                this.currentGroup.result = rest\n                this.groupStack.pop()\n            }\n            return this\n        }\n        \n        if (\"string\" != typeof message) {\n            console.log(\"wtf\");\n        }\n        // if (message && message.at(-1) != \"\\n\") {\n        //     message += \"\\n\";\n        // }\n        this.lastMessage = message;\n        this.currentGroup.lines.push(...message.split(\"\\n\"));\n        return this;\n    }\n\n    get currentGroup() {\n        const group = this.groupStack.at(-1);\n        if (!group) {\n            debugger\n            throw new Error(\"Too many groupEnd()s called in contract script\");\n        }\n        return group;\n    }\n\n    logError(message: string, stack? : Site) {\n        this.logPrint(\"\\n\");\n        this.logPrint(\n            \"-\".repeat((proc?.stdout?.columns || 65) - 8)\n        );\n        this.logPrint(\"--- ⚠️  ERROR: \" + message.trimStart() + \"\\n\");\n        this.logPrint(\n            \"-\".repeat((proc?.stdout?.columns || 65) - 8) + \"\\n\"\n        );\n        // return this;\n    }\n    // printlnFunction(msg) {\n    //     console.log(\"                              ---- println\")\n    //     this.lines.push(msg);\n    //     this.lines.push(\"\\n\");\n    //     this.flushLines();\n    // }\n    toggler = 0;\n    toggleDots() {\n        this.toggler = 1 - this.toggler;\n    }\n    get isMine() {\n        return true;\n    }\n    resetDots() {\n        this.toggler = 0;\n    }\n    showDot() {\n        // ◌ or ●\n        const s = this.toggler ? \"│   ┊ \" : \"│ ● ┊ \";\n        this.toggleDots();\n        return s;\n    }\n\n    fullHistory() {\n        return this.history.join(\"\\n\");\n    }\n    formattedHistory: string[] = [];\n    fullFormattedHistory() {\n        return this.formattedHistory.join(\"\\n\")\n    }\n\n    // formatGroupedOutput() {\n    //     const content: string[] = [];\n    //     const terminalWidth = process?.stdout?.columns || 65;\n    //     for (const group of this.groupStack) {\n    //         content.push(... this.formatGroup(group));\n\n    //         let {name, lines} = group;\n    //         if (name) name = `  ${name}  `;\n    //         const groupHeader = `╭${name}`;\n    //         content.push(groupHeader);\n    //         content.push(lines.map(line => ` │ ${line}`).join(\"\\n\"));\n    //         let lastLine = lines.at(-1)\n    //         if (lastLine && lastLine.startsWith(\"╰\")) {\n    //             lastLine = `╰ ${lastLine.slice(1)}`;\n    //         }\n    //         content.push(lastLine);\n    //     }\n    // }\n\n    formatGroup(group: Group) : string[] {\n        let {name, lines, result=\"\"} = group;\n        const terminalWidth = proc?.stdout?.columns || 65;\n\n        const content: string[] = [];\n        const groupHeader = `${name}`;\n        const formattedLines = this.formatLines(lines)\n        const indentedLines = formattedLines.map(line => `  │ ${line}`);\n        // maybe an env option to prevent collapsing\n        const collapseThisGroup = false && group.collapsed; \n        if (collapseThisGroup) {\n            content.push(groupHeader + \" (+\" + formattedLines.length + \")\");\n        } else {\n            content.push(groupHeader);\n            content.push(... indentedLines);\n        }\n        const lastLine = formattedLines.at(-1);\n\n        const happySimpleResult = result && result == \"✅\" ?  \"✅\"  : \"\"\n        const noResult = !result\n        const noResultClosingLine = noResult ?  \"┈\".repeat(terminalWidth - 5) : \"\"\n\n        if ((noResult || happySimpleResult) && lastLine && lastLine?.match(/^\\s+╰/)) {\n            const innerLine = lastLine.replace(/^\\s+/, \"\")\n            // coalesces groups:\n            const marker = happySimpleResult || \"┈\"\n            let replacementLastLine =  `  ╰${marker} ${innerLine}`;\n            // if (replacementLastLine.length < terminalWidth) {\n            //     const extra = \"┈\".repeat(terminalWidth - replacementLastLine.length - 1)\n            //     replacementLastLine += \" \" + extra\n            if (replacementLastLine.length > terminalWidth) {\n                const tooMuch = replacementLastLine.length - terminalWidth\n                if (replacementLastLine.endsWith(\"┈\".repeat(tooMuch))) {\n                    replacementLastLine = replacementLastLine.slice(0, -tooMuch)\n                }\n            }\n            // replacementLastLine = `  ╰${marker} ${replacementLastLine}`;\n            if (collapseThisGroup) {\n                content.push(replacementLastLine)\n            } else {\n                content.splice(-1, 1, replacementLastLine)\n            }\n        } else if ((happySimpleResult || noResult) && lastLine?.match(/^\\s*✅/)) {\n            // combines the success-indicator on the last line\n            // with the \"close group\" indicator\n            const replacementLastLine = `  ╰ ${lastLine.replace(/^\\s+/, \"\")}`;\n            if (collapseThisGroup) {\n                content.push(replacementLastLine)\n            } else {\n                content.splice(-1, 1, replacementLastLine)\n            }\n        } else if (result) {\n            const extraClosingLine = `  ╰ ${result}`;\n            content.push(extraClosingLine)\n        } else {\n            const extraClosingLine = `  ╰${noResultClosingLine}`;\n            content.push(extraClosingLine)\n        }\n\n        // content.push(lastLine);\n        return content;\n    }\n\n    formatLines(lines: LineOrGroup[]) : string[] {\n        const content: string[] = [];\n        for (const line of lines) {\n            if (typeof line == \"string\") {\n                content.push(line);\n            } else {\n                content.push(... this.formatGroup(line));\n            }\n        }\n        content.at(-1)?.replace(/\\n+$/, \"\");\n        while(content.at(-1)?.match(/^\\n?$/)) {\n            content.pop();\n        }\n        return content;\n    }\n\n    flushLines(footerString?: string) {\n        // this.lines.push(this.accumulator.join(\"\"))\n        let content: string[] = [];\n        // get terminal width if available:\n        const terminalWidth = proc?.stdout?.columns || 65;\n        const formattedLines = this.formatLines(this.topLines);\n        this.history.push(formattedLines.join(\"\\n\"));\n        if (!this.didStart) {\n            this.didStart = true;\n            content.push(\"╭┈┈┈┬\" + \"┈\".repeat(terminalWidth - 5) + \"\\n\");\n            this.resetDots();\n        } else if (this.topLines.length) {\n            content.push(\"├┈┈┈┼\" + \"┈\".repeat(terminalWidth - 5) + \"\\n\");\n            this.resetDots();\n        }\n        for (const line of formattedLines) {\n            //\"│\" or \"┊\" or \"┆\" or \"┇\" // unicode tiny  circle \"·\"\n            content.push(`${this.showDot()}${line}\\n`);\n        }\n        // adds a little extra space before the footer\n        content.push(this.showDot() + \"\\n\");\n        // feed extra space if needed for the dots to look consistent\n        if (!this.toggler) {\n            content.push(this.showDot() + \"\\n\");\n        }\n        if (footerString) {\n            // if (!this.toggler && abortMarker) {\n            //     content.push(this.showDot());\n            // }\n            content.push(footerString);\n            // if (abortMarker) {\n            //     content.push(abortMarker);\n            // }\n        }\n        const joined = content.join(\"\");\n        this.formattedHistory.push(joined);\n        console.log(joined);\n        this.groupStack = [{\n            name: \"\",\n            lines: []\n        }]\n    }\n    finish() {\n        this.flushLines(\n            \"╰┈┈┈┴\" + \"┈\".repeat((proc?.stdout?.columns || 65) - 5)\n        );\n        return this;\n    }\n\n    get groupLines() {\n        return this.groupStack.at(-1)?.lines || [];\n    }\n\n    flush() {\n        if (this.topLines.length) {\n            // console.log(\"    ---- flushing lines\");\n            if (this.lastMessage.at(-1) != \"\") {\n                this.groupLines.push(\"\");\n            }\n            this.flushLines();\n            //     \"╰,\"┈\"\n            // );\n        }\n        // console.log(\"╰ // ──────\n        return this;\n    }\n    flushError(message: string = \"\") {\n        // if (this.lastMsg == message) {\n        //     this.lines.pop();\n        // }\n        if (this.lastMessage.at(-1) != \"\\n\") {\n            this.groupLines.push(\"\\n\");\n        }\n        if (message.at(-1) == \"\\n\") {\n            message = message.slice(0, -1);\n        }\n        const terminalWidth = proc?.stdout?.columns || 65;\n        if (message) this.logError(message);\n        if (this.topLines.length) {\n            this.flushLines(\n                \"⎽⎼⎻⎺⎻⎺⎼⎼⎻⎺⎻⎽⎼⎺⎻⎻⎺⎼⎼⎻⎺\".repeat((terminalWidth - 2) / 21)\n            );\n        }\n        // this.didStart = false;\n        return this;\n    }\n}\n","import {\n    dumpAny,\n    intWithGrouping,\n    lovelaceToAda,\n    txAsString,\n    utxosAsString,\n} from \"./diagnostics.js\";\nimport type { hasUutContext } from \"./CapoTypes.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type { ActorContext, SetupInfo } from \"./StellarContract.js\";\nimport { delegateLinkSerializer } from \"./delegation/jsonSerializers.js\";\nimport type { Cost, UplcData, UplcProgramV2 } from \"@helios-lang/uplc\";\nimport { UplcConsoleLogger } from \"./UplcConsoleLogger.js\";\nimport type { isActivity, SeedAttrs } from \"./ActivityTypes.js\";\nimport {\n    type TxBuilder,\n    type WalletHelper,\n    type Wallet,\n    makeTxBuilder,\n    makeWalletHelper,\n    makeTxChainBuilder,\n} from \"@helios-lang/tx-utils\";\nimport {\n    decodeTx,\n    makeAssets,\n    makeNetworkParamsHelper,\n    makePubKey,\n    makeTx,\n    makeTxBody,\n    makeTxCertifyingRedeemer,\n    makeTxMintingRedeemer,\n    makeTxRewardingRedeemer,\n    makeTxSpendingRedeemer,\n    makeTxWitnesses,\n    makeValue,\n    type Address,\n    type NetworkParams,\n    type PubKeyHash,\n    type Tx,\n    type TxId,\n    type TxInput,\n    type TxOutput,\n    type Value,\n} from \"@helios-lang/ledger\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\nimport type { UtxoHelper } from \"./UtxoHelper.js\";\nimport type { IF_ISANY } from \"./helios/typeUtils.js\";\nimport type { Expand } from \"./helios/typeUtils.js\";\nimport { customAlphabet } from \"nanoid\";\nconst nanoid = customAlphabet(\"0123456789abcdefghjkmnpqrstvwxyz\", 12);\nimport { TxNotNeededError } from \"./utils.js\";\n\n/**\n * A txn context having a seedUtxo in its state\n * @public\n **/\nexport type hasSeedUtxo = StellarTxnContext<\n    anyState & {\n        seedUtxo: TxInput;\n    }\n>;\n\nexport type txBuiltOrSubmitted =\n    | \"built\"\n    | \"alreadyPresent\"\n    | \"signed\"\n    | \"submitted\";\nexport type resolvedOrBetter = \"resolved\" | txBuiltOrSubmitted;\n/**\n * @public\n */\nexport type TxDescription<\n    T extends StellarTxnContext,\n    PROGRESS extends\n        | \"buildLater!\"\n        | \"resolved\"\n        | \"alreadyPresent\"\n        | \"built\"\n        | \"signed\"\n        | \"submitted\",\n    TCX extends StellarTxnContext = IF_ISANY<T, StellarTxnContext<anyState>, T>,\n    otherProps extends Record<string, unknown> = {}\n> = {\n    description: string;\n    id: string;\n    parentId?: string;\n    depth: number;\n    moreInfo?: string;\n    optional?: boolean;\n    txName?: string;\n    tcx?: TCX | TxNotNeededError;\n    tx?: Tx;\n    stats?: BuiltTcxStats;\n    txCborHex?: string;\n    signedTxCborHex?: string;\n} & otherProps &\n    (PROGRESS extends \"alreadyPresent}\"\n        ? {\n              mkTcx: (() => TCX) | (() => Promise<TCX>);\n              tcx: TCX & { alreadyPresent: TxNotNeededError };\n          }\n        : PROGRESS extends resolvedOrBetter\n        ? {\n              mkTcx?: (() => TCX) | (() => Promise<TCX>) | undefined;\n              tcx: TCX;\n          }\n        : {\n              mkTcx: (() => TCX) | (() => Promise<TCX>);\n              tcx?: undefined;\n          }) &\n    (PROGRESS extends txBuiltOrSubmitted\n        ? {\n              tx: Tx;\n              txId?: TxId;\n              stats: BuiltTcxStats;\n              options: SubmitOptions;\n              txCborHex: string;\n          }\n        : {}) &\n    (PROGRESS extends \"signed\" | \"submitted\"\n        ? {\n              txId: TxId;\n              txCborHex: string;\n              signedTxCborHex: string;\n              walletTxId: TxId;\n          }\n        : {});\n\n/**\n * @public\n */\nexport type MultiTxnCallback<\n    T extends undefined | StellarTxnContext<any> = StellarTxnContext<any>,\n    TXINFO extends TxDescription<any, resolvedOrBetter, any> = TxDescription<\n        any,\n        \"resolved\"\n    >\n> =\n    | ((txd: TXINFO) => void)\n    | ((txd: TXINFO) => Promise<void>)\n    | ((txd: TXINFO) => T | false)\n    | ((txd: TXINFO) => Promise<T | false>);\n\n/**\n * A transaction context that includes additional transactions in its state for later execution\n * @remarks\n *\n * During the course of creating a transaction, the transaction-building functions for a contract\n * suite may suggest or require further transactions, which may not be executable until after the\n * current transaction is executed.  This type allows the transaction context to include such\n * future transactions in its state, so that they can be executed later.\n *\n * The future transactions can be executed using the {@link StellarTxnContext.queueAddlTxns}\n * helper method.\n * @public\n **/\nexport type hasAddlTxns<\n    TCX extends StellarTxnContext<anyState>,\n    existingStateType extends anyState = TCX[\"state\"]\n> = StellarTxnContext<\n    existingStateType & {\n        addlTxns: Record<string, TxDescription<any, \"buildLater!\">>;\n    }\n>;\n\nexport type otherAddlTxnNames<TCX extends StellarTxnContext<any>> = string &\n    TCX extends { state: { addlTxns: infer aTNs } }\n    ? keyof aTNs\n    : never;\n\n// type combinedAddlTxns<\n//     extraTxnName extends string,\n//     stateType extends anyState,\n//     existingTxns = stateType extends {addlTxns: any} ? stateType[\"addlTxns\"] : never,\n//     existingTxnNames extends string = string & keyof existingTxns\n// > = {\n//     addlTxns: {\n//         //prettier-ignore\n//         [txnName in (\n//             | extraTxnName\n//             | existingTxnNames\n//         )]: AddlTxInfo<any>\n//     }\n// } & stateType;\n\n//!!! if we could access the inputs and outputs in a building Tx,\n//  this might  not be necessary (unless it becomes a\n//   bigger-picture contextual container that serves various Stellar\n//   contract scripts with non-txn context for building a Tx)\n\n/**\n * A base state for a transaction context\n * @public\n **/\nexport interface anyState {\n    uuts: uutMap;\n}\n\n/**\n * A base state for a transaction context\n * @public\n **/\n// export type anyState = emptyState;\nexport type uutMap = Record<string, unknown>;\nexport const emptyUuts: uutMap = Object.freeze({});\n\n// type addInputArgs = Parameters<TxBuilder[\"spend\"]>;\ntype addRefInputArgs = Parameters<TxBuilder[\"refer\"]>;\n\ntype RedeemerArg = {\n    redeemer?: UplcData;\n};\n\nexport type TxDescriptionWithError = TxDescription<\n    any,\n    \"built\",\n    any,\n    {\n        error: string;\n    }\n>;\n\n/**\n * @public\n */\nexport type SubmitOptions = TxPipelineOptions & {\n    /**\n     * indicates additional signers expected for the transaction\n     */\n    signers?: Address[];\n    addlTxInfo?: Partial<\n        Omit<TxDescription<any, \"submitted\">, \"description\">\n    > & { description: string };\n    paramsOverride?: Partial<NetworkParams>;\n    /**\n     * useful most for test environment, so that a txn failure can be me marked\n     * as \"failing as expected\".  Not normally needed for production code.\n     */\n    expectError?: true;\n    /**\n     * Called when there is a detected error, before logging.  Probably only needed in test.\n     */\n    beforeError?: MultiTxnCallback<any, TxDescriptionWithError>;\n    /**\n     * Passed into the Helios TxBuilder's build()/buildUnsafe()\n     */\n    beforeValidate?: (tx: Tx) => MultiTxnCallback<any>;\n};\n\ntype MintUnsafeParams = Parameters<TxBuilder[\"mintPolicyTokensUnsafe\"]>;\ntype MintTokensParams = [\n    MintUnsafeParams[0],\n    MintUnsafeParams[1],\n    { redeemer: MintUnsafeParams[2] }\n];\n/**\n * Provides notifications for various stages of transaction submission\n */\ntype TxPipelineOptions = Expand<\n    TxSubmitCallbacks & {\n        fixupBeforeSubmit?: MultiTxnCallback;\n        whenBuilt?: MultiTxnCallback<any, TxDescription<any, \"built\">>;\n    }\n>;\n\nexport type TxSubmitCallbacks = {\n    onSubmitError?: MultiTxnCallback<\n        any,\n        TxDescription<any, \"built\", any, { error: string }>\n    >;\n    onSubmitted?: MultiTxnCallback<any, TxDescription<any, \"submitted\">>;\n};\n\ntype BuiltTcx = {\n    tx: Tx;\n} & BuiltTcxStats;\n\ntype BuiltTcxStats = {\n    willSign: PubKeyHash[];\n    walletMustSign: boolean;\n    wallet: Wallet;\n    wHelper: WalletHelper<any>;\n    costs: {\n        total: Cost;\n        [key: string]: Cost;\n    };\n};\n\nexport type FacadeTxnContext<S extends anyState = anyState> = hasAddlTxns<\n    StellarTxnContext<S>\n> & {\n    isFacade: true;\n};\n\n/**\n * Transaction-building context for Stellar Contract transactions\n * @remarks\n *\n * Uses same essential facade as Helios Tx.\n *\n * Adds a transaction-state container with strong typing of its contents,\n * enabling transaction-building code to use type-sensitive auto-complete\n * and allowing Stellar Contracts library code to require transaction contexts\n * having known states.\n *\n * Retains reflection capabilities to allow utxo-finding utilities to exclude\n * utxo's already included in the contract.\n *\n * @typeParam S - type of the context's `state` prop\n * @public\n **/\nexport class StellarTxnContext<S extends anyState = anyState> {\n    id: string = nanoid(5);\n    inputs: TxInput[] = [];\n    collateral?: TxInput;\n    outputs: TxOutput[] = [];\n    feeLimit?: bigint;\n    state: S;\n    allNeededWitnesses: (Address | PubKeyHash)[] = [];\n    otherPartySigners: PubKeyHash[] = [];\n    parentTcx?: StellarTxnContext<any>;\n    childReservedUtxos: TxInput[] = [];\n    parentId: string = \"\";\n    alreadyPresent: TxNotNeededError | undefined = undefined;\n    depth = 0;\n    declare setup: SetupInfo;\n    // submitOptions?: SubmitOptions\n    txb: TxBuilder;\n    txnName: string = \"\";\n    withName(name: string) {\n        this.txnName = name;\n        return this;\n    }\n\n    get wallet() {\n        return this.setup.actorContext.wallet!;\n    }\n\n    get uh(): UtxoHelper {\n        return this.setup.uh!;\n    }\n\n    get networkParams(): NetworkParams {\n        return this.setup.networkParams;\n    }\n\n    get actorContext(): ActorContext<any> {\n        return this.setup.actorContext;\n    }\n    /**\n     * Provides a lightweight, NOT complete, serialization for presenting the transaction context\n     * @remarks\n     * Serves rendering of the transaction context in vitest\n     * @internal\n     */\n    toJSON() {\n        return {\n            kind: \"StellarTxnContext\",\n            state: !!this.state\n                ? `{${Object.keys(this.state).join(\", \")}}`\n                : undefined,\n            inputs: `[${this.inputs.length} inputs]`,\n            outputs: `[${this.outputs.length} outputs]`,\n            isBuilt: !!this._builtTx,\n            hasParent: !!this.parentTcx,\n            //@ts-expect-error\n            addlTxns: this.state.addlTxns\n                ? [\n                      //@ts-expect-error\n                      ...Object.keys(this.state.addlTxns || {}),\n                  ]\n                : undefined,\n        };\n    }\n\n    logger = new UplcConsoleLogger();\n    constructor(\n        setup: SetupInfo,\n        state: Partial<S> = {},\n        parentTcx?: StellarTxnContext<any>\n    ) {\n        if (parentTcx) {\n            console.warn(\n                \"Deprecated use of 'parentTcx' - use includeAddlTxn() instead\" +\n                    \"\\n  ... setup.txBatcher.current holds an in-progress utxo set for all 'parent' transactions\"\n            );\n            throw new Error(`parentTcx used where? `);\n        }\n        Object.defineProperty(this, \"setup\", {\n            enumerable: false,\n            value: setup,\n        });\n        Object.defineProperty(this, \"_builtTx\", {\n            enumerable: false,\n            writable: true,\n        });\n\n        const isMainnet = setup.isMainnet;\n        this.isFacade = undefined;\n\n        if (\"undefined\" == typeof isMainnet) {\n            throw new Error(\n                \"StellarTxnContext: setup.isMainnet must be defined\"\n            );\n        }\n        this.txb = makeTxBuilder({\n            isMainnet,\n        });\n        // const { uuts = { ...emptyUuts }, ...moreState } = state;\n        //@ts-expect-error\n        this.state = {\n            ...state,\n            uuts: state.uuts || { ...emptyUuts },\n        };\n\n        const currentBatch = this.currentBatch;\n        const hasOpenBatch = currentBatch?.isOpen;\n        if (!currentBatch || currentBatch.isConfirmationComplete) {\n            this.setup.txBatcher.rotate(this.setup.chainBuilder);\n        }\n\n        if (!this.setup.isTest && !this.setup.chainBuilder) {\n            if (currentBatch.chainBuilder) {\n                // backfills the chainbuilder from the one auto-populated\n                // during `get TxBatcher.current()`\n                this.setup.chainBuilder = currentBatch.chainBuilder;\n            } else {\n                this.setup.chainBuilder = makeTxChainBuilder(\n                    this.setup.network\n                );\n            }\n        }\n\n        if (parentTcx) {\n            debugger;\n            throw new Error(`parentTcx used where? `);\n        }\n        this.parentTcx = parentTcx;\n    }\n\n    isFacade: true | false | undefined;\n    facade(this: StellarTxnContext): hasAddlTxns<this> & { isFacade: true } {\n        if (this.isFacade === false)\n            throw new Error(`this tcx already has txn material`);\n        if (this.parentTcx)\n            throw new Error(`no parentTcx allowed for tcx facade`);\n\n        const t: hasAddlTxns<this> = this as any;\n        t.state.addlTxns = t.state.addlTxns || {};\n        t.isFacade = true;\n        return this as any;\n    }\n    noFacade(situation: string) {\n        if (this.isFacade)\n            throw new Error(\n                `${situation}: ${\n                    this.txnName || \"this tcx\"\n                } is a facade for nested multi-tx`\n            );\n        this.isFacade = false;\n    }\n\n    withParent(tcx: StellarTxnContext<any>) {\n        this.noFacade(\"withParent\");\n        this.parentTcx = tcx;\n        return this;\n    }\n\n    get actorWallet() {\n        return this.actorContext.wallet;\n    }\n\n    dump(tx?: Tx): string;\n    dump(): Promise<string>;\n    dump(tx?: Tx): string | Promise<string> {\n        const t = tx || this.builtTx;\n        if (t instanceof Promise) {\n            return t.then((tx) => {\n                return txAsString(tx, this.setup.networkParams);\n            });\n        }\n        return txAsString(t, this.setup.networkParams);\n    }\n\n    includeAddlTxn<\n        TCX extends StellarTxnContext<anyState>,\n        RETURNS extends hasAddlTxns<TCX> = TCX extends hasAddlTxns<any>\n            ? TCX\n            : hasAddlTxns<TCX>\n    >(\n        this: TCX,\n        txnName: string,\n        txInfoIn: Omit<\n            TxDescription<any, \"buildLater!\">,\n            \"id\" | \"depth\" | \"parentId\"\n        > & {\n            id?: string;\n        }\n    ): RETURNS {\n        const txInfo: TxDescription<any, \"buildLater!\"> = {\n            ...(txInfoIn as any),\n        };\n        if (!txInfo.id)\n            txInfo.id =\n                //@ts-expect-error - the tcx is never there,\n                // but including the fallback assignment here for\n                // consistency about the policy of syncing to it.\n                txInfo.tcx?.id || nanoid(5);\n\n        txInfo.parentId = this.id;\n\n        txInfo.depth = (this.depth || 0) + 1;\n        const thisWithMoreType: RETURNS = this as any;\n        if (\"undefined\" == typeof this.isFacade) {\n            throw new Error(\n                `to include additional txns on a tcx with no txn details, call facade() first.\\n` +\n                    `   ... otherwise, add txn details first or set isFacade to false`\n            );\n        }\n        // if (thisWithMoreType.state.addlTxns?.[txnName]) {\n        //     debugger\n        //     throw new Error(\n        //         `addlTxns['${txnName}'] already included in this transaction:\\n` +\n        //             Object.keys(thisWithMoreType.state.addlTxns).map(\n        //                 (k) => ` • ${k}`\n        //             ).join(\"\\n\")\n        //     );\n        // }\n        thisWithMoreType.state.addlTxns = {\n            ...(thisWithMoreType.state.addlTxns || {}),\n            [txInfo.id]: txInfo,\n        };\n        return thisWithMoreType;\n    }\n\n    /**\n     * @public\n     */\n    get addlTxns(): Record<string, TxDescription<any, \"buildLater!\">> {\n        //@ts-expect-error\n        return this.state.addlTxns || {};\n    }\n\n    mintTokens(...args: MintTokensParams): StellarTxnContext<S> {\n        this.noFacade(\"mintTokens\");\n        const [policy, tokens, r = { redeemer: undefined }] = args;\n        const { redeemer } = r;\n        if (this.txb.mintPolicyTokensUnsafe) {\n            this.txb.mintPolicyTokensUnsafe(policy, tokens, redeemer);\n        } else {\n            //@ts-expect-error\n            this.txb.mintTokens(policy, tokens, redeemer);\n        }\n\n        return this;\n    }\n\n    getSeedAttrs<TCX extends hasSeedUtxo>(this: TCX): SeedAttrs {\n        this.noFacade(\"getSeedAttrs\");\n        // const { seedUtxo } = this.state;  // bad api-extractor!\n        const seedUtxo = this.state.seedUtxo;\n        // const { txId, utxoIdx: seedIndex } = seedUtxo.id; // ugh, api-extractor!\n        return { txId: seedUtxo.id.txId, idx: BigInt(seedUtxo.id.index) };\n    }\n\n    reservedUtxos(): TxInput[] {\n        this.noFacade(\"reservedUtxos\");\n        return this.parentTcx\n            ? this.parentTcx.reservedUtxos()\n            : ([\n                  ...this.inputs,\n                  this.collateral,\n                  ...this.childReservedUtxos,\n              ].filter((x) => !!x) as TxInput[]);\n    }\n\n    utxoNotReserved(u: TxInput): TxInput | undefined {\n        if (this.collateral?.isEqual(u)) return undefined;\n        if (this.inputs.find((i) => i.isEqual(u))) return undefined;\n        return u;\n    }\n\n    addUut<T extends string, TCX extends StellarTxnContext>(\n        this: TCX,\n        //!!! todo: type this more strongly by adding strong typing to the UutName itself?\n        uutName: UutName,\n        ...names: T[]\n    ): hasUutContext<T> & TCX {\n        this.noFacade(\"addUut\");\n        this.state.uuts = this.state.uuts || {};\n\n        for (const name of names) {\n            this.state.uuts[name] = uutName;\n        }\n\n        return this as hasUutContext<T> & TCX;\n    }\n\n    addState<TCX extends StellarTxnContext, K extends string, V>(\n        this: TCX,\n        key: K,\n        value: V\n    ): StellarTxnContext<{ [keyName in K]: V } & anyState> & TCX {\n        this.noFacade(\"addState\");\n        //@ts-expect-error\n        this.state[key] = value;\n        return this as StellarTxnContext<{ [keyName in K]: V } & anyState> &\n            TCX;\n    }\n\n    addCollateral(collateral: TxInput) {\n        this.noFacade(\"addCollateral\");\n        console.warn(\"explicit addCollateral() should be unnecessary unless a babel payer is covering it\")\n        \n        if (!collateral.value.assets.isZero()) {\n            throw new Error(\n                `invalid attempt to add non-pure-ADA utxo as collateral`\n            );\n        }\n        this.collateral = collateral;\n\n        this.txb.addCollateral(collateral);\n        return this;\n    }\n    getSeedUtxoDetails(this: hasSeedUtxo): SeedAttrs {\n        this.noFacade(\"getSeedUtxoDetails\");\n        const seedUtxo = this.state.seedUtxo;\n        return {\n            txId: seedUtxo.id.txId,\n            idx: BigInt(seedUtxo.id.index),\n        };\n    }\n\n    _txnTime?: Date;\n    /**\n     * Sets a future date for the transaction to be executed, returning the transaction context.  Call this before calling validFor().\n     *\n     * @remarks Returns the txn context.\n     * Throws an error if the transaction already has a txnTime set.\n     *\n     * This method does not itself set the txn's validity interval.  You MUST combine it with\n     * a call to validFor(), to set the txn's validity period.  The resulting transaction will\n     * be valid from the moment set here until the end of the validity period set by validFor().\n     *\n     * This can be used anytime to construct a transaction valid in the future.  This is particularly useful\n     * during test scenarios to verify time-sensitive behaviors.\n     *\n     * In the test environment, the network wil normally be advanced to this date\n     * before executing the transaction, unless a different execution time is indicated.\n     * Use the test helper's `submitTxnWithBlock(txn, {futureDate})` or `advanceNetworkTimeForTx()` methods, or args to\n     * use-case-specific functions that those methods.\n     */\n    futureDate<TCX extends StellarTxnContext<S>>(this: TCX, date: Date) {\n        this.noFacade(\"futureDate\");\n        if (this._txnTime) {\n            throw new Error(\n                \"txnTime already set; cannot set futureDate() after txnTime\"\n            );\n        }\n\n        const d = new Date(\n            Number(this.slotToTime(this.timeToSlot(BigInt(date.getTime()))))\n        );\n        // time emoji: ⏰\n        console.log(\"  ⏰⏰ setting txnTime to \", d.toString());\n        this._txnTime = d;\n        return this;\n    }\n\n    assertNumber(obj, msg = \"expected a number\") {\n        if (obj === undefined || obj === null) {\n            throw new Error(msg);\n        } else if (typeof obj == \"number\") {\n            return obj;\n        } else {\n            throw new Error(msg);\n        }\n    }\n\n    /**\n     * Calculates the time (in milliseconds in 01/01/1970) associated with a given slot number.\n     * @param slot - Slot number\n     */\n    slotToTime(slot: bigint): bigint {\n        let secondsPerSlot = this.assertNumber(\n            this.networkParams.secondsPerSlot\n        );\n\n        let lastSlot = BigInt(this.assertNumber(this.networkParams.refTipSlot));\n        let lastTime = BigInt(this.assertNumber(this.networkParams.refTipTime));\n\n        let slotDiff = slot - lastSlot;\n\n        return lastTime + slotDiff * BigInt(secondsPerSlot * 1000);\n    }\n\n    /**\n     * Calculates the slot number associated with a given time.\n     * @param time - Milliseconds since 1970\n     */\n    timeToSlot(time: bigint): bigint {\n        let secondsPerSlot = this.assertNumber(\n            this.networkParams.secondsPerSlot\n        );\n\n        let lastSlot = BigInt(this.assertNumber(this.networkParams.refTipSlot));\n        let lastTime = BigInt(this.assertNumber(this.networkParams.refTipTime));\n\n        let timeDiff = time - lastTime;\n\n        return (\n            lastSlot +\n            BigInt(Math.round(Number(timeDiff) / (1000 * secondsPerSlot)))\n        );\n    }\n\n    /**\n     * Identifies the time at which the current transaction is expected to be executed.\n     * Use this attribute in any transaction-building code that sets date/time values\n     * for the transaction.\n     * Honors any futureDate() setting or uses the current time if none has been set.\n     */\n    get txnTime() {\n        if (this._txnTime) return this._txnTime;\n        const now = Date.now();\n        const recent = now - 180_000;\n        const d = new Date(\n            Number(this.slotToTime(this.timeToSlot(BigInt(recent))))\n        );\n        // time emoji: ⏰\n        console.log(\"⏰⏰setting txnTime to \", d.toString());\n        return (this._txnTime = d);\n    }\n\n    _txnEndTime?: Date;\n    get txnEndTime() {\n        if (this._txnEndTime) return this._txnEndTime;\n        throw new Error(\"call [optional: futureDate() and] validFor(durationMs) before fetching the txnEndTime\")\n    }\n        \n   /**\n     * Sets an on-chain validity period for the transaction, in miilliseconds\n     *\n     * @remarks if futureDate() has been set on the transaction, that\n     * date will be used as the starting point for the validity period.\n     *\n     * Returns the transaction context for chaining.\n     *\n     * @param durationMs - the total validity duration for the transaction.  On-chain\n     *  checks using CapoCtx `now(granularity)` can enforce this duration\n     */\n    validFor<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        durationMs: number\n    ): TCX {\n        this.noFacade(\"validFor\");\n        const startMoment = this.txnTime.getTime();\n\n        // if the desired duration is greater  the current validity period,\n        //   DO NOT constraint the validity period further.\n        // If the current validity period is greater than the desired duration,\n        //   we SHOULD constrain the tx validity to this more restrictive duration.\n        this._validityPeriodSet = true;\n        this.txb\n            .validFromTime(new Date(startMoment))\n            .validToTime(new Date(startMoment + durationMs));\n\n        return this;\n    }\n    _validityPeriodSet = false;\n    txRefInputs: TxInput[] = [];\n    /**\n     * adds a reference input to the transaction context\n     * @remarks\n     *\n     * idempotent version of helios addRefInput()\n     *\n     * @public\n     **/\n    addRefInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        input: TxInput<any>,\n        refScript?: UplcProgramV2\n    ) {\n        this.noFacade(\"addRefInput\");\n        if (!input) throw new Error(`missing required input for addRefInput()`);\n\n        if (this.txRefInputs.find((v) => v.id.isEqual(input.id))) {\n            console.warn(\"suppressing second add of refInput\");\n            return this;\n        }\n        if (this.inputs.find((v) => v.id.isEqual(input.id))) {\n            console.warn(\n                \"suppressing add of refInput that is already an input\"\n            );\n            return this;\n        }\n        this.txRefInputs.push(input);\n\n        //@ts-expect-error private field\n        const v2sBefore = this.txb.v2Scripts;\n        if (refScript) {\n            //@ts-expect-error on private method\n            this.txb.addV2RefScript(refScript);\n        }\n\n        this.txb.refer(input);\n        //@ts-expect-error private field\n        const v2sAfter = this.txb.v2Scripts;\n\n        // const t2 = this.txb.witnesses.scripts.length;\n        // if (t2 > t) {\n        if (v2sAfter.length > v2sBefore.length) {\n            console.log(\"       --- addRefInput added a script to tx.scripts\");\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated - use addRefInput() instead.\n     */\n    addRefInputs<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        ...args: addRefInputArgs\n    ) {\n        throw new Error(`deprecated`);\n    }\n\n    addInput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        input: TxInput,\n        r?: isActivity\n    ): TCX {\n        this.noFacade(\"addInput\");\n        if (r && !r.redeemer) {\n            console.log(\"activity without redeemer tag: \", r);\n            throw new Error(\n                `addInput() redeemer must match the isActivity type {redeemer: ‹activity›}\\n`\n                // JSON.stringify(r, delegateLinkSerializer)\n            );\n        }\n\n        //@ts-expect-error probing for pubKeyHash\n        if (input.address.pubKeyHash)\n            this.allNeededWitnesses.push(input.address);\n        this.inputs.push(input);\n        if (this.parentTcx) {\n            this.parentTcx.childReservedUtxos.push(input);\n        }\n        try {\n            this.txb.spendUnsafe(input, r?.redeemer);\n        } catch (e: any) {\n            // console.log(\"failed adding input to txn: \", dumpAny(this));\n            debugger;\n            throw new Error(\n                `addInput: ${e.message}` +\n                    \"\\n   ...TODO: dump partial txn from txb above.  Failed TxInput:\\n\" +\n                    dumpAny(input)\n            );\n        }\n\n        return this;\n    }\n\n    addOutput<TCX extends StellarTxnContext<S>>(\n        this: TCX,\n        output: TxOutput\n    ): TCX {\n        this.noFacade(\"addOutput\");\n        try {\n            this.txb.addOutput(output);\n            this.outputs.push(output);\n        } catch (e: any) {\n            console.log(\n                \"Error adding output to txn: \\n\" +\n                    \"  | inputs:\\n  | \" +\n                    utxosAsString(this.inputs, \"\\n  | \") +\n                    \"\\n  | \" +\n                    (dumpAny(this.outputs) as string)\n                        .split(\"\\n\")\n                        .join(\"\\n  |   \") +\n                    \"\\n... in context of partial tx above: failed adding output: \\n  |  \",\n                dumpAny(output),\n                \"\\n\" + e.message,\n                \"\\n   (see thrown stack trace below)\"\n            );\n            e.message =\n                `addOutput: ${e.message}` + \"\\n   ...see logged details above\";\n            throw e;\n        }\n\n        return this;\n    }\n\n    attachScript(...args: Parameters<TxBuilder[\"attachUplcProgram\"]>) {\n        throw new Error(\n            `use addScriptProgram(), increasing the txn size, if you don't have a referenceScript.\\n` +\n                `Use <capo>.txnAttachScriptOrRefScript() to use a referenceScript when available.`\n        );\n    }\n\n    /**\n     * Adds a UPLC program to the transaction context, increasing the transaction size.\n     * @remarks\n     * Use the Capo's `txnAttachScriptOrRefScript()` method to use a referenceScript\n     * when available. That method uses a fallback approach adding the script to the\n     * transaction if needed.\n     */\n    addScriptProgram(...args: Parameters<TxBuilder[\"attachUplcProgram\"]>) {\n        this.noFacade(\"addScriptProgram\");\n        this.txb.attachUplcProgram(...args);\n\n        return this;\n    }\n\n    wasModified() {\n        //@ts-expect-error private method\n        this.txb.wasModified();\n    }\n\n    _builtTx?: Tx | Promise<Tx>;\n    get builtTx() {\n        this.noFacade(\"builtTx\");\n        if (!this._builtTx) {\n            throw new Error(`can't go building the tx willy-nilly`);\n            return (this._builtTx = this.build().then(({ tx }) => {\n                return (this._builtTx = tx);\n            }));\n        }\n        return this._builtTx;\n    }\n\n    async addSignature(wallet: Wallet) {\n        this.noFacade(\"addSignature\");\n        const builtTx = await this.builtTx;\n        const sig = await wallet.signTx(builtTx);\n\n        builtTx.addSignature(sig[0]);\n    }\n\n    hasAuthorityToken(authorityValue: Value) {\n        return this.inputs.some(i => i.value.isGreaterOrEqual(authorityValue))\n    }\n\n    async findAnySpareUtxos(): Promise<TxInput[] | never> {\n        this.noFacade(\"findAnySpareUtxos\");\n        const mightNeedFees = 3_500_000n; // lovelace this.ADA(3.5);\n\n        const toSortInfo = this.uh.mkUtxoSortInfo(mightNeedFees);\n        const notReserved =\n            this.utxoNotReserved.bind(this) || ((u: TxInput) => u);\n\n        const uh = this.uh;\n        return uh\n            .findActorUtxo(\n                \"spares for tx balancing\",\n                notReserved,\n                {\n                    wallet: this.wallet,\n                    dumpDetail: \"onFail\",\n                },\n                \"multiple\"\n            )\n            .then(async (utxos) => {\n                if (!utxos) {\n                    throw new Error(\n                        `no utxos found for spares for tx balancing.  We can ask the user to send a series of 10, 11, 12, ... ADA to themselves or do it automatically`\n                    );\n                }\n\n                const allSpares = utxos\n                    .map(toSortInfo)\n                    .filter(uh.utxoIsSufficient)\n                    .sort(uh.utxoSortSmallerAndPureADA);\n\n                if (allSpares.reduce(uh.reduceUtxosCountAdaOnly, 0) > 0) {\n                    return allSpares\n                        .filter(uh.utxoIsPureADA)\n                        .map(uh.sortInfoBackToUtxo);\n                }\n                return allSpares.map(uh.sortInfoBackToUtxo);\n            });\n    }\n\n    async findChangeAddr(): Promise<Address> {\n        this.noFacade(\"findChangeAddr\");\n        // const {\n        //     actorContext: { wallet },\n        // } = this; // ugh, api-extractor!\n        const wallet = this.actorContext.wallet;\n        if (!wallet) {\n            throw new Error(\n                `⚠️  ${this.constructor.name}: no this.actorContext.wallet; can't get required change address!`\n            );\n        }\n        let unused = (await wallet.unusedAddresses).at(0);\n        if (!unused) unused = (await wallet.usedAddresses).at(-1);\n        if (!unused)\n            throw new Error(\n                `⚠️  ${this.constructor.name}: can't find a good change address!`\n            );\n        return unused;\n    }\n\n    /**\n     * Adds required signers to the transaction context\n     * @remarks\n     * Before a transaction can be submitted, signatures from each of its signers must be included.\n     * \n     * Any inputs from the wallet are automatically added as signers, so addSigners() is not needed\n     * for those.\n     */\n    async addSigners(...signers: PubKeyHash[]) {\n        this.noFacade(\"addSigners\");\n        \n        this.allNeededWitnesses.push(...signers);\n    }\n\n    async build(\n        this: StellarTxnContext<any>,\n        {\n            signers = [],\n            addlTxInfo = {\n                description: this.txnName ? \": \" + this.txnName : \"\",\n            },\n            beforeValidate,\n            paramsOverride,\n            expectError,\n        }: {\n            signers?: Address[];\n            addlTxInfo?: Pick<TxDescription<any, \"buildLater!\">, \"description\">;\n            beforeValidate?: (tx: Tx) => Promise<any> | any;\n            paramsOverride?: Partial<NetworkParams>;\n            expectError?: boolean;\n        } = {}\n    ): Promise<BuiltTcx> {\n        this.noFacade(\"build\");\n        console.timeStamp?.(`submit() txn ${this.txnName}`);\n        console.log(\"tcx build() @top\");\n\n        if (!this._validityPeriodSet) {\n            this.validFor(12 * 60 * 1000); // 12 minutes\n            // this.validFor(12 * 60 * 1000 * 60 * 24); // 12 days\n        }\n        let { description } = addlTxInfo;\n        if (description && !description.match(/^:/)) {\n            description = \": \" + description;\n        }\n        const {\n            actorContext: { wallet },\n        } = this;\n\n        let walletMustSign = false;\n        let tx: Tx;\n\n        const logger = this.logger;\n        if (wallet || signers.length) {\n            console.timeStamp?.(`submit(): findChangeAddr()`);\n            const changeAddress = await this.findChangeAddr();\n\n            console.timeStamp?.(`submit(): findAnySpareUtxos()`);\n            const spares = await this.findAnySpareUtxos();\n\n            const willSign = [...signers, ...this.allNeededWitnesses]\n                .map((addrOrPkh) => {\n                    if (addrOrPkh.kind == \"PubKeyHash\") {\n                        return addrOrPkh;\n                    } else if (addrOrPkh.kind == \"Address\") {\n                        if (addrOrPkh.era == \"Shelley\") {\n                            return addrOrPkh.spendingCredential.kind == \"PubKeyHash\"\n                                ? addrOrPkh.spendingCredential\n                                : undefined;\n                        } else {\n                            return undefined;\n                        }\n                    } else {\n                        return undefined;\n                    }\n                })\n                .filter((pkh) => !!pkh)\n                .flat(1) as PubKeyHash[];\n            console.timeStamp?.(`submit(): addSIgners()`);\n            this.txb.addSigners(...willSign);\n            const wHelper = wallet && makeWalletHelper(wallet);\n            const othersMustSign: PubKeyHash[] = [];\n            // determine whether we need to request signing from wallet.\n            // may involve adding signers to the txn\n            if (wallet && wHelper) {\n                for (const a of willSign) {\n                    if (await wHelper.isOwnAddress(a)) {\n                        walletMustSign = true;\n                    } else {\n                        othersMustSign.push(a);\n                    }\n                }\n                this.otherPartySigners = othersMustSign;\n                // if any inputs from the wallet were added as part of finalizing,\n                // add the wallet's signature to the txn\n                const inputs = this.txb.inputs;\n                if (!inputs) throw new Error(`no inputs in txn`);\n                for (const input of inputs) {\n                    if (!(await wHelper.isOwnAddress(input.address))) continue;\n                    this.allNeededWitnesses.push(input.address);\n                    walletMustSign = true;\n\n                    //@ts-expect-error on type-probe\n                    const pubKeyHash = input.address.pubKeyHash;\n\n                    if (pubKeyHash) {\n                        this.txb.addSigners(pubKeyHash);\n                    } else {\n                        //!!! todo: deal with \"native-script\" by traversing its\n                        //  struct and seeking the pubKeyHashes (or? other witnesses)\n                        //  that may be needed for signing.  That, or include the\n                        //  native-script information alongside the otherPartySigners,\n                        //  maybe as otherPartyScriptSigners or something.  The\n                        //  batch-submit-controller could take over the responsibility\n                        //  for finding signatures satisfactory for those.\n                    }\n                }\n            } else {\n                console.warn(\n                    \"txn build: no wallet/helper available for txn signining (debugging breakpoint available)\"\n                );\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n            }\n            let capturedCosts: {\n                total: Cost;\n                [key: string]: Cost;\n            } = {\n                total: { cpu: 0n, mem: 0n },\n                slush: { cpu: 0n, mem: 0n },\n            };\n\n            const inputValues = this.inputs\n                .map((i) => i.value.assets)\n                .reduce((a, b) => a.add(b), makeAssets());\n            const outputValues = this.outputs\n                .map((o) => o.value.assets)\n                .reduce((a, b) => a.add(b), makeAssets());\n            const mintValues = this.txb.mintedTokens;\n            const netTxAssets = inputValues\n                .add(mintValues)\n                .subtract(outputValues);\n            if (!netTxAssets.isZero()) {\n                console.log(\n                    \"tx imbalance=\" + dumpAny(netTxAssets, this.networkParams)\n                );\n            }\n            try {\n                // the transaction can fail validation without throwing an error\n                tx = await this.txb.buildUnsafe({\n                    changeAddress,\n                    spareUtxos: spares,\n                    networkParams: {\n                        ...this.networkParams,\n                        ...paramsOverride,\n                    },\n                    logOptions: logger,\n                    beforeValidate,\n                    modifyExBudget: (txi, purpose, index, costs) => {\n                        capturedCosts[`${purpose} @${1 + index}`] = {\n                            ...costs,\n                        };\n\n                        // todo: use Ogmios API to just get the exact costs\n                        //   ... and report here when there is a diff.\n                        // Meanwhile, add a small amount (0.05 ADA) of padding\n                        //   ... to the computed costs, per involved script\n\n                        // temp? - + ~0.06 ada = 1.2x 0.05\n                        // const cpuSlush = 0n // BigInt(350_000_000n); // ~25k lovelace\n                        // const memSlush = 0n // BigInt(430_000n); // ~25k lovelace\n\n                        // without this, we **sometimes** get problems having enough\n                        // exBudget to cover the way the haskell node computes the\n                        // per-script execution costs.  Prevents \"out of budget\" errors\n                        // during script execution:\n                        const cpuSlush = BigInt(250_000_000n); // ~25k lovelace\n                        const memSlush = BigInt(50_000n); // ~25k lovelace\n\n                        //... but doesn't suffice to just add per-script slush:\n                        // this approach leads to escalating \"expected/actual fee\" messaging\n                        // const cpuSlush = BigInt( 350_000_000n * 13n / 10n); // ~25k lovelace/0.025 ADA\n                        // const memSlush = BigInt(430_000n * 13n / 10n); // ~25k lovelace/0.025 ADA\n\n                        capturedCosts.slush.cpu += cpuSlush;\n                        capturedCosts.slush.mem += memSlush;\n                        costs.cpu += cpuSlush;\n                        costs.mem += memSlush;\n\n                        capturedCosts.total.cpu += costs.cpu;\n                        capturedCosts.total.mem += costs.mem;\n                        if (\"minting\" == purpose) purpose = \"minting \";\n                        return costs;\n                    },\n                });\n                this._builtTx = tx;\n\n                this.txb.validToTime;\n\n                //!!! todo: come back to this later.  Blockfrost's endpoint for this\n                // seems to have some issues.  Ogmios itself seems to be fine.\n                //\n                // //@ts-expect-error on type-probe\n                // if (this.setup.network.evalTx) {\n                //     const partialTx = undoFeesFrom(tx)\n                //     console.log(bytesToHex(partialTx.toCbor()))\n                //     //@ts-expect-error on type-probe\n                //     const evalResult = await this.setup.network.evalTx(\n                //         partialTx\n                //     );\n                //     debugger\n                // }\n            } catch (e: any) {\n                // buildUnsafe shouldn't throw errors.\n\n                e.message +=\n                    \"; txn build failed (debugging breakpoint available)\\n\" +\n                    (netTxAssets.isZero()\n                        ? \"\"\n                        : \"tx imbalance=\" +\n                          dumpAny(netTxAssets, this.networkParams)) +\n                    `  inputs: ${dumpAny(this.inputs)}\\n` +\n                    `  outputs: ${dumpAny(this.outputs)}\\n` +\n                    `  mint: ${dumpAny(this.txb.mintedTokens)}\\n` +\n                    `  refInputs: ${dumpAny(this.txRefInputs)}\\n`;\n\n                logger.logError(`txn build failed: ${e.message}`);\n                if (tx!) logger.logPrint(dumpAny(tx!) as string);\n\n                logger.logError(\n                    `  (it shouldn't be possible for buildUnsafe to be throwing errors!)`\n                );\n                logger.flushError();\n\n                throw e;\n            }\n\n            if (tx.hasValidationError) {\n                const e = tx.hasValidationError;\n\n                //@ts-expect-error accessing the stack of something that might be a string instead\n                let heliosStack = e.stack?.split(\"\\n\") || undefined;\n                // locate the first TxImpl line in the stack trace.\n                // include it but remove remaining trace lines.\n                // heliosStack = heliosStack?.slice(\n                //     0, heliosStack.findIndex(l => l.match(/TxImpl/)) + 2\n                // ) || \"\"\n                // locate any lines like \"<helios>@at <anonymous>, [mkTv=<fn>, tvCharter=<fn>, mustFindInputRedeemer=<fn>, fromCip68Wrapper=<fn>, RelativeDelegateLink::tvAuthorityToken=<fn>, RelativeDelegateLink::acAuthorityToken=<fn>, RelativeDelegateLink::validatesUpdatedSettings=<fn>, RelativeDelegateLink::hasDelegateInput=<fn>, RelativeDelegateLink::hasValidOutput=<fn>, DelegateInput::genericDelegateActivity=<fn>], src/CapoHelpers.hl:761:9:0\"\n                // and transform it to a multi-line, indented function trace with the\n                // square-bracketed items indented to indicate the scope of the function they're provided to\n                heliosStack = heliosStack?.map((line: string) => {\n                    if (line.match(/<helios>@at/)) {\n                        line = line\n                            .replace(\n                                /<helios>@at /,\n                                \"   ... in helios function \"\n                            )\n                            .replace(\n                                /, \\[(.*)\\],/,\n                                (_, bracketed) => ``\n                                // ` with scope [\\n        ${\n                                //     bracketed.replace(/, /g, \",\\n        \")\n                                // }\\n      ]`\n                            );\n                    }\n                    return line;\n                });\n                debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n                const scriptContext =\n                    \"string\" == typeof e ? undefined : e.scriptContext;\n                logger.logError(\n                    `tx validation failure: \\n  ❌ ${\n                        //@ts-expect-error\n                        tx.hasValidationError.message || tx.hasValidationError\n                    }\\n` + (heliosStack?.join(\"\\n\") || \"\")\n                );\n                logger.flush();\n                // TODO: notify the currentBatch and let it reveal the script-context\n                // and tx-cbor.  KEEP THE console LOGGING for now ALSO.\n\n                const ctxCbor = scriptContext?.toCbor();\n                const cborHex = ctxCbor ? bytesToHex(ctxCbor) : \"\";\n                if (!expectError) {\n                    console.log(\n                        cborHex\n                            ? \"------------------- failed ScriptContext as cbor-hex -------------------\\n\" +\n                                  cborHex +\n                                  \"\\n\"\n                            : \"\",\n                        \"------------------- failed tx as cbor-hex -------------------\\n\" +\n                            bytesToHex(tx.toCbor()),\n                        \"\\n------------------^ failed tx details ^------------------\\n\" +\n                            \"(debugging breakpoint available)\"\n                    );\n                }\n            }\n\n            // tx.body.fee = tx.body.fee + BigInt(250_000n); // 25k lovelace\n            return {\n                tx,\n                willSign,\n                walletMustSign,\n                wallet,\n                wHelper,\n                costs: capturedCosts,\n            };\n        } else {\n            throw new Error(\"no 'actorContext.wallet'; can't make  a txn\");\n        }\n    }\n    log(...msgs: string[]) {\n        if (msgs.length > 1) {\n            debugger;\n            throw new Error(`no multi-arg log() calls`);\n        }\n        this.logger.logPrint(msgs[0]);\n        return this;\n    }\n    flush() {\n        this.logger.flush();\n        return this;\n    }\n    finish() {\n        this.logger.finish();\n        return this;\n    }\n\n    /**\n     * Submits the current transaction and any additional transactions in the context.\n     * @remarks\n     * To submit only the current transaction, use the `submit()` method.\n     *\n     * Uses the TxBatcher to create a new batch of transactions.  This new batch\n     * overlays a TxChainBuilder on the current network-client, using that facade\n     * to provide utxos for chained transactions in the batch.\n     *\n     * The signers array can be used to add additional signers to the transaction, and\n     * is passed through to the submit() for the current txn only; it is not used for\n     * any additional transactions.\n     *\n     * The beforeSubmit, onSubmitted callbacks are used for each additional transaction.\n     *\n     * beforeSubmit can be used to notify the user of the transaction about to be submitted,\n     * and can also be used to add additional signers to the transaction or otherwise modify\n     * it (by returning the modified transaction).\n     *\n     * onSubmitted can be used to notify the user that the transaction has been submitted,\n     * or for logging or any other post-submission processing.\n     */\n    async submitAll(this: StellarTxnContext<any>, options: SubmitOptions = {}) {\n        const currentBatch = this.currentBatch;\n        const hasOpenBatch = currentBatch?.isOpen;\n        // if (hasOpenBatch) {\n        //     console.warn(\n        //         `⚠️  submitAll(): detected overlapping txn batches... \\n` +\n        //             `  ... that MIGHT be a developer error on our part.\\n` +\n        //             `  ... or, you might need to add your transaction to an existing batch \\n` +\n        //             `      (use otherTcx.includeAddlTxn(...))\\n` +\n        //             `  ... or, you might need to ensure you're waiting for an existing batch \\n` +\n        //             `      to finish (monitor setup.txBatcher.current for batch:confirmed)\\n` +\n        //             `\\nFinally, you might have an advanced use-case for building multiple \\n` +\n        //             `independent batches of transactions that don't need tx chaining between them. \\n\\n` +\n        //             `Please be welcome to log an issue with the project's support desk, \\n` +\n        //             `... and we'll see what we can do to help.`\n        //         );\n        //     throw new Error(`can't submitAll() with an existing open tx batch (wait for the existing batch to finish first`);\n        // }\n\n        //!!! remove because it's already done in the constructor?\n        // debugger\n        // if (!currentBatch || currentBatch.isConfirmationComplete) {\n        //     this.setup.txBatcher.rotate(this.setup.chainBuilder);\n        // }\n\n        // if (!this.setup.isTest && !this.setup.chainBuilder) {\n        //     if (currentBatch.chainBuilder) {\n        //         // backfills the chainbuilder from the one auto-populated\n        //         // during `get TxBatcher.current()`\n        //         this.setup.chainBuilder = currentBatch.chainBuilder;\n        //     } else {\n        //         this.setup.chainBuilder = makeTxChainBuilder(\n        //             this.setup.network\n        //         );\n        //     }\n        // }\n        //!!! ^^^ remove?\n\n        return this.buildAndQueueAll(options).then((batch) => {\n            return batch;\n            //            return currentBatch.$signAndSubmitAll().then(() => true);\n        });\n    }\n\n    /**\n     * augments a transaction context with a type indicator\n     * that it has additional transactions to be submitted.\n     * @public\n     * @remarks\n     * The optional argument can also be used to include additional\n     * transactions to be chained after the current transaction.\n     */\n    withAddlTxns<TCX extends StellarTxnContext<anyState>>(\n        this: TCX,\n        addlTxns: Record<string, TxDescription<any, \"buildLater!\">> = {}\n    ): hasAddlTxns<TCX> {\n        //@ts-expect-error\n        this.state.addlTxns = this.state.addlTxns || {};\n\n        for (const [name, txn] of Object.entries(addlTxns)) {\n            this.includeAddlTxn(name, txn);\n        }\n        return this as any;\n    }\n\n    async buildAndQueueAll(\n        this: StellarTxnContext<any>,\n        options: SubmitOptions = {}\n    ) {\n        const {\n            addlTxInfo = {\n                description: this.txnName\n                    ? this.txnName\n                    : \"‹unnamed tx›\",\n                id: this.id,\n                tcx: this,\n            },\n            ...generalSubmitOptions\n        } = options;\n        if (options.paramsOverride) {\n            console.warn(\n                \"⚠️  paramsOverride can be useful for extreme cases \\n\" +\n                    \"of troubleshooting tx execution by submitting an oversized tx \\n\" +\n                    \"with unoptimized contract scripts having diagnostic print/trace calls\\n\" +\n                    \"to a custom preprod node having overloaded network params, thus allowing \\n\" +\n                    \"such a transaction to be evaluated end-to-end by the Haskell evaluator using \\n\" +\n                    \"the cardano-node's script-budgeting mini-protocol.\\n\\n\" +\n                    \"This will cause problems for regular transactions (such as requiring very large collateral)\" +\n                    \"Be sure to remove any params override if you're not dealing with \\n\" +\n                    \"one of those very special situations. \\n\"\n            );\n            debugger;\n        }\n\n        if (this.isFacade == false) {\n            return this.buildAndQueue({\n                ...generalSubmitOptions,\n                addlTxInfo,\n            }).then(() => {\n                if (this.state.addlTxns) {\n                    // this gives early registration of nested txns from top-level txns\n                    console.log(\n                        `🎄⛄🎁 ${this.id}   -- B&QA - registering addl txns`\n                    );\n                    return this.queueAddlTxns(options).then(() => {\n                        return this.currentBatch;\n                    });\n\n                    // .then((x) => {\n                    //     return this.currentBatch.$signAndSubmitAll()\n                    //     // this.setup.chainBuilder = undefined;\n                    //     // return x;\n                    // });\n                }\n                return this.currentBatch\n            });\n        } else if (this.state.addlTxns) {\n            if (this.isFacade) {\n                this.currentBatch.$txInfo(this.id)?.transition(\"isFacade\");\n            }\n\n            // this gives early registration of nested txns from top-level txns\n            console.log(\n                `🎄⛄🎁 ${this.id}   -- B&QA - registering txns in facade`\n            );\n            return this.queueAddlTxns(generalSubmitOptions).then(() => {\n                return this.currentBatch;\n            });\n        }\n        console.warn(`⚠️  submitAll(): no txns to queue/submit`, this);\n        throw new Error(\n            `unreachable? -- nothing to do for submitting this tcx`\n        );\n    }\n\n    get currentBatch() {\n        return this.setup.txBatcher.current;\n    }\n\n    /**\n     * Submits only the current transaction.\n     * @remarks\n     * To also submit additional transactions, use the `submitAll()` method.\n     */\n    async buildAndQueue(\n        this: StellarTxnContext<any>,\n        submitOptions: SubmitOptions = {}\n    ) {\n        let {\n            signers = [],\n            addlTxInfo,\n            paramsOverride,\n            expectError,\n            beforeError,\n            beforeValidate,\n            whenBuilt,\n            fixupBeforeSubmit,\n            onSubmitError,\n            onSubmitted,\n        } = submitOptions;\n\n        // console.log(\"buildAndQueue with setup\", this.setup);\n        this.noFacade(\"submit\");\n        if (!addlTxInfo) {\n            debugger;\n            throw new Error(`expecting addlTxInfo to be passed`);\n            addlTxInfo = {\n                description: this.txnName\n                    ? \": \" + this.txnName\n                    : \"‹unnamed tx›\",\n                id: nanoid(5),\n                tcx: this,\n            };\n        }\n        const {\n            logger,\n            setup: { network },\n        } = this;\n        const {\n            tx,\n            willSign,\n            walletMustSign,\n            wallet,\n            wHelper,\n            costs = {\n                total: { cpu: 0n, mem: 0n },\n            },\n        } = await this.build({\n            signers,\n            paramsOverride,\n            addlTxInfo,\n            beforeValidate,\n            expectError,\n        });\n        let { description, id } = addlTxInfo;\n        if (!id) {\n            id = addlTxInfo.id = this.id;\n        }\n        const addlTxInfo2: TxDescription<any, \"buildLater!\"> = {\n            ...addlTxInfo,\n        } as any;\n\n        const txStats = {\n            costs: costs,\n            wallet: wallet,\n            walletMustSign,\n            wHelper,\n            willSign,\n        };\n        const errMsg =\n            tx.hasValidationError && tx.hasValidationError.toString();\n        if (errMsg) {\n            // console.log(`submit(): FAILED tx.validate(): ${errMsg}`);\n            // console.profileEnd?.(\"tx.validate()\");\n            // @ts-ignore\n            // if (console.profileEnd) {\n            //     debugger;\n            // }\n\n            logger.logPrint(`⚠️  txn validation failed: ${description}\\n${errMsg}\\n`);\n            logger.logPrint(this.dump(tx));\n            this.emitCostDetails(tx, costs);\n            logger.flush();\n            logger.logError(`FAILED submitting tx: ${description}`);\n            logger.logPrint(errMsg);\n            if (expectError) {\n                logger.logPrint(\n                    `\\n\\n💣🎉 💣🎉 🎉 🎉 transaction failed (as expected)`\n                );\n            }\n\n            const txErrorDescription: TxDescriptionWithError = {\n                ...addlTxInfo2,\n                tcx: this,\n                error: errMsg,\n                tx,\n                stats: txStats,\n                options: submitOptions,\n                txCborHex: bytesToHex(tx.toCbor()),\n            };\n            this.currentBatch.txError(txErrorDescription);\n\n            let errorHandled;\n            if (beforeError) {\n                errorHandled = await beforeError(txErrorDescription);\n            }\n            logger.flushError();\n            if (\n                errMsg.match(\n                    /multi:Minting: only dgData activities ok in mintDgt/\n                )\n            ) {\n                console.log(\n                    `⚠️  mint delegate for multiple activities should be given delegated-data activities, not the activities of the delegate`\n                );\n            }\n            if (!errorHandled) {\n                debugger;\n                throw new Error(errMsg);\n            }\n        }\n        // const elapsed = t2 - t1;\n        // console.log(\n        //     // stopwatch emoji: ⏱\n        //     `          :::::::::: ⏱ tx validation time: ${elapsed}ms ⏱`\n        // );\n        // result: validations for non-trivial txns can take ~800+ ms\n        //  - validations with simplify:true, ~250ms - but ...`\n        //    ... with elided error messages that don't support negative-testing very well\n        for (const pkh of willSign) {\n            if (!pkh) continue;\n            if (tx.body.signers.find((s) => pkh.isEqual(s))) continue;\n            throw new Error(\n                `incontheeivable! all signers should have been added to the builder above`\n            );\n        }\n\n        const txDescr: TxDescription<any, \"built\"> = {\n            ...addlTxInfo2,\n            tcx: this,\n            tx,\n            txId: tx.id(),\n            options: submitOptions,\n            stats: txStats,\n            txCborHex: bytesToHex(tx.toCbor()),\n        };\n        const { currentBatch } = this;\n        const txState = currentBatch.$txStates[id];\n\n        logger.logPrint(`tx transcript: ${description}\\n`);\n        logger.logPrint(this.dump(tx));\n        this.emitCostDetails(tx, costs);\n        logger.logPrint(`end: ${description}`);\n        logger.flush();\n\n        // hands off wallet signing & tx-completion to the batcher.\n        console.timeStamp?.(`tx: add to current-tx-batch`);\n        currentBatch.$addTxns(txDescr);\n        this.setup.chainBuilder?.with(txDescr.tx);\n        await whenBuilt?.(txDescr);\n    }\n    emitCostDetails(tx: Tx, costs: { total: Cost; [key: string]: Cost }) {\n        const { logger } = this;\n        const {\n            maxTxExCpu,\n            maxTxExMem,\n            maxTxSize,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxSize = maxTxSize,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxExMem = maxTxExMem,\n            //@ts-expect-error on our synthetic attributes\n            origMaxTxExCpu = maxTxExCpu,\n            exCpuFeePerUnit,\n            exMemFeePerUnit,\n            txFeePerByte,\n            txFeeFixed,\n        } = this.networkParams;\n        const oMaxSize: number = origMaxTxSize;\n        const oMaxMem: number = origMaxTxExMem;\n        const oMaxCpu: number = origMaxTxExCpu;\n\n        const { total, ...otherCosts } = costs;\n        const txSize = tx.calcSize();\n        const txFeeCalc = Number(tx.calcMinFee(this.networkParams));\n        const txFee = tx.body.fee;\n\n        const cpuFee = BigInt((Number(total.cpu) * exCpuFeePerUnit).toFixed(0));\n        const memFee = BigInt((Number(total.mem) * exMemFeePerUnit).toFixed(0));\n        const sizeFee = BigInt(txSize * txFeePerByte);\n        const nCpu = Number(total.cpu);\n        const nMem = Number(total.mem);\n        let refScriptSize = 0;\n        for (const anyInput of [...tx.body.inputs, ...tx.body.refInputs]) {\n            const refScript = anyInput.output.refScript;\n            if (refScript) {\n                const scriptSize = refScript.toCbor().length;\n                refScriptSize += scriptSize;\n            }\n        }\n        let multiplier = 1.0;\n        let refScriptsFee = 0n;\n        let refScriptsFeePerByte = this.networkParams.refScriptsFeePerByte;\n        let refScriptCostDetails: string[] = [];\n        const tierSize = 25600;\n        let alreadyConsumed = 0;\n        for (\n            let tier = 0;\n            tier * tierSize < refScriptSize;\n            tier += 1, multiplier *= 1.2\n        ) {\n            const topOfThisTier = (1 + tier) * tierSize;\n            const consumedThisTier = Math.min(\n                tierSize,\n                refScriptSize - alreadyConsumed\n            );\n            alreadyConsumed += consumedThisTier;\n            const feeThisTier = Math.round(\n                consumedThisTier * multiplier * refScriptsFeePerByte\n            );\n            refScriptsFee += BigInt(feeThisTier);\n            refScriptCostDetails.push(\n                `\\n      -- refScript tier${\n                    1 + tier\n                } (${consumedThisTier} × ${multiplier}) ×${refScriptsFeePerByte} = ${lovelaceToAda(\n                    feeThisTier\n                )}`\n            );\n        }\n\n        // for (let i = 0; i < refScriptSize; i += 25600, multiplier *= 1.2) {\n        //     const chunkSize = Math.min(25600, refScriptSize - i)\n        //     const feeThisChunk = chunkSize * multiplier * refScriptsFeePerByte\n        //     refScriptsFee += BigInt(feeThisChunk)\n        //     refScriptCostDetails.push(\n        //         `\\n      -- refScript tier${i} (${chunkSize} bytes) × ${multiplier} = ${lovelaceToAda(feeThisChunk)}`\n        //     )\n        // }\n        const fixedTxFeeBigInt = BigInt(txFeeFixed);\n\n        const remainderUnaccounted =\n            txFee -\n            cpuFee -\n            memFee -\n            sizeFee -\n            fixedTxFeeBigInt -\n            refScriptsFee;\n\n        if (nCpu > oMaxCpu || nMem > oMaxMem || txSize > oMaxSize) {\n            logger.logPrint(\n                \"🔥🔥🔥🔥  THIS TX EXCEEDS default (overridden in test env) limits on network params  🔥🔥🔥🔥\\n\" +\n                    `  -- cpu ${intWithGrouping(nCpu)} = ${(\n                        (100 * nCpu) /\n                        oMaxCpu\n                    ).toFixed(1)}% of ${intWithGrouping(\n                        oMaxCpu\n                    )} (patched to ${intWithGrouping(maxTxExCpu)})\\n` +\n                    `  -- mem ${nMem} = ${((100 * nMem) / oMaxMem).toFixed(\n                        1\n                    )}% of ${intWithGrouping(\n                        oMaxMem\n                    )} (patched to ${intWithGrouping(maxTxExMem)})\\n` +\n                    `  -- tx size ${intWithGrouping(txSize)} = ${(\n                        (100 * txSize) /\n                        oMaxSize\n                    ).toFixed(1)}% of ${intWithGrouping(\n                        oMaxSize\n                    )} (patched to ${intWithGrouping(maxTxSize)})\\n`\n            );\n        }\n        const scriptBreakdown =\n            Object.keys(otherCosts).length > 0\n                ? `\\n    -- per script (with % blame for actual costs):` +\n                  Object.entries(otherCosts)\n                      .map(\n                          ([key, { cpu, mem }]) =>\n                              `\\n      -- ${key}: cpu ${lovelaceToAda(\n                                  Number(cpu) * exCpuFeePerUnit\n                              )} = ${(\n                                  (Number(cpu) / Number(total.cpu)) *\n                                  100\n                              ).toFixed(1)}%, mem ${lovelaceToAda(\n                                  Number(mem) * exMemFeePerUnit\n                              )} = ${(\n                                  (Number(mem) / Number(total.mem)) *\n                                  100\n                              ).toFixed(1)}%`\n                      )\n                      .join(\"\")\n                : \"\";\n\n        logger.logPrint(\n            `costs: ${lovelaceToAda(txFee)}` +\n                `\\n  -- fixed fee = ${lovelaceToAda(txFeeFixed)}` +\n                `\\n  -- tx size fee = ${lovelaceToAda(sizeFee)}` +\n                ` (${intWithGrouping(txSize)} bytes = ${(\n                    Number((1000 * txSize) / oMaxSize) / 10\n                ).toFixed(1)}% of tx size limit)` +\n                `\\n  -- refScripts fee = ${lovelaceToAda(refScriptsFee)}` +\n                refScriptCostDetails.join(\"\") +\n                `\\n  -- scripting costs` +\n                `\\n    -- cpu units ${intWithGrouping(total.cpu)}` +\n                ` = ${lovelaceToAda(cpuFee)}` +\n                ` (${(\n                    Number((1000n * total.cpu) / BigInt(oMaxCpu)) / 10\n                ).toFixed(1)}% of cpu limit/tx)` +\n                `\\n    -- memory units ${intWithGrouping(total.mem)}` +\n                ` = ${lovelaceToAda(memFee)}` +\n                ` (${(\n                    Number((1000n * total.mem) / BigInt(oMaxMem)) / 10\n                ).toFixed(1)}% of mem limit/tx)` +\n                scriptBreakdown +\n                `\\n  -- remainder ${lovelaceToAda(\n                    remainderUnaccounted\n                )} unaccounted-for`\n        );\n    }\n\n    /**\n     * Executes additional transactions indicated by an existing transaction\n     * @remarks\n     *\n     * During the off-chain txn-creation process, additional transactions may be\n     * queued for execution.  This method is used to register those transactions,\n     * along with any chained transactions THEY may trigger.\n     *\n     * The TxBatcher and batch-controller classes handle wallet-signing\n     * and submission of the transactions for execution.\n     * @public\n     **/\n    async queueAddlTxns(\n        this: hasAddlTxns<any>,\n        pipelineOptions?: TxPipelineOptions\n    ) {\n        const { addlTxns } = this.state;\n        if (!addlTxns) return;\n\n        // return this.submitTxns(Object.values(addlTxns), callback);\n        return this.submitTxnChain({\n            ...pipelineOptions,\n            txns: Object.values(addlTxns),\n        });\n    }\n\n    /**\n     * Resolves a list of tx descriptions to full tcx's, without handing any of their\n     * any chained/nested txns.\n     * @remarks\n     * if submitEach is provided, each txn will be submitted as it is resolved.\n     * If submitEach is not provided, then the network must be capable of tx-chaining\n     * use submitTxnChain() to submit a list of txns with chaining\n     */\n    async resolveMultipleTxns(\n        txns: TxDescription<any, \"buildLater!\">[],\n        pipelineOptions?: TxPipelineOptions\n    ) {\n        //         as [\n        //         string,\n        //         TxDescription<any, \"buildLater!\">\n        //     ][]\n\n        for (const [txName, addlTxInfo] of Object.entries(txns)) {\n            const { id } = addlTxInfo;\n            let txTracker = this.currentBatch.$txInfo(id);\n            if (!txTracker) {\n                this.currentBatch.$addTxns(addlTxInfo);\n                txTracker = this.currentBatch.$txInfo(id);\n            }\n        }\n        /* yield to allow rendering */\n        await new Promise((res) => setTimeout(res, 5));\n\n        for (const [txName, addlTxInfo] of Object.entries(txns)) {\n            const { id, depth, parentId } = addlTxInfo;\n            let txTracker = this.currentBatch.$txInfo(id);\n\n            txTracker.$transition(\"building\");\n            /* yield to allow rendering */\n            await new Promise((res) => setTimeout(res, 5));\n\n            // IS resolving.  WILL BE resolved\n            const txInfoResolved: TxDescription<any, \"resolved\"> =\n                addlTxInfo as any;\n            const { txName, description } = txInfoResolved;\n            let alreadyPresent: TxNotNeededError | undefined = undefined;\n            console.log(\"  -- before: \" + description);\n            const tcx = (\n                \"function\" == typeof addlTxInfo.mkTcx\n                    ? await (async () => {\n                          console.log(\n                              \"  creating TCX just in time for: \" + description\n                          );\n\n                          const tcx = await addlTxInfo.mkTcx();\n                          tcx.parentId = parentId || \"\";\n                          tcx.depth = depth;\n                          if (id) {\n                              this.currentBatch.changeTxId(id, tcx.id);\n                              txInfoResolved.id = tcx.id;\n                          } else {\n                              addlTxInfo.id = tcx.id;\n                              console.warn(\n                                  `expected id to be set on addlTxInfo; falling back to JIT-generated id in new tcx`\n                              );\n                          }\n                          return tcx;\n                      })().catch((e) => {\n                          if (e instanceof TxNotNeededError) {\n                              alreadyPresent = e;\n                              const tcx = new StellarTxnContext(\n                                  this.setup\n                              ).withName(\n                                  `addlTxInfo already present: ${description}`\n                              );\n                              tcx.alreadyPresent = alreadyPresent;\n                              return tcx;\n                          }\n                          throw e;\n                      })\n                    : (() => {\n                          console.log(\n                              \"  ---------------- warning!!!! addlTxInfo is already built!\"\n                          );\n                          debugger;\n                          throw new Error(\" unreachable - right?\");\n                          return addlTxInfo.tcx;\n                      })()\n            ) as StellarTxnContext;\n            if (\"undefined\" == typeof tcx) {\n                throw new Error(\n                    `no txn provided for addlTx ${txName || description}`\n                );\n            }\n            txInfoResolved.tcx = tcx;\n            if (tcx.alreadyPresent) {\n                console.log(\n                    \"  -- tx effects are already present; skipping: \" +\n                        txName || description\n                );\n                this.currentBatch.$addTxns(txInfoResolved);\n                continue;\n            }\n\n            const replacementTcx =\n                (pipelineOptions?.fixupBeforeSubmit &&\n                    ((await pipelineOptions.fixupBeforeSubmit(\n                        txInfoResolved\n                    )) as typeof replacementTcx | boolean)) ||\n                tcx;\n            if (false === replacementTcx) {\n                console.log(\"callback cancelled txn: \", txName);\n                continue;\n            }\n            if (replacementTcx !== true && replacementTcx !== tcx) {\n                console.log(\n                    `callback replaced txn ${txName} with a different txn: `,\n                    dumpAny(replacementTcx)\n                );\n            }\n\n            // if the callback returns true or void, we execute the txn as already resolved.\n            // if it returns an alternative txn, we use that instead.\n            const effectiveTcx: StellarTxnContext =\n                true === replacementTcx ? tcx : replacementTcx || tcx;\n            // console.log(\"   -- submitTxns: -> txn: \", txName, description);\n            // console.log(\"   ----> effective tx\", effectiveTcx);\n\n            txInfoResolved.tcx = effectiveTcx;\n\n            //!!! was just buildAndQueue, but that was executing\n            // in \"breadth-first\" order (good for registration)\n            //    (i.e. in consecutive layers of discovered txns)\n            // ... instead of executing depth-first (good for tx-chaining).\n            // We want all txns to be registered as soon as they're\n            //   known to be a tx to be made.  But for each such tx,\n            //   we want its chained txns to be executed BEFORE moving on\n            //   to build any of those other registered txns.\n\n            // //@ts-expect-error\n            // if (this.setup.stopped) return;\n            // if (description == \"+ on-chain refScript: minter\") {\n            //     //@ts-expect-error\n            //     this.setup.stopped = true\n            //     break\n            // }\n            await effectiveTcx.buildAndQueueAll({\n                ...pipelineOptions,\n                addlTxInfo: txInfoResolved,\n            });\n            // console.log(\"   -- submitTxns: <- txn: \", txName, description);\n            // m oved into submit()\n            // if (callbacks?.onSubmitted) {\n            // console.log(\"   -- submitTxns: triggering onSubmit callback\");\n            // await callbacks.onSubmitted(txInfoResolved);\n            // console.log(\"   -- submitTxns: onSubmitted callback completed\");\n            // }\n        }\n    }\n\n    /**\n     * To add a script to the transaction context, use `attachScript`\n     *\n     * @deprecated - invalid method name; use `addScriptProgram()` or capo's `txnAttachScriptOrRefScript()` method\n     **/\n    addScript() {}\n\n    async submitTxnChain(\n        options: {\n            txns?: TxDescription<any, \"buildLater!\">[];\n        } & TxPipelineOptions = {\n            //@ts-expect-error because the type of this context doesn't\n            //   guarantee the presence of addlTxns.  But it might be there!\n            txns: this.state.addlTxns || [],\n        }\n    ) {\n        //@ts-expect-error on probing for a maybe-undefined entry:\n        const addlTxns = this.state.addlTxns;\n\n        const { txns, onSubmitError } = options;\n        const newTxns: TxDescription<any, \"buildLater!\">[] =\n            txns || addlTxns || [];\n        let chainedTxns: TxDescription<any, \"buildLater!\">[] = [];\n\n        const txChainSubmitOptions: TxPipelineOptions = {\n            onSubmitError,\n            // txns,  // see newTxns\n            fixupBeforeSubmit: (txinfo) => {\n                //   ... in regular execution environment, this is a no-op by default\n                options.fixupBeforeSubmit?.(txinfo);\n            },\n            whenBuilt: async (txinfo) => {\n                const { id: parentId, tx } = txinfo;\n                const stackedPromise = options.whenBuilt?.(txinfo);\n                const more: Record<string, TxDescription<any, \"buildLater!\">> =\n                    //@ts-expect-error on optional prop\n                    txinfo.tcx.state.addlTxns || {};\n                console.log(\"  ✅ \" + txinfo.description);\n                const moreTxns = Object.values(more);\n\n                for (const nested of moreTxns) {\n                    nested.parentId = parentId;\n                }\n                console.log(\n                    `🎄⛄🎁 ${parentId}   -- registering nested txns ASAP`\n                );\n                this.currentBatch.$addTxns(moreTxns);\n\n                /* yield to allow rendering */\n                await new Promise((res) => setTimeout(res, 5));\n\n                // if (moreTxns.length) {\n                //     // gathers the next layer of txns to be resolved & built\n                //     chainedTxns.push(...moreTxns);\n                //     console.log(\n                //         \" + chained txns: \\n\" +\n                //             moreTxns\n                //                 .map((t) => `   🟩 ${t.description}\\n`)\n                //                 .join(\"\")\n                //     );\n                // }\n                return stackedPromise;\n            },\n            onSubmitted: (txinfo) => {\n                //@ts-expect-error triggering the test-network-emulator's tick\n                //   ... in regular execution environment, this is a no-op by default\n                this.setup.network.tick?.(1);\n            },\n        };\n        let chainDepth = 0;\n        const isolatedTcx = new StellarTxnContext(this.setup);\n        console.log(\"🐝😾🐻🦀\");\n        isolatedTcx.id = this.id;\n        console.log(\n            \"at d=0: submitting addl txns: \\n\" +\n                newTxns.map((t) => `  🟩 ${t.description}\\n`).join(\"\")\n        );\n\n        const t = isolatedTcx.resolveMultipleTxns(\n            newTxns,\n            txChainSubmitOptions\n        );\n\n        const allPromises = [] as Promise<any>[];\n        chainDepth = 0;\n        allPromises.push(t);\n\n        await t;\n        return;\n        while (chainedTxns.length) {\n            const nextChain: typeof chainedTxns = [];\n            chainDepth++;\n\n            for (const { tcx } of chainedTxns) {\n                // if (tcx.state) {\n                //     debugger\n                // } else {\n                //     const { addlTxns: nestedAddlTxns } = (tcx.state || {}) as {\n                //         addlTxns?: Record<\n                //             string,\n                //             TxDescription<any, \"buildLater!\">\n                //         >;\n                //     };\n                //     if (!nestedAddlTxns) continue;\n                //     nextChain.push(...Object.values(nestedAddlTxns));\n                // }\n            }\n            console.log(\n                ` 🐞🐞🐞🐞 submitting ${chainedTxns.length} transactions at depth ${chainDepth}`\n            );\n            console.log(\n                chainedTxns.map((t) => `  🟩 ${t.description}\\n`).join(\"\")\n            );\n            const thisBatch = chainedTxns;\n            chainedTxns = [];\n\n            const isolatedTcx = new StellarTxnContext(this.setup);\n            isolatedTcx.id = this.id;\n\n            const t = isolatedTcx.resolveMultipleTxns(\n                thisBatch,\n                txChainSubmitOptions\n            );\n            allPromises.push(t);\n            await t;\n            console.log(\n                \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSubmitted transactions at depth \" +\n                    chainDepth\n            );\n            chainedTxns = nextChain;\n        }\n        return Promise.all(allPromises);\n    }\n}\n\n// /**\n//  * Given a fully built transaction, returns a new transaction with the fees removed\n//  * @remarks\n//  * The result is suitable for submission to Ogmios' tx-evaluation endpoint\n//  * that uses Haskell's CEK interpreter to give us the costs for the transaction.\n//  *\n//  * TODO: use this to cross-check Helios' CEK budgeting and ensure we\n//  * make a txn that will be accepted by the network\n//  */\n// export function undoFeesFrom(\n//     t: Tx,\n//     { isValid: validity = true }: { isValid?: boolean } = {}\n// ): Tx {\n//     const tb = t.body;\n//     const pTxB = makeTxBody({\n//         dcerts: tb.dcerts,\n//         fee: BigInt(0),\n//         minted: tb.minted,\n//         refInputs: tb.refInputs,\n//         inputs: tb.inputs,\n//         outputs: tb.outputs,\n//         signers: tb.signers,\n//         withdrawals: tb.withdrawals,\n//         collateral: tb.collateral,\n//         collateralReturn: tb.collateralReturn,\n//         firstValidSlot: tb.firstValidSlot,\n//         lastValidSlot: tb.lastValidSlot,\n//         metadataHash: tb.metadataHash,\n//         scriptDataHash: tb.scriptDataHash,\n//         totalCollateral: tb.totalCollateral,\n//     });\n\n//     const txW = makeTxWitnesses({\n//         ...t.witnesses,\n//         redeemers: t.witnesses.redeemers.map((r) => {\n//             switch (r.kind) {\n//                 case \"TxCertifyingRedeemer\":\n//                     return makeTxCertifyingRedeemer(r.dcertIndex, r.data);\n//                 case \"TxMintingRedeemer\":\n//                     return makeTxMintingRedeemer(r.policyIndex, r.data);\n//                 case \"TxSpendingRedeemer\":\n//                     return makeTxSpendingRedeemer(r.inputIndex, r.data);\n//                 case \"TxRewardingRedeemer\":\n//                     return makeTxRewardingRedeemer(r.withdrawalIndex, r.data);\n//             }\n//         }),\n//     });\n//     return makeTx(pTxB, txW, validity, t.metadata);\n// }\n","import { equalsBytes, type BytesLike } from \"@helios-lang/codec-utils\";\nimport {\n    selectLargestFirst,\n    type SimpleWallet,\n    type Wallet,\n} from \"@helios-lang/tx-utils\";\nimport {\n    type Address,\n    type AssetClass,\n    type Assets,\n    type MintingPolicyHash,\n    type TxInput,\n    type TxOutput,\n    type Value,\n    type NetworkParams,\n    makeTxOutput,\n    makeValue,\n    makeAssetClass,\n    makeAddress,\n    makeDummyAddress,\n    type ScriptHash,\n} from \"@helios-lang/ledger\";\n\nimport { StellarTxnContext } from \"./StellarTxnContext.js\";\n// import type { SimpleWallet_stellar } from \"./testing/StellarNetworkEmulator.js\";\nimport { dumpAny, utxosAsString } from \"./diagnostics.js\";\nimport { UutName } from \"./delegation/UutName.js\";\nimport type { SetupInfo, StellarContract } from \"./StellarContract.js\";\nimport { textToBytes } from \"./HeliosPromotedTypes.js\";\n\nexport type utxoSortInfo = {\n    u: TxInput;\n    sufficient: boolean;\n    free: bigint;\n    minAdaAmount: bigint;\n};\n\nexport type canHaveToken = TxInput | TxOutput | Assets;\nexport type tokenPredicate<tokenBearer extends canHaveToken> = ((\n    something: tokenBearer\n) => tokenBearer | undefined) & { predicateValue: Value };\n\n/**\n * a function that can filter txInputs for coin-selection\n * @remarks\n *\n * short form: \"returns truthy\" if the input is matchy for the context\n * @public\n **/\nexport type utxoPredicate = (\n    | ((u: TxInput) => TxInput | undefined)\n    | ((u: TxInput) => boolean)\n    | ((u: TxInput) => boolean | undefined)\n) & {\n    predicateValue?: Value;\n};\n\nexport type UtxoSearchScope = {\n    /**\n     * provides pre-resolved utxos for the indicated address-or-wallet\n     */\n    utxos?: TxInput[];\n    /**\n     * searches in a specific address (e.g. a smart contract address)\n     */\n    address?: Address;\n    /**\n     * searches in this wallet rather than the address\n     */\n    wallet?: Wallet | SimpleWallet; //| SimpleWallet_stellar;\n    /**\n     * suppresses searching in other actor-wallets found in the setup / actorContext:\n     */\n    searchOthers?: boolean;\n\n    /**\n     * extra hint to add to the error message if no utxos are found\n     */\n    extraErrorHint?: string;\n\n    /**\n     * @deprecated - ??? use txBatcher's chainBuilder and includeAddlTxns instead\n     * NOTE: if we're only using this to reference our OWN tcx, then\n     *   either make that automatic, or retract the deprecation.\n     */\n    exceptInTcx?: StellarTxnContext;\n    /**\n     * by default it, only dumps detail if global.utxoDump is set to true\n     * @remarks\n     * - use \"onFail\" to log candidate utxos if the search fails\n     * - use \"always\" to log candidate utxos for a single search,\n     *   regardless of success or failure\n     */\n    dumpDetail?: \"onFail\" | \"always\";\n    // utxos : TxInput[]\n};\n\nexport type UtxoSearchScopeWithUtxos = UtxoSearchScope & {\n    utxos: TxInput[];\n    required?: true;\n};\n\ntype CoinSelector = (utxos: TxInput[], amount: Value) => [TxInput[], TxInput[]];\n\n/**\n * A helper class for managing UTXOs in a Stellar contract\n * @remarks\n * Using the provided setup details, this helper provides methods for finding,\n * filtering and selecting UTXOs for inclusion in transactions, and for creating\n * related values and predicate-functions for matching UTXOs.\n * @public\n */\nexport class UtxoHelper {\n    strella?: StellarContract<any>;\n    setup: SetupInfo;\n\n    constructor(setup: SetupInfo, strella?: StellarContract<any>) {\n        this.setup = setup;\n        // console.log(\"UtxoHelper created with setup: \", setup);\n        if (!setup.uxtoDisplayCache) {\n            setup.uxtoDisplayCache = new Map();\n        }\n        this.strella = strella;\n    }\n\n    get networkParams(): NetworkParams {\n        return this.setup.networkParams;\n    }\n\n    get wallet() {\n        return this.setup.actorContext.wallet!;\n    }\n\n    get network() {\n        return this.setup.chainBuilder || this.setup.network;\n    }\n\n    /**\n     * Filters out utxos having non-ada tokens\n     * @internal\n     */\n    hasOnlyAda(value: Value, tcx: StellarTxnContext | undefined, u: TxInput) {\n        const toSortInfo = this.mkUtxoSortInfo(value.lovelace);\n\n        const found = [u]\n            .map(toSortInfo)\n            .filter(this.utxoIsSufficient)\n            .filter(this.utxoIsPureADA)\n            .map(this.sortInfoBackToUtxo)\n            .at(0);\n\n        return found;\n    }\n\n    /**\n     * Sorts utxos by size, with pure-ADA utxos preferred over others.\n     * @internal\n     */\n    utxoSortSmallerAndPureADA(\n        { free: free1, minAdaAmount: r1 }: utxoSortInfo,\n        { free: free2, minAdaAmount: r2 }: utxoSortInfo\n    ) {\n        {\n            //! primary: treats pure-ada utxos as always better\n            if (!r1 && r2) {\n                return -1;\n            }\n            if (r1 && !r2) {\n                return 1; //\n            }\n        }\n        //! secondary: smaller utxos are more preferred than larger ones\n        if (free2 > free1) return -1;\n        if (free2 < free1) return 1;\n        return 0;\n    }\n\n    /**\n     * Filters out utxos that are not sufficient to cover the minimum ADA amount established in\n     * the utxo sort info in {@link UtxoHelper.mkUtxoSortInfo | mkUtxoSortInfo(min, max?)}.  Use in a filter() call.\n     * @internal\n     */\n    utxoIsSufficient({ sufficient }: utxoSortInfo) {\n        return !!sufficient;\n    }\n\n    /**\n     * Filters out utxos that have non-ADA tokens, given a utxo sort info object.  Use in a filter() call.\n     * @internal\n     */\n    utxoIsPureADA({ u }: utxoSortInfo) {\n        return u.value.assets.isZero() ? u : undefined;\n    }\n\n    /**\n     * transforms utxo sort info back to just the utxo.\n     * @internal\n     */\n    sortInfoBackToUtxo({ u }: utxoSortInfo) {\n        return u;\n    }\n\n    /**\n     * Creates a function that creates sort-info details for a utxo, given a minimum ADA amount\n     * and an optional maximum ADA amount.\n     * @internal\n     **/\n    mkUtxoSortInfo(min: bigint, max?: bigint) {\n        return (u: TxInput): utxoSortInfo => {\n            const minAdaAmount = u.value.assets.isZero()\n                ? BigInt(0)\n                : (() => {\n                      const dummy = makeTxOutput(\n                          u.output.address,\n                          makeValue(0, u.output.value.assets)\n                      );\n                      dummy.correctLovelace(this.networkParams);\n                      return dummy.value.lovelace;\n                  })();\n            const free = u.value.lovelace - minAdaAmount;\n            const sufficient = free > min && (max ? free < max : true);\n            const t = { u, sufficient, free, minAdaAmount };\n            // console.log(t, utxoAsString(u))\n            return t;\n        };\n    }\n    /**\n     * accumulates the count of utxos, but only if the utxo is ADA-only.  Use in a reduce() call.\n     **/\n    reduceUtxosCountAdaOnly(c: number, { minAdaAmount }: utxoSortInfo): number {\n        return c + (minAdaAmount ? 0 : 1);\n    }\n\n    hasToken<tokenBearer extends canHaveToken>(\n        something: tokenBearer,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ): tokenBearer | undefined {\n        if (something.kind == \"TxOutput\")\n            return (\n                (this.outputHasToken(\n                    something as TxOutput,\n                    value,\n                    tokenName,\n                    quantity\n                ) &&\n                    something) ||\n                undefined\n            );\n\n        if (something.kind == \"TxInput\")\n            return (\n                (this.utxoHasToken(\n                    something as TxInput,\n                    value,\n                    tokenName,\n                    quantity\n                ) &&\n                    something) ||\n                undefined\n            );\n\n        if (something.kind == \"Assets\")\n            return (\n                (this.assetsHasToken(\n                    something as Assets,\n                    value,\n                    tokenName,\n                    quantity\n                ) &&\n                    something) ||\n                undefined\n            );\n\n        throw new Error(\"unexpected\");\n        // //!!! todo: more explicit match for TxInput, which seems to be a type but not an 'instanceof'-testable thing.\n        // return (\n        //     (this.inputHasToken(something, value, tokenName, quantity) &&\n        //         something) ||\n        //     undefined\n        // );\n    }\n\n    utxoHasToken(\n        u: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return this.outputHasToken(u.output, value, tokenName, quantity) && u;\n    }\n\n    inputHasToken(\n        i: TxInput,\n        value: Value,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        return this.outputHasToken(i.output, value, tokenName, quantity) && i;\n    }\n\n    assetsHasToken(\n        a: Assets,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        const v =\n            vOrMph.kind == \"MintingPolicyHash\"\n                ? this.mkAssetValue(vOrMph, tokenName!, quantity!)\n                : vOrMph;\n\n        return a.isGreaterOrEqual(v.assets);\n    }\n\n    outputHasToken(\n        o: TxOutput,\n        vOrMph: Value | MintingPolicyHash,\n        tokenName?: string,\n        quantity?: bigint\n    ) {\n        const isValue = vOrMph.kind == \"Value\";\n        if (!isValue) {\n            if (!tokenName || !quantity) {\n                throw new Error(\n                    `missing required tokenName/quantity (or use a Value in arg2`\n                );\n            }\n        }\n\n        const v = isValue ? vOrMph : makeValue(vOrMph, tokenName!, quantity!);\n\n        return o.value.isGreaterOrEqual(v);\n    }\n\n    /**\n     * @deprecated - use helios `makeValue()` instead\n     */\n    mkAssetValue(\n        mph: MintingPolicyHash,\n        tokenName: BytesLike,\n        count: bigint = 1n\n    ) {\n        // const TL  = [ tokenName, count ] as [ ByteArrayLike, bigint ];\n        // const oneAssetLike = [ mph, [\n        //     TL\n        //  ] ] as [ MintingPolicyHash, [ ByteArrayLike, bigint ][] ];\n        //  const v1 = new Value(undefined, [\n        //     oneAssetLike\n        // ]);\n        // const v2 = new Value(undefined, [\n        //     [ mph, [ TL ] ]\n        // ]);\n        const v = makeValue(\n            mph,\n            tokenName,\n            count\n            // ...other mph / token-map pairs\n        );\n        return v;\n    }\n\n    findSmallestUnusedUtxo(\n        lovelace: bigint,\n        utxos: TxInput[],\n        tcx?: StellarTxnContext\n    ): TxInput | undefined {\n        const value = makeValue(lovelace);\n        const toSortInfo = this.mkUtxoSortInfo(value.lovelace);\n\n        const found = utxos\n            .map(toSortInfo)\n            .filter(this.utxoIsPureADA)\n            .filter(this.utxoIsSufficient)\n            .filter((uInfo: utxoSortInfo) => {\n                if (!tcx) return true;\n                return !!tcx?.utxoNotReserved(uInfo.u);\n            })\n            .sort(this.utxoSortSmallerAndPureADA)\n            .map(this.sortInfoBackToUtxo);\n        console.log(\"smallest utxos: \", utxosAsString(found));\n        const chosen = found.at(0);\n\n        return chosen;\n    }\n\n    /**\n     * creates a filtering function, currently for TxInput-filtering only.\n     * with the optional tcx argument, utxo's already reserved\n     *  ... in that transaction context will be skipped.\n     * @public\n     */\n    mkValuePredicate(\n        lovelace: bigint,\n        tcx?: StellarTxnContext\n    ): tokenPredicate<TxInput> {\n        const value = makeValue(lovelace);\n        const predicate = _adaPredicate.bind(this, tcx) as tokenPredicate<any>;\n        predicate.predicateValue = value;\n        return predicate;\n\n        function _adaPredicate(\n            this: UtxoHelper,\n            tcx: StellarTxnContext | undefined,\n            utxo: TxInput\n        ): TxInput | undefined {\n            return this.hasOnlyAda(value, tcx, utxo);\n        }\n    }\n\n    mkRefScriptPredicate(expectedScriptHash: number[]): utxoPredicate {\n        return (txin: TxInput) => {\n            const refScript = txin.output.refScript;\n            if (!refScript) return false;\n\n            const foundHash = refScript.hash();\n            return equalsBytes(foundHash, expectedScriptHash);\n        };\n    }\n\n    /**\n     * Creates an asset class for the given token name, for the indicated minting policy\n     */\n    acAuthorityToken(\n        tokenName: string | number[],\n        mph?: MintingPolicyHash\n    ): AssetClass {\n        let ourMph = mph;\n        if (!ourMph) {\n            if (!this.strella) {\n                throw new Error(\n                    `no contract available for resolving minting policy hash; provide to acAuthorityToken or use a UtxoHelper having a strella prop`\n                );\n            }\n            ourMph = this.strella.mintingPolicyHash;\n        }\n        if (!ourMph) {\n            throw new Error(`no minting policy hash available`);\n        }\n        return makeAssetClass(ourMph, tokenName);\n    }\n\n    /**\n     * Creates a Value object representing a token with a minimum lovelace amount\n     * making it valid for output in a utxo.\n     * @public\n     */\n    mkMinTv(\n        mph: MintingPolicyHash,\n        tokenName: string | UutName | number[],\n        count: bigint = 1n\n    ) {\n        const tnBytes = Array.isArray(tokenName)\n            ? tokenName\n            : textToBytes(tokenName.toString());\n\n        return this.mkMinAssetValue(mph, tnBytes, count);\n    }\n\n    mkMinAssetValue(\n        mph: MintingPolicyHash,\n        tokenName: BytesLike,\n        count: bigint = 1n\n    ) {\n        const v = makeValue(mph, tokenName, count);\n        // uses a dummy address so it can be used even during bootstrap\n        const dummyAddr = makeDummyAddress(false);\n        const txo = makeTxOutput(dummyAddr, v);\n        txo.correctLovelace(this.networkParams);\n        return txo.value;\n    }\n\n    tokenAsValue(\n        tokenName: string | number[] | UutName,\n        count: bigint = 1n\n    ): Value {\n        throw new Error(`only implemented by Capo`);\n    }\n\n    /**\n     * Creates a token predicate suitable for mustFindActorUtxo or mustFindMyUtxo\n     * @remarks\n     * This variant takes just a token-name / quantity, working only on Capo instances,\n     * and seeks a token created by the Capo's minting policy.\n     *\n     * Choose from one of the other variants to make a more specific token predicate.\n     * @public\n     */\n    mkTokenPredicate(\n        tokenName: UutName | number[] | string,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    /**\n     * Creates a token predicate suitable for mustFindActorUtxo or mustFindMyUtxo\n     * @remarks\n     * This variant uses a Value for filtering - each matched item must have the ENTIRE value.\n     * @public\n     */\n    mkTokenPredicate(val: Value): tokenPredicate<any>;\n    /**\n     * Creates a token predicate suitable for mustFindActorUtxo or mustFindMyUtxo\n     * @remarks\n     * This variant uses an explicit combination of policy/token-name/quantity\n     * @public\n     */\n    mkTokenPredicate(\n        mph: MintingPolicyHash,\n        tokenName: string,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    /**\n     * Creates a token predicate suitable for mustFindActorUtxo or mustFindMyUtxo\n     * @remarks\n     * This variant uses an AssetClass(policy/token-name) and quantity\n     * @public\n     */\n    mkTokenPredicate(\n        mphAndTokenName: AssetClass,\n        quantity?: bigint\n    ): tokenPredicate<any>;\n    mkTokenPredicate(\n        specifier:\n            | Value\n            | MintingPolicyHash\n            | AssetClass\n            | UutName\n            | number[]\n            | string,\n        quantOrTokenName?: string | bigint,\n        quantity?: bigint\n    ): tokenPredicate<any> {\n        let v: Value;\n        let mph: MintingPolicyHash;\n        let tokenName: string;\n        //!!! todo: support (AssetClass, quantity) input form\n        if (!specifier)\n            throw new Error(\n                `missing required Value or MintingPolicyHash or UutName (or uut-name as byte-array) in arg1`\n            );\n        const predicate = _tokenPredicate.bind(this) as tokenPredicate<any>;\n\n        //@ts-expect-error\n        const isValue = specifier.kind == \"Value\";\n\n        const isTokenNameOnly =\n            \"string\" === typeof specifier ||\n            (Array.isArray(specifier) && \"number\" === typeof specifier[0]);\n        const isUut = specifier instanceof UutName;\n        if (isValue) {\n            const v = specifier as Value;\n            // v = predicate.value = specifier;\n            const t = _tokenPredicate.bind(this, v) as tokenPredicate<any>;\n            t.predicateValue = v;\n            return t;\n        } else if (isUut || isTokenNameOnly) {\n            const tn = specifier as UutName | number[] | string;\n            const quant = quantOrTokenName ? BigInt(quantOrTokenName) : 1n;\n            //@ts-expect-error\n            const mph = this.strella.mph;\n            if (!mph) {\n                throw new Error(\n                    `this helper doesn't have a capo contract to resolve minting policy hash; specify the mph explicitly`\n                );\n            }\n            const tnBytes = isUut\n                ? textToBytes(tn.toString())\n                : Array.isArray(tn)\n                ? tn\n                : textToBytes(tn as string);\n            const tv = makeValue(\n                mph,\n                tnBytes,\n                quant // quantity if any\n            );\n            const t = _tokenPredicate.bind(this, tv) as tokenPredicate<any>;\n            t.predicateValue = tv;\n            return t;\n            //@ts-expect-error\n        } else if (specifier.kind == \"MintingPolicyHash\") {\n            mph = specifier as MintingPolicyHash;\n            if (\"string\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with minting policy hash, token-name must be a string (or ByteArray support is TODO)`\n                );\n            tokenName = quantOrTokenName;\n            quantity = quantity || 1n;\n\n            // v = predicate.value = this.mkTokenValue(tokenName, quantity, mph);\n            // return predicate;\n            const tv = this.mkAssetValue(mph, tokenName, quantity);\n\n            const t = _tokenPredicate.bind(this, tv) as tokenPredicate<any>;\n            t.predicateValue = tv;\n            return t;\n            //@ts-expect-error\n        } else if (specifier.kind == \"AssetClass\") {\n            const s = specifier as AssetClass;\n            mph = s.mph;\n            if (!quantOrTokenName) quantOrTokenName = 1n;\n            if (\"bigint\" !== typeof quantOrTokenName)\n                throw new Error(\n                    `with AssetClass, the second arg must be a bigint like 3n, or omitted`\n                );\n            quantity = quantOrTokenName;\n\n            // v = predicate.value = new Value(0n, [[specifier, quantity]]);\n            // return predicate;\n            const tv = makeValue(0n, [[mph, [[s.tokenName, quantity]]]]);\n            const t = _tokenPredicate.bind(this, tv) as tokenPredicate<any>;\n            t.predicateValue = tv;\n            return t;\n        } else {\n            throw new Error(\n                `wrong token specifier (need Value, MPH+tokenName, or AssetClass`\n            );\n        }\n\n        function _tokenPredicate<tokenBearer extends canHaveToken>(\n            this: UtxoHelper,\n            v: Value,\n            something: tokenBearer\n        ): tokenBearer | undefined {\n            return this.hasToken(something, v);\n        }\n    }\n\n    /**\n     * adds the values of the given TxInputs\n     */\n    totalValue(utxos: TxInput[]): Value {\n        return utxos.reduce((v: Value, u: TxInput) => {\n            return v.add(u.value);\n        }, makeValue(0n));\n    }\n\n    /**\n     * Creates a Value object representing a token with the given name and quantity\n     * @deprecated - Use `helios' makeValue()` instead.\n     * @remarks\n     * This method doesn't include any lovelace in the Value object.\n     * use mkMinAssetValue() to include the minimum lovelace for storing that token in its own utxo\n     * @param tokenName - the name of the token\n     * @param quantity - the quantity of the token\n     * @param mph - the minting policy hash of the token\n     * @public\n     **/\n    mkTokenValue(\n        tokenName: string | number[],\n        quantity: bigint,\n        mph: MintingPolicyHash\n    ): Value {\n        return makeValue(mph, tokenName, quantity);\n    }\n\n    /**\n     * Creates a Value having enough lovelace to store the indicated token\n     * @deprecated - Use {@link UtxoHelper.mkMinAssetValue | mkMinAssetValue(mph, tokenName, quantity)} instead.\n     * @remarks\n     * This is equivalent to mkTokenValue() with an extra min-utxo calculation\n     * @public\n     **/\n    mkMinTokenValue(\n        tokenName: string | number[],\n        quantity: bigint,\n        mph: MintingPolicyHash\n    ) {\n        return this.mkMinAssetValue(mph, tokenName, quantity);\n    }\n\n    /**\n     * finds utxos in the current actor's wallet that have enough ada to cover the given amount\n     * @remarks\n     * This method is useful for finding ADA utxos that can be used to pay for a transaction.\n     *\n     * Other methods in the utxo helper are better for finding individual utxos.\n     *\n     * If the `required` option is true, it throws an error if no sufficient utxos are found.\n     * @public\n     */\n    async findSufficientActorUtxos(\n        name: string,\n        amount: Value,\n        options: UtxoSearchScope = {},\n        strategy: CoinSelector | CoinSelector[] = [\n            selectLargestFirst({ allowSelectingUninvolvedAssets: false }),\n            selectLargestFirst({ allowSelectingUninvolvedAssets: true }),\n        ]\n    ): Promise<TxInput[]> {\n        const wallet = options.wallet ?? this.wallet;\n\n        const addrs = await wallet.usedAddresses;\n        const utxos: TxInput[] = [];\n        for (const addr of addrs.flat(1)) {\n            if (!addr) continue;\n            const addrUtxos = await this.network.getUtxos(addr);\n            utxos.push(...addrUtxos);\n        }\n\n        const filtered = options.exceptInTcx\n            ? utxos.filter(\n                  options.exceptInTcx.utxoNotReserved.bind(options.exceptInTcx)\n              )\n            : utxos;\n\n        const { searchOthers = false } = options;\n        if (!Array.isArray(strategy)) {\n            strategy = [strategy];\n        }\n        let someError : Error | undefined;\n        for (const s of strategy) {\n            try {\n                const [selected, others] = s(filtered, amount);\n                if (selected.length > 0) {\n                    return selected;\n                }\n            } catch (e) {\n                if (!searchOthers) someError = e as Error;\n                // otherwise, suppress the error, try the next strategy..\n                // ... and if needed, fall back to searching in other wallets\n            }\n        }\n        if (!searchOthers && someError) throw someError;\n        if (!searchOthers)  {\n            // should be unreachable:\n            throw new Error(`crazy talk! (expected to find utxos in actor's wallet, but didn't; and searchOthers is false)`);\n        }\n\n        if (searchOthers) {\n            console.log(\n                `   -- actor's primary wallet doesn't have needed value; searching in other actor-wallets...`\n            );\n            for (const [name, utxo] of Object.entries(\n                this.setup.actorContext.others\n            )) {\n                try {\n                    const utxos = await this.findSufficientActorUtxos(\n                        name,\n                        amount,\n                        {\n                            ...options,\n                            searchOthers: false,\n                            wallet: utxo,\n                        }\n                    );\n                    if (utxos.length > 0) {\n                        console.log(\n                            `      -- found sufficient utxos in other wallet: ${name}`\n                        );\n                        return utxos;\n                    }\n                } catch {\n                    console.log(\n                        `      -- searched in other wallet: ${name} without result`\n                    );\n                    // ignore\n                }\n            }\n        }\n        console.log(\"TODO: add a fallback to search in multiple utxos from multiple active wallets\");\n        throw new Error(\n            `no sufficient utxos found using any of ${\n                strategy.length\n            } strategies and ${\n                Object.keys(this.setup.actorContext.others).length\n            } additional wallets from actor-context (doesn't yet fund the total by contribution from multiple wallets)`\n        );\n    }\n\n    /**\n     * Locates a utxo in the current actor's wallet that matches the provided token predicate\n     * @remarks\n     * With the mode=\"multiple\" option, it returns an array of matches if any are found, or undefined if none are found.\n     * \n     * In \"single\" mode, it returns the single matching utxo, or undefined if none are found\n     * \n     * When the searchOthers option is true, it searches in other wallets from the actor-context\n     * if no utxos are matched  in the current actor's wallet.\n     * @public\n     */\n    async findActorUtxo<T extends \"single\" | \"multiple\" = \"single\">(\n        name: string,\n        predicate: (u: TxInput) => TxInput | undefined,\n        options: UtxoSearchScope = {},\n        mode: T = \"single\" as T\n    ) {\n        const wallet = options.wallet ?? this.wallet;\n        const { searchOthers = false } = options;\n\n        // doesn't go through the wallet's interface - uses the network client instead,\n        // so that txChainBuilder can take into account the UTxO's already being spent in the tx-chain.\n        const addrs = (await wallet?.usedAddresses) ?? [];\n        const utxos: TxInput[] = [];\n        for (const addr of addrs.flat(1)) {\n            if (!addr) continue;\n            const addrUtxos = await this.network.getUtxos(addr);\n            utxos.push(...addrUtxos);\n        }\n\n        return this.hasUtxo(\n            name,\n            predicate,\n            {\n                ...options,\n                searchOthers: false,\n                wallet,\n                utxos,\n            },\n            mode\n        ).then(async (result) => {\n            if (result) return result;\n            if (!searchOthers) return result;\n\n            console.log(\n                `   -- no matching utxos found searching in actor's wallet: ${name}; searching in other wallets from actor-context...`\n            );\n            for (const [name, otherWallet] of Object.entries(\n                this.setup.actorContext.others\n            )) {\n                try {\n                    const otherActorUtxos = await this.findActorUtxo(\n                        name,\n                        predicate,\n                        {\n                            ...options,\n                            searchOthers: false,\n                            wallet: otherWallet,\n                        }\n                    );\n                    if (otherActorUtxos) {\n                        console.log(\n                            `     -- ^ found matching utxos in other wallet: ${name}`\n                        );\n                        return otherActorUtxos;\n                    }\n                    console.log(\n                        `     -- no matching utxos found searching in other wallet: ${name}; `\n                    );\n                } catch {\n                    console.log(\n                        `     -- error searching in other wallet: ${name}; `\n                    );\n                }\n                // ... iterate to next other wallet\n            }\n            console.log(\n                `   -- Yikes! no matching utxos found searching in any wallets from actor-context`\n            );\n            return undefined;\n        });\n    }\n\n    /**\n     * Try finding a utxo matching a predicate\n     * @remarks\n     * Filters the provided list of utxos to find the first one that matches the predicate.\n     *\n     * Skips any utxos that are already being spent in the provided transaction context.\n     * Skips any utxos that are marked as collateral in the wallet.\n     *\n     * With the mode=\"multiple\" option, it returns an array of matches if any are found, or undefined if none are found.\n     * @public\n     **/\n    async hasUtxo<T extends \"single\" | \"multiple\" = \"single\">(\n        semanticName: string,\n        predicate: utxoPredicate,\n        {\n            // address,\n            wallet,\n            exceptInTcx,\n            utxos,\n            required,\n            dumpDetail,\n            searchOthers,\n        }: UtxoSearchScopeWithUtxos,\n        mode: T = \"single\" as T\n    ): Promise<\n        T extends \"single\" ? TxInput | undefined : TxInput[] | undefined\n    > {\n        if (searchOthers) {\n            throw new Error(\n                \"hasUtxo(): search option `searchOthers`: true is only valid in higher-level methods like findActorUtxo()\"\n            );\n        }\n\n        let notCollateral = await (async () => {\n            let nc = utxos;\n            try {\n                const collateral = ((wallet\n                    ? \"handle\" in wallet\n                        ? await (wallet as any).handle.collateral\n                        : \"collateral\" in wallet\n                        ? wallet.collateral\n                        : undefined\n                    : undefined) ?? [])[0];\n                nc = utxos.filter((u) => !collateral?.isEqual(u));\n            } catch {\n                // ignore\n            }\n            return nc;\n        })();\n\n        const filtered = exceptInTcx\n            ? utxos.filter(exceptInTcx.utxoNotReserved.bind(exceptInTcx))\n            : notCollateral;\n\n        const foundMultiple = filtered.filter(predicate);\n        const foundOne = foundMultiple[0];\n\n        const joiner = \"\\n   🔎  \";\n        const detail = // true ||\n            dumpDetail == \"always\" ||\n            globalThis.utxoDump ||\n            (!foundOne && dumpDetail == \"onFail\")\n                ? \"\\n  from set: \" + joiner + utxosAsString(filtered, joiner)\n                : `(${filtered.length} candidates; show with globalThis.utxoDump or \\`dumpDetail\\` option)`;\n        console.log(\n            `  🔎 finding '${semanticName}' utxo${\n                exceptInTcx ? \" (not already being spent in txn)\" : \"\"\n                // } from set:\\n    🔎 ${detail}`\n            } ${detail}`\n            // ...(exceptInTcx && filterUtxos?.length\n            //     ? [\n            //           \"\\n  ... after filtering out:\\n \",\n            //           utxosAsString(exceptInTcx.reservedUtxos(), \"\\n  \"),\n            //       ]\n            //     : [])\n        );\n\n        if (foundOne) {\n            const multiInfo =\n                mode == \"multiple\"\n                    ? ` ${foundMultiple.length} matches; first: `\n                    : \"\";\n            console.log(\n                \"   🎈found\" +\n                    multiInfo +\n                    utxosAsString(\n                        [foundOne],\n                        undefined,\n                        this.setup.uxtoDisplayCache\n                    )\n            );\n        } else {\n            if (exceptInTcx) {\n                const alreadyInTcx = exceptInTcx.inputs.find(predicate);\n                if (alreadyInTcx) {\n                    console.log(\n                        `\\n  um... value ${dumpAny(\n                            predicate.predicateValue\n                        )} not found. \\n` +\n                            `     ${dumpAny(alreadyInTcx)}\\n` +\n                            `  FYI, it seems this ^^ current txn input already has the target value. \\n` +\n                            \"    NOTE: You may want to adjust your dAPI to create an explicit fail-if-already-present semantic\\n\" +\n                            \"    ... or, alternatively, to allow this token to authenticate multiple transaction elements\\n\" +\n                            \"    ... by using explicitly idempotent 'addOrReuse' semantics, with details stored in tcx.state\\n\\n  ... go with care, and ask the community for help if you're unsure\\n  )\" +\n                            (required\n                                ? \"\\nBTW, here is that txn as of this time: \" +\n                                  (await alreadyInTcx.dump()) +\n                                  \"\\n\\n 👁️   👁️ 👁️ ^^^^^^^ More details about the utxo search failure above ^^^^^^^ 👁️ 👁️   👁️\"\n                                : \"\")\n                    );\n                    return undefined as any;\n                }\n            }\n        }\n        if (mode == \"multiple\") {\n            if (!foundMultiple.length) {\n                return undefined as any;\n            }\n            return foundMultiple as any;\n        }\n\n        return foundOne as any;\n    }\n\n    async mustFindActorUtxo(\n        name: string,\n        options: {\n            predicate: (u: TxInput) => TxInput | undefined;\n            exceptInTcx?: StellarTxnContext<any>;\n            extraErrorHint?: string;\n        }\n    ): Promise<TxInput> {\n        const wallet = this.wallet;\n\n        return this.mustFindUtxo(name, {\n            ...options,\n            wallet,\n        });\n    }\n\n    async mustFindUtxo(\n        semanticName: string,\n        options: UtxoSearchScope & {\n            predicate: utxoPredicate;\n        }\n    ): Promise<TxInput> {\n        // workaround for a failure in api-extractor to make this a separate assignment??\n        const {\n            predicate,\n            extraErrorHint = \"\",\n            wallet,\n            address,\n            exceptInTcx,            \n        } = options;\n        // const { address, exceptInTcx } = searchScope;\n\n        const addrs = (await wallet?.usedAddresses) ?? [address];\n        const utxos: TxInput[] = [];\n        for (const addr of addrs.flat(1)) {\n            if (!addr) continue;\n            const addrUtxos = await this.network.getUtxos(addr);\n            utxos.push(...addrUtxos);\n        }\n\n        const found = await this.hasUtxo(semanticName, predicate, {\n            address,\n            wallet,\n            exceptInTcx,\n            utxos,\n            extraErrorHint,\n            required: true,\n        });\n        if (!found) {\n            const walletAddr = wallet\n                ? //@ts-ignore - sorry typescript, address sometimes is present on a SimpleWallet in test environment\n                  wallet.address || (await wallet.usedAddresses)\n                : undefined;\n            if (!globalThis.utxoDump) {\n                console.log(\n                    // warning emoji: \"⚠️\"\n                    \" ⚠️ find failed in candidate utxos (debugging breakpoint available)\\n\",\n                    semanticName,\n                    dumpAny(utxos)\n                );\n            }\n            debugger;\n            // Debuggering?  YOU ARE AWESOME!\n            // need to see more? dig in here:\n            const addrString = address?.toString();\n            const utxos2 = address\n                ? await this.network.getUtxos(address)\n                : await wallet!.utxos;\n            console.log(\n                addrString,\n                wallet,\n                addrs.map((a) => a?.toString())\n            );\n            for (const u of utxos2) {\n                predicate(u);\n            }\n            throw new Error(\n                this.utxoSearchError(\n                    semanticName,\n                    options,\n                    extraErrorHint,\n                    walletAddr\n                )\n            );\n        }\n\n        return found;\n    }\n\n    utxoSearchError(\n        semanticName: string,\n        searchScope: UtxoSearchScope,\n        extraErrorHint?: string,\n        walletAddresses?: Address | Address[]\n    ): string {\n        const where = searchScope.address\n            ? `\\n -- searched in address ${searchScope.address.toString()}`\n            : ``;\n        const wAddrs: Address[] = Array.isArray(walletAddresses)\n            ? walletAddresses\n            : walletAddresses\n            ? [walletAddresses]\n            : [];\n        let more = wAddrs.length\n            ? wAddrs.map((x) => dumpAny(x) + ` = ${x.toString()}`).join(\"\\n\")\n            : \"\";\n        if (wAddrs.length > 1) {\n            more = \"\\n  ... wallet addrs:\\n\";\n        } else {\n            more = wAddrs.length ? `\\n  ... in wallet addr: ${more}` : \"\";\n        }\n        if (extraErrorHint) more += \"\\n\";\n\n        return `${\n            this.constructor.name\n        }: '${semanticName}' utxo not found ${more}  ... ${\n            extraErrorHint || \"sorry, no extra clues available\"\n        }${where}\\n  ... see more details in log`;\n    }\n\n    toUtxoId(u: TxInput) {\n        return `${u.id.txId.toHex()}@${u.id.index}`;\n    }\n}\n","import type { UplcData } from \"@helios-lang/uplc\";\nimport { StellarTxnContext, type hasSeedUtxo } from \"./StellarTxnContext.js\";\nimport type { IFISNEVER, TypeError } from \"./helios/typeUtils.js\";\nimport { makeTxOutputId, type TxId, type TxOutputId, type TxOutputIdLike } from \"@helios-lang/ledger\";\n\n/**\n * @public\n */\nexport type hasSeed = SeedAttrs | hasSeedUtxo | TxOutputIdLike;\n\n/**\n * a type for redeemer/activity-factory functions declared with \\@Activity.redeemer\n *\n * @public\n */\nexport type isActivity = {\n    // redeemer: UplcDataValue | UplcData | T;\n    redeemer: UplcData;\n    details?: string;\n};\n\n/**\n * @public\n */\nexport type SeedAttrs = {\n    txId: TxId;\n    idx: bigint;\n};\n\n/**\n * @public\n */\nexport type seedActivityFunc<\n    ARGS extends [...any] | never,\n    RV extends isActivity | UplcData | TypeError<any>\n> = IFISNEVER<ARGS,\n    (seed: hasSeed) => RV,\n    (seed: hasSeed, ...args: ARGS) => RV\n>\n\ntype seedFunc<\n    F extends ((seed: hasSeed, arg: any) => any ) | ( (seed: hasSeed) => any ),\n    ARG extends (\n        F extends (seed: hasSeed) => any ? never :\n        F extends (seed: hasSeed, arg: infer iArg) => any ? iArg : never\n    ) = \n        F extends (seed: hasSeed) => any ? never :\n        F extends (seed: hasSeed, arg: infer iArg) => any ? iArg : never,\n    RV extends ReturnType<F> = ReturnType<F>\n> = IFISNEVER<ARG, \n    seedActivityFunc<never, RV>,\n    seedActivityFunc<[ARG], RV>\n>\n\n\ntype NeedsSingleArgError =\n    TypeError<\"expected at most one arg for seeded activity func\">;\n\n/**\n * @internal\n */\nexport type SeedActivityArg<\n    SA extends seedFunc<any, any>\n    // ARG extends SA extends seedActivityFunc<[infer ARG, ... infer badArgs], any> ?\n    // [any] extends badArgs ?\n    //     TypeError<\"expected at most one arg for seeded activity func\"> :\n    // ARG : never =\n> = SA extends seedFunc<SA, infer ARG, infer RV> ? ARG : never;\n    // ? [...any] extends badArgs\n    //     ? NeedsSingleArgError\n    //     // : IFISNEVER<ARG, never, ARG>\n    //     : [any] extends [ARG] ? ARG : never\n    // : never;\n// > = ARG;\n\nfunction noArgsFunc(seed: hasSeed) : isActivity{\n    return { redeemer: \"no-args\" as any };\n}\ntype NOARGS_func = typeof noArgsFunc;\ntype noArgsArg = SeedActivityArg<typeof noArgsFunc>\nconst tt : IFISNEVER<SeedActivityArg<typeof noArgsFunc>, true, false> = true;\n\n/**\n * @public\n */\nexport class SeedActivity<\n    FactoryFunc extends seedActivityFunc<any, any>,\n> {\n    arg: SeedActivityArg<FactoryFunc>;\n    constructor(\n        private host: { getSeed(x: hasSeed): TxOutputId },\n        private factoryFunc : FactoryFunc,\n        arg: SeedActivityArg<FactoryFunc>\n    ) {\n        // console.log(\"+ seed activity\" + new Error(\"\").stack);\n        this.arg = arg;\n    }\n\n    mkRedeemer(seedFrom: hasSeed) {\n        // const seed = this.host.getSeed(thing);\n        return this.factoryFunc.call(this.host, seedFrom, this.arg);\n    }\n}\n/**\n * @internal\n */\n//prettier-ignore\nexport type funcWithImpliedSeed<\n    // FACTORY_FUNC extends (...args: [ hasSeed, ... ARGS ]) => any,\n    // ARGS extends [ ... any] =\n    //         FACTORY_FUNC extends (...args: [ hasSeed, ... infer iArgs ]) => any ?\n    //         [ any ] extends iArgs ? never : iArgs : never\n    // > = [ any ] extends ARGS ?\n    // (...args: ARGS) => unknown & SeedActivity<FACTORY_FUNC, ARGS>\n    FACTORY_FUNC extends seedActivityFunc<any, any>,\n    // ARG extends SeedActivityArg<FACTORY_FUNC> = \n    //     SeedActivityArg<FACTORY_FUNC> //extends SeedActivityArg<any, iArg> ? iArg : never,\n\n    // seedActivityFunc<[infer iArg, ... infer oArgs], any> ?\n    // [ any ] extends oArgs ? seedActivityFunc<\n    //     any, TypeError<\"expected at most one arg for seeded activity func\"\n    //     > :\n    // [ any ] extends iArg ? iArg : never : never\n> = IFISNEVER<\n    SeedActivityArg<FACTORY_FUNC>,\n    () => SeedActivity<FACTORY_FUNC>,\n    SeedActivityArg<FACTORY_FUNC> extends NeedsSingleArgError\n        ? never\n        : (fields: SeedActivityArg<FACTORY_FUNC>) => SeedActivity<FACTORY_FUNC>\n>;\n\nconst x: [any] extends [] ? true : false = false;\n\n/**\n * @internal\n */\n//prettier-ignore\nexport function impliedSeedActivityMaker<\n    FACTORY_FUNC extends seedActivityFunc<any, any>,\n    IMPLIED_SEED_FUNC extends funcWithImpliedSeed<FACTORY_FUNC> = \n        funcWithImpliedSeed<FACTORY_FUNC>,\n    ARG extends SeedActivityArg<FACTORY_FUNC> = \n        SeedActivityArg<FACTORY_FUNC>\n    // IMPLIED_SEED_FUNC extends funcWithImpliedSeed<infer iFunc, any> ? iFunc : never,\n    // ISV  extends\n    //     funcWithImpliedSeed<any, infer iArgs> ? iArgs : never\n>(\n    host: { getSeed(x: hasSeed): TxOutputId },\n    factoryFunc: FACTORY_FUNC,\n// ): WithImpliedSeedVariant<FACTORY_FUNC, ARGS> {\n): IMPLIED_SEED_FUNC {\n    const makesActivityWithImplicitSeedAndArgs = ( (arg: ARG) => {\n        const seedActivity = new SeedActivity<FACTORY_FUNC>(host, factoryFunc, arg);\n        return seedActivity;\n    }) as IMPLIED_SEED_FUNC\n    return makesActivityWithImplicitSeedAndArgs\n}\n\n/**\n * extracts a tx output id from a \"has-seed\" type of object, for use in\n * on-chain uniqueness assurances\n * @public\n */\nexport function getSeed(arg: hasSeed | TxOutputId ): TxOutputId {\n    //@ts-expect-error on this type probe\n    if (arg.kind == \"TxOutputId\") return arg;\n\n    if (arg instanceof StellarTxnContext) {\n        const { txId, idx } = arg.getSeedUtxoDetails();\n        return makeTxOutputId(txId, idx);\n    }\n    //@ts-expect-error on this type probe\n    if (arg.idx && arg.txId) {\n        const attr: SeedAttrs = arg as SeedAttrs;\n        return makeTxOutputId(attr.txId, attr.idx);\n    }\n    const txoIdLike = arg as Exclude<typeof arg, SeedAttrs>;\n    return makeTxOutputId(txoIdLike);\n}\n","import type { TypeSchema } from \"@helios-lang/type-utils\";\nimport { type Cast, makeCast } from \"@helios-lang/contract-utils\";\nimport { type TxOutputId } from \"@helios-lang/ledger\";\nimport type { UplcData } from \"@helios-lang/uplc\";\n\nimport type { readsUplcData } from \"../HeliosMetaTypes.js\";\nimport type { EnumBridge } from \"./EnumBridge.js\";\nimport type { readsUplcTo } from \"./BridgeTypes.js\";\nimport { getSeed, type hasSeed, type SeedAttrs } from \"../../ActivityTypes.js\";\n\n// const rawDataMakerProxy = new Proxy(\n//     {},\n//     {\n//         // cases to cover:\n//         // 1. type is an enum, accessor is a tagOnly field\n//         //     -> instantiate the right constrData through the cast(   { variantName:{} )\n//         // 2. type is an enum, accessor is a singletonField\n//         //   2a. nested field is an enum\n//         //      -> returns a proxy for the nested enum type,\n//         //           ... with seed semantics and NO {redeemer: } wrapper\n//         //   2b. nested field not an enum\n//         //     -> returns a function that takes the field value and calls cast ( { variantName: { fieldName: value } } )\n//         // 3. type is an enum, accessor has fields\n//         //    -> returns a function that takes the fields and calls cast ( { variantName: { ...fields } } )\n//         // 4. type is not an enum.\n//         //   -> the apply() trap is called with the arg(s) for filling that data type\n\n//         // if it is an activity, wrap it in a {redeemer: } object\n//         // ... to satisfy the isActivity type\n\n//         get(_, typeName : string | Symbol, THIS : DataBridge) {\n//             // throw new Error(`dataMaker ${DMP.constructor.name}: GET: ${typeName}`)\n//             const {__typeDetails: typeDetails, __schema: schema, __cast: cast} = THIS;\n//             // const {dataType} = typeDetails;\n//             if (\"string\" !== typeof typeName) {\n//                 // if the symbol is a node-inspector symbol, show the type-details\n//                 if (typeName == Symbol.for(\"nodejs.util.inspect.custom\")) {\n//                     debugger\n//                     return undefined // {DataBridgeProxy:{typeDetails}}\n//                 }\n//                 if (typeName == Symbol.for(\"toString\")) {\n//                     return () => `dataMaker ${THIS.constructor.name} for ${THIS.name}`;\n//                 }\n\n//                 // add any special handling for symbols above.\n//                 throw new Error(`dataMaker ${THIS.constructor.name}: GET(${typeName}) -> null`)\n//                 return null\n//             }\n\n//             switch (schema.kind) {\n//                 case \"enum\":\n//                     const enumSchema = schema\n//                     const variant = enumSchema.variantTypes.find(variant => variant.name === typeName);\n//                     // variants[typeName as keyof typeof enumSchema.variants];\n//                     if (variant) {\n//                         if (variant.fieldTypes.length == 0) {\n//                             return cast.toUplcData({[typeName]: {}});\n//                         }\n//                         if (variant.fieldTypes.length === 1) {\n//                             // todo\n//                         }\n//                         // if (variant.accessor === \"singletonField\") {\n//                         //     const nestedType = variant.nestedType;\n//                         //     if (nestedType.kind === \"enum\") {\n//                         //         return new Proxy({}, {\n//                         //             get(_, nestedTypeName: string | Symbol) {\n//                         //                 const nestedVariant = nestedType.variants[nestedTypeName as keyof typeof nestedType.variants];\n//                         //                 if (!nestedVariant) throw new Error(`dataMaker ${THIS.constructor.name}: GET: ${nestedTypeName} not found in ${nestedType.kind}`);\n//                         //                 return (...args: any[]) => cast.toUplcData({[typeName]: { [nestedTypeName]: args[0] }});\n//                         //             }\n//                         //         });\n//                         //     } else {\n//                         //         return (value: any) => cast.toUplcData({[typeName]: { [variant.name]: value }});\n//                         //     }\n//                         // }\n//                         // if (variant.accessor === \"fields\") {\n//                         //     return (...args: any[]) => cast.toUplcData({[typeName]: { ...args }});\n//                         // }\n//                     }\n//                     throw new Error(`dataMaker ${THIS.constructor.name}: GET: ${typeName} not found in ${schema.kind}`);\n//             }\n//             if (THIS.isStruct) {\n//             }\n\n//         },\n//         apply(_,\n//             THIS : DataBridge,\n//             args : any\n//         ) {\n//             debugger\n//             if (args?.length > 1) throw new Error(`dataMaker APPLY: got ${args.length} args, expected 1`)\n//             // throw new Error(`dataMaker ${DMP.constructor.name} APPLY`)\n\n//             // the only case for an apply trap is when the type is not an enum or struct, but is a single value\n//             if (THIS.isEnum) {\n//                 throw new Error(`dataMaker ${THIS.constructor.name} APPLY invalid on enum ${THIS.__typeName}`)\n//             }\n//             if (THIS.isStruct) {\n//                 throw new Error(`dataMaker ${THIS.constructor.name} APPLY invalid on struct ${THIS.__typeName}`)\n//             }\n//             return THIS.toUplc(args[0])\n//         }\n//     }\n// )\n\n/**\n * @internal\n */\nconst rawDataBridgeProxy = new Proxy(\n    {},\n    {\n        apply(_, THIS: DataBridge, [x]: any[]) {\n            // typescript protects against this code-path being allowed by types, but\n            // this serves javascript-based callers and other run-time scenarios where the type-checking\n            // may not be enforced (SWC and vitest, notably)\n            if (!THIS.isCallable)\n                throw new Error(\n                    `dataBridge ${THIS.constructor.name} is not callable`\n                );\n\n            //x@ts-expect-error drilling through the 'protected' attribute - TS can't know about\n            //x  the relationship between this object and the DataBridge class\n            return THIS.ᱺᱺcast.toUplcData(x);\n        },\n    }\n);\n\n/**\n * @internal\n */\nfunction dataBridgeProxyBase() {}\ndataBridgeProxyBase.prototype = rawDataBridgeProxy;\n\n/**\n * @internal\n */\nexport type DataBridgeOptions = {\n    isMainnet: boolean;\n    isActivity?: boolean;\n    isNested?: boolean;\n};\n\n/**\n * @internal\n */\nexport type callWith<ARGS, T extends DataBridge> = T &\n    ((x: ARGS) => ReturnType<T[\"ᱺᱺcast\"][\"toUplcData\"]>);\n\n/**\n * @internal\n */\nexport class DataBridge extends (dataBridgeProxyBase as typeof Object) {\n    /**\n     * @internal\n     */\n    ᱺᱺschema: TypeSchema;\n    /**\n     * @internal\n     */\n    isMainnet: boolean;\n    /**\n     * @internal\n     */\n    isActivity: boolean;\n    /**\n     * @internal\n     */\n    isNested: boolean;\n    /**\n     * @internal\n     */\n    ᱺᱺcast: Cast<any, any>;\n    /**\n     * @internal\n     */\n    isCallable = false;\n\n    mkData: this[\"ᱺᱺcast\"][\"toUplcData\"] = (x: any) =>\n        this.ᱺᱺcast.toUplcData(x);\n    readData: this[\"ᱺᱺcast\"][\"fromUplcData\"] = (x: any) =>\n        this.ᱺᱺcast.fromUplcData(x);\n\n    constructor(options: DataBridgeOptions) {\n        super();\n        // these start undefined, but are always forced into existence immediately\n        // via getTypeSchema().  Any exceptions means this protocol wasn't followed\n        // correctly.\n        // uses U+1c7a - sorts to the end\n        this.ᱺᱺschema = undefined as any;\n        this.ᱺᱺcast = undefined as any;\n\n        const { isMainnet, isActivity, isNested } = options;\n        this.isMainnet = isMainnet;\n        this.isActivity = isActivity || false;\n        this.isNested = isNested || false;\n    }\n\n    //\n    // declare activity: DataBridge | ((...args:any) => UplcData)\n\n    // declare  datum: DataBridge | ((...args:any) => UplcData)\n    // // get datum() {\n    // //     throw new Error(`each dataBridge makes its own datum`)\n    // // }\n\n    getSeed(arg: hasSeed | TxOutputId): TxOutputId {\n        return getSeed(arg);\n    }\n\n    /**\n     * @internal\n     */\n    redirectTo?: (value: any) => void;\n    /**\n     * @internal\n     */\n    mkDataVia(redirectionCallback: (value: any) => void) {\n        if (!this.isNested) {\n            throw new Error(\n                `dataMaker ${this.constructor.name}: redirectTo is only valid for nested enums`\n            );\n        }\n        this.redirectTo = redirectionCallback;\n    }\n\n    /**\n     * @internal\n     */\n    get isEnum() {\n        return \"enum\" === this.ᱺᱺschema!.kind;\n    }\n    /**\n     * @internal\n     */\n    getTypeSchema() {\n        if (!this.ᱺᱺschema) {\n            this.ᱺᱺschema = \"placeholder\" as any; // this.__typeDetails.dataType.toSchema()\n            this.ᱺᱺcast = makeCast(this.ᱺᱺschema, {\n                isMainnet: this.isMainnet,\n                unwrapSingleFieldEnumVariants: true,\n            });\n        }\n        return this.ᱺᱺschema;\n    }\n    // usesRedeemerWrapper : boolean = false\n\n    // toUplc(x: any) {\n    //     return this.ᱺᱺcast.toUplcData(x)\n    // }\n\n    // get __typeName() : string {\n    //     return \"someTypeName\" // this.__typeDetails.dataType.name\n\n    //     // //@ts-expect-error not all schemas have names\n    //     // const {name=\"\"} = this.ᱺᱺschema!\n    //     // if (!name) {\n    //     //     throw new Error(`can't get typeName for unnamed type: ${this.__schema!.kind}`)\n    //     // }\n    //     // return name\n    // }\n}\n\n/**\n * @public\n */\nexport class ContractDataBridge {\n    static isAbstract: true | false = true as const;\n    isAbstract: true | false = true as const;\n    isMainnet: boolean;\n    declare types: Record<string, DataBridge | ((x: any) => UplcData)>;\n    declare reader: DataBridgeReaderClass | undefined;\n    declare datum: DataBridge | undefined;\n    declare activity: DataBridge;\n    declare readDatum: readsUplcData<any> | undefined;\n\n    constructor(isMainnet: boolean) {\n        if (true !== isMainnet && false !== isMainnet)\n            throw new Error(`isMainnet signal must be provided (boolean)`);\n        this.isMainnet = isMainnet;\n    }\n    readData(x: any) {\n        if (!this.datum) throw new Error(`no datum on this dataBridge`);\n\n        return this.datum.readData(x);\n    }\n}\n\n/**\n * @public\n */\nexport class ContractDataBridgeWithEnumDatum extends ContractDataBridge {\n    static isAbstract: true | false = true as const;\n    isAbstract: true | false = true as const;\n    declare datum: EnumBridge;\n    declare readDatum: readsUplcData<unknown>;\n\n    // constructor(isMainnet : boolean) {\n    //     super(isMainnet);\n    // }\n}\n\n/**\n * @public\n */\nexport class ContractDataBridgeWithOtherDatum extends ContractDataBridge {\n    static isAbstract: true | false = true as const;\n    isAbstract: true | false = true as const;\n    // declare datum: (any) => UplcData;\n    // constructor() {\n    //     super();\n    // }\n    declare readDatum: readsUplcData<unknown>;\n}\n// type DataBridgeReader = DataBridgeReaderClass & {\n//     [key: string]: (x : UplcData) => any\n// }\n\n/**\n * @public\n */\nexport class DataBridgeReaderClass {\n    declare datum: readsUplcTo<unknown> | undefined;\n}\n","import {\n    makeAddress,\n    makeTxOutput,\n    makeValidatorHash,\n    type Address,\n    type MintingPolicyHash,\n    type NetworkParams,\n    type TxInput,\n    type ValidatorHash,\n    type Value,\n    makeMintingPolicyHash,\n    makeInlineTxOutputDatum,\n    type TxOutputId,\n} from \"@helios-lang/ledger\";\n\nimport type {\n    CardanoClient,\n    Emulator,\n    TxChainBuilder,\n    Wallet,\n} from \"@helios-lang/tx-utils\";\nimport type { UplcProgramV3, UplcData } from \"@helios-lang/uplc\";\nimport type { DataType, Program, EnumMemberType } from \"@helios-lang/compiler\";\n\nimport {\n    StellarTxnContext,\n    type TxDescription,\n    type hasSeedUtxo,\n} from \"./StellarTxnContext.js\";\nimport { betterJsonSerializer } from \"./diagnostics.js\";\nimport type {\n    anyUplcProgram,\n    InlineDatum,\n    valuesEntry,\n} from \"./HeliosPromotedTypes.js\";\nimport type { Capo } from \"./Capo.js\";\nimport { UtxoHelper, type utxoPredicate } from \"./UtxoHelper.js\";\n// import { CachedHeliosProgram } from \"./helios/CachedHeliosProgram.js\";\n// import { uplcDataSerializer } from \"./delegation/jsonSerializers.js\";\nimport { HeliosScriptBundle, placeholderSetupDetails } from \"./helios/scriptBundling/HeliosScriptBundle.js\";\nimport { type HeliosBundleClass } from \"./helios/HeliosMetaTypes.js\";\nimport {\n    DataBridge,\n    ContractDataBridge,\n    DataBridgeReaderClass,\n    ContractDataBridgeWithOtherDatum,\n    ContractDataBridgeWithEnumDatum,\n} from \"./helios/dataBridge/DataBridge.js\";\nimport type { possiblyAbstractContractBridgeType } from \"./helios/dataBridge/BridgeTypes.js\";\nimport type { findReadDatumType } from \"./helios/dataBridge/BridgeTypes.js\";\nimport type { mustFindConcreteContractBridgeType } from \"./helios/dataBridge/BridgeTypes.js\";\nimport type { AbstractNew } from \"./helios/typeUtils.js\";\nimport { getSeed, type hasSeed, type SeedAttrs } from \"./ActivityTypes.js\";\nimport { makeCast } from \"@helios-lang/contract-utils\";\nimport type {\n    PrecompiledProgramJSON,\n    SerializedHeliosCacheEntry,\n} from \"./helios/CachedHeliosProgram.js\";\nimport type { DeployedScriptDetails } from \"./configuration/DeployedScriptConfigs.js\";\nimport type { TxBatcher } from \"./networkClients/TxBatcher.js\";\nimport { bytesToHex } from \"@helios-lang/codec-utils\";\n\ntype NetworkName = \"testnet\" | \"mainnet\";\nlet configuredNetwork: NetworkName | undefined = undefined;\n\n/**\n * @public\n */\nexport function isUplcData(x: any): x is UplcData {\n    return \"kind\" in x && \"toCbor\" in x;\n}\n\n/**\n * @public\n */\ntype WalletsAndAddresses = {\n    wallets: Wallet[];\n    addresses?: Address[];\n};\n/**\n * Type for the Class that constructs to a given type\n * @remarks\n *\n * Type of the matching literal class\n *\n * note: Typescript should make this pattern easier\n *\n * @typeParam S - the type of objects of this class\n * @typeParam CT - inferred type of the constructor args for the class\n * @public\n **/\nexport type stellarSubclass<S extends StellarContract<any>> = (new (\n    setup: SetupInfo\n) => S) & {\n    // & StellarContract<CT>\n    defaultParams: Partial<ConfigFor<S>>;\n    createWith(args: StellarSetupDetails<ConfigFor<S>>): Promise<S>;\n    parseConfig(rawJsonConfig: any): any;\n};\n\n/**\n * Properties for Datum structures for on-chain scripts\n * @public\n **/\nexport type anyDatumProps = Record<string, any>;\n/**\n * Configuration details for StellarContract classes\n * @public\n **/\nexport interface configBaseWithRev {\n    rev: bigint;\n}\n\n/**\n * @public\n */\nexport type UplcRecord<CT extends configBaseWithRev> = {\n    [key in keyof CT]: UplcData;\n};\n\n/**\n * Decorators for on-chain activity (redeemer) factory functions\n * @public\n **/\nexport const Activity = {\n    /**\n     * Decorates a partial-transaction function that spends a contract-locked UTxO using a specific activity (\"redeemer\")\n     * @remarks\n     *\n     * activity-linked transaction-partial functions must follow the txn\\{...\\}\n     * and active-verb (\"ing\") naming conventions.  `txnRetiringDelegation`,\n     * `txnModifyingVote` and `txnWithdrawingStake` would be examples\n     * of function names following this guidance.\n     *\n     * @public\n     **/\n    partialTxn(proto, thingName, descriptor) {\n        needsActiveVerb(thingName);\n        return partialTxn(proto, thingName, descriptor);\n    },\n\n    /**\n     * Decorates a factory-function for creating tagged redeemer data for a specific on-chain activity\n     * @remarks\n     *\n     * The factory function should follow an active-verb convention by including \"ing\" in\n     * the name of the factory function\n     *\n     * Its leading prefix should also match one of 'activity', 'burn', or 'mint'.  These\n     * conventions don't affect the way the activity is verified on-chain, but they\n     * provide guard-rails for naming consistency.\n     * @public\n     **/\n    redeemer(\n        proto,\n        thingName,\n        descriptor\n        // todo: improve this type, so the decorated function is type-checked for returning an isActivity object\n        // : {value: (...args: any[])  => isActivity<any>}\n    ) {\n        const isActivity = thingName.match(/^activity[A-Z]/);\n        const isBurn = thingName.match(/^burn[A-Z]/);\n        const isMint = thingName.match(/^mint[A-Z]/);\n\n        if (!isActivity && !isBurn) {\n            throw new Error(\n                `@Activity.redeemer: ${thingName}: name should start with '(activity|burn|mint)[A-Z]...'`\n            );\n        }\n        needsActiveVerb(thingName, /* show workaround offer */ true);\n        return Activity.redeemerData(proto, thingName, descriptor);\n    },\n    redeemerData(proto, thingName, descriptor) {\n        //!!! todo: registry and cross-checking for missing redeeming methods\n\n        //!!! todo: develop more patterns of \"redeemer uses an input of a certain mph/value\"\n        return descriptor;\n    },\n};\n\nfunction needsActiveVerb(thingName: string, okWorkaround?: boolean) {\n    if (!thingName.match(/ing/)) {\n        const orWorkaround =\n            okWorkaround &&\n            \"(or work around with @Activity.redeemerData instead)\";\n        throw new Error(\n            `Activity: ${thingName}: name should have 'ing' in it ${orWorkaround}`\n        );\n    }\n    if (thingName.match(/^ing/)) {\n        throw new Error(\n            `Activity: ${thingName}: name shouldn't start with 'ing'`\n        );\n    }\n}\n\n/**\n * Decorates datum-building functions\n * @remarks\n *\n * function names must follow the mkDatum... convention.\n *\n * The function should accept a single argument with input type\n * that feels Typescripty, and that can be fit to the on-chain type of\n * the underlying Datum variant of the given name.\n *\n * @public\n **/\nexport function datum(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkDatum/)) {\n        throw new Error(\n            `@datum factory: ${thingName}: name should start with 'mkDatum...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * Decorates functions that can construct a new transaction context for a specific use-case\n * @remarks\n *\n * function names must follow the mkTxn... convention.\n * @public\n **/\nexport function txn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^mkTxn/)) {\n        throw new Error(\n            `@txn factory: ${thingName}: name should start with 'mkTxn...'`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * decorates functions that increment a transaction by adding needed details for a use-case\n * @remarks\n *\n * Function names must follow the txn\\{...\\} naming convention. Typical partial-transaction names\n * may describe the semantics of how the function augments the transaction.\n * `txnAddSignatures` or `txnReceivePayment` could be example names following\n * this guidance\n *\n * Partial transactions should have a \\<TCX extends StellarTxnContext\\<...\\>\\> type parameter,\n * matched to its first function argument, and should return a type extending that same TCX,\n * possibly with additional StellarTxnContext\\<...\\> type info.\n *\n * The TCX constraint can specify key requirements for an existing transaction context when\n * that's relevant.\n *\n * @public\n **/\nexport function partialTxn(proto, thingName, descriptor) {\n    // console.log(\"+datum\", proto.constructor.name, thingName || \"none\", descriptor.value.name )\n    if (!thingName.match(/^txn[A-Z]/)) {\n        let help = \"\";\n        if (thingName.match(/^mkTxn/)) {\n            help = `\\n  ... or, for transaction initiation with mkTxn, you might try @txn instead. `;\n        }\n        throw new Error(\n            `@partialTxn factory: ${thingName}: should start with 'txn[A-Z]...'${help}`\n        );\n    }\n    return descriptor;\n}\n\n/**\n * @public\n */\nexport type HeliosOptimizeOptions = Exclude<\n    Pick<\n        Exclude<Parameters<Program[\"compile\"]>[0], undefined | boolean>,\n        \"optimize\"\n    >[\"optimize\"],\n    undefined | boolean\n>;\n\n/**\n * @public\n */\nexport type UtxoDisplayCache = Map<TxOutputId, string>;\n/**\n * standard setup for any Stellar Contract class\n * @public\n **/\nexport type SetupInfo = {\n    /** access to ledger: utxos, txn-posting; can sometimes be a TxChainBuilder overlay on the real network */\n    network: CardanoClient | Emulator;\n    /** the actual network client; never a TxChainBuilder */\n    chainBuilder?: TxChainBuilder;\n    /** the params for this network */\n    networkParams: NetworkParams;\n    /** collects a batch of transactions, connected with a TxChainBuilder in context */\n    txBatcher: TxBatcher;\n    /** false for any testnet.  todo: how to express L2? */\n    isMainnet: boolean;\n    /** wallet-wrapping envelope, allows wallet-changing without reinitializing anything using that envelope */\n    actorContext: ActorContext;\n    /** testing environment? */\n    isTest?: boolean;\n    /** helper for finding utxos and related utility functions */\n    uh?: UtxoHelper;\n    /** global setting for script-compile optimization, only used when a compilation is triggered, can be overridden per script-bundle  */\n    optimize?: boolean | HeliosOptimizeOptions;\n    /** presentation-cache indicates utxos whose details have already been emitted to the console */\n    uxtoDisplayCache?: UtxoDisplayCache;\n};\n\n/**\n * @public\n * Extracts the config type for a Stellar Contract class\n **/\nexport type ConfigFor<SC extends StellarContract<any>> = configBaseWithRev &\n    SC extends StellarContract<infer inferredConfig>\n    ? inferredConfig\n    : never;\n\n/**\n * Initializes a stellar contract class\n * @remarks\n *\n * Includes network and other standard setup details, and any configuration needed\n * for the specific class.\n * @public\n **/\nexport type StellarSetupDetails<CT extends configBaseWithRev> = {\n    setup: SetupInfo;\n    config?: CT;\n    partialConfig?: Partial<CT>;\n    previousOnchainScript?: {\n        validatorHash: number[];\n        uplcProgram: anyUplcProgram;\n    };\n};\n\nexport type SetupOrMainnetSignalForBundle = Partial<\n    Omit<SetupInfo, \"isMainnet\">\n> &\n    Required<Pick<SetupInfo, \"isMainnet\">>\n\nexport type PartialStellarBundleDetails<CT extends configBaseWithRev>\n = Omit<StellarBundleSetupDetails<CT>, \"setup\">\n\nexport type StellarBundleSetupDetails<CT extends configBaseWithRev> = {\n    setup: SetupOrMainnetSignalForBundle;\n    scriptParamsSource?: \"config\" | \"bundle\" | \"none\";\n    originatorLabel?: string;\n    previousOnchainScript?: {\n        validatorHash: number[];\n        uplcProgram: anyUplcProgram;\n    };\n    params?: CT;\n    /**\n     * used only for Capo bundles, to initialize them based on\n     * their `.hlDeploy.<network>.json` config file\n     */\n    deployedDetails?: DeployedScriptDetails<CT>;\n    // partialConfig?: Partial<UplcRecord<CT>>;\n    variant?: string;\n};\n\ntype scriptPurpose =\n    | \"testing\"\n    | \"minting\"\n    | \"spending\"\n    | \"staking\"\n    | \"module\"\n    | \"endpoint\"\n    | \"non-script\";\n\ntype ComputedScriptProperties = Partial<{\n    vh: ValidatorHash;\n    addr: Address;\n    mph: MintingPolicyHash;\n    program: Program;\n    identity: string;\n}>;\n\n/**\n * @public\n */\nexport type ActorContext<WTP extends Wallet = Wallet> = {\n    wallet?: WTP;\n    others: Record<string, WTP>;\n};\n\n/**\n * @public\n */\nexport type NetworkContext<NWT extends CardanoClient = CardanoClient> = {\n    network: NWT;\n};\n\n/**\n * Basic wrapper and off-chain facade for interacting with a single Plutus contract script\n * @remarks\n *\n * This class is normally used only for individual components of a higher-level {@link Capo | Capo or Leader contract},\n * which act as delegates within its application context.  Nonetheless, it is the base class for every Capo as well as\n * simpler contract scripts.\n *\n * The StellarContract class serves as an off-chain facade for transaction-building and interfacing to any on-chain\n * contract script.  Each StellarContract subclass must define a `contractSource()`, which is currently a Helios-language\n * script, compiled in any Javascript environment to an on-chain executable UPLC or \"plutus core\" form.  This enables\n * a static dApp to be self-sovereign, without need for any server (\"application back-end\") environment.\n *\n * @typeParam ConfigType - schema for the configuration needed for creating or reproducing a\n * specific instance of the contract script on-chain.\n *\n * @public\n **/\nexport class StellarContract<\n    // SUB extends StellarContract<any, ParamsType>,\n    ConfigType extends configBaseWithRev\n> {\n    //! it has scriptProgram: a parameterized instance of the contract\n    //  ... with specific `parameters` assigned.\n    // bundle?: HeliosScriptBundle;\n    configIn?: ConfigType;\n    partialConfig?: Partial<ConfigType>;\n    // contractParams?: UplcRecord<ConfigType>;\n    setup: SetupInfo;\n    get network(): CardanoClient | Emulator | TxChainBuilder {\n        return this.setup.chainBuilder || this.setup.network;\n    }\n\n    networkParams: NetworkParams;\n    actorContext: ActorContext<any>;\n    // isTest?: boolean\n    static get defaultParams() {\n        return {};\n    }\n    static parseConfig(rawJsonConfig: any) {\n        throw new Error(\n            `Stellar contract subclasses should define their own static parseConfig where needed to enable connection from a specific dApp to a specific Stellar Contract.`\n        );\n    }\n\n    /** each StellarContracts subclass needs to provide a scriptBundle class.\n     * @remarks\n     * Your script bundle MUST be defined in a separate file using a convention of\n     * `‹scriptName›.hlb.ts`, and exported as a default class.  It should inherit\n     * from HeliosScriptBundle or one of its subclasses.  Stellar Contracts processes\n     * this file, analyzes the on-chain types defined in your Helios sources, and generates\n     * Typescript types and a data-bridging class for your script.\n     *\n     * Once the data-bridge class is generated, you should import it into your contract\n     * module and assign it to your `dataBridgeClass` attribute.\n     */\n    async scriptBundleClass(): Promise<typeof HeliosScriptBundle> {\n        debugger; // eslint-disable-line no-debugger - keep for downstream troubleshooting\n        throw new Error(\n            `${this.constructor.name}: missing required implementation of scriptBundleClass()\\n` +\n                `...each Stellar Contract must provide a scriptBundleClass() method. \\n` +\n                `It should return a class (not an instance) defined in a *.hlb.ts file.  At minimum:\\n\\n` +\n                `    export default class MyScriptBundle extends HeliosScriptBundle { ... }\\n` +\n                ` or export default CapoDelegateBundle.usingCapoBundleClass(SomeCapoBundleClass) { ... }\\n\\n` +\n                `We'll generate TS types and other utilities for connecting to the data-types in your Helios sources.\\n` +\n                `Your scriptBundle() method can return \\`MyScriptBundle.create();\\`\\n\\n`+\n                `The function is async, so you can await a dynamic import() and reduce the initial bundle-load time.`\n        );\n    }\n\n    /**\n     * the dataBridgeClass attribute MUST be defined for any bundle having a datum type\n     *  - this is the bridge class for converting from off-chain data types to on-chain data\n     *  - it provides convenient, type-safe interfaces for doing that\n     *\n     * @remarks\n     * Minters don't have datum, so they don't need to define this attribute.  However,\n     * note that ***mint delegates*** do in fact have datum types. If you are defining\n     * a custom delegate of that kind, you will need to define this attribute.\n     */\n    dataBridgeClass: AbstractNew<ContractDataBridge> | undefined = undefined;\n\n    /**\n     * The `onchain` object provides access to all bridging capabilities for this contract script.\n     * @remarks\n     * Its nested attributes include:\n     *  - `types` - a collection of all the on-chain types defined in the script, with data-creation helpers for each\n     *  - `activity` - a creation helper for the activities/redeemers defined in the script\n     *\n     * Scripts that use datum types (not including minters) will also have:\n     *  - `datum` - a data-creation helper for the datum type of the script\n     *  - `readDatum` - a data-reading helper for the datum type of the script\n     *\n     * ### Low-level type access\n     * For low-level access (it's likely you don't need to use this) for on-chain types, the `reader` attribute (aka `offchain`) exists: .\n     *  - `reader` - a collection of data-reading helpers for the on-chain types, given UPLC data known to be of that type\n     * @public\n     */\n    get onchain(): possiblyAbstractContractBridgeType<this> {\n        return this.getOnchainBridge();\n    }\n\n    /**\n     * The `offchain` object provides access to readers for the on-chain types of this contract script.\n     * @remarks\n     * Its nested attributes include all the on-chain types defined in the script, with data-reading helpers for each.\n     * This is useful for reading on-chain data in off-chain code.\n     *\n     * ### Warning: low-level typed-data access!\n     *\n     * Note that these readers will work properly with UPLC data known to be of the correct type.  If you\n     * encounter errors related to these results, it's likely you are using the wrong reader for the data you\n     * have in hand.\n     *\n     * For the typical use-case of reading the datum type from a UTxO held in the contract, this is not a problem,\n     * and note that the `readDatum` helper provides a shortcut for this most-common use-case.\n     *\n     * If you're not sure what you're doing, it's likely that this is not the right tool for your job.\n     * @public\n     */\n    get offchain(): possiblyAbstractContractBridgeType<this>[\"reader\"] {\n        // ensures the dataBridge is initialized by accessing the 'onchain' getter\n        // accesses its data-reader.\n        return this.getOnchainBridge().reader;\n    }\n\n    get reader(): possiblyAbstractContractBridgeType<this>[\"reader\"] {\n        // ensures the dataBridge is initialized by accessing the 'onchain' getter\n        // accesses its data-reader.\n        return this.getOnchainBridge().reader;\n    }\n\n    get activity(): any {\n        const bridge = this.onchain;\n        return bridge.activity as any;\n    }\n\n    /**\n     * Converts UPLC from an on-chain datum object to a typed off-chain datum object.\n     *\n     * Given a **utxo with a datum of the contract's datum type**, this method will convert the UPLC datum\n     * to a typed off-chain datum object.\n     *\n     * ### Standard WARNING\n     *\n     * If the datum's structure is not of the expected type, this method MAY throw an error, or it might\n     * return data that can cause problems somewhere else in your code.  That won't happen if you're\n     * following the guidance above.\n     */\n    get newReadDatum(): findReadDatumType<this> {\n        const bridge = this.getOnchainBridge();\n        //x@ts-expect-error probing for presence\n        const { readDatum } = bridge;\n        if (!readDatum) {\n            throw new Error(\n                `${\n                    (this as any).constructor.name\n                }: this contract script doesn't use datum`\n            );\n        }\n\n        return readDatum;\n    }\n\n    _bundle: HeliosScriptBundle | undefined;\n    async getBundle(): Promise<HeliosScriptBundle> {\n        if (!this._bundle) {\n            const bundle = await this.mkScriptBundle({});\n            if (\n                // this._bundle.precompiledScriptDetails &&\n                // !this._bundle.precompiledScriptDetails.singleton\n                !bundle.configuredScriptDetails\n            ) {\n                console.log(\"first-time configuration of bundle ${bundle.constructor.name}\")\n            }\n            if (!bundle._didInit) {\n                console.warn(\n                    `NOTE: the scriptBundle() method in ${this.constructor.name} isn't\\n` +\n                        `initialized properly; it should use \\`${bundle.constructor.name}.create({...})\\`\\n` +\n                        `... instead of \\`new ${bundle.constructor.name}({...})\\` `\n                );\n            }\n            this._bundle = bundle;\n            // this._bundle.checkDevReload()\n        }\n\n        return this._bundle!\n    }\n\n    /**\n     * Provides access to the script's activities with type-safe structures needed by the validator script.\n     *\n     * @remarks - the **redeemer** data (needed by the contract script) is defined as one or\n     * more activity-types (e.g. in a struct, or an enum as indicated in the type of the last argument to\n     * the validator function).\n     *   - See below for more about ***setup & type-generation*** if your editor doesn't  provide auto-complete for\n     *    the activities.\n     *\n     * ### A terminology note: Activities and Redeemers\n     *\n     * Although the conventional terminology of \"redeemer\" is universally well-known\n     * in the Cardano developer community, we find that defining one or more **activities**,\n     * with their associated ***redeemer data***, provides an effective semantic model offering\n     * better clarity and intution.\n     *\n     * Each type of contract activity corresponds to an enum variant in the contract script.\n     * For each of those variants, its redeemer data contextualizes the behavior of the requested\n     * transaction.  A non-enum redeemer-type implies that there is only one type of activity.\n     *\n     * Any data not present in the transaction inputs or outputs, but needed for\n     * specificity of the requested activity, can only be provided through these activity details.\n     * If that material is like a \"claim ticket\", it would match the \"redeemer\" type of labeling.\n     *\n     * Activity data can include any kinds of details needed by the validator: settings for what it\n     * is doing, options for how it is being done, or what remaining information the validator may\n     * need, to verify the task is being completed according to protocol.  Transactions containing\n     * a variety of inputs and output, each potential candidates for an activity, can use the activity\n     * details to resolve ambiguity so the validator easily acts on the correct items.\n     *\n     * ### Setup and Type generation\n     * #### Step 1: create your script **`.hlb.ts`**\n     * With a defined script bundle, `import YourScriptNameBundle from \"./YourBundleName.hlb.js\"`\n     * to your StellarContracts class module, and define a `scriptBundle() { return new YourScriptNameBundle() }` or\n     * similar method in that class.\n     *\n     * This results in a generated **`.typeInfo.d.ts`** and **`.bridge.ts`** with complete\n     * typescript bindings for your on-chain script (trouble? check Plugin setup below).\n     *\n     * #### Step 2: Import the generated bridge class\n     * Using the generated .bridge file:\n     * > `import YourScriptNameDataBridge from \"./YourBundleName.bridge.js\"`\n     *\n     * ... and set the `dataBridgeClass` property in your class:\n     *\n     * >    `dataBridgeClass = YourScriptNameDataBridge`\n     *\n     * ### Plugin Setup\n     *\n     * The activity types should be available through type-safe auto-complete in your editor.  If not,\n     * you may need to install and configure the Stellar Contracts rollup plugins for importing .hl\n     * files and generating .d.ts for your .hlb.ts files.  See the Stellar Contracts development\n     * guide for additional details.\n     *\n     */\n    // get activity(): findActivityType<this> {\n    //     const bridge = this.onchain;\n    //     // each specific bridge has to have an activity type, but this code can't\n    //     // introspect that type.  It could be a getter OR a method, and Typescript can only\n    //     // be told it is one, or the other, concretely.\n    //     // findActivityType() does probe for the specific type for specific contracts,\n    //     // at the **interface** level, but this code has no visibility of that.\n\n    //     //x@ts-expect-error accessing it in this way\n    //     const { activity } = bridge\n\n    //     return activity as any\n    // }\n\n    // /**\n    //  * Redirect for intuitive developers having a 'redeemer' habit\n    //  *\n    //  * @deprecated - We recommend using `activity` instead of `redeemer`\n    //  */\n    // get redeemer(): findActivityType<this> {\n    //     return this.activity;\n    // }\n\n    /**\n     * Provides access to the script's defined on-chain types, using a fluent\n     * API for type-safe generation of data conforming to on-chain data formats & types.\n     * @remarks\n     *\n     */\n    _dataBridge?: ContractDataBridge;\n    // get mkDatum() : findDatumType<this> {\n    //     //x@ts-expect-error probing for presence\n    //     if (!this.onchain?.datum) throw new Error(`${this.constructor.name}: no datum is used on this type of script`);\n\n    //     //@ts-expect-error probing for presence\n    //     return this.onchain.datum;\n    // }\n\n    getOnchainBridge(): possiblyAbstractContractBridgeType<this> {\n        if (\"undefined\" == typeof this._dataBridge) {\n            const { dataBridgeClass } = this;\n            if (!dataBridgeClass) {\n                if ((this as any).usesContractScript) {\n                    throw new Error(\n                        `${\n                            this._bundle?.moduleName || this.constructor.name\n                        }: each contract script needs a dataBridgeClass = dataBridge‹YourScriptName›\\n` +\n                            `  ... this dataBridge class is generated by heliosRollupBundler \\n` +\n                            `  ... and imported (\\`import dataBridge‹something› from \"./‹yourScriptName›.bridge.js\"\\`)\\n` +\n                            `      This critical class converts between off-chain and on-chain typed data\\n\\n` +\n                            `Note: if you haven't customized the mint AND spend delegates for your Capo, \\n` +\n                            `  ... you might want to define both of those roles using a single \\n` +\n                            `  ... subclass of the BasicMintDelegate. That fixes the most common \\n` +\n                            `  ... first-time setup problems of this kind.`\n                    );\n                } else {\n                    console.log(\n                        `${this.constructor.name} dataBridgeClass = NONE`\n                    );\n                    this._dataBridge = undefined;\n                    //@ts-expect-error setting to degenerate type\n                    return null;\n                }\n            }\n\n            const isMainnet = this.setup.isMainnet;\n            let newBridge: any;\n            try {\n                newBridge = new (dataBridgeClass as any)(\n                    isMainnet ?? false\n                ) as any;\n            } catch (e) {\n                console.error(e);\n                debugger;\n            }\n            if (this._bundle?._program) {\n                const datumType = this._bundle.locateDatumType();\n                if (datumType) {\n                    // verifies that the dataBridge ALSO has a datum-type\n                    console.log(\n                        `${this.constructor.name} dataBridgeClass = `,\n                        dataBridgeClass.name\n                    );\n                    if (!newBridge.datum) {\n                        console.warn(\n                            `${this.constructor.name}: dataBridgeClass must define a datum accessor.  This is likely a code-generation problem.`\n                        );\n                    }\n                }\n            }\n            // verifies that every dataBridge has an activity-type\n            if (!newBridge.activity) {\n                console.warn(\n                    `${this.constructor.name}: dataBridgeClass must define an activity accessor.  This is likely a code-generation problem.`\n                );\n            }\n            this._dataBridge = newBridge;\n        }\n\n        if (!this._dataBridge) {\n            throw new Error(\n                `${this.constructor.name}: this contract script doesn't have a dataBridgeClass defined`\n            );\n        }\n        //@ts-expect-error - the type we show externally is fine, given the above logic.\n        // It's not worth hoop-jumping to make TS perfectly happy with how the sausage is made.\n        return this._dataBridge;\n    }\n\n    ADA(n: bigint | number): bigint {\n        const bn =\n            \"number\" == typeof n\n                ? BigInt(Math.round(1_000_000 * n))\n                : ((BigInt(1_000_000) * n) as bigint);\n        return bn;\n    }\n\n    get isConfigured(): boolean {\n        return !!this.configIn;\n    }\n\n    get isConnected() {\n        return this.isConfigured && !!this.wallet;\n    }\n\n    /**\n     * returns the wallet connection used by the current actor\n     * @remarks\n     *\n     * Throws an error if the strella contract facade has not been initialized with a wallet in settings.actorContext\n     * @public\n     **/\n    get wallet() {\n        if (!this.actorContext.wallet) throw new Error(this.missingActorError);\n        return this.actorContext.wallet;\n    }\n\n    get missingActorError(): string {\n        return `Wallet not connected to Stellar Contract '${this.constructor.name}'`;\n    }\n\n    /**\n     * Transforms input configuration to contract script params\n     * @remarks\n     * May filter out any keys from the ConfigType that are not in the contract\n     * script's params.  Should add any keys that may be needed by the script and\n     * not included in the ConfigType (as delegate scripts do with `delegateName`).\n     */\n    getContractScriptParams(\n        config: ConfigType\n    ): Partial<ConfigType> & Required<Pick<ConfigType, \"rev\">> {\n        return config;\n    }\n\n    delegateReqdAddress(): false | Address {\n        return this.address;\n    }\n    delegateAddrHint(): Address[] | undefined {\n        return undefined;\n    }\n\n    walletNetworkCheck?: Promise<NetworkName> | NetworkName;\n    /**\n     * Factory function for a configured instance of the contract\n     * @remarks\n     *\n     * Due to boring details of initialization order, this factory function is needed\n     * for creating a new instance of the contract.\n     * @param args - setup and configuration details\n     * @public\n     **/\n    static async createWith<\n        thisType extends StellarContract<configType>,\n        configType extends configBaseWithRev = thisType extends StellarContract<\n            infer iCT\n        >\n            ? iCT\n            : never\n    >(\n        this: stellarSubclass<any>,\n        args: StellarSetupDetails<configType>\n    ): Promise<StellarContract<configType> & InstanceType<typeof this>> {\n        const Class = this;\n        const {\n            setup,\n            config,\n            partialConfig,\n            previousOnchainScript: program,\n        } = args;\n        const c: StellarContract<configType> = new Class(setup);\n\n        // now all internal property assignments have been triggered,\n        //  (e.g. class-level currentRev = .... declarations)\n        // so we can do initialization activities post-construction\n        return c.init(args);\n    }\n    /**\n     * obsolete public constructor.  Use the createWith() factory function instead.\n     *\n     * @public\n     **/\n    constructor(setup: SetupInfo) {\n        this.setup = setup;\n        this._utxoHelper = new UtxoHelper(this.setup, this);\n        setup.uh = this._utxoHelper;\n\n        // console.log(new Error(`\\n  in ${this.constructor.name}`).stack!.split(\"\\n\").slice(1).join(\"\\n\"));\n\n        const { networkParams, isTest, isMainnet, actorContext } = setup;\n        this.actorContext = actorContext;\n        // helios.config.set({ IS_TESTNET: !isMainnet }); use for TxBuilderConfig from this.setup.isMainnet\n        this.networkParams = networkParams;\n        // this.isTest = isTest\n    }\n\n    get canPartialConfig() {\n        return false;\n    }\n    /**\n     * performs async initialization, enabling an async factory pattern\n     * @remarks\n     * This method is called by the createWith() factory function, and should not be called directly.\n     *\n     *\n     */\n    async init(args: StellarSetupDetails<ConfigType>) {\n        const { isMainnet, actorContext } = this.setup;\n        const chosenNetwork = isMainnet ? \"mainnet\" : \"testnet\";\n\n        if (\"undefined\" !== typeof configuredNetwork) {\n            if (configuredNetwork != chosenNetwork) {\n                console.warn(\n                    `Possible CONFLICT:  previously configured as ${configuredNetwork}, while this setup indicates ${chosenNetwork}` +\n                        `\\n   ... are you or the user switching between networks?`\n                );\n            }\n        }\n        configuredNetwork = chosenNetwork;\n\n        // the config comes from...\n        //  - a Stellar SaaSaaS configuration handle\n        //      - has a SaaS application id\n        //      - maps domain name to a specific SaaS instance for that SaaS app\n        //      - resolves to a Capo Configuration structure\n        //  - a Capo Configuration structure created in Stellar SaaS, with...\n        //      - Capo minter's seed-txn/mph/rev\n        //          - seed txn == a utxo in Stellar SaaS contract\n        //          - in this case, there is also args.programBundle, provided by\n        //            the Capo's init(), via its connectMintingScript().\n        //      - Capo's mph/rev & script hash\n        //      - each delegate's {rev, delegateName, isMint/Spend/DataPolicy} details\n        //          - a script hash for the delegate's script, can be cross-checked with the on-chain version\n        //          - possibly an \"upgrade from ... \" {rev} for strong signals of need to update\n        //      - materialized in code bundle and/or dApp's localStorage/indexedDB\n        //          - with CBOR scripts ready to use\n        //  - (temporary) a similar configuration structure included with the dApp, where supported\n        //  - (temporary) a null configuration for testnet deployment\n        //      - the dApp will generate a config structure to be deployed\n        //      - ... using a seed txn selected from the creator's wallet (for a Capo Minter in testnet)\n        //  - low-level bootstrap details for emulator & automated-testing\n        //      - using a seed txn from emulated environment's wallet\n        //      - the minter MPH (for a Capo)\n        //      - derived details for delegates\n\n        const {\n            config,\n            partialConfig : pCfg,\n            previousOnchainScript,\n            previousOnchainScript: { \n                validatorHash, \n                uplcProgram: previousUplcProgram,\n            } = {},\n        } = args;\n        this.configIn = config;\n        \n        let partialConfig : typeof pCfg = undefined\n        if (pCfg && Object.keys(pCfg).length == 0) {\n            console.warn(`${this.constructor.name}: ignoring empty partialConfig; change the upstream code to leave it out`);\n        } else {\n            partialConfig = pCfg;\n        }\n        this.partialConfig = partialConfig;\n        \n        if (actorContext.wallet) {\n            const walletIsMainnet = await actorContext.wallet.isMainnet();\n            const foundNetwork = walletIsMainnet\n                ? \"mainnet\"\n                : \"a testnet (preprod/preview)\";\n            const chosenNetworkLabel = isMainnet\n                ? \"mainnet\"\n                : \"a testnet (preprod/preview)\";\n            if (walletIsMainnet !== isMainnet) {\n                const message = `The wallet is connected to ${foundNetwork}, doesn't match this app's target network  ${chosenNetworkLabel}`;\n                if (chosenNetwork == \"mainnet\") {\n                    console.log(\n                        `${message}\\n   ... have you provided env.TESTNET to the build to target a testnet?`\n                    );\n                }\n                throw new Error(message);\n            }\n            // redundant\n            this.actorContext = actorContext;\n        }\n\n\n        if (previousUplcProgram) {\n            // with a rawProgram, the contract script is used directly\n            // to make a HeliosScriptBundle with that rawProgram\n            // as an override.\n            const bundle = await this.mkScriptBundle({\n                scriptParamsSource: \"config\",\n                previousOnchainScript: previousOnchainScript,\n                // params: this.getContractScriptParams(config),\n                // deployedDetails: {\n                //     config,\n                // },\n            });\n            this._bundle = bundle\n        } else if (config || partialConfig) {\n            //@ts-expect-error on probe for possible but not\n            //   required variant config\n            const variant = (config || partialConfig).variant;\n\n            console.log(`${this.constructor.name}: stellar offchain class init with config`)\n            let params = config ? this.getContractScriptParams(config) : undefined\n            if ((this as any).usesContractScript) {\n                const deployedDetails: DeployedScriptDetails<any> = {\n                    config,\n                    // programBundle,\n                    // scriptHash,\n                };\n                if (!config) {\n                    // debugger;\n                    console.warn(\n                        `${this.constructor.name}: no config provided`\n                    );\n                }\n                const bundle : HeliosScriptBundle = await this.mkScriptBundle({\n                    variant,\n                    deployedDetails,\n                    params\n                })\n                this._bundle = bundle\n                console.error(\"------------------------ bundle init done\");\n                // await this.prepareBundleWithScriptParams(params);\n\n                if (!bundle!.isHeliosScriptBundle()) {\n                    throw new Error(\n                        `${this.constructor.name}: this.bundle must be a HeliosScriptBundle; got ${bundle.constructor.name}`\n                    );\n                }\n                if (bundle.setup && bundle.configuredParams) {\n                    try {\n                        // eager compile for early feedback on errors\n                        if (false && process.env.NODE_ENV == \"development\") {\n                            console.log(\"dev env: loading program\");\n                            bundle.loadProgram()\n                        }\n                    } catch (e: any) {\n                        console.warn(\n                            \"while loading program: \",\n                            e.message\n                        );\n                    }\n                } else if (bundle.setup && bundle.params) {\n                    debugger;\n                    throw new Error(`what is this situation here? (dbpa)`);\n                }\n                console.log(\n                    bundle.configuredScriptDetails?.programName || bundle.loadProgram().name,\n                    \"bundle loaded\"\n                ) \n            }\n        } else {\n            const bundle = await this.getBundle();\n            if (bundle.isPrecompiled) {\n                console.log(\n                    `${bundle.displayName}: will load the precompiled on-chain policy on-demand`\n                );\n                // this.compiledScript = await bundle.compiledScript();\n            } else if (bundle.scriptParamsSource == \"config\") {\n                console.error(\n                    `${this.constructor.name}: not preconfigured; will use JIT compilation`\n                );\n            } else if (bundle.scriptParamsSource == \"bundle\") {\n                throw new Error(\n                    `missing required on-chain script params in bundle`\n                );\n            }\n            this.partialConfig = partialConfig;\n        }\n\n        return this;\n    }\n\n    async mkScriptBundle(\n        setupDetails: PartialStellarBundleDetails<any> = placeholderSetupDetails\n    ) {\n        const bundleClass = await this.scriptBundleClass();\n        return bundleClass.create({\n            ...setupDetails,\n            setup: this.setup,\n            // defaultParams: (\n            //     this.constructor as typeof StellarContract<any>\n            // ).defaultParams,\n        });\n    }\n\n    _compiledScript!: anyUplcProgram; // initialized in compileWithScriptParams()\n    get compiledScript(): anyUplcProgram {\n        if (this._bundle?.alreadyCompiledScript) {\n            return this._bundle.alreadyCompiledScript;\n        }\n        if (!this._compiledScript) {\n            throw new Error(\n                `${this.constructor.name}: compiledScript not yet initialized; call asyncCompiledScript() first`\n            );\n        }\n        return this._compiledScript;\n    }\n\n    async asyncCompiledScript() {\n        // if (this._compiledScript) return this._compiledScript;\n        if (!this.usesContractScript) {\n            throw new Error(`${this.constructor.name}: usesContractScript is false; don't call asyncCompiledScript().`);\n        }\n        const b = await this.getBundle();\n        const compiledScript = await b.compiledScript(true);\n        if (b.alreadyCompiledScript !== compiledScript) {\n            throw new Error(\"impossible! alreadyCompiledScript should be present\")\n        }\n        return compiledScript;\n    }\n    usesContractScript: boolean = true;\n\n    get datumType(): DataType {\n        return this.onChainDatumType;\n    }\n\n    /**\n     * @internal\n     **/\n    get purpose(): scriptPurpose {\n        const purpose = this.program.purpose as scriptPurpose;\n        if (!purpose) return \"non-script\";\n        return purpose;\n    }\n\n    get validatorHash() {\n        const { vh } = this._cache;\n        if (vh) return vh;\n        // console.log(this.constructor.name, \"cached vh\", vh?.hex || \"none\");\n\n        // validator hash is the same as the script hash\n        if (this._bundle?.scriptHash) {\n            return this._cache.vh = makeValidatorHash(this._bundle.scriptHash)\n        }\n        throw new Error(\"bundle not initialized with getBundle() before getting validatorHash\")\n        // console.log(\"nvh\", nvh.hex);\n        // if (vh) {\n        //     if (!vh.eq(nvh)) {\n        //         console.warn(`validatorHash mismatch: ${vh.hex} != ${nvh.hex}`);\n        //         debugger\n        //     }\n        // }\n        // return (this._cache.vh = makeValidatorHash(nvh));\n    }\n\n    //  todo: stakingAddress?: Address or credential or whatever;\n\n    get address(): Address {\n        const prevVh = this._bundle?.previousOnchainScript?.validatorHash;\n        if (prevVh) {\n            return makeAddress(this.setup.isMainnet, makeValidatorHash(prevVh));\n        }\n        const { addr } = this._cache;\n        if (addr) return addr;\n        if (!this.validatorHash) {\n            throw new Error(\n                \"This contract isn't yet configured with a validatorHash\"\n            );\n        }\n        console.log(this.constructor.name, \"caching addr\");\n        console.log(\n            \"TODO TODO TODO - ensure each contract can indicate the right stake part of its address\"\n        );\n        console.log(\"and that the onchain part also supports it\");\n        const isMainnet = this.setup.isMainnet;\n        if (\"undefined\" == typeof isMainnet) {\n            throw new Error(\n                `${this.constructor.name}: isMainnet must be defined in the setup`\n            );\n        }\n        const nAddr = makeAddress(isMainnet, this.validatorHash);\n        // this.validatorHash);\n        // console.log(\"nAddr\", nAddr.toBech32());\n        // if (this._address) {\n        //     if (!this._address.eq(nAddr)) {\n        //         console.warn(`address mismatch: ${this._address.toBech32()} != ${nAddr.toBech32()}`);\n        //         debugger\n        //     }\n        // }\n        return (this._cache.addr = nAddr);\n    }\n\n    get mintingPolicyHash() {\n        const { mph } = this._cache;\n        if (mph) return mph;\n        // console.log(this.constructor.name, \"_mph\", this._mph?.hex || \"none\");\n        const hash = this._bundle?.scriptHash\n        if (!hash) {\n            throw new Error(\"bundle not initialized with getBundle() before getting mintingPolicyHash\")\n        }\n        const nMph = makeMintingPolicyHash(hash);\n        // console.log(\"nMph\", nMph.hex);\n        // if (this._mph) {\n        //     if (!this._mph.eq(nMph)) {\n        //         console.warn(\n        //             `mintingPolicyHash mismatch: ${this._mph.hex} != ${nMph.hex}`\n        //         );\n        //         debugger\n        //     }\n        // }\n        return (this._cache.mph = nMph);\n    }\n\n    get identity() {\n        const { identity } = this._cache;\n        if (identity) return identity;\n        console.log(this.constructor.name, \"identity\", identity || \"none\");\n\n        let result: string;\n        if (\"minting\" == this.purpose) {\n            const b32 = this.mintingPolicyHash!.toString();\n            //!!! todo: verify bech32 checksum isn't messed up by this:\n            result = b32.replace(/^asset/, \"mph\");\n        } else {\n            result = this.address.toString();\n        }\n        // if (this._identity) {\n        //     if (this._identity != result) {\n        //         console.warn(\n        //             `identity mismatch: ${this._identity} != ${result}`\n        //         );\n        //         debugger\n        //     }\n        // }\n        // console.log(\"nIdentity\", result);\n        return (this._cache.identity = result);\n    }\n\n    //! searches the network for utxos stored in the contract,\n    //  returning those whose datum hash is the same as the input datum\n    async outputsSentToDatum(datum: InlineDatum): Promise<any> /*unused*/ {\n        const myUtxos = await this.network.getUtxos(this.address);\n        throw new Error(`unused`);\n        // const dump = utxosAsString(myUtxos)\n        // console.log({dump})\n        return myUtxos.filter((u) => {\n            return u.output.datum?.hash.isEqual(datum.hash);\n        });\n    }\n\n    /**\n     * Returns the indicated Value to the contract script\n     * @public\n     * @param tcx - transaction context\n     * @param value - a value already having minUtxo calculated\n     * @param datum - inline datum\n     **/\n    //! adds the indicated Value to the transaction;\n    //  ... EXPECTS  the value to already have minUtxo calculated on it.\n    @partialTxn // non-activity partial\n    txnKeepValue(tcx: StellarTxnContext, value: Value, datum: InlineDatum) {\n        tcx.addOutput(makeTxOutput(this.address, value, datum));\n\n        return tcx;\n    }\n\n    /**\n     * Returns all the types exposed by the contract script\n     * @remarks\n     *\n     * Passed directly from Helios; property names match contract's defined type names\n     *\n     * @public\n     **/\n    get onChainTypes(): Program[\"userTypes\"][string] {\n        // compiledScript.userTypes()\n        // const types = { ...this.scriptProgram!.types };\n\n        const scriptNamespace = this.program.name;\n        return this.program.userTypes[scriptNamespace];\n    }\n\n    /**\n     * identifies the enum used for the script Datum\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Datum.\n     * @public\n     **/\n    get scriptDatumName() {\n        return \"Datum\";\n    }\n\n    /**\n     * The on-chain type for datum\n     * @remarks\n     *\n     * This getter provides a class, representing the on-chain enum used for attaching\n     * data (or data hashes) to contract utxos the returned type (and its enum variants)\n     * are suitable for off-chain txn-creation override `get scriptDatumName()` if\n     * needed to match your contract script.\n     * @public\n     **/\n    get onChainDatumType(): DataType {\n        \n        return this.preloadedBundle.locateDatumType()!;\n    }\n\n    get preloadedBundle(): HeliosScriptBundle {\n        if (!this._bundle) {\n            throw new Error(\"bundle must be loaded before calling this\");\n        }\n        return this._bundle;\n    }\n\n\n    /**\n     * identifies the enum used for activities (redeemers) in the Helios script\n     * @remarks\n     *\n     * Override this if your contract script uses a type name other than Activity.\n     * @public\n     **/\n\n    get scriptActivitiesName() {\n        return \"Activity\";\n    }\n\n    getSeed(arg: hasSeed) {\n        return getSeed(arg);\n    }\n\n    loadProgram() {\n        if (!this._bundle) throw new Error(`${this.constructor.name}: no bundle / script program`);\n        return this._bundle.loadProgram()\n    }\n\n    /**\n     * returns the on-chain type for activities (\"redeemers\")\n     * @remarks\n     *\n     * Use mustGetActivityName() instead, to get the type for a specific activity.\n     *\n     * returns the on-chain enum used for spending contract utxos or for different use-cases of minting (in a minting script).\n     * the returned type (and its enum variants) are suitable for off-chain txn-creation\n     * override `get onChainActivitiesName()` if needed to match your contract script.\n     * @public\n     **/\n    get onChainActivitiesType(): DataType {\n        const { scriptActivitiesName: onChainActivitiesName } = this;\n        const program = this.loadProgram();\n\n        const scriptNamespace = program.name;\n        const {\n            [scriptNamespace]: { [onChainActivitiesName]: ActivitiesType },\n        } = this.program.userTypes;\n\n        return ActivitiesType;\n    }\n\n    /**\n     * @deprecated - see {@link StellarContract.activityVariantToUplc|this.activityVariantToUplc(variant, data)} instead\n     * Retrieves an on-chain type for a specific named activity (\"redeemer\")\n     * @remarks\n     *\n     * Cross-checks the requested name against the available activities in the script.\n     * Throws a helpful error if the requested activity name isn't present.'\n     *\n     * @param activityName - the name of the requested activity\n     * @public\n     **/\n    mustGetActivity(activityName: string): EnumMemberType | null {\n        const ocat = this.onChainActivitiesType;\n        return this.mustGetEnumVariant(ocat, activityName);\n    }\n\n    /**\n     * asserts the presence of the indicated activity name in the on-chain script\n     * @remarks\n     * The activity name is expected to be found in the script's redeemer enum\n     */\n    mustHaveActivity(activityName: string): EnumMemberType | null {\n        const ocat = this.onChainActivitiesType;\n        if (!(activityName in ocat.typeMembers)) {\n            throw new Error(\n                `${this.constructor.name}: missing required on-chain activity: ${activityName}`\n            );\n        }\n        return this.mustGetEnumVariant(ocat, activityName);\n    }\n\n    activityRedeemer(activityName: string, data?: any) {\n        const activities = this.onChainActivitiesType;\n\n        return {\n            redeemer: this.typeToUplc(activities, {\n                [activityName]: data,\n            }),\n        };\n    }\n\n    activityVariantToUplc(activityName: string, data: any) {\n        const activities = this.onChainActivitiesType;\n\n        return this.typeToUplc(activities, {\n            [activityName]: data,\n        });\n    }\n\n    mustGetEnumVariant(\n        enumType: DataType,\n        variantName: string\n    ): EnumMemberType | null {\n        const { [variantName]: variantType } = enumType.typeMembers;\n\n        if (!variantType) {\n            // const { scriptActivitiesName: onChainActivitiesName } = this;\n            const variantNames: string[] = [];\n            //inspect the properties in `this`, using property descriptors.\n            for (const [name, _] of Object.entries(enumType.typeMembers)) {\n                //Some of them will point to Class definitions.\n                // check if any of those classes inherit from UplcData.\n                debugger;\n                if (isUplcData(enumType[name].prototype)) {\n                    console.warn(\n                        \"\\n\".repeat(8) +\n                            \"------------------------ check enum variant name\",\n                        name\n                    );\n                    debugger;\n                    // if so, add the name to activityNames.\n                    variantNames.push(name);\n                } else {\n                    debugger;\n                    throw new Error(\n                        \"variant names only available via HeliosData : (\"\n                    );\n                }\n            }\n            debugger;\n            //!!! TODO\n            // enumType.name.site.syntaxError(\"yuck\")\n            ///or similar (search: getFilePos())\n            throw new Error(\n                `$${this.constructor.name}: activity/enum-variant name mismatch in ${enumType.name}: variant '${variantName}' unknown\\n` +\n                    ` ... variants in this enum: ${variantNames.join(\", \")}`\n            );\n        }\n        return variantType.asEnumMemberType;\n    }\n\n    inlineDatum(datumName: string, data: any) {\n        return makeInlineTxOutputDatum(\n            this.typeToUplc(this.onChainDatumType, {\n                [datumName]: data,\n            })\n        );\n    }\n\n    /**\n     * provides a temporary indicator of mainnet-ness, while not\n     * requiring the question to be permanently resolved.\n     * @remarks\n     * Allows other methods to proceed prior to the final determination of mainnet status.\n     *\n     * Any code using this path should avoid caching a negative result.  If you need to\n     * determine the actual network being used, getBundle().isMainnet, if present, provides\n     * the definitive answer.  If that attribute is not yet present, then the mainnet status\n     * has not yet been materialized.\n     * @public\n     */\n    isDefinitelyMainnet() {\n        return this.preloadedBundle.isDefinitelyMainnet();\n    }\n\n    paramsToUplc(params: Record<string, any>): UplcRecord<ConfigType> {\n        return this.preloadedBundle.paramsToUplc(params);\n    }\n\n    typeToUplc(type: DataType, data: any, path: string = \"\"): UplcData {\n        return this.preloadedBundle.typeToUplc(type, data, path);\n    }\n\n    get program() {\n        return this.preloadedBundle.program;\n    }\n\n    _utxoHelper: UtxoHelper;\n    /**\n     * Provides access to a UtxoHelper instance\n     */\n    get utxoHelper() {\n        return this._utxoHelper;\n    }\n    /**\n     * Provides access to a UtxoHelper instance\n     * @remarks - same as utxoHelper, but with a shorter name\n     */\n    get uh() {\n        return this._utxoHelper;\n    }\n\n    /**\n     * @deprecated - use `tcx.submit()` instead.\n     */\n    async submit(\n        tcx: StellarTxnContext,\n        {\n            signers = [],\n            addlTxInfo = {\n                description: tcx.txnName ? \": \" + tcx.txnName : \"\",\n            },\n        }: {\n            signers?: Address[];\n            addlTxInfo?: Pick<TxDescription<any, any>, \"description\">;\n        } = {}\n    ) {\n        console.warn(\"deprecated: use tcx.submit() instead\");\n        return tcx.buildAndQueue({ signers, addlTxInfo });\n    }\n\n    //!!! todo: implement more and/or test me:\n    // async findFreeLovelaceWithTokens(v: Value, w: Wallet) {\n    // it.todo(\"helps find spare lovelace in tokens\");\n    // it.todo(\"will help harvest spare lovelace in the future if minUtxo is changed\");\n    //     const utxos = await w.utxos;\n    //     const lovelaceOnly = v.assets.isZero();\n    //     //! it finds free lovelace in token bundles, if it can't find free lovelace otherwise\n    //     if (lovelaceOnly) {\n    //         let maxFree: TxInput, minToken: TxInput;\n    //         let minPolicyCount = Infinity;\n\n    //         for (const u of utxos) {\n    //             const policies = u.value.assets.mintingPolicies.length;\n    //             if (policies < minPolicyCount) {\n    //                 minPolicyCount = policies;\n    //                 minToken = u;\n    //             }\n\n    //             const free =\n    //                 u.value.lovelace -\n    //                 u.origOutput.calcMinLovelace(this.networkParams);\n    //             //@ts-ignore\n    //             if (!maxFree) {\n    //                 maxFree = u;\n    //             } else if (free > maxFree!.value.lovelace) {\n    //                 maxFree = u;\n    //             }\n    //         }\n    //     }\n    // }\n\n    _cache: ComputedScriptProperties = {};\n    optimize: boolean = true;\n\n    async prepareBundleWithScriptParams(\n        params: Partial<ConfigType> & Required<Pick<ConfigType, \"rev\">>\n    ) {\n        if (this._compiledScript) {\n            console.warn(\n                \"compileWithScriptParams() called after script compilation already done\"\n            );\n            debugger;\n        }\n        if (!this.usesContractScript) {\n            throw new Error(`avoid this call to begin with?`);\n            return;\n        }\n        if (!params) {\n            throw new Error(`contractParams not set`);\n        }\n\n        let bundle = await this.getBundle();\n        // if (bundle.isPrecompiled) {\n        //     debugger;\n        //     console.warn(\n        //         `deployed script shouldn't need to compile (debugging breakpoint available)`\n        //     );\n        // }\n        if (!this.setup) {\n            console.warn(\n                `compileWithScriptParams() called before setup is available`\n            );\n            debugger;\n        }\n        if (bundle.isConcrete || bundle.configuredParams) {\n            throw new Error(`can't prepare bundle when there's already a good one`)\n        }\n\n        bundle = this._bundle = await this.mkScriptBundle({\n            params,\n            scriptParamsSource: \"config\",\n        });\n\n        this._compiledScript = await bundle.compiledScript(true);\n        // console.log(\n        //     `       ✅ ${this.constructor.name} ready with scriptHash=`,\n        //     bytesToHex(this.compiledScript.hash())\n        // );\n        this._cache = {};\n    }\n\n    /**\n     * Locates a UTxO locked in a validator contract address\n     * @remarks\n     *\n     * Throws an error if no matching UTxO can be found\n     * @param semanticName - descriptive name; used in diagnostic messages and any errors thrown\n     * @param predicate - filter function; returns its utxo if it matches expectations\n     * @param exceptInTcx - any utxos already in the transaction context are disregarded and not passed to the predicate function\n     * @param extraErrorHint - user- or developer-facing guidance for guiding them to deal with the miss\n     * @public\n     **/\n    //! finds a utxo (\n    async mustFindMyUtxo(\n        semanticName: string,\n        options: {\n            predicate: utxoPredicate;\n            exceptInTcx?: StellarTxnContext;\n            extraErrorHint?: string;\n            utxos?: TxInput[];\n        }\n    ): Promise<TxInput> {\n        const { predicate, exceptInTcx, extraErrorHint, utxos } = options;\n        const { address } = this;\n\n        return this.utxoHelper.mustFindUtxo(semanticName, {\n            predicate,\n            address,\n            exceptInTcx,\n            extraErrorHint,\n            utxos,\n        });\n    }\n\n    /**\n     * Reuses an existing transaction context, or creates a new one with the given name and the current actor context\n     */\n    mkTcx<TCX extends StellarTxnContext>(\n        tcx: StellarTxnContext | undefined,\n        name?: string\n    ): TCX;\n    /**\n     * Creates a new transaction context with the current actor context\n     */\n    mkTcx(name?: string): StellarTxnContext;\n    mkTcx(tcxOrName?: StellarTxnContext | string, name?: string) {\n        const tcx =\n            tcxOrName instanceof StellarTxnContext\n                ? tcxOrName\n                : new StellarTxnContext(this.setup).withName(name || \"\");\n\n        const effectiveName =\n            tcxOrName instanceof StellarTxnContext ? name : tcxOrName;\n\n        if (effectiveName && !tcx.txnName) return tcx.withName(effectiveName);\n        return tcx;\n    }\n\n    /**\n     * Finds a free seed-utxo from the user wallet, and adds it to the transaction\n     * @remarks\n     *\n     * Accepts a transaction context that may already have a seed.  Returns a typed\n     * tcx with hasSeedUtxo type.\n     *\n     * The seedUtxo will be consumed in the transaction, so it can never be used\n     * again; its value will be returned to the user wallet.\n     *\n     * The seedUtxo is needed for UUT minting, and the transaction is typed with\n     * the presence of that seed (found in tcx.state.seedUtxo).\n     *\n     * If a seedUtxo is already present in the transaction context, no additional seedUtxo\n     * will be added.\n     *\n     * If a seedUtxo is provided as an argument, that utxo must already be present\n     * in the transaction inputs; the state will be updated to reference it.\n     *\n     * @public\n     *\n     **/\n    async tcxWithSeedUtxo<TCX extends StellarTxnContext>(\n        tcx: TCX = new StellarTxnContext(this.setup) as TCX,\n        seedUtxo?: TxInput\n    ): Promise<TCX & hasSeedUtxo> {\n        if (\n            //prettier-ignore\n            //@ts-expect-error on this type probe\n            tcx.state && tcx.state.seedUtxo\n        ) {\n            return tcx as TCX & hasSeedUtxo;\n        }\n        if (seedUtxo) {\n            let tcx2 = tcx as TCX & hasSeedUtxo;\n            if (!tcx.inputs.find((utxo) => utxo.isEqual(seedUtxo))) {\n                tcx2 = tcx2.addInput(seedUtxo);\n                // throw new Error(`seedUtxo not found in transaction inputs`);\n            }\n            tcx2.state.seedUtxo = seedUtxo;\n            return tcx2;\n        } else {\n            return this.findUutSeedUtxo([], tcx).then((newSeedUtxo) => {\n                const tcx2 = tcx.addInput(newSeedUtxo) as TCX & hasSeedUtxo;\n                tcx2.state.seedUtxo = newSeedUtxo;\n                return tcx2;\n            });\n        }\n    }\n\n    async findUutSeedUtxo(uutPurposes: string[], tcx: StellarTxnContext<any>) {\n        const uh = this.utxoHelper;\n        //!!! big enough to serve minUtxo for each of the new UUT(s)\n        const uutSeed = uh.mkValuePredicate(BigInt(13_000_000), tcx);\n        return uh.mustFindActorUtxo(`seed-for-uut ${uutPurposes.join(\"+\")}`, {\n            predicate: uutSeed,\n            exceptInTcx: tcx,\n            extraErrorHint:\n                \"You might need to create some granular utxos in your wallet by sending yourself a series of small transactions (e.g. 15 then 16 and then 17 ADA) as separate utxos/txns\",\n        });\n    }\n}\n"],"names":["bytesToText","textToBytes","extraNewLine","usesOutdent","multiLine","s","x","tx","txName","tcx","t","v","mph","name","utxos","datum"],"mappings":"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"}