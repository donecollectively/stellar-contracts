{"version":3,"file":"testing-node.mjs","sources":["../src/testing/types.ts","../src/colors.ts","../src/testing/StellarNetworkEmulator.ts","../src/testing/StellarTestHelper.ts","../src/testing/CapoTestHelper.ts","../src/testing/DefaultCapoTestHelper.ts","../src/testing/index.ts"],"sourcesContent":["import type { NetworkParams } from \"@helios-lang/ledger\";\nimport type {\n    Capo,\n    StellarContract,\n    ConfigFor,\n    configBase,\n    SeedTxnScriptParams,\n    CapoFeatureFlags,\n    rootCapoConfig,\n    CapoConfig,\n} from \"@donecollectively/stellar-contracts\";\nimport type { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport type { DefaultCapoTestHelper } from \"./DefaultCapoTestHelper.js\";\nimport {\n    SimpleWallet_stellar as emulatedWallet,\n    type NetworkSnapshot,\n} from \"./StellarNetworkEmulator.js\";\nimport type { StellarTestContext } from \"./StellarTestContext.js\";\n// import type {\n//     StellarTestContext,\n//     StellarTestHelper,\n//     DefaultCapoTestHelper,\n//     NetworkSnapshot,\n//     SimpleWallet_stellar as emulatedWallet,\n// } from \"@donecollectively/stellar-contracts/testing\";\n\n/**\n * @public\n */\nexport type enhancedNetworkParams = NetworkParams & {\n    slotToTimestamp(n: bigint): Date;\n};\n/**\n * @public\n */\nexport type stellarTestHelperSubclass<SC extends StellarContract<any>> = new (\n    stConfig: ConfigFor<SC> & canHaveRandomSeed,\n    helperState?: TestHelperState<SC>\n) => StellarTestHelper<SC>;\n\n// export type allCapoConfigDetails<SC extends Capo<any>> =\n// ConfigFor<SC> & rootCapoConfig & CapoFeatureFlags &\n//         SeedTxnScriptParams & {\n//             mph: MintingPolicyHash;\n//         };\n\n/**\n * @public\n */\nexport type DefaultCapoTestHelperClass<SC extends Capo<any>> = new (\n    config?: canHaveRandomSeed & SC extends Capo<any, infer FF>\n        ? ConfigFor<SC> & CapoConfig<FF>\n        : ConfigFor<SC>,\n    helperState?: TestHelperState<SC>\n) => // StellarTestHelper<SC> &\nDefaultCapoTestHelper<SC>;\n\n/**\n * @public\n */\nexport type canHaveRandomSeed = {\n    randomSeed?: number;\n};\n/**\n * @public\n */\nexport type canSkipSetup = {\n    skipSetup?: true;\n};\n\n/**\n * @public\n */\nexport type TestHelperState<SC extends StellarContract<any>> = {\n    bootstrapped: Boolean;\n    bootstrappedStrella?: SC;\n    snapshots: Record<string, NetworkSnapshot>;\n    previousHelper: StellarTestHelper<any>;\n};\n\n/**\n * Adds a test helper class to a `vitest` testing context.\n * @remarks\n *\n * @param context -  a vitest context, typically created with StellarTestContext\n * @param TestHelperClass - typically created with DefaultCapoTestHelper\n * @param stConfig - preset configuration for the contract under test\n * @public\n **/\nexport async function addTestContext<\n    SC extends StellarContract<any>,\n    ST_CONFIG extends configBase & ConfigFor<SC> = ConfigFor<SC>\n>(\n    context: StellarTestContext<any, SC>,\n    TestHelperClass: SC extends Capo<any>\n        ? DefaultCapoTestHelperClass<SC>\n        : stellarTestHelperSubclass<SC>,\n    stConfig?: Partial<\n        SC extends Capo<any, infer FF> ? {featureFlags: FF} & ST_CONFIG : ST_CONFIG\n    >,\n    helperState?: TestHelperState<SC>\n) {\n    console.log(\" ======== ======== ======== +test context\");\n    Object.defineProperty(context, \"strella\", {\n        get: function () {\n            return this.h.strella;\n        },\n    });\n\n    //@ts-expect-error on matchiness of the SC type\n    context.initHelper = async (stConfig, helperState) => {\n        //@ts-expect-error on matchiness of helperState\n        const helper = new TestHelperClass(stConfig, helperState);\n        // await helper.setupPending;\n        if (context.h) {\n            //xx@ts-expect-error temporarily\n            if (!stConfig.skipSetup)\n                throw new Error(\n                    `re-initializing shouldn't be necessary without skipSetup`\n                );\n            console.log(\n                \"   ............. reinitializing test helper without setup\"\n            );\n        }\n        context.h = helper;\n        // console.log(\"context IS \", context)\n        return helper;\n    };\n    try {\n        //@ts-expect-error\n        await context.initHelper(stConfig, helperState);\n    } catch (e) {\n        if (!stConfig) {\n            // console.error(e.stack || e.message || JSON.stringify(e));\n            console.error(\n                `${TestHelperClass.name}: error during initialization; does this test helper require initialization with explicit params?`\n            );\n            throw e;\n        } else {\n            console.error(\"urgh\");\n            throw e;\n        }\n    }\n}\n\n/**\n * @public\n */\nexport type actorMap = Record<string, emulatedWallet>;\n\n/**\n * 1 million as bigint.  Multiply by this a `Bigint` ADA value to get lovelace\n * @public\n * @example\n *    const three = 3n * ADA\n *    const four = Bigint(4) * ADA\n **/\n/**\n * @public\n */\nexport const ADA = 1_000_000n; // lovelace\n\n/**\n * Recursively expand all types in a type\n * @public\n */\nexport type ExpandRecursively<T> = T extends object\n    ? T extends infer O\n        ? { [K in keyof O]: ExpandRecursively<O[K]> }\n        : never\n    : T;\n","// local copy of picocolors.js\n// guards against supply chain attacks\n// original ISC license preserved:\n\n// ISC License\n\n// Copyright (c) 2021-2024 Oleksii Raspopov, Kostiantyn Denysov, Anton Verinov\n\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\nlet p = process || {}, argv = p.argv || [], env = p.env || {}\nlet isColorSupported =\n\t!(!!env.NO_COLOR || argv.includes(\"--no-color\")) &&\n\t(!!env.FORCE_COLOR || argv.includes(\"--color\") || \n        p.platform === \"win32\" || \n        (\n            true \n        //  && (p.stdout || {}).isTTY \n        // && env.TERM !== \"dumb\"\n        ) || \n        !!env.CI\n        )\n\nlet formatter = (open, close, replace = open) => {\n    const f = (input) => {\n\t\tlet string = \"\" + input, index = string.indexOf(close, open.length)\n\t\treturn ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close\n\t}\n    f.start = open\n    f.close = close\n    return f\n}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\", cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet f = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: f(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: f(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: f(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: f(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: f(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: f(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: f(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: f(\"\\x1b[9m\", \"\\x1b[29m\"),\n\n\t\tblack: f(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: f(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: f(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: f(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: f(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: f(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: f(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: f(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\n\t\tbgBlack: f(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: f(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: f(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: f(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: f(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: f(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: f(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: f(\"\\x1b[47m\", \"\\x1b[49m\"),\n\n\t\tblackBright: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tredBright: f(\"\\x1b[91m\", \"\\x1b[39m\"),\n\t\tgreenBright: f(\"\\x1b[92m\", \"\\x1b[39m\"),\n\t\tyellowBright: f(\"\\x1b[93m\", \"\\x1b[39m\"),\n\t\tblueBright: f(\"\\x1b[94m\", \"\\x1b[39m\"),\n\t\tmagentaBright: f(\"\\x1b[95m\", \"\\x1b[39m\"),\n\t\tcyanBright: f(\"\\x1b[96m\", \"\\x1b[39m\"),\n\t\twhiteBright: f(\"\\x1b[97m\", \"\\x1b[39m\"),\n\n\t\tbgBlackBright: f(\"\\x1b[100m\", \"\\x1b[49m\"),\n\t\tbgRedBright: f(\"\\x1b[101m\", \"\\x1b[49m\"),\n\t\tbgGreenBright: f(\"\\x1b[102m\", \"\\x1b[49m\"),\n\t\tbgYellowBright: f(\"\\x1b[103m\", \"\\x1b[49m\"),\n\t\tbgBlueBright: f(\"\\x1b[104m\", \"\\x1b[49m\"),\n\t\tbgMagentaBright: f(\"\\x1b[105m\", \"\\x1b[49m\"),\n\t\tbgCyanBright: f(\"\\x1b[106m\", \"\\x1b[49m\"),\n\t\tbgWhiteBright: f(\"\\x1b[107m\", \"\\x1b[49m\"),\n\t} as any\n}\n\nexport const colors : Colors = createColors()\n\n\nexport type Formatter = {\n    start: string;\n    end: string;\n} & ((input: string | number | null | undefined) => string);\n\nexport interface Colors {\n    isColorSupported: boolean;\n\n    reset: Formatter;\n    bold: Formatter;\n    dim: Formatter;\n    italic: Formatter;\n    underline: Formatter;\n    inverse: Formatter;\n    hidden: Formatter;\n    strikethrough: Formatter;\n\n    black: Formatter;\n    red: Formatter;\n    green: Formatter;\n    yellow: Formatter;\n    blue: Formatter;\n    magenta: Formatter;\n    cyan: Formatter;\n    white: Formatter;\n    gray: Formatter;\n\n    bgBlack: Formatter;\n    bgRed: Formatter;\n    bgGreen: Formatter;\n    bgYellow: Formatter;\n    bgBlue: Formatter;\n    bgMagenta: Formatter;\n    bgCyan: Formatter;\n    bgWhite: Formatter;\n\n    blackBright: Formatter;\n    redBright: Formatter;\n    greenBright: Formatter;\n    yellowBright: Formatter;\n    blueBright: Formatter;\n    magentaBright: Formatter;\n    cyanBright: Formatter;\n    whiteBright: Formatter;\n\n    bgBlackBright: Formatter;\n    bgRedBright: Formatter;\n    bgGreenBright: Formatter;\n    bgYellowBright: Formatter;\n    bgBlueBright: Formatter;\n    bgMagentaBright: Formatter;\n    bgCyanBright: Formatter;\n    bgWhiteBright: Formatter;\n}\n\n","import {\n    makeTxId,\n    makeTxInput,\n    makeTxOutput,\n    makeValue,\n    type PubKey,\n    type PubKeyHash,\n    type TxOutput,\n    type NetworkParamsHelper,\n    type Tx,\n    type Address,\n    type NetworkParams,\n    type Assets,\n    type TxOutputId,\n    type Signature,\n    makeTxOutputId,\n    type TxInput,\n    type TxId,\n    makeAddress,\n    makeStakingAddress,\n    type StakingAddress,\n    makeNetworkParamsHelper,\n    makeAssets,\n    type ShelleyAddress,\n    type Value,\n} from \"@helios-lang/ledger\";\n\nimport { type BytesLike, type IntLike } from \"@helios-lang/codec-utils\";\nimport {colors} from \"../utils.js\"\nconst { magenta } = colors\n\nimport {\n    BIP39_DICT_EN,\n    SECOND,\n    type EmulatorTx,\n    type Emulator,\n    type Wallet,\n    type EmulatorGenesisTx,\n    type EmulatorRegularTx,\n    type Bip32PrivateKey,\n    restoreRootPrivateKey,\n    type RootPrivateKey,\n    makeEmulatorGenesisTx,\n    makeEmulatorRegularTx,\n    type SimpleWallet,\n    type Cip30CoseSign1,\n    signCip30CoseData,\n} from \"@helios-lang/tx-utils\";\nimport type { NumberGenerator } from \"@helios-lang/crypto\";\nimport { DEFAULT_NETWORK_PARAMS } from \"@helios-lang/ledger\";\nimport { type UplcLogger } from \"@helios-lang/uplc\";\n\nimport {\n    dumpAny,\n    type NetworkContext,\n} from \"@donecollectively/stellar-contracts\";\nimport { expectDefined } from \"@helios-lang/type-utils\";\n\n// class GenesisTx implements EmulatorGenesisTx {\n//     #id: number;\n//     #address: Address;\n//     #lovelace: bigint;\n//     #assets: Assets;\n\n//     constructor(\n//         id: number,\n//         address: Address,\n//         lovelace: bigint,\n//         assets: Assets\n//     ) {\n//         this.#id = id;\n//         this.#address = address;\n//         this.#lovelace = lovelace;\n//         this.#assets = assets;\n//     }\n\n//     /**\n//      * Simple incremental txId for genesis transactions.\n//      * It's very unlikely that regular transactions have the same hash.\n//      */\n//     id() {\n//         let bytes = encodeIntBE(BigInt(this.#id));\n\n//         if (bytes.length < 32) {\n//             bytes = new Array(32 - bytes.length).fill(0).concat(bytes);\n//         }\n\n//         return makeTxId(bytes);\n//     }\n\n//     consumes(utxo) {\n//         return false;\n//     }\n\n//     collectUtxos(address, utxos) {\n//         if (equalsBytes(this.#address.bytes, address.bytes)) {\n//             utxos = utxos.slice();\n\n//             utxos.push(\n//                 makeTxInput(\n//                     makeTxOutputId(this.id(), 0),\n//                     makeTxOutput(\n//                         this.#address,\n//                         makeValue(this.#lovelace, this.#assets)\n//                     )\n//                 )\n//             );\n\n//             return utxos;\n//         } else {\n//             return utxos;\n//         }\n//     }\n\n//     getUtxo(id: TxOutputId) {\n//         if (!(this.id().isEqual(id.txId) && id.index == 0)) {\n//             return null;\n//         }\n\n//         return makeTxInput(\n//             makeTxOutputId(this.id(), 0),\n//             makeTxOutput(this.#address, makeValue(this.#lovelace, this.#assets))\n//         );\n//     }\n\n//     dump() {\n//         console.log(\"GENESIS TX\");\n//         console.log(\n//             `id: ${this.#id.toString()},\\naddress: ${this.#address.toString() // same as .toBech32()\n//                 },\\nlovelace: ${this.#lovelace.toString()},\\nassets: ${JSON.stringify(\n//                 this.#assets.dump(),\n//                 undefined,\n//                 \"    \"\n//             )}`\n//         );\n//     }\n// }\n\n// class RegularTx implements EmulatorRegularTx {\n//     #tx: Tx;\n\n//     kind = \"Regular\" as const\n//     constructor(tx: Tx) {\n//         this.#tx = tx;\n//     }\n\n//     #txId: TxId | null = null;\n//     id() {\n//         if (this.#txId) return this.#txId;\n//         return (this.#txId = this.#tx.id());\n//     }\n\n//     consumes(utxo) {\n//         const txInputs = this.#tx.body.inputs;\n\n//         return txInputs.some((txInput) => txInput.isEqual(utxo));\n//     }\n\n//     collectUtxos(address, utxos) {\n//         utxos = utxos.filter((utxo) => !this.consumes(utxo));\n\n//         const txOutputs = this.#tx.body.outputs;\n//         const txId = this.id();\n//         txOutputs.forEach((txOutput, utxoId) => {\n//             if (equalsBytes(txOutput.address.bytes, address.bytes)) {\n//                 utxos.push(makeTxInput(makeTxOutputId(txId, utxoId), txOutput));\n//             }\n//         });\n\n//         return utxos;\n//     }\n\n//     getUtxo(id: TxOutputId) : TxInput | undefined{\n//         if (!id.txId.isEqual(this.id())) {\n//             return undefined;\n//         }\n\n//         /**\n//          * @type {null | TxInput}\n//          */\n//         let utxo: TxInput | undefined;\n\n//         this.#tx.body.outputs.forEach((output, i) => {\n//             if (i == id.index) {\n//                 utxo = makeTxInput(id, output);\n//             }\n//         });\n\n//         return utxo;\n//     }\n\n//     dump() {\n//         console.log(\"REGULAR TX\");\n//         console.log(JSON.stringify(this.#tx.dump(), undefined, \"  \"));\n//     }\n// }\n\n/**\n * This wallet only has a single private/public key, which isn't rotated.\n * Staking is not yet supported.\n * @public\n */\nexport class SimpleWallet_stellar implements Wallet {\n    networkCtx: NetworkContext;\n    spendingPrivateKey: Bip32PrivateKey;\n    spendingPubKey: PubKey;\n\n    stakingPrivateKey: Bip32PrivateKey | undefined;\n    stakingPubKey: PubKey | undefined;\n\n    get cardanoClient() {\n        return this.networkCtx.network;\n    }\n\n    static fromPhrase(\n        phrase: string[],\n        networkCtx: NetworkContext,\n        dict = BIP39_DICT_EN\n    ): SimpleWallet_stellar {\n        return SimpleWallet_stellar.fromRootPrivateKey(\n            restoreRootPrivateKey(phrase, dict),\n            networkCtx\n        );\n    }\n    static fromRootPrivateKey(\n        key: RootPrivateKey,\n        networkCtx: NetworkContext\n    ): SimpleWallet_stellar {\n        return new SimpleWallet_stellar(\n            networkCtx,\n            key.deriveSpendingKey(),\n            key.deriveStakingKey()\n        );\n    }\n\n    constructor(\n        networkCtx: NetworkContext,\n        spendingPrivateKey: Bip32PrivateKey,\n        stakingPrivateKey: Bip32PrivateKey | undefined = undefined\n    ) {\n        this.networkCtx = networkCtx;\n        this.spendingPrivateKey = spendingPrivateKey;\n        this.spendingPubKey = this.spendingPrivateKey.derivePubKey();\n\n        this.stakingPrivateKey = stakingPrivateKey;\n        this.stakingPubKey = this.stakingPrivateKey?.derivePubKey();\n\n        // TODO: staking credentials\n    }\n\n    get privateKey(): Bip32PrivateKey {\n        return this.spendingPrivateKey;\n    }\n\n    get pubKey(): PubKey {\n        return this.spendingPubKey;\n    }\n\n    get spendingPubKeyHash(): PubKeyHash {\n        return this.spendingPubKey.hash();\n    }\n\n    get stakingPubKeyHash() {\n        return this.stakingPubKey?.hash();\n    }\n\n    get address(): ShelleyAddress<PubKeyHash> {\n        return makeAddress(\n            this.cardanoClient.isMainnet(),\n            this.spendingPubKeyHash,\n            this.stakingPubKey?.hash()\n        );\n    }\n\n    get stakingAddress() {\n        if (this.stakingPubKey) {\n            return makeStakingAddress(\n                this.cardanoClient.isMainnet(),\n                this.stakingPubKey.hash()\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    get stakingAddresses(): Promise<StakingAddress[]> {\n        return new Promise((resolve, _) => {\n            const stakingAddress = this.stakingAddress;\n\n            resolve(stakingAddress ? [stakingAddress] : []);\n        });\n    }\n\n    async isMainnet(): Promise<boolean> {\n        return this.networkCtx.network.isMainnet();\n    }\n\n    /**\n     * Assumed wallet was initiated with at least 1 UTxO at the pubkeyhash address.\n     */\n    get usedAddresses(): Promise<ShelleyAddress<PubKeyHash>[]> {\n        return new Promise((resolve, _) => {\n            resolve([this.address]);\n        });\n    }\n\n    get unusedAddresses(): Promise<ShelleyAddress<PubKeyHash>[]> {\n        return new Promise((resolve, _) => {\n            resolve([]);\n        });\n    }\n\n    get utxos(): Promise<TxInput<PubKeyHash>[]> {\n        return new Promise((resolve, _) => {\n            resolve(this.cardanoClient.getUtxos(this.address) as any);\n        });\n    }\n\n    get collateral(): Promise<TxInput<PubKeyHash>[]> {\n        return new Promise((resolve, _) => {\n            resolve([]);\n        });\n    }\n    async signData(\n        addr: ShelleyAddress<PubKeyHash>, \n        data: BytesLike\n    ): Promise<{signature: Cip30CoseSign1, key: PubKey}> {\n        const spendingCredential = addr.spendingCredential\n        const stakingCredential = addr.stakingCredential\n\n        if (stakingCredential) {\n            if (!addr.isEqual(this.address)) {\n                throw new Error(\n                    \"givend address doesn't correspond to SimpleWallet's address\"\n                )\n            }\n\n            const pubKey = expectDefined(this.stakingPubKey)\n            const privateKey = expectDefined(this.stakingPrivateKey)\n\n            return {\n                signature: signCip30CoseData(addr, privateKey, data),\n                key: pubKey\n            }\n        } else {\n            if (!spendingCredential.isEqual(this.address.spendingCredential)) {\n                throw new Error(\n                    \"given address.spendingCredential doesn't correspond to SimpleWallet's spending credential\"\n                )\n            }\n\n            return {\n                signature: signCip30CoseData(\n                    addr,\n                    this.spendingPrivateKey,\n                    data\n                ),\n                key: this.spendingPubKey\n            }\n        }\n    }\n\n    /**\n     * Simply assumed the tx needs to by signed by this wallet without checking.\n     */\n    async signTx(tx: Tx): Promise<Signature[]> {\n        return [this.spendingPrivateKey.sign(tx.body.hash())];\n    }\n\n    async submitTx(tx: Tx): Promise<TxId> {\n        return await this.cardanoClient.submitTx(tx);\n    }\n}\n\n/**\n * Captures details from emulated network, to be used for quickly restoring a network state.\n * @public\n */\nexport type NetworkSnapshot = {\n    seed: number;\n    netNumber: number;\n    name: string;\n    slot: number;\n    genesis: EmulatorGenesisTx[];\n    blocks: EmulatorTx[][];\n    allUtxos: Record<string, TxInput>;\n    consumedUtxos: Set<string>;\n    addressUtxos: Record<string, TxInput[]>;\n};\n\nlet i = 1;\n/**\n * A simple emulated Network.\n * This can be used to do integration tests of whole dApps.\n * Staking is not yet supported.\n * @public\n */\nexport class StellarNetworkEmulator implements Emulator {\n    declare currentSlot: number;\n    #seed: number;\n    #random: NumberGenerator;\n    genesis: EmulatorGenesisTx[];\n    mempool: EmulatorTx[];\n    blocks: EmulatorTx[][];\n\n    /**\n     * Cached map of all UTxOs ever created\n     * @internal\n     */\n    _allUtxos: Record<string, TxInput>;\n\n    /**\n     * Cached set of all UTxOs ever consumed\n     * @internal\n     */\n    _consumedUtxos: Set<string>;\n\n    /**\n     * Cached map of UTxOs at addresses\n     * @internal\n     */\n    _addressUtxos: Record<string, TxInput[]>;\n\n    id: number;\n    params: NetworkParams;\n    /**\n     * Instantiates a NetworkEmulator at slot 0.\n     * An optional seed number can be specified, from which all EMULATED RANDOMNESS is derived.\n     */\n    constructor(\n        seed = 0,\n        { params }: { params: NetworkParams } = {\n            params: DEFAULT_NETWORK_PARAMS(),\n        }\n    ) {\n        this.id = i++;\n        this.params = params || DEFAULT_NETWORK_PARAMS();\n        this.#seed = seed;\n        this.currentSlot = 0;\n        this.#random = this.mulberry32.bind(this);\n        this.genesis = [];\n        this.mempool = [];\n        this.blocks = [];\n\n        this._allUtxos = {};\n        this._consumedUtxos = new Set();\n        this._addressUtxos = {};\n\n        this.initHelper();\n    }\n    isMainnet() {\n        return false;\n    }\n    /**\n     * Each slot is assumed to be 1000 milliseconds\n     *\n     * returns milliseconds since start of emulation\n     */\n    get now(): number {\n        return SECOND * this.currentSlot;\n    }\n\n    get parameters(): Promise<NetworkParams> {\n        return new Promise((resolve, _) => resolve(this.parametersSync));\n    }\n\n    get parametersSync() {\n        return {\n            ...this.params,\n            refTipSlot: this.currentSlot,\n            refTipTime: this.now,\n        };\n    }\n\n    /**\n     * retains continuity for the seed and the RNG through one or more snapshots.\n     * @internal\n     */\n    mulberry32 = () => {\n        //!!mutates vvvvvvvvvv this.#seed\n        let t = (this.#seed += 0x6d2b79f5);\n\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    };\n\n    netPHelper!: NetworkParamsHelper;\n    initHelper() {\n        this.netPHelper = makeNetworkParamsHelper(this.parametersSync);\n        return this.netPHelper;\n    }\n\n    /**\n     * Ignores the genesis txs\n     */\n    get txIds(): TxId[] {\n        const res: TxId[] = [];\n\n        // TODO: the current approach is very slow, use a snapshot\n        for (let block of this.blocks) {\n            for (let tx of block) {\n                if (tx.kind == \"Regular\") {\n                    res.push(tx.id());\n                }\n            }\n        }\n\n        return res;\n    }\n\n\n    snapshot(snapName: string): NetworkSnapshot {\n        if (this.mempool.length > 0) {\n            throw new Error(`can't snapshot with pending txns`);\n        }\n        console.log(\n            \"            📸 📸 📸   ████  📸 📸 📸  #\" + this.id,\n            ` - snapshot '${snapName}' at slot `,\n            this.currentSlot.toString(),\n            \"height \",\n            this.blocks.length\n        );\n\n        return {\n            name: snapName,\n            seed: this.#seed,\n            netNumber: this.id,\n            slot: this.currentSlot,\n            genesis: [...this.genesis],\n            blocks: [...this.blocks],\n            allUtxos: { ...this._allUtxos },\n            consumedUtxos: new Set(this._consumedUtxos),\n            addressUtxos: Object.fromEntries(\n                Object.entries(this._addressUtxos).map(([addr, utxoList]) => [\n                    addr,\n                    [...utxoList],\n                ])\n            ),\n        };\n    }\n\n\n    fromSnapshot = \"\";\n    loadSnapshot(snapshot: NetworkSnapshot) {\n        this.#seed = snapshot.seed;\n        this.currentSlot = snapshot.slot;\n        this.genesis = [...snapshot.genesis];\n        this.blocks = [...snapshot.blocks];\n        this.fromSnapshot = snapshot.name;\n\n        this._allUtxos = { ...snapshot.allUtxos };\n        this._consumedUtxos = new Set(snapshot.consumedUtxos);\n        // this._addressUtxos = { ...snapshot.addressUtxos };\n        this._addressUtxos = Object.fromEntries(\n            Object.entries(snapshot.addressUtxos).map(([addr, utxoList]) => [\n                addr,\n                [...utxoList],\n            ])\n        );\n\n        this.initHelper();\n        console.log(\n            \"            🌺🌺🌺 ████████  #\" + this.id,\n            ` - restored snapshot '${snapshot.name}' from #${snapshot.netNumber} at slot `,\n            this.currentSlot.toString(),\n            \"height \",\n            this.blocks.length\n        );\n    }\n\n    // /**\n    //  * Creates a new `NetworkParams` instance that has access to current slot\n    //  * (so that the `Tx` validity range can be set automatically during `Tx.finalize()`).\n    //  */\n    // initNetworkParams(networkParams): NetworkParams {\n    //     const raw = Object.assign({}, networkParams.raw);\n\n    //     // raw.latestTip = {\n    //     //     epoch: 0,\n    //     //     hash: \"\",\n    //     //     slot: 0,\n    //     //     time: 0,\n    //     // };\n\n    //     return (this.#netParams = new NetworkParams(raw, () => {\n    //         return this.currentSlot;\n    //     }));\n    // }\n\n    /**\n     * Creates a new SimpleWallet and populates it with a given lovelace quantity and assets.\n     * Special genesis transactions are added to the emulated chain in order to create these assets.\n     * @deprecated - use TestHelper.createWallet instead, enabling wallets to be transported to\n     *     different networks (e.g. ones that have loaded snapshots from the original network).\n     */\n    createWallet(lovelace = 0n, assets = makeAssets([])): SimpleWallet_stellar {\n        throw new Error(\"use TestHelper.createWallet instead\");\n    }\n\n    /**\n     * Creates a UTxO using a GenesisTx.  The txn doesn't need to balance or be signed.  It's magic.\n     * @param wallet - the utxo is created at this wallet's address\n     * @param lovelace - the lovelace amount to create\n     * @param assets - other assets to include in the utxo\n     */\n    createUtxo(\n        wallet: SimpleWallet,\n        lovelace: bigint,\n        assets: Assets = makeAssets([])\n    ): TxOutputId {\n        if (lovelace != 0n || !assets.isZero()) {\n            const tx = makeEmulatorGenesisTx(\n                this.genesis.length,\n                wallet.address,\n                lovelace,\n                assets\n            );\n\n            this.genesis.push(tx);\n            this.mempool.push(tx);\n            return makeTxOutputId(tx.id(), 0);\n        } else {\n            throw new Error(\"zero-value utxos not supported\");\n        }\n    }\n\n    // #netParams!: NetworkParams;\n    // async getParameters() {\n    //     if (this.#netParams) return this.#netParams;\n\n    //     return this.initNetworkParams(\n    //         new NetworkParams(rawNetworkEmulatorParams)\n    //     );\n    // }\n\n    warnMempool() {\n        if (this.mempool.length > 0) {\n            console.error(\n                \"Warning: mempool not empty (hint: use 'network.tick()')\"\n            );\n        }\n    }\n\n    /**\n     * Throws an error if the UTxO isn't found\n     */\n    async getUtxo(id: TxOutputId): Promise<TxInput> {\n        this.warnMempool();\n\n        const utxo = this._allUtxos[id.toString()];\n\n        if (!utxo) {\n            throw new Error(`utxo with id ${id.toString()} doesn't exist`);\n        } else {\n            return utxo;\n        }\n    }\n\n    /*\n     * @param {TxOutputId} id\n     * @returns {Promise<TxInput>}\n     */\n    async hasUtxo(id) {\n        try {\n            return !!(await this.getUtxo(id));\n        } catch (e) {\n            return false;\n        }\n    }\n\n    async getUtxos(address: Address): Promise<TxInput[]> {\n        this.warnMempool();\n\n        return this._addressUtxos[address.toString()] ?? [];\n    }\n\n    isSubmissionExpiryError(e: Error) { \n        if (e.message.match(/slot out of range/)) return true\n        return false \n    } \n\n    isUnknownUtxoError(e: Error) { \n        if (e.message.match(/previously consumed/)) return true\n        if (e.message.match(/don't exist/)) return true\n        return false\n    }\n\n    dump() {\n        console.log(`${this.blocks.length} BLOCKS`);\n        this.blocks.forEach((block, i) => {\n            console.log(`${block.length} TXs in BLOCK ${i}`);\n            for (let tx of block) {\n                tx.dump();\n            }\n        });\n    }\n\n    isConsumed(utxo) {\n        return (\n            this._consumedUtxos.has(utxo.id.toString()) ||\n            this.mempool.some((tx) => {\n                return tx.consumes(utxo);\n            })\n        );\n    }\n\n    async submitTx(tx: Tx) {\n        this.warnMempool();\n\n        if (!tx.isValidSlot(BigInt(this.currentSlot))) {\n            debugger\n            throw new Error(\n                `tx invalid (slot out of range, ${\n                    this.currentSlot\n                } not in ${tx.body\n                    .getValidityTimeRange(this.parametersSync)\n                    .toString()})`\n            );\n        }\n\n        // make sure that each input exists\n        if (\n            !tx.body.inputs.every(\n                (input) => input.id.toString() in this._allUtxos\n            )\n        ) {\n            throw new Error(\"some inputs don't exist\");\n        }\n\n        // make sure that each ref input exists\n        if (\n            !tx.body.refInputs.every(\n                (input) => input.id.toString() in this._allUtxos\n            )\n        ) {\n            throw new Error(\"some ref inputs don't exist\");\n        }\n\n        // make sure that none of the inputs have been consumed before\n        for (const input of tx.body.inputs) {\n            if (this.isConsumed(input)) {\n                throw new Error(\n                    `## ${this.id}: input previously consumed:` + dumpAny(input)\n                );\n            }\n        }\n\n        this.mempool.push(makeEmulatorRegularTx(tx));\n        console.log(\n            `[EmuNet #${this.id}] +mempool txn = ${this.mempool.length}`\n        );\n        return tx.id();\n    }\n\n    /**\n     * Mint a block with the current mempool, and advance the slot by a number of slots.\n     */\n    tick(nSlots: IntLike) {\n        const n = BigInt(nSlots);\n        if (n < 1) throw new Error(`nSlots must be > 0, got ${n.toString()}`);\n\n        const count = this.mempool.length;\n        const height = this.blocks.length;\n\n        this.currentSlot += Number(n);\n        const time = new Date(\n            Number(this.netPHelper.slotToTime(this.currentSlot))\n        );\n\n        if (this.mempool.length > 0) {\n            const txIds = this.mempool.map((tx) => tx.id().toString().substring(0, 8))\n            this.pushBlock(this.mempool);\n\n            this.mempool = [];\n\n            console.log(magenta(`█  #${this.id} @ht=${height}`));\n            console.log(\n                magenta(`█${\"▒\".repeat(\n                    count\n                )} ${count} txns (${txIds.join(\",\")}) -> slot ${this.currentSlot.toString()} = ${formatDate(\n                    time\n                )}`)\n            );\n        } else {\n            console.log(\n                magenta(`tick -> slot ${this.currentSlot.toString()} = ${formatDate(\n                    time\n                )} (no txns)`)\n            );\n        }\n    }\n\n\n    /**\n     * @internal\n     */\n    pushBlock(txs: EmulatorTx[]) {\n        this.blocks.push(txs);\n\n        // add all new utxos\n        txs.forEach((tx) => {\n            tx.newUtxos().forEach((utxo) => {\n                const key = utxo.id.toString();\n                this._allUtxos[key] = utxo;\n\n                const addr = utxo.address.toString();\n\n                if (addr in this._addressUtxos) {\n                    this._addressUtxos[addr].push(utxo);\n                } else {\n                    this._addressUtxos[addr] = [utxo];\n                }\n            });\n\n            tx.consumedUtxos().forEach((utxo) => {\n                this._consumedUtxos.add(utxo.id.toString());\n\n                const addr = utxo.address.toString();\n\n                if (addr in this._addressUtxos) {\n                    this._addressUtxos[addr] = this._addressUtxos[addr].filter(\n                        (inner) => !inner.isEqual(utxo)\n                    );\n                }\n            });\n        });\n    }\n}\n\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Months are 0-indexed\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const hours = String(date.getHours()).padStart(2, \"0\");\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\n    const seconds = String(date.getSeconds()).padStart(2, \"0\");\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n","import {\n    DEFAULT_NETWORK_PARAMS,\n    type Address,\n    type NetworkParams,\n    type NetworkParamsHelper,\n    type Tx,\n    type TxId,\n    makeAssets,\n    makeValue,\n    type ShelleyAddress,\n    type PubKeyHash,\n    type TxBody,\n} from \"@helios-lang/ledger\";\nimport { generateBytes, mulberry32 } from \"@helios-lang/crypto\";\n\nimport { SimpleWallet_stellar as emulatedWallet } from \"./StellarNetworkEmulator.js\";\n\nimport {\n    StellarContract,\n    findInputsInWallets,\n    dumpAny,\n    lovelaceToAda,\n    txAsString,\n    utxosAsString,\n    UtxoHelper,\n    TxBatcher,\n    GenericSigner,\n    environment,\n} from \"@donecollectively/stellar-contracts\";\nimport type {\n    stellarSubclass,\n    ConfigFor,\n    StellarSetupDetails,\n    ActorContext,\n    NetworkContext,\n    SetupInfo,\n    StellarTxnContext,\n    SubmitOptions,\n} from \"@donecollectively/stellar-contracts\";\n\nimport { ADA } from \"./types.js\";\nimport type {\n    TestHelperState,\n    actorMap,\n    canHaveRandomSeed,\n    canSkipSetup,\n    enhancedNetworkParams,\n} from \"./types.js\";\nimport {\n    SimpleWallet_stellar,\n    StellarNetworkEmulator,\n    type NetworkSnapshot,\n} from \"./StellarNetworkEmulator.js\";\nimport {\n    makeRootPrivateKey,\n    makeTxBuilder,\n    makeTxChainBuilder,\n    type Wallet,\n} from \"@helios-lang/tx-utils\";\n\n/**\n * @public\n */\nexport const expectTxnError = {\n    expectError: true as const,\n} as Partial<SubmitOptions>;\n\n/**\n * @public\n */\nexport type TestHelperSubmitOptions = SubmitOptions & {\n    futureDate?: Date;\n};\n\n/**\n * Base class for test-helpers on generic Stellar contracts\n * @remarks\n *\n * NOTE: DefaultCapoTestHelper is likely to be a better fit for typical testing needs and typical contract-development scenarios.\n * Use this class for specific unit-testing needs not sufficiently served by integration-testing on a Capo.\n * @public\n **/\nexport abstract class StellarTestHelper<SC extends StellarContract<any>> {\n    state: Record<string, any>;\n    abstract get stellarClass(): stellarSubclass<SC>;\n    config?: ConfigFor<SC> & canHaveRandomSeed;\n    defaultActor?: string;\n    strella!: SC;\n    actors: actorMap;\n    optimize = false;\n    netPHelper: NetworkParamsHelper;\n    networkCtx: NetworkContext<StellarNetworkEmulator>;\n    protected _actorName!: string;\n\n    /**\n     * @public\n     */\n    get actorName() {\n        return this._actorName;\n    }\n\n    /**\n     * @public\n     */\n    get network() {\n        return this.networkCtx.network;\n    }\n\n    /**\n     * Gets the current actor wallet\n     *\n     * @public\n     **/\n    get wallet(): emulatedWallet {\n        const wallet: emulatedWallet | undefined = this.actorContext.wallet;\n        if (!wallet) {\n            throw new Error(`no current actor; use setActor(actorName) first`);\n        }\n        return wallet as emulatedWallet;\n    }\n\n    /**\n     * @public\n     */\n    actorContext: ActorContext<emulatedWallet> = {\n        wallet: undefined,\n    };\n\n    /**\n     * @public\n     */\n    async setActor(actorName: string) {\n        const thisActor = this.actors[actorName];\n        if (!thisActor)\n            throw new Error(\n                `setCurrentActor: network #${this.network.id}: invalid actor name '${actorName}'\\n   ... try one of: \\n  - ` +\n                    Object.keys(this.actors).join(\",\\n  - \")\n            );\n        if (this._actorName) {\n            if (actorName == this._actorName) {\n                if (this.actorContext.wallet !== thisActor) {\n                    throw new Error(\n                        `actor / wallet mismatch: ${this._actorName} ${dumpAny(\n                            this.actorContext.wallet?.address\n                        )} vs ${actorName} ${dumpAny(thisActor.address)}`\n                    );\n                }\n                // quiet idempotent call.\n                return;\n            }\n            console.log(\n                `\\n🎭 -> 🎭 changing actor from 🎭 ${\n                    this._actorName\n                } to  🎭 ${actorName} ${dumpAny(thisActor.address)}`\n            );\n        } else {\n            console.log(\n                `\\n🎭🎭 initial actor ${actorName} ${dumpAny(\n                    thisActor.address\n                )}`\n            );\n        }\n        this._actorName = actorName;\n        this.actorContext.wallet = thisActor;\n\n        // if (this.strella) {\n        //     this.strella = await this.initStellarClass(\n        //         this.state.parsedConfig || this.config\n        //     );\n        // }\n    }\n\n    address?: Address;\n\n    setupPending?: Promise<any>;\n    /**\n     * @public\n     */\n    async setupActors() {\n        console.warn(\n            `using 'hiro' as default actor because ${this.constructor.name} doesn't define setupActors()`\n        );\n        this.addActor(\"hiro\", 1863n * ADA);\n    }\n    /**\n     * @public\n     */\n    setDefaultActor() {\n        return this.setActor(\"hiro\");\n    }\n\n    helperState?: TestHelperState<SC>;\n    constructor(\n        config?: ConfigFor<SC> & canHaveRandomSeed & canSkipSetup,\n        helperState?: TestHelperState<SC>\n    ) {\n        this.state = {};\n        if (!helperState) {\n            console.warn(\n                // warning emoji: \"⚠️\"\n                // info emoji: \"ℹ️\"\n                `⚠️ ⚠️ ⚠️ Note: this test helper doesn't have a helperState, so it won't be able to use test-chain snapshots\nℹ️ ℹ️ ℹ️ ... to add helper state, follow this pattern:\n\n    // in your test helper:\n\n    @CapoTestHelper.hasNamedSnapshot(\"yourSnapshot\", \"tina\")\n    snapTo‹YourSnapshot›() {\n        // never called\n    }\n    async ‹yourSnapshot›() {\n        this.setActor(\"tina\");\n\n        // ... your good sequence of transaction(s) here\n        const tcx = this.capo.mkTxn‹...›(...)\n        return this.submitTxnWithBlock(tcx);\n    }\n\n    // in your test setup:\n\n    type localTC = StellarTestContext<YourCapo>;\n    let helperState: TestHelperState<YourCapo> = {\n        snapshots: {},\n    } as any;\n\n    beforeEach<localTC>(async (context) => {\n        await addTestContext(context,\n            YourCapoTestHelper,\n            undefined,\n            helperState\n        )\n    }                \n\n    // in your tests:\n    \n    describe(\"your thing\", async () => {\n        it(\"your test\", async (context: localTC) => {\n            // prettier-ignore\n            const {h, h:{network, actors, delay, state} } = context;\n            await h.reusableBootstrap();\n\n            await h.snapTo‹yourSnapshot›()\n        });\n        it(\"your other test\", async (context: localTC) => { \n            // prettier-ignore\n            const {h, h:{network, actors, delay, state} } = context;\n            // this one will use the snapshot generated earlier\n            await h.snapTo‹yourSnapshot›()\n        });\n    })\n\n... happy (and snappy) testing!`\n            );\n        }\n        this.helperState = helperState;\n        const cfg = config || {};\n        if (Object.keys(cfg).length) {\n            console.log(\n                \"XXXXXXXXXXXXXXXXXXXXXXXXXX test helper with config\",\n                config\n            );\n\n            this.config = config;\n        }\n\n        const t = this.mkNetwork(this.fixupParams(DEFAULT_NETWORK_PARAMS()));\n        const theNetwork: StellarNetworkEmulator = t[0];\n        const netParamsHelper: NetworkParamsHelper = t[1];\n\n        this.netPHelper = netParamsHelper;\n        this.networkCtx = {\n            network: theNetwork,\n        };\n\n        this.randomSeed = config?.randomSeed || 42;\n        this.actors = {};\n        const now = new Date();\n        this.waitUntil(now);\n\n        console.log(\" + StellarTestHelper\");\n        //xx@ts-expect-error - can serve no-params case or params case\n        // this.setupPending = this.initialize();\n    }\n\n    /**\n     * @public\n     */\n    fixupParams(preProdParams: NetworkParams): NetworkParams {\n        //@ts-expect-error on our synthetic property\n        if (preProdParams.isFixedUp) return preProdParams;\n\n        const origMaxTxSize = preProdParams.maxTxSize;\n        //@ts-expect-error on our synthetic property\n        preProdParams.origMaxTxSize = origMaxTxSize;\n        const maxTxSize = Math.floor(origMaxTxSize * 4);\n        console.log(\n            \"test env: 🔧🔧🔧 fixup max tx size\",\n            origMaxTxSize,\n            \" -> 🔧\",\n            maxTxSize\n        );\n        preProdParams.maxTxSize = maxTxSize;\n\n        const origMaxMem = preProdParams.maxTxExMem;\n        //@ts-expect-error on our synthetic property\n        preProdParams.origMaxTxExMem = origMaxMem;\n\n        const maxMem = Math.floor(origMaxMem * 8);\n        console.log(\n            \"test env: 🔧🔧🔧 fixup max memory\",\n            origMaxMem,\n            \" -> 🔧\",\n            maxMem\n        );\n        preProdParams.maxTxExMem = maxMem;\n\n        const origMaxCpu = preProdParams.maxTxExCpu;\n        //@ts-expect-error on our synthetic property\n        preProdParams.origMaxTxExCpu = origMaxCpu;\n\n        const maxCpu = Math.floor(origMaxCpu * 3.1);\n        console.log(\n            \"test env: 🔧🔧🔧 fixup max cpu\",\n            origMaxCpu,\n            \" -> 🔧\",\n            maxCpu\n        );\n        preProdParams.maxTxExCpu = maxCpu;\n\n        //@ts-expect-error on our synthetic property\n        preProdParams.isFixedUp = true;\n        return preProdParams;\n    }\n\n    /**\n     * Submits a transaction and advances the network block\n     * @public\n     * @param TCX - The type of transaction context state, must extend anyState\n     */\n    async submitTxnWithBlock<TCX extends StellarTxnContext>(\n        tcx: TCX | Promise<TCX>,\n        options: TestHelperSubmitOptions = {}\n    ): Promise<TCX> {\n        const t = await tcx;\n        await this.advanceNetworkTimeForTx(t, options.futureDate);\n\n        return t.buildAndQueueAll(options).then(() => {\n            this.network.tick(1);\n            return tcx;\n        });\n    }\n\n    /**\n     * @public\n     */\n    async advanceNetworkTimeForTx(tcx: StellarTxnContext, futureDate?: Date) {\n        // determines the validity range of the transaction\n\n        let txBody: TxBody | undefined = undefined\n        let validFrom=0, validTo=0;\n        let targetTime: number = futureDate?.getTime() || Date.now();\n        let targetSlot = this.netPHelper.timeToSlot(BigInt(targetTime));\n        const nph = this.netPHelper;\n\n        if (tcx.isFacade && !futureDate) {\n            console.log(\"not advancing network time for facade tx\")\n            return\n        } else if (!tcx.isFacade) {\n            //XX@ts-expect-error on internal prop\n            // if (!tcx.txb.validTo) {\n            //     debugger\n            //     // just to verify what it looks like\n            //     tcx.txb.validFromSlot(targetSlot)\n            //     tcx.txb.validToTime(Date.now())\n            //     debugger\n            // }\n\n            validFrom = ( () => {\n                //@ts-expect-error on internal prop\n                const {slot, timestamp} = tcx.txb.validFrom?.left || {}\n                if (slot) return slot\n                if (!timestamp) return undefined\n                return nph.timeToSlot(BigInt(timestamp))\n            })();\n            validTo = ( () => {\n                //@ts-expect-error on internal prop\n                const {slot, timestamp} = tcx.txb.validFrom?.left || {}\n                if (slot) return slot\n                if (!timestamp) return undefined\n                return nph.timeToSlot(BigInt(timestamp))\n            })();\n        }\n\n        const currentSlot = this.network.currentSlot;\n        const nowSlot = nph.timeToSlot(BigInt(Date.now()));\n        const slotDiff = targetSlot - currentSlot;\n\n        const validInPast = validTo && nowSlot > validTo;\n        const validInFuture = validFrom && nowSlot < validFrom;\n        tcx.logger.logPrint(\n            `\\n    ---- ⚗️ 🐞🐞 advanceNetworkTimeForTx: tx valid ${\n                validFrom || \"anytime\"\n            } -> ${validTo || \"anytime\"}`\n        );\n        function withPositiveSign(x: number | bigint) {\n            return x < 0 ? `${x}` : `+${x}`;\n        }\n        const currentToNowDiff = withPositiveSign(nowSlot - currentSlot);\n        const currentToTargetDiff = withPositiveSign(slotDiff);\n        let effectiveNetworkSlot = targetSlot;\n        function showEffectiveNetworkSlotTIme() {\n            tcx.logger.logPrint(\n                `\\n    ⚗️ 🐞ℹ️  with now=network slot ${effectiveNetworkSlot}: ${nph.slotToTime(\n                    effectiveNetworkSlot\n                )}\\n` +\n                    `           tx valid ${\n                        validFrom\n                            ? withPositiveSign(effectiveNetworkSlot - validFrom)\n                            : \"anytime\"\n                    } -> ${\n                        validTo\n                            ? withPositiveSign(effectiveNetworkSlot - validTo)\n                            : \"anytime\"\n                    } from now`\n            );\n        }\n    \n        if (validInPast || validInFuture) {\n            tcx.logger.logPrint(\n                \"\\n  ⚗️ 🐞ℹ️  advanceNetworkTimeForTx: \" + (tcx.txnName || \"\")\n            );\n            if (futureDate) {\n                debugger;\n                tcx.logger.logPrint(\n                    `\\n    ---- ⚗️ 🐞🐞 explicit futureDate ${futureDate.toISOString()} -> slot ${targetSlot}`\n                );\n            }\n    \n            tcx.logger.logPrint(\n                `\\n    ---- ⚗️ 🐞🐞 current slot ${currentSlot} ${currentToNowDiff} = now slot ${nowSlot} \\n` +\n                    `                    current ${currentToTargetDiff} = targetSlot ${targetSlot}`\n            );\n            if (futureDate) {\n                // \":info:ℹ️\"\n                // \":test: ⚗️\"\n                // \":debug: 🐞 \"\n                // info emoji with i in a blue square: \"ℹ️\"\n                tcx.logger.logPrint(\n                    `\\n    ---- ⚗️ 🐞ℹ️  txnTime ${\n                        validInPast\n                            ? \"already in the past\"\n                            : validInFuture\n                            ? \"not yet valid\"\n                            : \"‹??incontheevable??›\"\n                    }; advancing to explicit futureDate @now + ${\n                        targetSlot - nowSlot\n                    }s`\n                );\n            } else {\n                // test an old txn by constructing it with a date less than Date.now()\n                tcx.logger.logPrint(\n                    `\\n    -- ⚗️ 🐞 txnTime ${\n                        validInPast\n                            ? \"already in the past\"\n                            : validInFuture\n                            ? \"not yet valid\"\n                            : \"‹??incontheevable??›\"\n                    }; no futureDate specified; not interfering with network time`\n                );\n                effectiveNetworkSlot = nowSlot;\n                showEffectiveNetworkSlotTIme();\n                tcx.logger.flush();\n\n                return;\n            }\n        }\n\n        if (slotDiff < 0) {\n            effectiveNetworkSlot = nowSlot;\n            showEffectiveNetworkSlotTIme();\n            if (futureDate) {\n                tcx.logger.logPrint(\n                    `\\n    ------ ⚗️ 🐞🐞🐞🐞🐞🐞🐞🐞can't go back in time ${slotDiff}s (current slot ${this.network.currentSlot}, target ${targetSlot})`\n                );\n                throw new Error(\n                    `explicit futureDate ${futureDate} is in the past; can't go back ${slotDiff}s`\n                );\n            }\n            tcx.logger.logPrint(\n                `\\n   -- ⚗️ 🐞🐞🐞🐞⚗️  NOT ADVANCING: the network is already ahead of the current time by ${\n                    0 - slotDiff\n                }s ⚗️ 🐞🐞🐞🐞⚗️`\n            );\n            tcx.logger.flush();\n            return;\n        }\n        if (this.network.currentSlot < targetSlot) {\n            effectiveNetworkSlot = targetSlot;\n            tcx.logger.logPrint(\n                `\\n    ⚗️ 🐞ℹ️  advanceNetworkTimeForTx ${withPositiveSign(\n                    slotDiff\n                )} slots`\n            );\n            showEffectiveNetworkSlotTIme();\n            this.network.tick(slotDiff);\n        } else {\n            effectiveNetworkSlot = currentSlot;\n            showEffectiveNetworkSlotTIme();\n        }\n        tcx.logger.flush();\n    }\n\n    /**\n     * @public\n     */\n    async initialize({\n        randomSeed = 42,\n    }: { randomSeed?: number } = {}): Promise<SC> {\n        console.log(\"STINIT\");\n        debugger;\n\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate initialize() in test helper\"\n            );\n            return this.strella;\n        }\n        if (this.strella) {\n            console.warn(\n                \".... warning: new test helper setup with new seed....\"\n            );\n            this.rand = undefined;\n            this.randomSeed = randomSeed;\n            this.actors = {};\n        } else {\n            console.log(\n                \"???????????????????????? Test helper initializing without this.strella\"\n            );\n        }\n        console.log(\"STINIT2\");\n        await this.delay(1);\n        this._actorName = \"\"; //only to make typescript happy\n        if (!Object.keys(this.actors).length) {\n            const actorSetup = this.setupActors();\n            await actorSetup;\n            this.setDefaultActor();\n        }\n        console.log(\"STINIT3\");\n\n        return this.initStellarClass();\n    }\n\n    /**\n     * @public\n     */\n    async initStellarClass(config = this.config) {\n        const TargetClass = this.stellarClass;\n\n        const strella = await this.initStrella(TargetClass, config);\n\n        this.strella = strella;\n        this.address = strella.address;\n        return strella;\n    }\n\n    //!!! reconnect tests to tcx-based config-capture\n    // onInstanceCreated: async (config: ConfigFor<SC>) => {\n    //     this.config = config\n    //     return {\n    //         evidence: this,\n    //         id: \"empheral\",\n    //         scope: \"unit test\"\n    //     }\n    // }\n\n    setup!: SetupInfo\n    initSetup(setup: SetupInfo = undefined as any) {\n        setup = setup || {\n            actorContext: this.actorContext,\n            networkParams: this.networkParams,\n            uh: undefined as any,\n            isTest: true,\n            isMainnet: false,\n            optimize: environment.OPTIMIZE ? true : this.optimize,\n        } as any\n\n        const getNetwork = () => { return this.network };\n        const getActor = () => { return this.actorContext.wallet! };\n\n        Object.defineProperty(setup, \"network\", {\n            get: getNetwork,\n            configurable: true\n        });\n        setup.txBatcher = new TxBatcher({              \n            setup,\n            submitters:  {\n               get emulator() { return getNetwork() } \n            },\n            get signingStrategy() { return new GenericSigner( getActor()) }                \n        }),\n\n        setup.txBatcher.setup = setup;\n        setup.uh = new UtxoHelper(setup);\n\n        return this.setup = setup\n    }\n\n\n    /**\n     * @public\n     */\n    async initStrella(\n        TargetClass: stellarSubclass<SC>,\n        config?: ConfigFor<SC>\n    ) {\n        const envOptimize = environment.OPTIMIZE\n        // console.warn(`using env OPTIMIZE=${envOptimize}`)\n\n        const setup = this.initSetup()\n\n        let cfg: StellarSetupDetails<ConfigFor<SC>> = {\n            setup,\n            config: config!,\n        };\n\n        if (!config)\n            cfg = {\n                setup,\n                partialConfig: {},\n            };\n        if (setup.actorContext.wallet) {\n            console.log(\n                \"+strella init with actor addr\",\n                (setup.actorContext.wallet as any).address.toBech32()\n            );\n        } else {\n            debugger;\n            console.log(\"+strella init without actor\");\n        }\n        return TargetClass.createWith(cfg);\n    }\n\n    //! it has a seed for mkRandomBytes, which must be set by caller\n    randomSeed?: number;\n    //! it makes a rand() function based on the randomSeed after first call to mkRandomBytes\n    rand?: () => number;\n\n    /**\n     * @public\n     */\n    delay(ms) {\n        return new Promise((res) => setTimeout(res, ms));\n    }\n\n    /**\n     * Creates a new SimpleWallet and populates it with a given lovelace quantity and assets.\n     * Special genesis transactions are added to the emulated chain in order to create these assets.\n     * @public\n     */\n    createWallet(lovelace = 0n, assets = makeAssets([])): SimpleWallet_stellar {\n        const wallet = SimpleWallet_stellar.fromRootPrivateKey(\n            makeRootPrivateKey(generateBytes(this.network.mulberry32, 32)),\n            this.networkCtx\n        );\n\n        this.network.createUtxo(wallet, lovelace, assets);\n\n        return wallet;\n    }\n\n    /**\n     * @public\n     */\n    async mkSeedUtxo(seedIndex: bigint = 0n) {\n        const { wallet } = this;\n        const { network } = this;\n\n        const txb = makeTxBuilder({\n            isMainnet: network.isMainnet(),\n        });\n        const actorMoney = await wallet.utxos;\n        console.log(\n            `${this._actorName} has money: \\n` + utxosAsString(actorMoney)\n        );\n\n        txb.spendWithoutRedeemer(\n            await findInputsInWallets(\n                makeValue(30n * ADA),\n                { wallets: [wallet] },\n                network\n            )\n        );\n\n        txb.payUnsafe(wallet.address, makeValue(10n * ADA));\n        txb.payUnsafe(wallet.address, makeValue(10n * ADA));\n        let si = 2;\n        for (; si < seedIndex; si++) {\n            txb.payUnsafe(wallet.address, makeValue(10n * ADA));\n        }\n        const txId = await this.submitTx(\n            await txb.build({\n                changeAddress: wallet.address,\n                networkParams: this.networkParams,\n            }),\n            \"force\"\n        );\n\n        return txId;\n    }\n\n    /**\n     * @public\n     */\n    async submitTx(tx: Tx, force?: \"force\"): Promise<TxId> {\n        const sendChangeToCurrentActor = this.wallet?.address;\n        const isAlreadyInitialized = !!this.strella;\n        // try {\n        //     await tx.finalize(this.networkParams, sendChangeToCurrentActor);\n        // } catch (e: any) {\n        //     throw new Error(\n        //         e.message +\n        //             \"\\nin tx: \" +\n        //             txAsString(tx, this.networkParams) +\n        //             // \"\\nprofile: \" +\n        //             // tx.profileReport\n        //     );\n        // }\n        if (isAlreadyInitialized && !force) {\n            throw new Error(\n                `helper is already initialized; use the submitTx from the testing-context's 'strella' object instead`\n            );\n        }\n\n        console.log(\n            `Test helper ${force || \"\"} submitting tx${\n                (force && \"\") || \" prior to instantiateWithParams()\"\n            }:\\n` + txAsString(tx, this.networkParams)\n            // new Error(`at stack`).stack\n        );\n\n        try {\n            const txId = await this.network.submitTx(tx);\n            console.log(\n                \"test helper submitted direct txn:\" +\n                    txAsString(tx, this.networkParams)\n            );\n            this.network.tick(1);\n            // await this.delay(1000)\n            // debugger\n            // this.network.dump();\n            return txId;\n        } catch (e: any) {\n            console.error(\n                `submit failed: ${e.message}\\n  ... in tx ${txAsString(tx)}`\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * @public\n     */\n    mkRandomBytes(length: number): number[] {\n        if (!this.randomSeed)\n            throw new Error(\n                `test must set context.randomSeed for deterministic randomness in tests`\n            );\n        if (!this.rand) this.rand = mulberry32(this.randomSeed);\n\n        const bytes: number[] = [];\n        for (let i = 0; i < length; i++) {\n            bytes.push(Math.floor(this.rand() * 256));\n        }\n        return bytes;\n    }\n\n    /**\n     * creates a new Actor in the transaction context with initial funds, returning a Wallet object\n     * @remarks\n     *\n     * Given an actor name (\"marcie\") or role name (\"marketer\"), and a number\n     * of indicated lovelace, creates and returns a wallet having the indicated starting balance.\n     *\n     * By default, three additional, separate 5-ADA utxos are created, to ensure sufficient Collateral and\n     * small-change are existing, making typical transaction scenarios work easily.  If you want to include\n     * other utxo's instead you can supply their lovelace sizes.\n     *\n     * To suppress creation of additional utxos, use `0n` for arg3.\n     *\n     * You may wish to import {@link ADA} = 1_000_000n from the testing/ module, and\n     * multiply smaller integers by that constant.\n     *\n     * @param roleName - an actor name or role-name for this wallet\n     * @param walletBalance - initial wallet balance\n     * @param moreUtxos - additional utxos to include\n     *\n     * @example\n     *     this.addActor(\"cheapo\", 14n * ADA, 0n);  //  14 ADA and no additional utxos\n     *     this.addActor(\"flexible\", 14n * ADA);  //  14 ADA + default 15 ADA in 3 additional utxos\n     *     this.addActor(\"moneyBags\", 42_000_000n * ADA, 5n, 4n);  //  many ADA and two collaterals\n     *\n     *     //  3O ADA in 6 separate utxos:\n     *     this.addActor(\"smallChange\", 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA, 5n * ADA);\n     *\n     * @public\n     **/\n    addActor(\n        roleName: string,\n        walletBalance: bigint,\n        ...moreUtxos: bigint[]\n    ): Wallet {\n        if (this.actors[roleName])\n            throw new Error(`duplicate role name '${roleName}'`);\n        //! it instantiates a wallet with the indicated balance pre-set\n        // console.log(new Error(`add actor ${roleName}`).stack);\n        const a = this.createWallet(walletBalance);\n        const addr = a.address.toString();\n        console.log(\n            `+🎭 Actor: ${roleName}: ${addr.slice(0, 12)}…${addr.slice(\n                -4\n            )} ${lovelaceToAda(walletBalance)} (🔑#${(\n                a.address as ShelleyAddress\n            ).spendingCredential\n                ?.toHex()\n                .substring(0, 8)}…)`\n        );\n\n        //! it makes collateral for each actor, above and beyond the initial balance,\n        //  ... so that the full balance is spendable and the actor can immediately\n        //  ... engage in smart-contract interactions.\n        this.network.tick(2);\n        const five = 5n * ADA;\n        if (0 == moreUtxos.length) moreUtxos = [five, five, five];\n        for (const moreLovelace of moreUtxos) {\n            if (moreLovelace > 0n) {\n                this.network.createUtxo(a, moreLovelace);\n            }\n        }\n        this.network.tick(1);\n\n        this.actors[roleName] = a;\n        return a;\n    }\n\n    //todo use this for enabling prettier diagnostics with clear labels for\n    //  -- actor addresses -> names\n    //  -- script addresses -> names\n    addrRegistry: Record<string, string> = {};\n\n    /**\n     * @public\n     */\n    get networkParams(): NetworkParams {\n        return this.netPHelper.params;\n    }\n\n    /**\n     * @public\n     */\n    mkNetwork(\n        params: NetworkParams\n    ): [StellarNetworkEmulator, NetworkParamsHelper] {\n        const theNetwork = new StellarNetworkEmulator(undefined, { params });\n        const emuParams = theNetwork.initHelper();\n\n        // const wrappedNetwork = makeTxChainBuilder(theNetwork);\n        // debugger\n        //@xxxts-expect-error\n        // emuParams.timeToSlot = function (t) {\n        //     const seconds = BigInt(t / 1000n);\n        //     return seconds;\n        // };\n        // emuParams.slotToTimestamp = this.slotToTimestamp;\n\n        return [theNetwork, emuParams];\n    }\n\n    /**\n     * @public\n     */\n    slotToTime(s: bigint) {\n        return this.netPHelper.slotToTime(s);\n\n        const num = parseInt(BigInt.asIntN(52, s * 1000n).toString());\n        return new Date(num);\n    }\n\n    /**\n     * @public\n     */\n    currentSlot() {\n        return this.network.currentSlot;\n    }\n\n    /**\n     * @public\n     */\n    waitUntil(time: Date) {\n        const targetTimeMillis = BigInt(time.getTime());\n        // debugger\n        const targetSlot = this.netPHelper.timeToSlot(targetTimeMillis);\n        const c = this.currentSlot();\n\n        const slotsToWait = targetSlot - (c || 0);\n        if (slotsToWait < 1) {\n            throw new Error(`the indicated time is not in the future`);\n        }\n        // console.warn(`waiting ${slotsToWait} slots -> ${time}`);\n        this.network.tick(slotsToWait);\n        return slotsToWait;\n    }\n}\n","import { Capo, StellarTxnContext } from \"@donecollectively/stellar-contracts\";\nimport type {\n    hasBootstrappedCapoConfig,\n    hasUutContext,\n    MinimalCharterDataArgs,\n    anyState,\n    hasAddlTxns,\n    SubmitOptions,\n    ConfigFor,\n    CapoConfig,\n    CapoFeatureFlags,\n} from \"@donecollectively/stellar-contracts\";\n\nimport { StellarTestHelper } from \"./StellarTestHelper.js\";\nimport { canHaveRandomSeed, canSkipSetup, TestHelperState } from \"./types.js\";\nimport { MintingPolicyHash } from \"@helios-lang/ledger\";\n\nconst ACTORS_ALREADY_MOVED =\n    \"NONE! all actors were moved from a different network via snapshot\";\n\nexport const SNAP_INIT = \"initialized\";\nexport const SNAP_BOOTSTRAP = \"bootstrapped\";\n\n/**\n * Base class for test helpers for Capo contracts\n * @remarks\n *\n * You should probably use DefaultCapoTestHelper instead of this class.\n * @public\n **/\nexport abstract class CapoTestHelper<\n    SC extends Capo<any>\n> extends StellarTestHelper<SC> {\n    declare config?: canHaveRandomSeed & SC extends Capo<any, infer FF>\n        ? ConfigFor<SC> & CapoConfig<FF>\n        : never;\n    get capo() {\n        return this.strella;\n    }\n    featureFlags: CapoFeatureFlags | undefined = undefined;\n    constructor(\n        config?: SC extends Capo<any, infer FF>\n            ? ConfigFor<SC> & CapoConfig<FF>\n            : ConfigFor<SC>,\n        helperState?: TestHelperState<SC>\n    ) {\n        if (!config) {\n            super(config, helperState);\n        } else {\n            const { featureFlags, ...otherConfig } = config;\n            if (Object.keys(otherConfig).length) {\n                super(config as any, helperState);\n            } else {\n                super(undefined, helperState);\n            }\n            if (featureFlags) {\n                this.featureFlags = featureFlags;\n            }\n        }\n    }\n    async initialize(\n        { randomSeed = 42 }: { randomSeed?: number } = {},\n        args?: Partial<MinimalCharterDataArgs>\n    ): Promise<SC> {\n        // Note: This method diverges from the base class impl, due to type difficulties.\n        // Patches welcome.\n\n        if (this.strella && this.randomSeed == randomSeed) {\n            console.log(\n                \"       ----- skipped duplicate initialize() in test helper\"\n            );\n\n            return this.strella;\n        }\n        // console.log(\"A in capo test helper\")\n\n        if (this.strella) {\n            console.log(\n                `    -- 🌱🌱🌱 new test helper setup with new seed (was ${this.randomSeed}, now ${randomSeed})...\\n` +\n                    new Error(\"stack\")\n                        .stack!.split(\"\\n\")\n                        .slice(1)\n                        .filter(\n                            (line) =>\n                                !line.match(/node_modules/) &&\n                                !line.match(/node:internal/)\n                        )\n                        .join(\"\\n\")\n            );\n\n            //@ts-expect-error\n            this.strella = undefined;\n            this.actors = {};\n            this._actorName = \"\";\n        }\n        await this.delay(1);\n\n        this.randomSeed = randomSeed;\n\n        if (Object.keys(this.actors).length) {\n            console.log(\"Skipping actor setup - already done\");\n        } else {\n            console.log(\"  -- 🎭🎭🎭 actor setup...\");\n            const actorSetup = this.setupActors();\n            await actorSetup;\n            await this.setDefaultActor();\n        }\n\n        this.state.mintedCharterToken = undefined;\n        this.state.parsedConfig = undefined;\n\n        //! when there's not a preset config, it leaves the detailed setup to be done just-in-time\n        //   based on seedUtxo in mkTxnMintCharterToken\n        if (!this.config) {\n            console.log(\"  -- Capo not yet bootstrapped\");\n            const ts1 = Date.now();\n            const {featureFlags} = this;\n            if (featureFlags) {\n                this.strella = await this.initStrella(this.stellarClass, {featureFlags} as any);\n                //@ts-ignore\n                this.strella.featureFlags = this.featureFlags\n            } else {\n                this.strella = await this.initStrella(this.stellarClass);\n            }\n\n            const ts2 = Date.now();\n            console.log(\n                // stopwatch emoji: ⏱️\n                `  -- ⏱️ initialized Capo: ${ts2 - ts1}ms`\n            );\n            console.log(\"checking delegate scripts...\");\n            return this.checkDelegateScripts(args).then(() => {\n                const ts3 = Date.now();\n                console.log(`  -- ⏱️ checked delegate scripts: ${ts3 - ts2}ms`);\n                return this.strella;\n            });\n        }\n        // throw new Error(`unreachable pre-bootstrapped capo?`);\n\n        console.log(\"  -- Capo already bootstrapped\");\n        const strella = await this.initStrella(this.stellarClass, this.config);\n\n        this.strella = strella;\n        const { address, mintingPolicyHash: mph } = strella;\n\n        const { name } = strella.program;\n        console.log(\n            name,\n            address.toString().substring(0, 18) + \"…\",\n            \"vHash 📜 \" + strella.validatorHash.toHex().substring(0, 12) + \"…\",\n            \"mph 🏦 \" + mph?.toHex().substring(0, 12) + \"…\"\n        );\n        console.log(\"<- CAPO initialized()\");\n        return strella;\n    }\n\n    async checkDelegateScripts(\n        args: Partial<MinimalCharterDataArgs> = {}\n    ): Promise<void> {\n        throw new Error(\n            `doesn't fail, because it's implemented by DefaultCapoTestHelper`\n        );\n    }\n\n    get ready() {\n        return !!(\n            (this.strella.configIn && !this.strella.didDryRun.configIn) ||\n            this.state.parsedConfig\n        );\n    }\n\n    /**\n     * Creates a new transaction-context with the helper's current or default actor\n     * @public\n     **/\n    mkTcx<T extends anyState = anyState>(\n        txnName?: string\n    ): StellarTxnContext<T> {\n        const tcx = new StellarTxnContext(this.strella.setup);\n        if (txnName) return tcx.withName(txnName) as any;\n        return tcx as any;\n    }\n\n    loadSnapshot(snapName: string) {\n        const snap = this.helperState!.snapshots[snapName];\n        if (!snap) throw new Error(`no snapshot named ${snapName}`);\n\n        this.network.loadSnapshot(snap);\n    }\n\n    async reusableBootstrap(\n        snap = SNAP_BOOTSTRAP\n        // override = false\n    ) {\n        let capo;\n        const helperState = this.helperState!;\n        if (helperState.bootstrapped) {\n            // debugger\n            console.log(\"  ---  ⚗️🐞🐞 already bootstrapped\");\n            if (!helperState.previousHelper) {\n                debugger;\n                throw new Error(\n                    `already bootstrapped, but no previousHelper : ( `\n                );\n            }\n            capo = await this.restoreFrom(snap);\n        } else {\n            capo = await this.bootstrap();\n            helperState.bootstrappedStrella = capo;\n        }\n        const { previousHelper } = helperState;\n        if (!previousHelper) {\n            this.snapshot(SNAP_BOOTSTRAP);\n        } else {\n            console.log(\n                `changing helper from network ${previousHelper.network.id} to ${this.network.id}`\n            );\n        }\n        helperState.bootstrapped = true;\n        helperState.previousHelper = this;\n\n        return capo;\n    }\n\n    // a decorator for test-helper functions that generate named snapshots\n    static hasNamedSnapshot(snapshotName: string, actorName: string) {\n        return function (\n            target: any,\n            propertyKey: string,\n            descriptor: PropertyDescriptor\n        ) {\n            const originalMethod = descriptor.value;\n            descriptor.value = SnapWrap;\n\n            const [_, WithCapMethodName] =\n                propertyKey.match(/^snapTo(.*)/) || [];\n            if (!WithCapMethodName) {\n                throw new Error(\n                    `hasNamedSnapshot(): ${propertyKey}(): expected method name to start with 'snapTo'`\n                );\n            }\n            const methodName =\n                WithCapMethodName[0].toLowerCase() + WithCapMethodName.slice(1);\n            const generateSnapshotFunc = target[methodName];\n            if (!generateSnapshotFunc) {\n                throw new Error(\n                    `hasNamedSnapshot(): ${propertyKey}: expected method ${methodName} to exist`\n                );\n            }\n\n            console.log(\n                \"hasNamedSnapshot(): \",\n                propertyKey,\n                \" -> \",\n                methodName\n            );\n\n            async function SnapWrap(this: CapoTestHelper<any>, ...args: any[]) {\n                await this.reusableBootstrap();\n\n                return this.findOrCreateSnapshot(\n                    snapshotName,\n                    actorName,\n                    () => {\n                        return generateSnapshotFunc\n                            .apply(this, ...args)\n                            .then((result) => {\n                                if (this.actorName !== actorName) {\n                                    throw new Error(\n                                        `actorName mismatch during snapshot generation; was '${this.actorName}', expected '${actorName}'`\n                                    );\n                                }\n                                this.network.tick(1);\n                                return result;\n                            });\n                    }\n                );\n            }\n            return descriptor;\n        };\n    }\n\n    hasSnapshot(snapshotName: string) {\n        return !!this.helperState?.snapshots[snapshotName];\n    }\n\n    snapshot(snapshotName: string) {\n        if (!this.helperState) {\n            throw new Error(`can't snapshot without a helperState`);\n        }\n        if (this.hasSnapshot(snapshotName)) {\n            throw new Error(`snapshot ${snapshotName} already exists`);\n        }\n        this.helperState.snapshots[snapshotName] =\n            this.network.snapshot(snapshotName);\n    }\n\n    async findOrCreateSnapshot(\n        snapshotName: string,\n        actorName: string,\n        contentBuilder: () => Promise<StellarTxnContext<any>>\n    ): Promise<SC> {\n        if (this.helperState!.snapshots[snapshotName]) {\n            const capo = await this.restoreFrom(snapshotName);\n            await this.setActor(actorName);\n            return capo;\n        }\n        let result;\n        try {\n            result = await contentBuilder();\n            return this.strella;\n            // the correct actor name is expected from the underlying activity\n            // await this.setActor(actorName);\n            return result;\n        } catch (e) {\n            throw e;\n        } finally {\n            if (result) {\n                this.snapshot(snapshotName);\n            }\n        }\n    }\n\n    async restoreFrom(snapshotName: string): Promise<SC> {\n        const {\n            helperState,\n            helperState: {\n                snapshots,\n                previousHelper,\n                bootstrappedStrella,\n            } = {},\n        } = this;\n        if (!helperState)\n            throw new Error(\n                `can't restore from a previous helper without a helperState`\n            );\n        if (!bootstrappedStrella)\n            throw new Error(\n                `can't restore from a previous helper without a bootstrappedStrella`\n            );\n\n        if (!snapshots || !snapshots[snapshotName]) {\n            throw new Error(`no snapshot named ${snapshotName} in helperState`);\n        }\n        if (!previousHelper) {\n            throw new Error(`no previousHelper in helperState`);\n        }\n        const { parsedConfig } = previousHelper.state;\n\n        const {\n            networkCtx: oldNetworkEnvelope,\n            actorContext: oldActorContext,\n            setup: previousSetup,\n        } = previousHelper;\n        const { network: previousNetwork } = oldNetworkEnvelope;\n        const { network: newNet } = this.networkCtx;\n        this.initSetup(previousSetup);\n\n        // hacky load of the indicator of already having restored details from the prievous helper\n        const otherNet: number = previousHelper.actors[\n            ACTORS_ALREADY_MOVED\n        ] as unknown as number;\n        if (otherNet) {\n            if (otherNet !== newNet.id) {\n                throw new Error(\n                    `actors already moved to network #${otherNet}; can't move to #${newNet.id} now.`\n                );\n            }\n            console.log(\"  -- actors are already here\");\n        } else {\n            if (this === previousHelper) {\n                console.log(\n                    \"  -- helper already transferred; loading incremental snapshot\"\n                );\n            } else {\n                Object.assign(this.actors, previousHelper.actors);\n\n                // swaps out the previous helper's envelopes for network & actor\n                previousHelper.networkCtx = { network: previousNetwork };\n                previousHelper.actorContext = {\n                    wallet: \"previous network retired\" as any,\n                };\n\n                // uses the old envelope (that the Capo/etc classes used on the old network)\n                this.networkCtx = oldNetworkEnvelope;\n                this.actorContext = oldActorContext;\n                // ... but changes the referenced network\n                // ... to reflect the new snapshotted network\n                this.networkCtx.network = newNet;\n\n                this.state.mintedCharterToken =\n                    previousHelper.state.mintedCharterToken;\n                this.state.parsedConfig = parsedConfig;\n\n                //@ts-expect-error\n                previousHelper.actors = { [ACTORS_ALREADY_MOVED]: newNet.id };\n                console.log(\n                    `   -- moving ${\n                        Object.keys(this.actors).length\n                    } actors from network ${previousNetwork.id} to ${newNet.id}`\n                );\n            }\n            newNet.loadSnapshot(snapshots[snapshotName]);\n        }\n        if (!this.actorName) {\n            await this.setDefaultActor();\n        }\n        this.strella = bootstrappedStrella;\n        if (!this.strella) {\n            await this.initStellarClass(parsedConfig);\n        }\n        return this.strella;\n    }\n\n    async bootstrap(\n        args?: Partial<MinimalCharterDataArgs>,\n        submitOptions: SubmitOptions = {}\n    ) {\n        let strella = this.strella || (await this.initialize(undefined, args));\n        if (this.bootstrap != CapoTestHelper.prototype.bootstrap) {\n            throw new Error(\n                `Don't override the test-helper bootstrap().  Instead, provide an implementation of extraBootstrapping()`\n            );\n        }\n        if (this.ready) {\n            console.log(\n                \"       --- ⚗️ 🐞 ⚗️ 🐞 ⚗️ 🐞 ⚗️ 🐞 ✅ Capo bootstrap already OK\"\n            );\n\n            return strella;\n        }\n\n        const options = {\n            ...submitOptions,\n            onSubmitted: () => {\n                this.network.tick(1);\n            },\n        };\n        await this.mintCharterToken(args, options);\n        console.log(\n            \"       --- ⚗️ 🐞 ⚗️ 🐞 ⚗️ 🐞 ⚗️ 🐞 ✅ Capo bootstrap with charter\"\n        );\n\n        this.network.tick(1);\n        await this.extraBootstrapping(args, options);\n        return strella;\n    }\n\n    async extraBootstrapping(\n        args?: Partial<MinimalCharterDataArgs>,\n        submitOptions: SubmitOptions = {}\n    ) {\n        const tcx = this.mkTcx(\"extra bootstrapping\").facade();\n        const capoUtxos = await this.capo.findCapoUtxos();\n        const charterData = await this.capo.findCharterData(undefined, {\n            optional: false,\n            capoUtxos,\n        });\n        const tcx2 = await this.capo.mkTxnUpgradeIfNeeded(charterData);\n        // const tcx2 = await this.capo.addTxnBootstrappingSettings(tcx, charterData);\n        // const tcx3 = await this.capo.mkAdditionalTxnsForCharter(tcx, {\n        //     charterData,\n        //     capoUtxos\n        // })\n\n        await this.submitTxnWithBlock(tcx2, submitOptions);\n        return this.strella;\n    }\n\n    abstract mkDefaultCharterArgs(): Partial<MinimalCharterDataArgs>;\n    abstract mintCharterToken(\n        args?: Partial<MinimalCharterDataArgs>,\n        submitOptions?: SubmitOptions\n    ): Promise<\n        hasUutContext<\"govAuthority\" | \"capoGov\" | \"mintDelegate\" | \"mintDgt\"> &\n            hasBootstrappedCapoConfig &\n            hasAddlTxns<any>\n    >;\n}\n","import type { expect as expectType } from \"vitest\";\nimport type { Address } from \"@helios-lang/ledger\";\nimport type {\n    ConfigFor,\n    stellarSubclass,\n    CharterDataLike,\n    MinimalCharterDataArgs,\n    DelegateConfigDetails,\n    DelegateSetup,\n    UutName,\n    SubmitOptions,\n    CapoConfig,\n} from \"@donecollectively/stellar-contracts\";\nimport {\n    Capo,\n    StellarTxnContext,\n    parseCapoJSONConfig,\n    CapoWithoutSettings,\n} from \"@donecollectively/stellar-contracts\";\nimport { ADA } from \"./types.js\";\nimport type {\n    DefaultCapoTestHelperClass,\n    TestHelperState,\n    canHaveRandomSeed,\n    stellarTestHelperSubclass,\n} from \"./types.js\";\nimport { CapoTestHelper } from \"./CapoTestHelper.js\";\n\ndeclare namespace NodeJS {\n    interface Global {\n        expect: typeof expectType;\n    }\n}\ndeclare const expect: typeof expectType;\n\n/**\n * Test helper for classes extending Capo\n * @remarks\n *\n * Arranges an test environment with predefined actor-names having various amounts of ADA in their (emulated) wallets,\n * and default helpers for setting up test scenarios.  Provides a simplified framework for testing Stellar contracts extending\n * the Capo class.\n *\n * To use it, you MUST extend DefaultCapoTestHelper<YourStellarCapoClass>.\n *\n * You MUST also implement a getter  for stellarClass, returning the specific class for YourStellarCapoClass\n *\n * You SHOULD also implement a setupActors method to arrange named actors for your test scenarios.\n * It's recommended to identify general roles of different people who will interact with the contract, and create\n * one or more actor names for each role, where the actor names start with the same letter as the role-names.\n * For example, a set of Trustees in a contract might have actor names tina, tracy and tom, while\n * unprivileged Public users might have actor names like pablo and peter.  setupActors() also\n * should pre-assign some ADA funds to each actor: e.g. `this.addActor(‹actorName›, 142n * ADA)`\n *\n * @typeParam DC - the specific Capo subclass under test\n * @public\n **/\nexport class DefaultCapoTestHelper<\n    //@xxxts-expect-error spurious fail  type; it tries to strongly match the generic abstract type\n    //    from (abstract) Capo, instead of paying attention to the clearly-matching concrete version in DefaultCapo\n    CAPO extends Capo<any> = CapoWithoutSettings //prettier-ignore\n    //@xxxts-ignore because of a mismatch between the Capo's abstract mkTxnMintCharterToken's defined constraints\n    //    ... vs the only concrete impl in DefaultCapo, with types that are actually nicely matchy.\n    //    vscode is okay with it, but api-extractor is not :/\n> extends CapoTestHelper<CAPO> {\n    /**\n     * Creates a prepared test helper for a given Capo class, with boilerplate built-in\n     *\n     * @remarks\n     *\n     * You may wish to provide an overridden setupActors() method, to arrange actor\n     * names that fit your project's user-roles / profiles.\n     *\n     * You may also wish to add methods that satisfy some of your application's key\n     * use-cases in simple predefined ways, so that your automated tests can re-use\n     * the logic and syntax instead of repeating them in multiple test-cases.\n     *\n     * @param s - your Capo subclass\n     * @typeParam CAPO - no need to specify it; it's inferred from your parameter\n     * @public\n     **/\n    static forCapoClass<CAPO extends Capo<any>>(\n        s: stellarSubclass<CAPO>\n    ): DefaultCapoTestHelperClass<CAPO> {\n        class specificCapoHelper extends DefaultCapoTestHelper<CAPO> {\n            get stellarClass() {\n                return s;\n            }\n        }\n        return specificCapoHelper;\n    }\n\n    //xx@ts-expect-error\n    get stellarClass(): stellarSubclass<CAPO> {\n        //@ts-expect-error\n        return CapoWithoutSettings;\n    }\n    _start: number;\n    constructor(\n        config?: CAPO extends Capo<any, infer FF>\n            ? ConfigFor<CAPO> & CapoConfig<FF>\n            : ConfigFor<CAPO>,\n        helperState?: TestHelperState<CAPO>\n    ) {\n        super(config, helperState);\n        this._start = new Date().getTime();\n    }\n\n    ts(...args: any[]) {\n        console.log(this.relativeTs, ...args);\n    }\n\n    requiresActorRole(roleName: string, firstLetter: string) {\n        if (this.actorName[0] != firstLetter) {\n            throw new Error(\n                `expected current actor name (${this.actorName}) to be one of the ${roleName} profiles starting with '${firstLetter}' in the test helper`\n            );\n        }\n    }\n    \n    get relativeTs() {\n        const ms = new Date().getTime() - this._start;\n        const s = ms / 1000;\n        return `@ ${s}s`;\n    }\n\n    //!!! todo: create type-safe ActorMap helper hasActors(), on same pattern as hasRequirements\n    async setupActors() {\n        // console.log(\"DCTH: setupActors\")\n\n        this.addActor(\"tina\", 11000n * ADA);\n        this.addActor(\"tracy\", 13n * ADA);\n        this.addActor(\"tom\", 1200n * ADA);\n    }\n\n    setDefaultActor() {\n        return this.setActor(\"tina\");\n    }\n\n    async mkCharterSpendTx(): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n\n        const treasury = await this.strella!;\n        const tcx: StellarTxnContext = this.mkTcx();\n        const tcx2 = await treasury.txnAttachScriptOrRefScript(\n            await treasury.txnAddGovAuthority(tcx),\n            treasury.compiledScript\n        );\n\n        return treasury.txnMustUseCharterUtxo(\n            tcx2,\n            treasury.activityUsingAuthority()\n        );\n\n        // return treasury.txnAddCharterWithAuthority(tcx);\n    }\n\n    // accesses the delegate roles, iterates the namedDelegate entries,\n    // and uses txnCreateConfiguredDelegate() to trigger compilation of the script for each one\n    async checkDelegateScripts(args: Partial<MinimalCharterDataArgs> = {}) {\n        const { strella: capo } = this;\n        const { delegateRoles } = capo;\n        // const { namedDelegate: {\n        //     selected,\n        //     uutPurpose: roleName\n        // } } = delegateRoles;\n        const goodArgs = {\n            ...this.mkDefaultCharterArgs(),\n            ...args,\n        } as MinimalCharterDataArgs;\n\n        let helperTxn = await capo.mkTxnMintCharterToken(\n            goodArgs,\n            undefined,\n            \"DRY_RUN\"\n        );\n        // emoji ladybug: \"🐞\"\n        console.log(\"  🐞🐞🐞🐞🐞🐞🐞🐞🐞🐞🐞🐞🐞 \");\n\n        for (const dgtLabel of Object.keys(delegateRoles)) {\n            const dgtSetup = delegateRoles[dgtLabel] as DelegateSetup<\n                any,\n                any,\n                any\n            >;\n\n            const { config, delegateClass, delegateType, uutPurpose } =\n                dgtSetup;\n\n            console.log(\n                `  -- checking delegate script: ${dgtLabel} (${delegateType})`\n            );\n            // }\n\n            // for (const [delegateName, delegate] of Object.entries(delegates) as [ string, DelegateConfigDetails<any>][]) {\n            //     console.log(`  -- checking named-delegate script: ${delegateName}`);\n\n            helperTxn = await capo.txnWillMintUuts(\n                helperTxn,\n                [uutPurpose],\n                { usingSeedUtxo: helperTxn.state.seedUtxo },\n                {\n                    // namedDelegate: uutPurpose,\n                    [dgtLabel]: uutPurpose,\n                }\n            );\n\n            const addr = this.wallet.address;\n            const newLink = await capo.txnCreateOffchainDelegateLink(\n                helperTxn as any,\n                dgtLabel,\n                {\n                    // strategyName: delegateName,\n                    uutName: (helperTxn.state.uuts[uutPurpose] as UutName).name,\n\n                    config: {\n                        // rev: 1n,\n                        addrHint: [addr as any as Address],\n                    },\n                }\n            );\n        }\n        //     // await capo.txnCreateConfiguredDelegate(helperTxn, delegate, );\n        // } else {\n        // }\n    }\n\n    mkDefaultCharterArgs(): MinimalCharterDataArgs {\n        const addr = this.wallet.address;\n        console.log(\"test helper charter -> actor addr\", addr.toString());\n        return {\n            govAuthorityLink: {\n                config: {\n                    //this.capo.stringifyDgtConfig({\n                    addrHint: [addr],\n                },\n            },\n            mintDelegateLink: {\n                config: {},\n            },\n            spendDelegateLink: {\n                config: {},\n            },\n            mintInvariants: [],\n            spendInvariants: [],\n            otherNamedDelegates: new Map(),\n            manifest: new Map(),\n            rev: 1n,\n        };\n    }\n\n    async mintCharterToken(\n        args?: Partial<MinimalCharterDataArgs>,\n        submitOptions: SubmitOptions = {}\n    ) {\n        const { delay } = this;\n        const { tina, tom, tracy } = this.actors;\n\n        if (this.state.mintedCharterToken) {\n            console.warn(\n                \"reusing minted charter from existing testing-context\"\n            );\n            return this.state.mintedCharterToken as typeof tcx;\n        }\n\n        if (!this.strella) await this.initialize();\n        const capo = await this.strella!;\n        const goodArgs = {\n            ...this.mkDefaultCharterArgs(),\n            ...(args || {}),\n        } as MinimalCharterDataArgs;\n\n        const tcx = await capo.mkTxnMintCharterToken(goodArgs);\n        const rawConfig =\n            (this.state.rawConfig =\n            this.state.config =\n                tcx.state.bootstrappedConfig);\n\n        this.state.parsedConfig = parseCapoJSONConfig(rawConfig);\n\n        expect(capo.network).toBe(this.network);\n\n        await tcx.submitAll(submitOptions);\n        console.log(\n            `----- charter token minted at slot ${this.network.currentSlot}`\n        );\n        this.network.tick(1);\n\n        // this.network.tick(1);\n\n        this.state.mintedCharterToken = tcx;\n        // console.log(\"mintCharterToken returning tcx\", tcx);\n        return tcx;\n    }\n\n    async updateCharter(\n        args: CharterDataLike,\n        submitSettings: SubmitOptions = {}\n    ): Promise<StellarTxnContext> {\n        await this.mintCharterToken();\n        const treasury = await this.strella!;\n\n        const { signers } = this.state;\n\n        const tcx = await treasury.mkTxnUpdateCharter(args);\n        return tcx\n            .submitAll({\n                signers,\n                ...submitSettings,\n            })\n            .then(() => {\n                this.network.tick(1);\n                return tcx;\n            });\n    }\n\n    // async updateSettings(\n    //     args: DetectSettingsType<CAPO>,\n    //     submitSettings: SubmitOptions = {}\n    // ) {\n    //     await this.mintCharterToken();\n    //     const capo = this.strella!;\n    //     const tcx = await capo.mkTxnUpdateOnchainSettings(args);\n    //     return tcx.submit(submitSettings).then(() => {\n    //         this.network.tick(1);\n    //         return tcx;\n    //     });\n    // }\n}\n","// declare module \"@donecollectively/stellar-contracts/testing\";\n\nexport type { TestHelperSubmitOptions } from \"./StellarTestHelper.js\";\nexport type { NetworkSnapshot } from \"./StellarNetworkEmulator.js\";\n\nexport { CapoTestHelper } from \"./CapoTestHelper.js\";\nexport * from \"./types.js\";\n\n/**\n * @public\n */\nexport const insufficientInputError =\n    /(need .* lovelace, but only have|transaction doesn't have enough inputs)/;\n\n/**\n * Interfaces with `vitest` to provide a testing context that can be used to test Stellar contracts.\n * @public\n */\nexport type { StellarTestContext } from \"./StellarTestContext.js\";\n\nError.stackTraceLimit = 100;\n\n/**\n * @public\n */\nexport { DefaultCapoTestHelper } from \"./DefaultCapoTestHelper.js\";\n\n/**\n * @public\n */\nexport { StellarTestHelper } from \"./StellarTestHelper.js\";\n\n\nexport {\n    StellarNetworkEmulator,\n    SimpleWallet_stellar\n} from \"./StellarNetworkEmulator.js\";\n\n"],"names":["stConfig","helperState","i"],"mappings":"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"}