{
  "version": 3,
  "sources": ["../src/helios/HeliosProgramWithMockCacheAPI.ts", "../src/HeliosPromotedTypes.ts"],
  "sourcesContent": ["// shim for node.js, returning a class that provides Helios' Program interface\n// ... plus caching\n\nimport { Program } from \"@helios-lang/compiler\";\nimport type { CompileOptionsForCachedHeliosProgram } from \"../HeliosPromotedTypes.js\";\nimport type { anyUplcProgram } from \"../HeliosPromotedTypes.js\";\nimport type { CacheableProgramProps, HeliosProgramCacheEntry } from \"./CachedHeliosProgram.js\";\nimport type { Source } from \"@helios-lang/compiler-utils\";\n\nexport { type CompileOptionsForCachedHeliosProgram } from \"../HeliosPromotedTypes.js\";\nexport type { anyUplcProgram } from \"../HeliosPromotedTypes.js\";\n\n/**\n * Provides an interface for building Helios programs that may be cached\n * @remarks\n * When building through this interface in the browser, the async API is the\n * same as that used in a development environment (using node.js).  In the\n * developer environment, the cache is a file system cache.  In the browser,\n * there is not current a cache implementation.\n *\n * Otherwise, the compileWithCache() is simply an async wrapper around the\n * normal interface for compiling a Helios program with options including\n * optimization.\n * @public\n */\nexport class HeliosProgramWithCacheAPI extends Program {\n    cacheEntry: HeliosProgramCacheEntry | undefined = undefined\n    constructor(mainSource: string | Source, props: CacheableProgramProps) {\n        super(mainSource, props);\n    }\n    compileTime: {\n        compiled?: number,\n        stored?: number,\n        fetchedCache?: number,\n    } | undefined;\n\n    static checkFile(srcFilename: string) : boolean | null {\n        return null\n    }\n\n    async compileWithCache(\n        optimizeOrOptions: boolean | CompileOptionsForCachedHeliosProgram\n    ) : Promise<anyUplcProgram> {\n        return this.compile(optimizeOrOptions) as any;\n    }\n}\n", "import type { CompileOptions } from \"@helios-lang/compiler\";\nimport type { InlineTxOutputDatum } from \"@helios-lang/ledger\";\nimport type { UplcProgramV2, UplcProgramV3 } from \"@helios-lang/uplc\";\n\n/**\n * @public\n */\nexport type CompileOptionsForCachedHeliosProgram = CompileOptions & {\n    /**\n     * The timeout for waiting for another instance to finish compiling.\n     * Defaults to 30 seconds.\n     */\n    timeout?: number;\n};\n\n/**\n * @public\n */\nexport type anyUplcProgram = UplcProgramV2 //| UplcProgramV3;\n\nexport { \n    encodeUtf8 as textToBytes,\n    decodeUtf8 as bytesToText,\n} from \"@helios-lang/codec-utils\";\n\n/**\n * tuple expressing a token-name and count\n * @public\n **/\nexport type tokenNamesOrValuesEntry = [string | number[], bigint];\n/**\n * Tuple of byte-array, count, needed for Value creation on native tokens.\n * @public\n **/\nexport type valuesEntry = [number[], bigint];\n\n/**\n * @public\n */\nexport type InlineDatum = InlineTxOutputDatum\n\n"],
  "mappings": ";AAGA,SAAS,eAAe;;;ACiBxB;AAAA,EACkB;AAAA,EACA;AAAA,OACX;;;ADEA,IAAM,4BAAN,cAAwC,QAAQ;AAAA,EACnD,aAAkD;AAAA,EAClD,YAAY,YAA6B,OAA8B;AACnE,UAAM,YAAY,KAAK;AAAA,EAC3B;AAAA,EACA;AAAA,EAMA,OAAO,UAAU,aAAsC;AACnD,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,iBACF,mBACwB;AACxB,WAAO,KAAK,QAAQ,iBAAiB;AAAA,EACzC;AACJ;",
  "names": []
}
