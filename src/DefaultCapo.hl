spending Capo

// needed in helios 0.13: defaults
const mph : MintingPolicyHash = MintingPolicyHash::new(#1234)
const rev : Int = 1

// import {
//     tvCharter
// } from CapoHelpers

import {
    tx, 
    get_current_input,
    get_current_validator_hash
} from ScriptContext

import { 
    AbstractDelegateActivitiesEnum,
    CapoLifecycleActivity,
    DgTknDisposition as DgTkn,
    requiresNoDelegateInput,    
    RelativeDelegateLink
} from CapoDelegateHelpers

import {
    TODO,
    REQT,
    bREQT,
    mustFindInputRedeemer,
    outputAndDatum,
    AnyData,
    tvCharter,
    mkTv,
    didSign,
    REQTgroup,
    bREQTgroup,
    REQTgroupUnit,
    logGroupUnit,
    logGroup,
    logGroupStart,
    logGroupEnd
} from StellarHeliosHelpers

import {
    getTxCharterData,
    mkCapoCtx,
    mustHaveGovAuthority,
    CapoDatum,
    CapoActivity
} from CapoHelpers

import {
    mkUutTnFactory,
    validateUutMinting
} from CapoMintHelpers

// import {
//     ProtocolSettings
// } from ProtocolSettings

func requiresAuthorization(ctd: CapoDatum::CharterData) -> Bool {
    ctd.govAuthorityLink.hasValidOutput(mph)
}

func getCharterOutput(tx: Tx) -> TxOutput {
    charterTokenValue : Value = Value::new(
        AssetClass::new(mph, "charter".encode_utf8()), 
        1
    );

    tx.outputs.find_safe(
        (txo : TxOutput) -> Bool {
            txo.value >= charterTokenValue
        }
    ).switch {
        None => error("this could only happen if the charter token is burned."),
        Some{o} => o
    }
}

func preventCharterChange(datum: CapoDatum::CharterData) -> Bool {
    charterOutput : TxOutput = getCharterOutput(tx);

    cvh : ValidatorHash = get_current_validator_hash();
    myself : SpendingCredential = SpendingCredential::new_validator(cvh);
    if (charterOutput.address.credential != myself) {
        error("charter token must be returned to the contract ")
        // actual : String = charterOutput.address.credential.switch{
        //     PubKey{pkh} => "pkh:🔑#" + pkh.show(),
        //     Validator{vh} => "val:📜#:" + vh.show()
        // };
        // error(
        //     "charter token must be returned to the contract " + cvh.show() +
        //     "... but was sent to " +actual
        // )
    } else { 
        print("ok\n")
    };

    newDatum : CapoDatum = CapoDatum::from_data( 
        charterOutput.datum.inline
    );
    if (datum.serialize() != newDatum.serialize()) {
        error("invalid update to charter settings") 
    } else {
        true
    }
}

func checkpoint(s: String) -> Bool {
    print("checkpoint: " + s);
    print("\n");
    true
}

func main(datum: Data, activity: CapoActivity) -> Bool {
    // now: Time = tx.time_range.start;
    print("🚥❓Capo\n");

    input = get_current_input();
    baseCctx = mkCapoCtx(mph).needsCharter();

    // showMyTokens : (Value) -> String = mkTokenShow(mph);
    print("  -- Capo: checks spend of " + input.value.show())
    
    capoDatum : CapoDatum = CapoDatum::from_data(datum);
    dgDataCheck = capoDatum.switch {
        DelegatedData => {
            REQT("j6bmfv: all and only DelegatedData datums must be spent with the Capo's **spendingDelegatedDatum** activity");
            // vvv part one of j6bmfv
            activity.switch {
                spendingDelegatedDatum => true.trace("  -- is spendingDelegatedDatum activity? "),  // more checks below.
                _ => error("invalid activity on DelegatedData")
            }  
        },
        _ => false
    }

    // (isFirstCapoInput, rest) : (Bool, []TxInput) = if (dgDataCheck) {
    allDatumSpecificChecks: Bool = capoDatum.switch {
        // checks that unsupported activities for a datum are rejected promptly 
        // +special things we want to always guard against for specific Datum types:
        ctd : CharterData => {
            invalid : String = "invalid activity on CharterData";
            activity.switch {
                updatingCharter => true,  // more activity-checks happen below.
                capoLifecycleActivity => true, // more checks below.
                // addingSpendInvariant => error("todo: support spendInvariants"),
                // addingMintInvariant => error("todo: support mintInvariants"),
                spendingDelegatedDatum => error(invalid),
                _ => {
                    print("this charter activity isn't allowed to change the charter");
                    preventCharterChange(ctd)  // throws if bad                
                    // ... plus activity-specific checks below.
                }
            }
        },
        // SettingsData => activity.switch {
        //     updatingSettings => true,  // more checks below.
        //     retiringSettings => error("there is no use case for this activity, unless it's part of a complete teardown"),
        //     _ => error("invalid activity on SettingsData")
        // },
        ScriptReference => activity.switch {
            retiringRefScript => true,
            _ => error("invalid activity on ScriptReference")            
        },
        DelegatedData => dgDataCheck
        // maybe bring this back in v2
        //, TypeMapInfo => activity.switch {
        //     updatingTypeMap => true,
        //     _ => error("invalid activity on TypeMapInfo")
        // }

        // ❗no default case, to ensure that all variants are always covered.
        // _ => true
    };

    // the normal case for validation is to use CapoDatum-specific checks.  
    // however, this section allows activity-specific checks to be included, so extensions aren't painted into a corner.
    allActivitySpecificChecks : Bool = activity.switch {
        spendingDelegatedDatum => {
            // NOT all delegated-data policies need gov authority!
            // hasGovAuthority = charterData.govAuthorityLink.hasValidOutput(mph);

            // this is part two of j6bmfv
            REQT("j6bmfv: all and **ONLY DelegatedData** datums must be spent with the Capo's spendingDelegatedDatum activity");
            // check that the datum is a DelegatedData variant
            datumId : ByteArray = capoDatum.switch{
                DelegatedData => {
                    datum.switch {
                        ConstrData{_index, fields} => {
                            print("     ✅ is DelegatedData datum-type");
                            AnyData::from_data(fields.head).id
                        },
                        _ => error("unreachable")
                    }
                },
                _ => {
                    error(
                        "activity spendingDelegatedDatum used on mismatched datum type"
                    )
                }
            };
            REQT("guards against updating a record if its id doesn't match its token-name");
            datumAc : AssetClass = AssetClass::new(mph, datumId);
            hasMatchingValue : Bool = input.value.get_safe(datumAc) > 0;                        

            TODO("deal with DeletingDelegatedData activity (ensure spendDgt AND mintDgt do their parts)");
            // Note: CreatingDelegatedData activity doesn't involve the Capo at all; instead,
            // the minter creates a UUT for the data, on authority of the mintDgt;
            // ... and the mintDgt requires the presence of the corresponding dgDataPolicy (with its MintingActivity);
            // ... then the dgDataPolicy checks the validity of the new data, and requires that
            // ... the new data is created as a DelegatedData record in the Capo address.

            // ?? is this checking the same things as the rest of the code below?

            spendDgtInput = baseCctx.requiresSpendDelegateInput();
            delegateReturned = spendDgtInput.requiresValidOutput();
            spendDgtInputRedeemer: Data = mustFindInputRedeemer(
                spendDgtInput.input.unwrap()
            )
            // extracts the record-id from a data-policy delegate's activity (or a single 
            // ... nested activity, without any special expectations about the 
            // ... data-structural details of the activity (just the baseline expectation 
            // ... that its first field is a ByteArray having the record-id).
            getsSpendingRecId : (Data) -> ByteArray = (dgSpendActivity : Data) -> ByteArray {
                dgSpendActivity.switch {
                    ConstrData{_index, fields} => {
                        fields.head.switch {
                            ByteArrayData{recId} => {
                                print("  -- found recId: " + recId.show());
                                recId
                            },
                            _ => error("spending activity must have a record-id as first field")
                        }
                    },
                    _ => error("unreachable")
                }
            };

            REQT("Ensures that the spend delegate is acting on this record-id");
            uniqMatchingSpendDgtActivity : Bool = AbstractDelegateActivitiesEnum::from_data(
                spendDgtInputRedeemer
            ).switch {
                SpendingActivities{sa} => {
                    assert(false,
                        "expected the Spend delegate to use *DelegatedData* activities\n"+
                        "  ... to describe the operations that are being performed by next-level "+
                        "  ... DgData Policy delegates"
                    );
                    // unwrap the abstract Data from sa, expecting an Enum 
                    // ... with a first data-field having the token-name 
                    // ... that matches with the delegated-data record `id`
                    recId : ByteArray = getsSpendingRecId(sa);
                    assert(recId == datumId, "spendDgt SpendingActivity must act on the correct record-id");
                    true
                },
                UpdatingDelegatedData{/*dataType*/ _ , recId} => {
                    // todo: expect that this record-id matches the token in the current UTxO.
                    assert(recId == datumId, "spendDgt UpdDgData must act on the correct record-id");
                    print("  -- ok: activity matches data being updated");
                    true
                },
                MultipleDelegateActivities{activities} => {
                    found: []Data = activities.filter(
                        (act: Data) -> Bool {
                            AbstractDelegateActivitiesEnum::from_data(act).switch {
                                SpendingActivities{_sa} => {                                    
                                    // unwrap / check record-id
                                    error(
                                        "expected the Spend delegate to use only *DelegatedData* activities "+
                                        "to describe the operations that are being performed by next-level "+
                                        "DgDataPolicy delegates"
                                    );
                                },
                                UpdatingDelegatedData{
                                    /* dgDataType*/ _ , recId
                                } => {
                                    // verify token name match
                                    recId == datumId
                                },
                                _ => false
                            }
                        }
                    );
                    TODO("TEST THIS v");
                    print("recId: " + datumId.decode_utf8_safe());
                    REQT("spendDgt must be acting on the matching record-id");
                    assert(  // fails a test having a spending activity, but on wrong recId
                        ( found.length > 0 ).trace( "found activity for this recId? ")
                    , "❗ no spend delegate activity on this dgData");
                    TODO("TEST THIS too v");
                    REQT("spendDgt fails with multiple activities for the same recId");
                    assert(  // fails a test having multiple spending activities on the same rec id
                        (found.length == 1).trace("has exactly one matching activity? ")
                        , "❗IMPOSSIBLE (caught by DelegateInput.withDDSpendingActivity())"+
                            " spend delegate tried to act in multiple ways on the same token"
                    );
                    delegateReturned && true
                },
                _ => {
                    spendDgtInputRedeemer.switch {
                        ConstrData{index, fields} => {
                            print("unexpected redeemer index #" + index.show() );
                            print("\n");
                            assert(true || /* never executed */ fields.length > 0, "unreachable");
                            error("spend delegate not triggered with a Spending activity")
                        },
                        _ => error("unreachable")
                    }
                }
            };

            true
            && hasMatchingValue
            && uniqMatchingSpendDgtActivity
            && delegateReturned 
        },
        updatingCharter => {
            print( "  ...with activity updatingCharter\n");
            TODO("make this obsolete by implementing capoLifecycleActivity");
            charterOutput : TxOutput = getCharterOutput(tx);
            newCtDatum = CapoDatum::CharterData::from_data( 
                charterOutput.datum.inline
            );

            oldCtDatum : CapoDatum::CharterData = capoDatum.switch {
                octd: CharterData => octd,
                _ => error("wrong use of updatingCharter action for non-CharterData datum")                
            };
            CapoDatum::CharterData{                
                spendDelegate, 
                spendInvariants,
                otherNamedDelegates,
                mintDelegate, 
                mintInvariants,
                nextGovDelegate,
                nextManifest,
                nextPendingPolicies
            } = newCtDatum;

            CharterData{
                oldSpendDelegate, 
                oldSpendInvariants, 
                oldOtherNamedDelegates,
                oldMintDelegate, 
                oldMintInvariants,
                oldGovDelegate,
                oldManifest,
                oldPendingPolicies
                // oldTypeMapUut
            } = capoDatum; // or oldCtDatum - same error result either way

            mustNotModifyMintInvariants : Bool =  ( mintInvariants == oldMintInvariants );
            mustNotModifySpendInvariants : Bool = ( spendInvariants == oldSpendInvariants );
            mustNotModifyManifest : Bool = ( nextManifest.serialize() == oldManifest.serialize() );
            unchangedGovDelegate : Bool = ( nextGovDelegate.serialize() == oldGovDelegate.serialize() );

            hasNeededGovDelegate : Bool =  true ||
            checkpoint("must be validated by existing govDelegate") && 
            nextGovDelegate.hasValidOutput( mph) && (
                unchangedGovDelegate || oldGovDelegate.hasDelegateInput( 
                    inputs: tx.inputs, 
                    mph: mph,
                    required: true
                ).switch {
                    None => error("unreachable"),
                    Some => true
                }
            );

            unchangedSpendDgt : Bool = ( spendDelegate.serialize() == oldSpendDelegate.serialize() );
            unchangedMintDgt : Bool = ( mintDelegate.serialize() == oldMintDelegate.serialize() );
            // print(" oldMintDgt: " + oldMintDelegate.serialize().show());
            // print("\n");
            // print(" newMintDgt: " + mintDelegate.serialize().show());
            // print("\n");
            
            changedAnyNamedDelegate : Bool = ( otherNamedDelegates.serialize() != oldOtherNamedDelegates.serialize() );
            mustNotChangePendingPolicies = (nextPendingPolicies.serialize() == oldPendingPolicies.serialize());
            // mustNotModifySettings : Bool = ( settingsUut == oldSettingsUut );
            // mustNotModifyTypeInfo : Bool = ( typeMapUut == oldTypeMapUut );

            if (true) {
                print("is spendDgt unchanged? " + unchangedSpendDgt.show());
                print("  - old: "+ oldSpendDelegate.uutName + " => "+ 
                    oldSpendDelegate.delegateValidatorHash.switch{
                        Some{v} => v.show(), None => " (any addr)"
                });
                oldSDConfigStr = oldSpendDelegate.config.decode_utf8_safe();
                print("       + cfg " + oldSDConfigStr);
                print("  - new: "+ spendDelegate.uutName + " => "+ 
                    spendDelegate.delegateValidatorHash.switch{
                        Some{v} => v.show(), None => " (any addr)"
                });
                newSDConfigStr = spendDelegate.config.decode_utf8_safe();
                print("       + cfg " + newSDConfigStr);
                // print(" - old: " + oldSpendDelegate.serialize().show());
                // print(" - new: " + spendDelegate.serialize().show());

                print(" -- is mintDgt unchanged?  " + unchangedMintDgt.show());
                print("  - old: "+ oldMintDelegate.uutName + " => "+ 
                    oldMintDelegate.delegateValidatorHash.switch{
                        Some{v} => v.show(), None => " (any addr)"
                });
                oldMDConfigStr = oldMintDelegate.config.decode_utf8_safe();
                print("       + cfg " + oldMDConfigStr);
                print("  - new: "+ mintDelegate.uutName + " => "+ 
                    mintDelegate.delegateValidatorHash.switch{
                        Some{v} => v.show(), None => " (any addr)"
                });
                newMDConfigStr = mintDelegate.config.decode_utf8_safe();
                print("       + cfg " + newMDConfigStr);
                print("")
                // print(" - old: " + oldMintDelegate.serialize().show());
                // print(" - new: " + mintDelegate.serialize().show());

                // print(" -- is config unchanged? " + mustNotModifySettings.show());
                // print("\n  - old: "+ oldSettingsUut.decode_utf8_safe());
                // print("\n  - new: "+ settingsUut.decode_utf8_safe());
                // print("\n")
            };
            // assert(mustNotModifySettings, "cannot change settings uut");
            // assert(mustNotModifyTypeInfo, "cannot change typeInfo uut");


            // the high-level use-cases that can update charter are all mutually exclusive.  Count them
            // and ensure that only one is present.
            countUpdatedThings : Int = newCtDatum.countUpdatedThings(capoDatum);
                // if ((!unchangedGovDelegate).trace("\n -- govDgt changed? ")) { 1 } else { 0 } +
                // if ((!unchangedSpendDgt).trace("\n -- spendDgt changed? ") ) { 1 } else { 0 } +
                // if ((!unchangedMintDgt).trace("\n -- mintDgt changed? ") ) { 1 } else { 0 } +
                // if (changedAnyNamedDelegate.trace("\n -- namedDgt changed? ") ) { 1 } else { 0 };

            assert(countUpdatedThings == 1, 
                "expected exactly one item updated in charter, got "+countUpdatedThings.show() + ""
            );            

            // mustNotModifySettings &&
            // mustNotModifyTypeInfo &&
            hasNeededGovDelegate &&
            bREQT("must not change the manifest", 
                mustNotModifyManifest
            ) &&
            checkpoint("1") &&
            if (unchangedMintDgt) {
                // unchanged mintDgt must not be included in the tx
                checkpoint("2b") &&
                mintDelegate.hasDelegateInput(
                    inputs: tx.inputs, 
                    mph: mph,
                    required: false
                ).switch {
                    None => {
                        // was requiresNoDelegateInput(mintDelegate, mph)
                        //  - it's ok to have it not included.
                        true
                    },
                    Some{mintDgtInput} => {
                        delegateActivity: AbstractDelegateActivitiesEnum = 
                            mintDelegate.getRedeemer(mintDgtInput);
                        print("mint delegate input found\n");
                        delegateActivity.switch {
                            CapoLifecycleActivities{CLA} => CLA.switch {
                                CreatingDelegate => {
                                    print("TEMPORARY: allowing delegate creation while **updatingCharter**\n");

                                    TODO("move delegate-creation to be separate from updatingCharter");
                                    TODO(" ?? use capo ActivatingXxxxDelegate activity when adopting delegate");

                                    mintDelegate.hasValidOutput(mph)
                                },
                                _ => error("must use capoLifecycleActivity directly in Capo, not with generic updatingSettings")
                                // no other variants exist (yet).
                                // _ => error("invalid use of mint delegate during charter update")
                            },
                            _ => error("invalid use of mint delegate during charter update")
                        }
                    }
                }
            } else {
                //  the new one has to go to the right place
                REQT("the updated mintDgt token must be deposited to its own script address");
                mintDelegate.hasValidOutput(mph)
            } && 
            if ( unchangedSpendDgt) {
                // unchanged spendDgt must not be included in the tx
                checkpoint("4b") &&
                requiresNoDelegateInput(spendDelegate, mph)
            } else {
                REQT("the updated spendDgt token must be deposited to its own script address");
                checkpoint("4a") &&
                spendDelegate.hasValidOutput(mph)
            } &&
            checkpoint("5") &&
            if (!changedAnyNamedDelegate) { true } else {
                checkpoint("5b") && 
                otherNamedDelegates.fold( (ok: Bool, name : String, dgt : RelativeDelegateLink) -> Bool {
                    ok && 
                    oldOtherNamedDelegates.get_safe(name).switch {
                        None => {
                            print (" - adopting named delegate: " + name);
                            print("\n");
                            true
                        },
                        Some{oldDgt} => { 
                            if (oldDgt.serialize() == dgt.serialize()) {
                               // unchanged named delegate must not be included in the tx
                                requiresNoDelegateInput(dgt, mph)
                            } else {
                                TODO("the old named delegate must be retired, or be force-replaced (in a different activity?)");
                                //  the new one has to go to the right place
                                dgt.hasValidOutput(
                                    mph, required: true, 
                                    createdOrReturned: DgTkn::Created)
                            }
                        }
                    }
                }, true)
            } &&
            mustNotChangePendingPolicies &&
            mustNotModifyMintInvariants &&
            mustNotModifySpendInvariants &&
            requiresAuthorization(oldCtDatum) &&
            checkpoint("6")
        },
        capoLifecycleActivity{myCLActivity} => {
            print( "  ...with activity capoLifecycleActivity\n");

            oldCtDatum : CapoDatum::CharterData = capoDatum.switch {
                octd: CharterData => octd,
                _ => error("wrong use of updatingCharter action for non-CharterData datum")                
            };

            charterOutput : TxOutput = getCharterOutput(tx);
            newCtDatum : CapoDatum::CharterData = CapoDatum::CharterData::from_data( 
                charterOutput.datum.inline
            );
            REQT("all capoLifecycleActivities require the govAuthority");
            cctx = baseCctx.
                withCharterInput().
                requiresGovAuthority();

            myCLActivity.switch {
                forcingNewMintDelegate{seed, purpose} => {
                    // we handle it directly
                    REQT("when forcingNewMintDelegate, ONLY the mintDelegate is updated");
                    assert(
                        oldCtDatum.mintDelegateLink.serialize() != 
                        newCtDatum.mintDelegateLink.serialize(), 
                        "must update mintDelegate"
                    );
                    assert(
                        oldCtDatum.countUpdatedThings(newCtDatum) == 1, 
                        "must not update anything except mintDelegate"
                    );                    
                    assert(oldCtDatum.mintDelegateLink.uutName != newCtDatum.mintDelegateLink.uutName,
                        "new mintDelegate token must be different from the old one"
                    );
                    tnFactory = mkUutTnFactory(seed);
                    REQT("the new mintDgt must have the new dgTkn");
                    expectedTn = tnFactory(purpose);
                    assert(
                        newCtDatum.mintDelegateLink.uutName == expectedTn,
                        "wrong mintDelegate token name '"+ 
                            newCtDatum.mintDelegateLink.uutName +
                            "' added to charter; should be: "+ expectedTn
                    );

                    REQT("the new mintDelegate must be present in its own script address");
                    newCtDatum.mintDelegateLink.hasValidOutput(mph, true, 
                        DgTkn::Created
                    ) &&
                    bREQT("Ensures the new mintDgt-* uut is minted with a seed") &&
                    validateUutMinting(
                        mph: mph,
                        seed: seed,
                        purposes: []String{purpose},
                        mkTokenName: tnFactory,
                        needsMintDelegateApproval: false 
                    )
                },
                forcingNewSpendDelegate{seed, purpose} => {
                    // we handle it directly
                    REQT("when forcingNewSpendDelegate, ONLY the spendDelegate is updated");
                    assert(
                        oldCtDatum.spendDelegateLink.serialize() != newCtDatum.spendDelegateLink.serialize(), 
                        "must update spendDelegate"
                    );
                    assert(
                        oldCtDatum.countUpdatedThings(newCtDatum) == 1, 
                        "must not update anything except spendDelegate"
                    );

                    assert(oldCtDatum.spendDelegateLink.uutName != newCtDatum.spendDelegateLink.uutName,
                        "new spendDelegate token must be different from the old one"
                    );
                    tnFactory = mkUutTnFactory(seed);
                    REQT("the new spendDgt must have the new dgTkn");
                    expectedTn = tnFactory(purpose);
                    assert(
                        newCtDatum.spendDelegateLink.uutName == expectedTn,
                        "wrong spendDelegate token name '"+ 
                            newCtDatum.spendDelegateLink.uutName +
                            "' added to charter; should be: "+ expectedTn
                    );


                    REQT("the new spendDelegate must be present in its own script address");
                    newCtDatum.spendDelegateLink.hasValidOutput(mph, true, 
                        DgTkn::Created
                    ) &&
                    bREQT("Ensures the new spendDgt-* uut is minted with a seed") &&
                    validateUutMinting(
                        mph: mph,
                        seed: seed,
                        purposes: []String{purpose},
                        mkTokenName: tnFactory,
                        needsMintDelegateApproval: false
                    )
                },
                _ => {
                    matchesActivity = (dgtActivity: AbstractDelegateActivitiesEnum) -> Bool {
                        dgtActivity.switch {
                            CapoLifecycleActivities{cla} => {
                                bREQT(
                                    "  - the delegate's activity must match the capo's lifecycle activity",
                                    (cla == myCLActivity)
                                )
                            },
                            _ => error("delegate must use CapoLifecycleActivities")                            
                        }
                    };
                    needsMintDgt = () -> Bool {
                    bREQTgroup("ensures presence of the mint delegate", () -> Bool {
                        mintDgt = cctx.requiresMintDelegateInput();
                        assert(mintDgt.requiresValidOutput(), "<-- that fails, this doesn't");
                        matchesActivity(mintDgt.genericDelegateActivity())
                    }) };
                    needsSpendDgt = () -> Bool {
                    bREQTgroup("ensures presence of the spend delegate", () -> Bool {
                        spendDgt = cctx.requiresSpendDelegateInput();
                        assert(spendDgt.requiresValidOutput(), "<-- that fails, this doesn't");
                        matchesActivity(spendDgt.genericDelegateActivity())
                    }) };
                    cctx.dgtRolesForLifecycleActivity(myCLActivity).switch {
                        HandledByCapoOnly => error("unreachable"),
                        MintDgt => {
                            needsMintDgt()
                        },
                        SpendDgt => {
                            needsSpendDgt()
                        },
                        BothMintAndSpendDgt => {
                            needsMintDgt() &&
                            needsSpendDgt()
                        },
                        _ => error("dgtRolesForLifecycleActivity should indicate only mint/spend/both delegate-roles")
                    },

                    TODO("review updatingManifest case");
                    // updatingManifest => {
                    //     // the spend delegate must be triggered with its updatingManifest activity
                    //     // (exactly the same as our updatingManifest)
                    //     cctx.requiresSpendDelegateInput()
                    //         .updatingManifest()
                    //         .requiresValidOutput()
                    // }, 
    
                    // REQT("for normal lifecycle activities, the spendDelegate's activity must match the capo's lifecycle activity");
                    // assert(
                    //     delegateCLActivity.serialize() == myCLActivity.serialize(),
                    //     "the spendDelegate's CapoLifecycleActivity must match the capo's"
                    // );
                    true
                }
            }
        },
        retiringRefScript => {
            print( "  ...with activity retiringRefScript\n");
            // the ref script is being spent:
            isSpendingRefScript : Bool = capoDatum.switch{
                ScriptReference => true,
                _ => error("wrong use of retiringRefScript action for non-ScriptRef datum")
            };

            hasGovAuthority : Bool = mustHaveGovAuthority(mph);

            isSpendingRefScript && 
            hasGovAuthority &&
            true
            // no other constraints; the ref script could be re-created or
            // replaced with a new one, or simply destroyed.
        },

        usingAuthority => {
            print( "  ...with activity usingAuthority\n");
            capoDatum.switch {
                 // throws if bad
                ctd : CharterData => requiresAuthorization(ctd),
                _ => error("wrong use of usingAuthority action for non-CharterData datum")
            }
        },

        // updatingSettings => {
        //     // FUT: possibly move this to the spend-delegate layer
        //     print( "  ...with activity updatingSettings\n");
        //     _isRelevantDatum : Bool = capoDatum.switch {
        //         // SettingsData => true,
        //         CharterData => true,
        //         _ => error("wrong use of updatingSettings action; must use only on CharterData")
        //     };

        //     // it requires the govAuthority to be present 
        //     REQT( "gov authority must be present to update settings");
        //     hasGovAuthority : Bool = mustHaveGovAuthority(
        //         mph: mph,
        //         charterData: charterData // already resolved
        //     );

        //     CapoDatum::CharterData{
        //         spendDelegate,
        //         spendInvariants,
        //         namedDelegates,
        //         mintDelegate ,
        //         mintInvariants,
        //         govDelegate,
        //         manifest
        //     } = capoDatum;

        //     REQT("the current Settings must be spent and updated");
        //     settingsDgtLink : RelativeDelegateLink = namedDelegates.get_safe("settings").switch {
        //         None => error("'settings' delegate must be present to do updatingSettings activity"),
        //         Some{dgt} => dgt
        //     };

        //     settingsDgtInput = settingsDgtLink.hasDelegateInput(
        //         inputs: tx.inputs,
        //         mph: mph
        //     ).unwrap();
        //     settingsDelegateIsValid : Bool = AbstractDelegateActivitiesEnum::from_data( 
        //         mustFindInputRedeemer(settingsDgtInput)
        //     ).switch {
        //         SpendingActivities => true,
        //         _ => assert("settings delegate must be updating the settings with its SpendingActivities variant")
        //     };
        //     _nextSettings : Data = cctx.getNextManifestedDatumRaw("settings");
        //     isUpdatingSettings : Bool = true;

        //     // ?? can we iterate inputs along with delegates, to reduce the overhead
        //     //    ... of multiple passes over the tx inputs?
        //     //  option 1: pay for iterating N inputs, 
        //     //    - times a switch{} for delegate-matching
        //     //    -    ... and invariants-iteration
        //     //    -    ... and namedDelegates-iteration
        //     //    - Plus a "is-anything-missing" check over delegates/invariants/namedDelegates
        //     // option 2: switch and iterate over delegates, invariants, namedDelegates
        //     //    - times a switch for input-finding
        //     //    - ... and no separate is-anything-missing checks.
        //     // ^^^ option 2 has to be cheaper.

        //     inputs: []TxInput = tx.inputs;

        //     REQT( "spend delegate must validate settings");
        //     spendDelegateIsValidating : Bool = 
        //         spendDelegate.validatesUpdatedSettings(
        //             inputs: inputs,
        //             mph: mph,
        //             inputRequired: true
        //         ).unwrap();

        //     REQT("mint delegate must validate settings");
        //     mintDelegateIsValidating : Bool = 
        //         mintDelegate.validatesUpdatedSettings(
        //             inputs: inputs,
        //             mph: mph,
        //             inputRequired: true
        //         ).unwrap();

        //     // govAuthority is checking the settings
        //     REQT( "govDelegate MAY contribute to settings validation");
        //     govDelegateMaybeValidating : Bool = 
        //         govDelegate.validatesUpdatedSettings(
        //             inputs: inputs,
        //             mph: mph,
        //             inputRequired: false
        //         ).switch{
        //             Some => true,
        //             None => {
        //                 print("  -- govAuthority isn't a script-based validator; doesn't validate new settings\n");
        //                 true
        //             }
        //         };
        //     checkOneInvariant : (RelativeDelegateLink) -> Bool = 
        //     (oneDgt: RelativeDelegateLink) -> Bool {
        //         REQT( "invariant must validate settings");
        //         oneDgt.validatesUpdatedSettings(
        //             inputs: inputs,
        //             mph: mph,
        //             inputRequired: true
        //         ).unwrap()
        //     };
        //     // spendInvariants are checking the settings
        //     REQT( "spend invariants must validate settings");
        //     spendInvariantsAreValidating : Bool = spendInvariants.all( 
        //         checkOneInvariant
        //     );
        //     // mintInvariants are checking the settings
        //     REQT( "mint invariants must validate settings");
        //     mintInvariantsAreValidating : Bool = mintInvariants.all( 
        //         checkOneInvariant
        //     );
        //     // namedDelegates are checking the settings
        //     REQT( "named delegates must validate settings");
        //     namedDelegatesAreValidating : Bool = namedDelegates.fold( 
        //         REQT( "  - each named delegate must validate settings");
        //         (ok: Bool, key: String, dgt: RelativeDelegateLink) -> Bool {
        //             print("  - named delegate: " + key);
        //             print("\n");
        //             ok && dgt.validatesUpdatedSettings(
        //                 inputs: inputs,
        //                 mph: mph,
        //                 inputRequired: true
        //             ).unwrap()
        //         }, true
        //     );

        //     isRelevantDatum &&
        //     settingsDelegateIsValid &&
        //     isUpdatingSettings &&
        //     spendDelegateIsValidating &&
        //     mintDelegateIsValidating &&
        //     govDelegateMaybeValidating &&
        //     spendInvariantsAreValidating &&
        //     mintInvariantsAreValidating &&
        //     namedDelegatesAreValidating &&
        //     hasGovAuthority
        // },
        // retiringSettings => {
        //     print( "  ...with activity retiringSettings\n");
        //     error("implement me")
        // },
        _ => error("unhandled activity")
    };

    assert(allDatumSpecificChecks, "some datum-check failed");
    assert(allActivitySpecificChecks, "some redeeemer-check failed");

    //! retains mph in parameterization
    assert(
        ( allDatumSpecificChecks && allActivitySpecificChecks ) ||
            // this should never execute (much less fail), yet it also shouldn't be optimized out.
             mph.serialize() /* never */ == mph.serialize(), 
        "unreachable"
    ); 
    print("\n🚥🟢 Capo validator: ok!\n\n");

    allDatumSpecificChecks && 
    allActivitySpecificChecks
    // tx.serialize() != datum.serialize()
}
