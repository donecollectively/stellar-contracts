

module CapoMintHelpers
import {
    mustFindInputRedeemer,
    mkTv,
    TODO,
    REQT,
    tvCharter
} from StellarHeliosHelpers

import {tx, get_current_input} from ScriptContext

import {
    getTxCharterData,
    CapoCtx,
    mkCapoCtx,
    DelegateInput,
    CapoDatum, 
    CapoActivity
} from CapoHelpers


import {
    RelativeDelegateLink,
    AbstractDelegateActivitiesEnum,
    DelegateLifecycleActivity
} from CapoDelegateHelpers

func hasSeedUtxo(tx: Tx, seedUtxo: TxOutputId
    // , reason: String
) -> Bool {
    REQT("It must spend the indicated seed UTXO");

    if (!tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    })) {
        print(" - expected seedUtxo: ");
        print(seedUtxo.show());
        print("\n");
        // + "\n"+seedUtxo.tx_id.show() + " : " +seedUtxo.index.show()
        assert(false, "missing expected seed input for minting")
        // +reason 
    };
    print( "  -- has seed -> ok\n");
    true
}

func noOtherActivitiesSupported( _: AbstractDelegateActivitiesEnum) -> Bool {
    print("yikes, expected the delegate to use activity DelegateLifecycleActivities:ReplacingMe or authorizingDelegate...\n");
    print("   -- note: for other cases, a context-specific check via validateUutMinting's (\n"+
      "  ...\n  checkMintDgtActivity: (AbstractDelegateActivitiesEnum) -> Bool)\n"+
      ") option can be used to steer around this failure.\n");
    assert(false, "unexpected delegate activity");
    false
}

func requiresDelegateAuthorizingMint(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash,     
    extraMintDelegateRedeemerCheck: Bool = true,
    checkMintDgtActivity: (AbstractDelegateActivitiesEnum) -> Bool = noOtherActivitiesSupported
) -> Bool {
    // authzVal : Value = Value::new(AssetClass::new(mph, delegateLink.uutName.encode_utf8()), 1);
    authzAc : AssetClass = delegateLink.acAuthorityToken(mph);
    REQT("requires the charter's mint-delegate to authorize this mint activity");
    print("  -- finding input dgTkn: " + delegateLink.uutName);

    targetId: TxOutputId = tx.inputs.find_safe((i: TxInput) -> {
        // print("   ?  in "+i.value.show());
        i.value.get_safe(authzAc) > 0 // find my authority token
    }).switch{
        Some{x} => x.output_id,
        None => error("  ❌❌ missing dgTkn "+delegateLink.uutName)
    };
    print ("    -- ✅ ➡️  💁found dgTkn ^");
    spendsAuthorityUut : ScriptPurpose = tx.redeemers.find_key( 
        (purpose : ScriptPurpose) -> { purpose.switch{ 
            sp: Spending => {
                // print ("oid: " + sp.output_id.show());
                sp.output_id == targetId
            }, 
            _ => false 
        } }
    );

    // r : Data = tx.redeemers.get(  // index redeemers by...
    //     ScriptPurpose::new_spending(  // [spending, plus ...
    //     );
        //!!! Todo replace this with a return of Option[delegate-redeemer}?
    err : String = "dgTkn "+delegateLink.uutName+" not being spent as expected"; // "not spent with an authorizing activity!")
    maybeCheckedMintDelegateAuthority : Bool = tx.redeemers.get_safe(
        spendsAuthorityUut
    ).switch {
        None => {
            error(err)
        },
        Some{x} => {
            activity = AbstractDelegateActivitiesEnum::from_data(x);
            activity.switch {
                DelegateLifecycleActivities{DLA} => {
                    TODO("VERIFY we ---------------- don't need the funny redeemer-check skipping");
                    if (!extraMintDelegateRedeemerCheck) {
                        print(" vvv wherever it is, probably best it uses the checkMintDgtActivity option");
                        error("where is extraMintDelegateRedeemerCheck=false really needed?")
                        //     print("  -- ok, dgTkn spent\n");
                        //     print("  ---- skip redeemer check\n");
                        //     true
                    };
                    DLA.switch {
                        ReplacingMe => {
                            print("  -- ok, dgTkn spent\n");
                            true
                        },
                        Retiring => error("DLA::Retiring can't mint!"),
                        ValidatingSettings => error("DLA::ValidatingSettings can't mint!")
                    }
                },
                _ => checkMintDgtActivity(activity)
            }
        }
    };
    delegateDidAuthorize = true; // otherwise, we'd have failed above.

    // NOTE: DOESN'T CHECK that the AUTHORIZING DELEGATE is returned anywhere specific.
    //    - it's not generally a minting responsibility (however, as an exception the bootstrap charter event DOES 
    //      actually check for valid delegate outputs).  All other cases should have the correct
    //      delegate outputs checked (e.g. in the Capo's CharterData spend checker).
    // maybeCheckDelegateOutput : Bool = if (!checkDelegateOutput) {
    //     print("  -- skipping check for expected delegate output ");
    //     true
    // } else {
    //     delegateLink.hasValidOutput(mph)        
    // };
    delegateDidAuthorize && maybeCheckedMintDelegateAuthority
}

func requiresMintDelegateApproval(
    mph: MintingPolicyHash
) -> Bool {
    cctx : CapoCtx = mkCapoCtx(mph).needsCharter();
    print("Minter needs mintDgt + mint activity\n");
    REQT("EXPECTS the application-specific mintDelegate to explicitly check and approve the full minted value");
    
    // print ("      ❇️  "+ 
    //     tx.minted.get_policy(mph).to_list(
    //         (b : ByteArray, i: Int) -> String { 
    //             i.show() + "x " + b.decode_utf8_safe()
    //         }
    //     ).join(" + ") 
    // + "\n");

    print("    -- ^ e.g. assert(tx.minted.get_policy(mph) == expectedMintedValue);\n");
    print("    ---- (if it's only responsible for one minting policy)\n");
    // if (true) {
        // todo: enforces minting invariants.
        TODO("must enforce minting invariants");
    // }; 

    mintDgtInput : DelegateInput = cctx.requiresMintDelegateInput();
    mintDgtActivity : AbstractDelegateActivitiesEnum = mintDgtInput.genericDelegateActivity();


    // TODO restore this: mintDgtInput.requiresValidOutput() && 
    mintDgtActivity.switch {
        CapoLifecycleActivities{CLA} => CLA.switch {
            CreatingDelegate => {
                TODO( "make this obsolete: generic creatingDelegate (use queuePendingChange and committingPendingChanges in sequence)");
                // print("  -- minter wants mintDgt + CapoLifecycle (delegate-creation)\n");

                mintDgtInput.requiresValidOutput() && 
                true
            }, 
            queuePendingChange => {
                print("  -- ok: mintDgt using CapoLifecycle.queuePendingChange)\n");
                mintDgtInput.requiresValidOutput() && 
                true
            },
            commitPendingChanges => {
                print("  -- ok: mintDgt using CapoLifecycle.commitPendingChanges)\n");
                mintDgtInput.requiresValidOutput() && 
                true
            },
            forcingNewSpendDelegate => error("invalid forcingNewSpendDelegate activity on mintDgt (escape-hatch reserved for Minter/Capo pair)"),
            forcingNewMintDelegate => error("invalid forcingNewMintDelegate activity on mintDgt (escape-hatch reserved for Minter/Capo pair)"),
            _ => error("mint dgt can only approve CapoLifecycleActivities.queuePendingChange or non-CLA activities")
            // _ => error("no")// ---- left as a compile-time error if any further variants are added 
        },
        SpendingActivities => error("DelegateInput::SpendingActivity can't mint!"),
        DelegateLifecycleActivities{DLA} => {
            DLA.switch {
                ReplacingMe => {
                    TODO( "relay delegate installation sequence" 
                        // "the new delegate should be minted under CapoLifecycleActivities::CreatingDelegate, then installed \n  ...without the minter's involvement, using its DelegateLifecycle::Installing activity"
                    );
                    print("  -- TEMPORARY: the mint delegate is being replaced\n");
                    true
                },
                Retiring => error("DLA::Retiring can't mint!"),
                ValidatingSettings => error("DLA::ValidatingSettings can't mint!")
            }
        },
        MintingActivities => {
            print("  -- app-specific minting; trust mintDgt\n");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        BurningActivities => {
            print("  -- app-specific burning; trust mintDgt");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        CreatingDelegatedData => {
            print("  -- mint for dgData; trust mintDgt");            
            mintDgtInput.requiresValidOutput() && 
                true
        },
        DeletingDelegatedData => {
            print("  -- burn for dgData; trust mintDgt");
            mintDgtInput.requiresValidOutput() && 
                true
        },
        UpdatingDelegatedData => error("invalid mint-delegate activity for minting; UpdatingDelegatedDatum can't mint"),
        MultipleDelegateActivities{ma} => {
            // assert(false && ma.length > 0, "empty MultipleDelegateActivities");
            mintDgtInput.requiresValidOutput()
            && ma.map(AbstractDelegateActivitiesEnum::from_data).all(
                (mintDgtActivity: AbstractDelegateActivitiesEnum) -> Bool {
                    mintDgtActivity.switch {
                        CreatingDelegatedData => true, // short version of recursing the full check
                        DeletingDelegatedData => true, // short version of recursing the full check
                        MintingActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested MintingActivities invalid"
                        ),
                        BurningActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested BurningActivities invalid"
                        ),
                        MultipleDelegateActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested MultipleDelegateActivities invalid"
                        ),
                        UpdatingDelegatedData => error(
                            "mintDgt: MultipleDelegateActivities: nested UpdatingDelegatedData invalid"
                        ),
                        SpendingActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested SpendingActivities invalid"
                        ),
                        CapoLifecycleActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested CapoLifecycleActivities invalid"
                        ),
                        DelegateLifecycleActivities => error(
                            "mintDgt: MultipleDelegateActivities: nested DelegateLifecycleActivities invalid"
                        )
                    }
                }
            )
        }
    }


    // requiresDelegateAuthorizingMint(
    //     delegateLink: mintDgt, 
    //     mph: mph,
    // )
}

//! pre-computes the hash-based suffix for a token name, returning
//  a function that cheaply makes Uut names with any given purpose, 
// given the initial seed-txn details
func mkUutTnFactory(
    seed: TxOutputId
) -> (String) -> String {

    seedTxId : TxId = seed.tx_id;
    seedIdx : Int = seed.index;


    idxBytes : ByteArray = seedIdx.serialize();
    // assert(idxBytes.length == 1, "surprise!");

    //! yuck: un-CBOR...
    rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    txoInfo : ByteArray = if (idxBytes.length > 9) { 
        // allows 9 bytes to ensure we can support 
        // the largest possible cbor encoding of txo-index integers, 
        // even though we only expect integers < 256 currently
        assert(false, 
            //"expected cbor(txo index) to be at most 9 bytes, got cbor( index=
            //  + seedIdx.show() + " ).hex = " + idxBytes.show()
            "cbor(txoId) len > 9 !!"  
        );
        idxBytes // never used
    } else {
       ( rawTxId + "@".encode_utf8() )+ idxBytes
    };
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // print( "******** txoId " + txoId.show());

    miniHash : ByteArray = txoInfo.blake2b().slice(0,6);
    // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    mhs: String = miniHash.show();

    // returns a function computing a lightweight prefix + miniHash
    (p: String) -> String {
        p + "-" + mhs
    }
}

func tnCip68nft222(tn : String) -> ByteArray{
     #000de140 + tn.encode_utf8()
}

func tnCip68ref100(tn : String) -> ByteArray {
    #000643b0 + tn.encode_utf8()
}

/**
 * ensures that minted- and expected-token-names are both
 * sorted in the same way.  The on-chain format requires shorter-first,
 * but we re-sort them (both) because the node doesn't always present them in
 * script-context in that required order.  
 *
 */
 func sortPolicyValuesPredictably(k1 : ByteArray, _v1 : Int, k2 : ByteArray, _v2: Int) -> Bool {
     k1 < k2
 }

 /*
 * ensures that shorter token-names are mentioned before longer ones
 * AND that lexographically smaller names are mentioned first.  This is
 * the canonical ordering and is required for hardware wallets to work.
 */

func sortPolicyValuesShortestFirst(k1 : ByteArray, _v1 : Int, k2 : ByteArray, _v2: Int) -> Bool {
    if (k1.length < k2.length) { 
        true
    } else if (k1.length > k2.length) {
        false
    } else {
        k1 < k2
    }
}

// checks all of the following:
//  - there's an approving delegate (or we're bootstrapping)
//  - the mint includes the seed UTXO
//  - the mint matches the UUTs indicated by the list of purposes
func validateUutMinting(
    mph: MintingPolicyHash,
    seed: TxOutputId,
    purposes: []String,     
    mkTokenName: (String) -> String = mkUutTnFactory(seed),
    bootstrapCharter:Value = Value::ZERO,
    otherMintedValue: Value = Value::ZERO,
    needsMintDelegateApproval: Bool = true,
    extraMintDelegateRedeemerCheck: Bool = true,
    checkMintDgtActivity: (AbstractDelegateActivitiesEnum) -> Bool = noOtherActivitiesSupported
) -> Bool {
    isBootstrapping : Bool = !( bootstrapCharter.is_zero() );

    delegateApproval : Bool = if ( isBootstrapping ) { 
        true 
    } else {
        // not bootstrapping; must honor the mintDelegate's authority
        CapoDatum::CharterData {
            _spendDgt,
            _spendInvariants,
            _namedDelegates,
            mintDgt, 
            _mintInvariants, 
            _govAuthority,
            _manifest,
            _pendingDelegates
        } = getTxCharterData(mph);

        if (needsMintDelegateApproval) {
            //!!! todo: add explicit activity details in authorization
            requiresDelegateAuthorizingMint(
                delegateLink: mintDgt, 
                mph: mph, 
                extraMintDelegateRedeemerCheck: extraMintDelegateRedeemerCheck,
                checkMintDgtActivity: checkMintDgtActivity
            )
        } else {
            true
        }
    };


    valueMinted: Value = tx.minted;

    // idxBytes : ByteArray = seedIdx.bound_max(255).serialize();
    // // assert(idxBytes.length == 1, "surprise!");

    // //! yuck: un-CBOR...
    // rawTxId : ByteArray = seedTxId.serialize().slice(5,37);

    // txoId : ByteArray = (rawTxId + "@".encode_utf8() + idxBytes);
    // assert(txoId.length == 34, "txId + @ + int should be length 34");
    // // print( "******** txoId " + txoId.show());

    // miniHash : ByteArray = txoId.blake2b().slice(0,6);
    // // assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    // tokenName1 = purpose + "." + miniHash.show();

    // print(" purposes: " + purposes.join(", "));
    expectedValue : Value = bootstrapCharter + otherMintedValue + Value::sum(
        purposes.map(
            (purpose: String) -> Value {
                // print("purpose: " + purpose);
                mkTv(mph: mph, tn: mkTokenName(purpose) /*, => 1 */)
            }
        )
    );

    if (! valueMinted.contains_policy(mph) ) {
        mphStr = mph.show();
        valStr = valueMinted.show();
        print( "  -- no mint from our policy "+ mphStr);
        print(valStr);
        print( "^^  value minted");
        error("❌❌ validateUutMinting(): no mint from our policy")
    };

    // seedTxId = seed.tx_id.show();
    // seedIdx = seed.index.show();
    // print("\n  -- uut-minting seed: " + seedTxId + "🔹#"+seedIdx);

    expectedValuesSorted = expectedValue.
        get_policy(mph).
        sort(sortPolicyValuesPredictably);
    expectedValuesSorted.for_each( (tn : ByteArray, i: Int) -> {
        tnStr = tn.decode_utf8_safe();
        print( "    ℹ️ 🐞 expected: "+ i.show() + "x " + tnStr )
    });

    actualThisPolicyMint = valueMinted.get_policy(mph);
    actualThisPolicyMintSorted = actualThisPolicyMint.
        sort(sortPolicyValuesPredictably);
    // expectedMint : Map[ByteArray]Int = expectedValue.get_policy(mph);
    if (true) {
        actualThisPolicyMintSorted.for_each( (tn : ByteArray, i: Int) -> {
            tnStr = tn.decode_utf8_safe();  
            print( "    ℹ️ 🐞   actual: " + i.show() + "x " + tnStr )
        });
        print("other policy values minted: \n");
        print(Value::from_map(valueMinted.to_map().filter( (b:MintingPolicyHash, _ /* Map[ByteArray]Int */ ) -> Bool {
            b != mph
        })).show())
    };

    // _temp : []ByteArray = actualMint.fold( (l: []ByteArray, b : ByteArray, i: Int) -> {
    //     l.find_safe((x : ByteArray) -> Bool { x == b }).switch{
    //         None => l.prepend(b),
    //         Some /*{x}*/ => error("UUT duplicate purpose "
    //             // +  x.decode_utf8_safe()
    //         )
    //     }
    // }, []ByteArray{});
    // assert(true || (temp == temp), "prevent unused var");

    

    REQT("Ensures the mint for this policy-id is exactly the expected value");
    thisPolicyMintOK = actualThisPolicyMintSorted == expectedValuesSorted;
    assert(thisPolicyMintOK, "mismatch in UUT mint");
    print("  -- this-policy mint ok");
    assert(hasSeedUtxo(tx, seed), "no seed"); //, "UUT "+purposes.join("+")
    print("  -- ok: has seed and expected this-policy mint value");

    otherPoliciesMintOk = if (!otherMintedValue.is_zero()) { true } else {
        REQT("... with an additional mint-value indicated");

        remainingExpectedMint = if (expectedValue.contains_policy(mph)) {
            Value::from_map(
                expectedValue.to_map().delete(mph)
            )
        } else { expectedValue };

        if (remainingExpectedMint.is_zero()) { true } else {
            REQT("...with other-policy values expected: ");
            print( remainingExpectedMint.show() + "^ other-mint value expected");
            REQT("It should mint exactly the indicated token names");
            REQT("Doesn't constrain any mentioned policy's minting of any other tokens");
            remainingExpectedMint.to_map().for_each( 
                (otherMph: MintingPolicyHash, expectedTokensThisPolicy: Map[ByteArray]Int) -> {
                    mintedThisPolicy : Map[ByteArray]Int = valueMinted.get_policy(otherMph);

                    expectedTokensThisPolicy. 
                    for_each( (tokenName: ByteArray, expectedCount: Int) -> {
                        if(! mintedThisPolicy.get_safe(tokenName).
                            switch {
                                None => false,
                                Some{actualCount} => actualCount == expectedCount
                            }
                        ) {
                            tnString = tokenName.decode_utf8_safe();
                            error(
                                "❌❌ validateUutMinting(): wrong mint for "+ otherMph.show() + ":" + tnString
                            )
                        }}
                    )
                }
            );
            true
        }
        // ^^ any errors are thrown in here
    };
    assert(
        otherPoliciesMintOk.trace("  -- other-expected-mints ok? "), 
        "unreachable exception: otherPoliciesMintOk"
    );

    print(" ✅ validateUutMinting:  ok!\n");

    delegateApproval && thisPolicyMintOK && otherPoliciesMintOk 
}

enum MinterActivity { 
    mintingCharter { // 0
        owner: Address
        //xxx withSettings: Bool
        // we don't have a responsiblity to enforce delivery to the right location
        // govAuthority: RelativeDelegateLink   // not needed 
    }
    mintWithDelegateAuthorizing // 1 - delegate is handling all mints

    // obsoleted by Capo lifecycle activity (queuePendingChange with role=MintInvariant)
    addingMintInvariant { //2 
        seed: TxOutputId
    }

    // obsoleted by Capo lifecycle activity (queuePendingChange with role=SpendInvariant)
    addingSpendInvariant { //3
        seed: TxOutputId
    }

    forcingNewMintDelegate { //4
        seed: TxOutputId
    }

    CreatingNewSpendDelegate { //5
        seed: TxOutputId
        // when not forcing the new delegate, the old UUT will be replaced:
        replacingUut: Option[ByteArray]
    }

}

