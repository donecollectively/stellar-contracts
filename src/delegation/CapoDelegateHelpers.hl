module CapoDelegateHelpers

import {
    tx, 
    get_current_input,
    get_current_validator_hash,
    get_cont_outputs
} from ScriptContext

import {
    AnyData,
    mustFindInputRedeemer,
    mkTv,
    returnsValueToScript
} from StellarHeliosHelpers

// todo: add this to RelativeDelegateLink
enum stakingKeyRequirement {
    NoStakingKeyAllowed
    StakingKeyRequired
    SpecificStakeKeyRequired {
        stakeCredential: StakingCredential
    }
}

// use this activity at Redeemer zero, as enum Redeemer {
//   DelegateLifecycleActivity { a: DelegateLifecycleActivity }}
//   ... followed by app-specific redeemer variants
// }
enum DelegateLifecycleActivity {
    ReplacingMe { // replaces this delegate with a different one
        seed: TxOutputId
        purpose: String
    }
    Retiring
    ValidatingSettings
}

enum DelegateRole {
    MintDgt
    SpendDgt
    MintInvariant
    SpendInvariant
    DgDataPolicy {
        name: String
    }
    OtherNamedDgt {
        name: String
    }
    BothMintAndSpendDgt
    HandledByCapoOnly
}

enum ManifestActivity {
    retiringEntry {
        key: String
    }
    updatingEntry {
        key: String  // must already exist
        tokenName: ByteArray  // must reference or input new & old
    }
    addingEntry {
        key: String  // must not exist
        tokenName: ByteArray // must reference or input new & old
    }
    forkingThreadToken {
        key: String // must mint new & create a clone of the existing token
        newThreadCount: Int
    }
    burningThreadToken {
        key: String // must burn the token
        burnedThreadCount: Int // must match the count of the burned token
    }
}

enum PendingDelegateAction {
    Add {
        seed: TxOutputId
        purpose: String
        idPrefix: String
        // uutName: String
        // delegateValidatorHash: Option[ValidatorHash]
        // config: ByteArray
    }
    Remove
    Replace {
        seed: TxOutputId
        purpose: String
        idPrefix: String

        // uutName: String
        // delegateValidatorHash: Option[ValidatorHash]
        // config: ByteArray

        replacesDgt: AssetClass
    }
}

// use this activity at Redeemer #1 CapoLifecycleActivities
enum CapoLifecycleActivity {
    CreatingDelegate {
        seed: TxOutputId
        purpose: String
    }
    queuePendingChange 
        // seed: TxOutputId
        // purpose: String
        // action: PendingDelegateAction

        // role: DelegateRole
        // name: Option[String]
    // }
    removePendingChange {
        role: DelegateRole
    }
    commitPendingChanges
    forcingNewSpendDelegate {
        seed: TxOutputId
        purpose: String //uut purpose "spendDgt"
    }
    forcingNewMintDelegate {
        seed: TxOutputId
        purpose: String //uut purpose "mintDgt"
    }
        // manifest-updating activities, ALWAYS at Enum position 5
    // this is not application-specific.  It's placed into the delegation
    // layer so that a spend-delegate's manifest-updating logic can be
    // upgraded while leaving the Capo unchanged.
    updatingManifest {
        activity: ManifestActivity
    }

    
}

// use this enum to match any redeemer if you don't care about what other
// variants may be in that delegate, but you know it has to be a delegate with the 
// universal delegate activities at constr#0
enum AbstractDelegateActivitiesEnum {
    CapoLifecycleActivities {
        activity: CapoLifecycleActivity
    }
    DelegateLifecycleActivities {
        activity: DelegateLifecycleActivity
    }
    SpendingActivities {
        activity: Data
    }
    MintingActivities {
        activity: Data
    }
    BurningActivities {
        activity: Data
    }

    // allows for delegated-data minting activities to be checked generically,
    // instead of having to create explicit minting/spending activities for each one.
    // The mint/spend delegate can thus generically support any registered data-type,
    // enforcing that right delegate is used but not needing to deal with specifics of 
    // their activities.  Requires a typeMap for to resolve dataType to the concrete delegate.

    CreatingDelegatedData {
        seed: TxOutputId
        dataType: String
        // id from seed
    }
    UpdatingDelegatedData {
        // seed not used
        dataType: String
        recId: ByteArray
    }
    DeletingDelegatedData {
        // seed not used
        dataType: String
        recId: ByteArray
    }
    MultipleDelegateActivities {
        activities: []Data // actually a []DelegateActivitiesEnum
    }
}
enum DgTknDisposition {
    Returned
    Created
}

// data stored in the Capo, representing basic delegate info
//   about the connection to a delegate.  
struct RelativeDelegateLink {
    uutName: String 

    // delegate links without a validator hash are "arms-length" delegates,
    // which means they won't be checked for possible auto-upgrades 
    //  ... to new versions of their code.
    // it also means that they won't be able to participate 
    //   ... in validation of configuration changes in the Capo.
    delegateValidatorHash: Option[ValidatorHash]
    config: ByteArray
    // !!! todo ???  - for namedDelegates particularly
    // stakingCred: stakingKeyRequirement

    func getRedeemer(self,  input : TxInput)  -> AbstractDelegateActivitiesEnum {
        assert( true || /* not executed */ self == self, "no way s");// avoid unused variable
        AbstractDelegateActivitiesEnum::from_data( 
            mustFindInputRedeemer(input)
        )
    }

    func tvAuthorityToken(self, mph: MintingPolicyHash) -> Value {
        mkTv(mph: mph, tn: self.uutName)
    }

    func acAuthorityToken(self, mph: MintingPolicyHash) -> AssetClass {
        AssetClass::new(mph, self.uutName.encode_utf8())
    }

    // func getTv(self, mph: MintingPolicyHash) -> Value {
    //     assert(false, "deprecated getTv(); use RDL.tvAuthorityToken instead");
    //     mkTv(mph: mph, tn: self.uutName)
    // }
    
    func validatesUpdatedSettings(self,
        inputs: []TxInput,
        mph: MintingPolicyHash,
        inputRequired: Bool
    ) -> Option[Bool] {
        self.hasDelegateInput( // fails if req'd input missing
            inputs: inputs,
            mph: mph,
            required: inputRequired
        ).switch {            
            None => Option[Bool]::None, // clean "not found but the caller indicated that's ok"
            Some{spendDelegateInput} => {
                spendDelegateIsValid : Bool = AbstractDelegateActivitiesEnum::from_data( 
                    mustFindInputRedeemer(spendDelegateInput)
                ).switch {
                    DelegateLifecycleActivities{a} => {
                        a.switch {
                            ValidatingSettings => self.hasValidOutput(mph),
                            _ => error("delegate not ValidatingSettings: "+ self.uutName)
                        }
                    },
                    _ => error("no way n") // throws if the redeemer isn't #0.
                };

                assert(spendDelegateIsValid, "no way o"); // it threw any error already
                Option[Bool]::Some{spendDelegateIsValid}
            }
        }
    }

    func hasDelegateInput(self, 
        inputs: []TxInput, 
        mph: MintingPolicyHash,
        required: Bool = true
    ) -> Option[TxInput] {
        uutName : String = self.uutName;
        self.delegateValidatorHash.switch{
            // when no special input is needed by the delegate, 
            None => {
                if (required) {
                    error("❌❌ ➡️ 💁 missing required input with dgTkn " + uutName)
                } else {
                    Option[TxInput]::None
                }
            },
            Some{vh} => {
                needsAddrWithCred : SpendingCredential = SpendingCredential::new_validator(vh);
                // if we arrived here, then we have a delegate that's supposed to be at a specific address.
                // if we can't find an input with that address, it's an error condition.
                // we need an input with this address, having the expected UUT.

                ac = AssetClass::new(mph, uutName.encode_utf8());
                // expectedUut : Value = mkTv(mph: mph, tn: uutName);

                print("  -- seeking input dgTkn: "+ uutName);
                inputs.find_safe((i: TxInput) -> Bool {
                    i.address.credential == needsAddrWithCred &&
                    i.value.get_safe(ac) > 0
                }).switch {
                    foundGood: Some => {
                        print ("  ✅ ➡️  💁 found ^ input dgTkn" );
                        foundGood
                    },
                    /* notFound: */ None => {
                        if (required) {
                            error("_❌ ➡️  💁 missing req'd input dgTkn (at script addr) " + uutName)
                        } else {
                            print (" <- 🚫 ➡️ 💁 no input with ^ dgTkn; not req'd; returning false\n");
                            Option[TxInput]::None
                        }
                    }
                }
            }        
        }
    }
    
    // was requiresValidDelegateOutput 
    func hasValidOutput(
        self, // delegateLink: RelativeDelegateLink, 
        mph: MintingPolicyHash, 
        required: Bool = true,
        createdOrReturned: DgTknDisposition = DgTknDisposition::Returned
    ) -> Bool {
        RelativeDelegateLink{
            uut,  
            validatorHash, 
            _ /* configJson */
        } = self;
    
        // v : Value = mkTv(mph, uut);
        ac = AssetClass::new(mph, uut.encode_utf8());

        cOrR : String = createdOrReturned.switch{
            Returned => "returned",
            Created => "created"
        };
        print(" ⬅️ 🔎 💁 expect dgTkn "+ cOrR + ": "+ uut);
        hasDelegate : Bool = validatorHash.switch{
            Some{vh} => {
                print( "  ... ^ sent to validator: "+vh.show()+"\n");
                tx.value_locked_by(vh).get_safe(ac) > 0
            },
            None => {
                print("   (to anywhere)");

                tx.outputs.find_safe((o : TxOutput) -> Bool {
                    o.value.get_safe(ac) > 0
                }).switch{
                    Some => true, 
                    None => false
                }
            }
        };
    
        if (!hasDelegate && required) {
            // this branch has no on-chain cost
            // throws for a missing input 
            createdOrReturned.switch {
                Created => error("⬅️ ❌ 💁 dgTkn not created: "+ uut),
                Returned => { // throws unless the right INPUT is                    
                    _ = self.hasDelegateInput(tx.inputs, mph, true);
                    error("⬅️ ❌ 💁 dgTkn not returned: "+ uut )
                }
            }
        } else {
            // print(uut);
            if (hasDelegate) {
                print(" ⬅️ ✅ 💁 ok:  ^ dgTkn has "+cOrR+" a valid output\n")
            } else {
                print(" ⬅️ 🚫 💁 no delegate but not req'd; false")
            }
        };
        hasDelegate

                    // self.hasDelegateInput(tx.inputs, mph, true).switch {
                    //     Some => {
                    //         // throws if it's spent, but not returned correctly:
                    //         error("⬅️ ❌ 💁 dgTkn not returned: "+ uut )
                    //     },
                    //     _ => error("no way p")
                    // }

    }
    
    // config: Data
}


struct PendingDelegateChange {
    action: PendingDelegateAction
    role: DelegateRole
    // name: Option[String] // moved to DelegateRole variants for named delegates/dgDataPolicy
    dgtLink: Option[RelativeDelegateLink]

    func isValid(self) -> Bool {
        self.role.switch {
            BothMintAndSpendDgt => error(
                "DelegateRole::BothMintAndSpendDgt not applicable in a PendingDelegateChange struct"
            ),
            _ => true
        }
    }
}

enum PendingCharterChange {
    delegateChange {
        change: PendingDelegateChange
    }
    otherManifestChange {
        activity: ManifestActivity
        /**
         * indicates delegates that are needed to validate a pending change
         * @remarks
         * not every manifest change has to be validated by delegates, 
         * ... but those that do can enforce:
         *   (a) creating this list of delegates that must validate
         *   (b) that the list becomes empty before the change is committed.
         *   (c) OR that any remaining delegates are validating the committed data
         * ... as part of the txn completing the change.
         *
         * This helps ensure that the change is validated by the right delegates,
         *  ... without needing all the validation to be done in a single transaction
         */ 
         remainingDelegateValidations: []DelegateRole
    }
}

// data stored in isDelegate Datum (in the delegate's script)
// ... links back to the capo info
struct DelegationDetail {
    capoAddr: Address
    mph: MintingPolicyHash
    tn: ByteArray

    func acAuthorityToken(self) -> AssetClass {
        AssetClass::new(self.mph, self.tn)
    }
    func tvAuthorityToken(self) -> Value {
        Value::new(
            AssetClass::new(self.mph, self.tn), 1
        )
    }
}

// Delegates can define additional Datum in their enums,
// but this first Datum is essential
enum BASE_DELEGATE_Datum {
    Cip68RefToken {  
        cip68meta: AnyData
        cip68version: Int
        otherDetails: Data
    }

    IsDelegation {
        dd: DelegationDetail
    }
    // same variant-index and structure as Capo's DelegatedData
    capoStoredData {
        data: AnyData
        version: Int
        otherDetails: Data 
    }
}

func mustReturnValueToScript(
    value : Value, 
    tokenName: ByteArray = #
) -> Bool {
    if (!returnsValueToScript( value)) {
        print("failed matching value: ");
        print(value.show());
        print("\n");
        error(" ❌ dgTkn not returned: " + tokenName.decode_utf8_safe())
        // error("the authZor token MUST be returned")
    } else { 
    true
    }
}

//!!! call with existing delegate Datum.serialize()
func unmodifiedDelegation(oldDD : ByteArray) -> Bool {
    o : []TxOutput = get_cont_outputs();
    //    print("::::::::::::::::::::::::::::::::: hi "+o.head.datum.inline.serialize().show());

    assert(o.head.datum.inline.serialize() == oldDD,
    // "delegation datum must not be modified"
    "modified dgtDtm"
);
    true
    // MintDelegateDatum::IsDelegation{
    //     ddNew, _
    // } = MintDelegateDatum::from_data( 
        
    // );

    //! the datum must be unchanged.
    // ddNew == dd 
}

func requiresNoDelegateInput(
    delegateLink: RelativeDelegateLink, 
    mph: MintingPolicyHash
) -> Bool {
    // v : Value = mkTv(mph: mph, tn: delegateLink.uutName);
    ac : AssetClass = delegateLink.acAuthorityToken(mph);
    if (tx.inputs.any((i: TxInput) -> Bool {
        i.value.get_safe(ac) > 0
    })) {
        error("must not have dgTkn input: "+delegateLink.uutName)
    } else {
        print("ok: no dgTkn input: "+delegateLink.uutName);
        true
    }
}

// just some convenience stuff to lead people to the right place
struct delegateLink_hasValidOutput_asMethod {
    placeHolder: String 
}

// func requiresValidDelegateOutput(
//     delegateLink: delegateLink_hasValidOutput_asMethod,
//     mph: MintingPolicyHash, 
//     required: Bool = true
// ) -> Bool {
         ///                  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//     assert(false, "replaced by delegateLink.hasValidOutput(...)");
//     assert(delegateLink==delegateLink, "no way q");
//     assert(mph==mph, "no");
//     assert(required==required, "no way r");
//     true
// }
// :ladybug emoji: "🐞xy"

// !!! this could be really nice but it's difficult to use it in practice.
// type-aliasing would be amazing.
enum SomeDelegateDatum[T] {
    Cip68RefToken {  
        // NOTE: this datum contains reference details for a user-facing token minted according to the cip-68 standard 
        //  - the asset name (in the Value of this UTXO) MUST be:  #000643b0 + tokenName
        //     - this asset name can serve user-side tokens using the CIP-68 "222", "333" or other token types.
        //     - the user-side asset name with its (222/333/etc) CIP-67 prefix and 
        //       ... its remaining tokenName will be matched to this asset name (#000643b0 +tokenName)
        //       ... to locate this reference datum; this datum content will be interpreted
        //       ... according to the semantics implied by the user-side asset-name prefix.
        //
        //  - The attached 'meta' field in this Datum variant contains the relevant data, depending on the token type
        //    - for "222" tokens, the meta field should contain the following fields:
        //        - "name" : String
        //        - "description" : String 
        //        - "files" :   // {mediaType, src (url), name?, ... otherFields)
        //        - "image": String  // image url: https://, ar://, ipfs:// or data:// (RFC2397 data)
        //    - for "333" tokens, the meta field should contain the following fields:
        //        - "name" : String
        //        - "description" : String 
        //        - "ticker" : String

        //        - "url": String  // project URL
        //        - "logo": String  // image url: https://, ar://, ipfs:// or data:// (RFC2397 data)
        //                    - it must have a mime type `image/png`, `image/jpeg` or `image/svg+xml`
        //        - "decimals" : Int

        meta: AnyData
        version: Int
        otherDetails: Data // can be Unit () or anything else
    }

    IsDelegation {
        dd: DelegationDetail
    }
    // same variant-index as Capo's DelegatedData
    capoStoredData {
        data: T
        version: Int
        otherDetails: Data 
    }

    // func validateSettings(self, _settings: ProtocolSettings) -> Bool{
    //   ... get the settings from the manifest via ccts
    //     assert(false, "not valid (stubbed)");
    //     // settings.serialize() != self.serialize() &&
    //     true
    // }    
}
