// generated by StellarHeliosProject using Stellar heliosRollupTypeGen()
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import type { UplcData } from "@helios-lang/uplc";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    InlineTxOutputDatum,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
import type { Cast } from "@helios-lang/contract-utils";
import type { 
    IntLike,
    // BytesLike,
 } from "@helios-lang/codec-utils";

 type TimeLike = IntLike;
 
        
import type {
    CapoHeliosBundle,
    CapoDelegateBundle,
    minimalData,
    HeliosScriptBundle,
    EnumTypeMeta,
    singleEnumVariantMeta,
    tagOnly,
    IntersectedEnum
} from "@donecollectively/stellar-contracts"


/**
 * A strong type for the canonical form of struct3
 * @remarks
 * Note that any enum fields in this type are expressed as a disjoint union of the enum variants.  Processing
 * enum data conforming to this type can be a bit of a pain.
 * For a more ergonomic, though less strictly-safe form of this type, see Ergostruct3 instead.
 * @public
 */
export interface struct3 {
    thirdLevelF1: /*minStructField*/ bigint
}


/**
 * An ergonomic, though less strictly-safe form of struct3
 * @remarks
 * This type can use enums expressed as merged unions of the enum variants.  You might think of this type
 * as being "read-only", in that it's possible to create data with this type that would not be suitable for
 * conversion to on-chain use.  For creating such data, use the struct3Like type,
 * or the on-chain data-building helpers instead.
 * @public
 */
export type Ergostruct3 = struct3/*like canon-other*/

/**
 * A strong type for the permissive form of struct3
 * @remarks
 * The field types enable implicit conversion from various allowable input types (including the canonical form).
 * @public
 */
export interface struct3Like {
    thirdLevelF1: /*minStructField*/ IntLike
}



/**
 * A strong type for the canonical form of OtherStruct
 * @remarks
 * Note that any enum fields in this type are expressed as a disjoint union of the enum variants.  Processing
 * enum data conforming to this type can be a bit of a pain.
 * For a more ergonomic, though less strictly-safe form of this type, see ErgoOtherStruct instead.
 * @public
 */
export interface OtherStruct {
    secondLevelF1: /*minStructField*/ bigint
    secondLevelF2: /*minStructField*/ struct3
}


/**
 * An ergonomic, though less strictly-safe form of OtherStruct
 * @remarks
 * This type can use enums expressed as merged unions of the enum variants.  You might think of this type
 * as being "read-only", in that it's possible to create data with this type that would not be suitable for
 * conversion to on-chain use.  For creating such data, use the OtherStructLike type,
 * or the on-chain data-building helpers instead.
 * @public
 */
export type ErgoOtherStruct = {
    secondLevelF1: /*minStructField*/ bigint
    secondLevelF2: /*minStructField*/ Ergostruct3
}


/**
 * A strong type for the permissive form of OtherStruct
 * @remarks
 * The field types enable implicit conversion from various allowable input types (including the canonical form).
 * @public
 */
export interface OtherStructLike {
    secondLevelF1: /*minStructField*/ IntLike
    secondLevelF2: /*minStructField*/ struct3Like
}




            /**
            * @internal
            */
            export type SomeKindaEnumMeta = EnumTypeMeta<
    {module: "StructDatumTester", enumName: "SomeKindaEnum"}, {
        case1: singleEnumVariantMeta<SomeKindaEnumMeta, "case1",
            "Constr#0", "tagOnly", tagOnly, "noSpecialFlags"
        >,
        case2: singleEnumVariantMeta<SomeKindaEnumMeta, "case2",
            "Constr#1", "singletonField", /* implied wrapper { f1: ... } for singleVariantField */ 
			bigint   , "noSpecialFlags"
        >
    }
>;


/**
 * SomeKindaEnum enum variants
 * 
 * @remarks - expresses the essential raw data structures
 * supporting the **2 variant(s)** of the SomeKindaEnum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SomeKindaEnumHelper` class
 *     for generating UPLC data for this enum type
 * @public
 */
export type SomeKindaEnum = 
        | { case1: tagOnly /*minEnumVariant*/ }
        | { case2: /* implied wrapper { f1: ... } for singleVariantField */ 
			bigint    /*minEnumVariant*/ }

/**
 * ergonomic type enabling easy access to values converted from the on-chain form
 * @remarks
 * The data will be expressed in canonical form, and enum variants are merged to a single type with optional fields.
 * Nested enums are also merged in this ergonomic way.
 * @public
 */
export type ErgoSomeKindaEnum = IntersectedEnum<SomeKindaEnum/*like canon enum*/>

/**
 * SomeKindaEnum enum variants (permissive)
 * 
 * @remarks - expresses the allowable data structure
 * for creating any of the **2 variant(s)** of the SomeKindaEnum enum type
 * 
 * - **Note**: Stellar Contracts provides a higher-level `SomeKindaEnumHelper` class
 *     for generating UPLC data for this enum type
 *
 * #### Permissive Type
 * This is a permissive type that allows additional input data types, which are 
 * converted by convention to the canonical types used in the on-chain context.
 * @public
 */
export type SomeKindaEnumLike = IntersectedEnum<
        | { case1: tagOnly /*minEnumVariant*/ }
        | { case2: /* implied wrapper { f1: ... } for singleVariantField */ 
			IntLike    /*minEnumVariant*/ }
>

/**
 * A strong type for the canonical form of DatumStruct
 * @remarks
 * Note that any enum fields in this type are expressed as a disjoint union of the enum variants.  Processing
 * enum data conforming to this type can be a bit of a pain.
 * For a more ergonomic, though less strictly-safe form of this type, see ErgoDatumStruct instead.
 * @public
 */
export interface DatumStruct {
    field1: /*minStructField*/ bigint
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStruct>
    field4: /*minStructField*/ SomeKindaEnum
}


/**
 * An ergonomic, though less strictly-safe form of DatumStruct
 * @remarks
 * This type can use enums expressed as merged unions of the enum variants.  You might think of this type
 * as being "read-only", in that it's possible to create data with this type that would not be suitable for
 * conversion to on-chain use.  For creating such data, use the DatumStructLike type,
 * or the on-chain data-building helpers instead.
 * @public
 */
export type ErgoDatumStruct = {
    field1: /*minStructField*/ bigint
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, ErgoOtherStruct>
    field4: /*minStructField*/ ErgoSomeKindaEnum
}


/**
 * A strong type for the permissive form of DatumStruct
 * @remarks
 * The field types enable implicit conversion from various allowable input types (including the canonical form).
 * @public
 */
export interface DatumStructLike {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
    field4: /*minStructField*/ SomeKindaEnumLike
}



