module uutMintingDelegate

import {
    tx, 
    get_current_input,
    get_current_validator_hash,
    get_cont_outputs
} from ScriptContext

// specialized to allow Tests to trigger generic UUT minting
// ... as a placeholder for application-specific UUT-minting use-cases
// original notes about (un)specialization follow:


//  //! provides a basic version, not yet specialized,
//  // of the "specializedDelegate" interface, which simply
//  // exports a DelegateDatum enum and DelegateActivities (redeemer enum).  

//  //! Your specialization MUST include the enum variants found in this
//  //  ... unspecialized version.  It MAY include additional Datum variants.
//  // Any additional Redeemer/Activity variants should be added underneath 
//  // the SpendingActivity / MintingActivity top-level enum variants, instead 
//  // of adding new top-level enum variants to DelegateActivity.

//  // The DelegateActivity (redeemer) enum conforms to the 
//  // Delegate Redeemer protocol, in which enum 0 is reserved for
//  // lifecycle activities, enum 1 is used for spend-related activities 
//  // (if the delegate is used as a spend delegate), and enum 2 is called
//  // for authorizing minting.  Enum 3 and beyond are reserved for
//  // extensions to the Delegate Redeemer protocol.

//  // Within the minting and spending activities, the specialization can 
//  // indicate a nested activity enum to support various dApp-specific
//  // activities.  

//  // Activities that validate minting of UUTs should contain enum fields 
//  // to identify the seed-transaction details needed for properly validating 
//  // UUT mints fitting the use-case.

//  //! Your specialization MAY include any additional functions, imports or 
//  //  methods defined on any of the types in this file.

import {
    AnyData,
    REQT,
    bREQT,
    TODO
} from StellarHeliosHelpers

import {
    DelegationDetail,
    mustReturnValueToScript,
    DelegateLifecycleActivity,
    CapoLifecycleActivity,
    unmodifiedDelegation
} from CapoDelegateHelpers

import {
    validateUutMinting,
    mkUutTnFactory
} from CapoMintHelpers

import {
    CapoCtx,
    mkCapoCtx
} from CapoHelpers

// import {
//     ProtocolSettings
// } from ProtocolSettings

// Helios data structures
struct SampleStruct {
    a: Int
    b: Map[String]ByteArray
    c: []Bool
    d: Option[Data]
}

enum SomeEnum {
    justATag 
    justAnInt { m: Int }
    oneNestedStruct { m: SampleStruct }
    hasNestedFields { 
        m: SampleStruct
        n: Int 
        // m: SomeEnum 
    }
    hasRecursiveFields {
        // todo: support recursive types
        // m: SomeEnum
        placeholder: Int
        ph2: String
    }
}

enum DelegateDatum {
    Cip68RefToken {  
        cip68meta: AnyData
        cip68version: Int
        otherDetails: Data // can be Unit () or anything else
    }
    IsDelegation {
        dd: DelegationDetail
    }
    TagOnlyDatum
    // same variant-index as Capo's DelegatedData
    capoStoredData {
        data: AnyData
        version: Int
        otherDetails: Data 
    }
    SingleDataElement {
        aString: String
    }
    SingleNestedStruct {
        aStruct: SampleStruct
    }
    HasNestedEnum {
        nested: SomeEnum
    }
    MultiFieldVariant {
        field1: Int
        field2: String
    }
    MultiFieldNestedThings {
        nestedStruct: SampleStruct
        nestedEnumMaybe: Option[SomeEnum]
    }

    // func validateSettings(_self, _settings: ProtocolSettings) -> Bool{
    //     assert(false, "not valid (stubbed)");
    //     // settings.serialize() != self.serialize() &&
    //     true
    // }
}


enum MintingActivity {
    // application can replace the placeholder, which is only here to 
    // avoid a syntax error in the unspecialized version
    mintingUuts {  
        seed: TxOutputId
        purposes: []String
    }
    mockOtherActivity {
        // for testing type-generation
        QQ: SomeEnum
    }
}

enum BurningActivity {
    _placeholder2BA {
        recId: ByteArray
    }
}

enum SpendingActivity {
    // application can replace the placeholder, which is only here to 
    // avoid a syntax error in the unspecialized version
    _placeholder2SA {
        id: ByteArray
    }

    // for testing - allowed by this policy, but always rejected by the CapoMinter policy 
    // ... even though allowed by the mintDgt
    mockWorkingSpendActivity {
        id: ByteArray
    }
}

enum DelegateActivity {
    CapoLifecycleActivities {
        activity: CapoLifecycleActivity
    }
    DelegateLifecycleActivities {
        activity: DelegateLifecycleActivity
    }
    SpendingActivities {
        activity: SpendingActivity
    }
    MintingActivities {
        activity: MintingActivity
    }
    BurningActivities {
        activity: BurningActivity
    }

    CreatingDelegatedData {
        seed: TxOutputId
        dataType: String
        // id created from seed
    }
    UpdatingDelegatedData {
        // seed not used
        dataType: String
        recId: ByteArray
    }
    DeletingDelegatedData {
        // seed not used
        dataType: String
        recId: ByteArray
    }

    MultipleDelegateActivities {
        activities: []Data // actually a []DelegateActivity
        // todo: change this back when the recursive enum's `__is_valid_data not found` error is resolved
    }
    OtherActivities {
        activity: Data // anything defined in the specialization; nothing here.
    }
    // this function gives a general-purpose implementation of checking for 
    // valid uut mints. A specialization might modify it use different policies
    // or enforce additional requirements
    func genericUutMinting(self, 
        mdd: DelegateDatum
    ) -> Bool {
        DelegateActivity::MintingActivities{
            MintingActivity::mintingUuts{
                seed, purposes
        }   } = self;

        DelegateDatum::IsDelegation{dd} = mdd;
        returnsAuthzToken : Bool = mustReturnValueToScript(
            dd.tvAuthorityToken(), 
            dd.tn
        );

        o : []TxOutput = get_cont_outputs();
        if (o.length != 1) { error("single utxo only") };

        print (" - in uutMintingDelegate\n");
        isOk : Bool = returnsAuthzToken && 

        unmodifiedDelegation( /* isD, same as mdd */ mdd.serialize()) &&

        // This call can serve as a template for enforcing expected mints 
        // of uuts (and additional token values) in validation of application-
        // specific activities, given (mph, seed, purposes)
        validateUutMinting(
            mph: dd.mph,
            seed: seed,
            purposes: purposes,
            // we are the mint delegate:
            needsMintDelegateApproval: false,
            // otherMintedValue: ()
            mkTokenName: mkUutTnFactory(seed)
        );

        isOk
    }

    //! Used only for validating non-IsDelegation datum types and activities.
    // if you have any special admininstrative data structures that inform 
    // ...  your minting policy, this might be useful.  Otherwise, and typically,
    // ... you should look to Activity validations above in additionalDelegateValidation,
    // ...  in which the isDelegation token is being spent with an application-specific
    // ...  activity/redeemer    func additionalDelegateValidation( self,
    func additionalDelegateValidation( self,
        priorMddd: DelegateDatum::IsDelegation,
        cctx: CapoCtx
    ) -> Bool {
        print("  ----- uutMinting delegate - checking additional delegate validation\n");
        // mph = priorMddd.dd.mph;
        self.switch {
            // normal  lifecycle activities are already validated, but 
            //  ... you can add more constraints here if needed
            DelegateLifecycleActivities => true,
            CapoLifecycleActivities{CLA} => {
                CLA.switch{
                    CreatingDelegate{   /* seed TxOutput */ _, purpose} => {
                        assert(purpose == "myNamedDgt", "unsupported delegate-creation purpose: " + purpose);

                        true
                    },
                    _ => {
                        REQT("   -- to customize: mint/spend delegates have an option to validate additional lifecycle constraints here");
                        true
                    }
                }
            },
            SpendingActivities{activity} => {
                activity.switch{
                    mockWorkingSpendActivity => true, // for testing
                    _ => error("mint delegates don't ordinarily **do** SpendingActivities")
                }
            },
            MintingActivities{activity} => {
                print("uutMinting delegate - checking mintingActivities\n");

                cctx.withCharterRef().orFail() &&
                cctx.nowActingAsMintDgt() &&
                activity.switch{
                    mintingUuts => self.genericUutMinting(priorMddd),
                    mockOtherActivity => error("mockOtherActivity is only for testing type-generation")
                    // _ => // leave as compile-time problem
                }
            },
            OtherActivities => error(
                "no other activities exist in this delegate"
            ),
            _ => false
        }
    }

    //! used only for validating non-IsDelegation datum types and activities.
    //   if you have any admininstrative data structures that inform 
    //   your minting policy, this might be useful.  Otherise, look to Activity validations
    //   above, in which the isDelegation token is being spent with an application-specific
    //   activity/redeemer
    func otherDatumValidation( self,
        _priorMdd: DelegateDatum
    ) -> Bool {
        neverTriggered = () -> {  error("never called") };
        self.switch{
            // Note: this set of DelegateActivities is reserved for the IsDelegation datum.
            //  Using it on any other Datum type will always fail and execution will never arrive here.
            DelegateLifecycleActivities => neverTriggered(),
            CapoLifecycleActivities => neverTriggered(),
            // ------------------- application-specific activities can be added here

            _ => false  // prevents non-exhaustive match errors, even if you remove the above neverTriggered() calls
        }
    }
}
