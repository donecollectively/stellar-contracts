// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in StructDatumTester (src/testing/StructDatumTester.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { makeCast, type Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
 import { makeInlineTxOutputDatum, type InlineTxOutputDatum, type TxOutputDatum } from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import {
    ContractDataBridge,
    DataBridge, 
    DataBridgeReaderClass ,
    EnumBridge,
    impliedSeedActivityMaker,
    type tagOnly, 
    type hasSeed, 
    type isActivity, 
    type funcWithImpliedSeed,
    type SeedAttrs,
    type JustAnEnum,
    type callWith,
    type IntersectedEnum,
} from "@donecollectively/stellar-contracts"

export type TimeLike = IntLike;


import type {
    struct3, Ergostruct3, struct3Like,
    OtherStruct, ErgoOtherStruct, OtherStructLike,
    SomeKindaEnum, ErgoSomeKindaEnum, SomeKindaEnumLike,
    DatumStruct, ErgoDatumStruct, DatumStructLike
} from "./StructDatumTester.typeInfo.js";

export type * as types from "./StructDatumTester.typeInfo.js";
import type * as types from "./StructDatumTester.typeInfo.js";



/**
 * GENERATED data bridge for **StructDatumTester** script (defined in class ***StructDatumTesterBundle***)
 * main: **src/testing/StructDatumTester.hl**, project: **stellar-contracts**
 * @remarks
* This class doesn't need to be used directly.  Its methods are available through the ***contract's methods***:
*  - `get mkDatum` - returns the datum-building bridge for the contract's datum type
*  - `get activity` - returns an activity-building bridge for the contract's activity type
*  - `get reader` - (advanced) returns a data-reader bridge for parsing CBOR/UPLC-encoded data of specific types
*  - `get onchain` - (advanced) returns a data-encoding bridge for types defined in the contract's script
* The advanced methods are not typically needed - mkDatum and activity should normally provide all the
* type-safe data-encoding needed for the contract.  For reading on-chain data, the Capo's `findDelegatedDataUtxos()` 
* method is the normal way to locate and decode on-chain data without needing to explicitly use the data-bridge helper classes.
* 
* ##### customizing the bridge class name
* Note that you may override `get bridgeClassName() { return "..." }` to customize the name of this bridge class
* @public
 */
export class StructDatumTesterDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
    /**
     * Helper class for generating TxOutputDatum for the ***datum type (DatumStruct)***
     * for this contract script. 
     * 
     * This accessor object is callable with the indicated argument-type
     * @example - contract.mkDatum(arg: /* ... see the indicated callWith args \*\/)
    *
    * DatumStructLike is the same as the expanded type details given

     */
    datum: callWith<DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
    field4: /*minStructField*/ SomeKindaEnumLike
}
, DatumStructHelper>
     = new DatumStructHelper({isMainnet: this.isMainnet}) as any  // datumAccessor/struct


    /**
     * this is the specific type of datum for the `StructDatumTester` script
     * normally, we suggest accessing the `datum` property instead.
     */
    DatumStruct: callWith<DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
    field4: /*minStructField*/ SomeKindaEnumLike
}
, DatumStructHelper> = this.datum;

    readDatum : (d: UplcData) => ErgoDatumStruct = (d) =>  {
        return this.reader.DatumStruct(d)
    }

    /**
     * Helper class for generating TxOutputDatum for the ***activity type ***
     * ("redeemer" type) for this `StructDatumTester` contract script. 
     * 
     * This accessor object is callable with the indicated argument-type
     * @example - contract.mkDatum(arg: /* ... see the indicated callWith args \*\/)\n
     */
    activity: callWith<IntLike, OtherActivityTypeHelper>
     = new OtherActivityTypeHelper({}) as any  // activityAccessor/other

    reader = new StructDatumTesterDataBridgeReader(this, this.isMainnet);

    /**
     * accessors for all the types defined in the `StructDatumTester` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {
      /**
       * generates UplcData for the enum type ***SomeKindaEnum*** for the `StructDatumTester` script
       */
        SomeKindaEnum: new SomeKindaEnumHelper({isMainnet: this.isMainnet}),

      /**
       * generates UplcData for the enum type ***struct3*** for the `StructDatumTester` script
       */
        struct3: (fields: struct3Like | {
    thirdLevelF1: /*minStructField*/ IntLike
}
) => {
        return this.ᱺᱺstruct3Cast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***OtherStruct*** for the `StructDatumTester` script
       */
        OtherStruct: (fields: OtherStructLike | {
    secondLevelF1: /*minStructField*/ IntLike
    secondLevelF2: /*minStructField*/ struct3Like
}
) => {
        return this.ᱺᱺOtherStructCast.toUplcData(fields);
    },
      /**
       * generates UplcData for the enum type ***DatumStruct*** for the `StructDatumTester` script
       */
        DatumStruct: (fields: DatumStructLike | {
    field1: /*minStructField*/ IntLike
    field2: /*minStructField*/ string
    field3: /*minStructField*/ Map<string, OtherStructLike>
    field4: /*minStructField*/ SomeKindaEnumLike
}
) => {
        return this.ᱺᱺDatumStructCast.toUplcData(fields);
    },    }    

    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺstruct3Cast = makeCast<struct3, struct3Like>(
        struct3Schema,
        { isMainnet: true, unwrapSingleFieldEnumVariants: true }
    );
    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺOtherStructCast = makeCast<OtherStruct, OtherStructLike>(
        OtherStructSchema,
        { isMainnet: true, unwrapSingleFieldEnumVariants: true }
    );
    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺDatumStructCast = makeCast<DatumStruct, DatumStructLike>(
        DatumStructSchema,
        { isMainnet: true, unwrapSingleFieldEnumVariants: true }
    );


}
export default StructDatumTesterDataBridge;

export class OtherActivityTypeHelper extends DataBridge {
    isCallable = true
        /**
        * @internal
        * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<
        bigint, IntLike
    >(
        {"kind":"internal","name":"Int"}, 
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    ); // datumAccessorCast

    
    } // mkOtherDatumHelperClass
    
/*
 * @public
 */
export class StructDatumTesterDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: StructDatumTesterDataBridge, isMainnet: boolean) {
        super();
    }
    /**
        * reads UplcData *known to fit the **SomeKindaEnum*** enum type,
        * for the StructDatumTester script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    SomeKindaEnum(d : UplcData) { 
        const typeHelper = this.bridge.types.SomeKindaEnum;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoSomeKindaEnum;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **struct3*** struct type,
        * for the StructDatumTester script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    struct3(d: UplcData) {
        const cast = this.bridge.ᱺᱺstruct3Cast;
        return cast.fromUplcData(d) //??? as Ergostruct3;
    } /* structReader helper */

    /**
        * reads UplcData *known to fit the **OtherStruct*** struct type,
        * for the StructDatumTester script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    OtherStruct(d: UplcData) {
        const cast = this.bridge.ᱺᱺOtherStructCast;
        return cast.fromUplcData(d) //??? as ErgoOtherStruct;
    } /* structReader helper */

datum = (d: UplcData) => { return this.DatumStruct(d) }
    /**
        * reads UplcData *known to fit the **DatumStruct*** struct type,
        * for the StructDatumTester script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    DatumStruct(d: UplcData) {
        const cast = this.bridge.ᱺᱺDatumStructCast;
        return cast.fromUplcData(d) //??? as ErgoDatumStruct;
    } /* structReader helper */

}

/**
 * Helper class for generating UplcData for the struct ***struct3*** type.
 * @public
 */
export class struct3Helper extends DataBridge {
    isCallable = true
   /**
            * @internal
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<struct3, struct3Like>(
        struct3Schema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // struct3(fields: struct3Like) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for the struct ***OtherStruct*** type.
 * @public
 */
export class OtherStructHelper extends DataBridge {
    isCallable = true
   /**
            * @internal
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<OtherStruct, OtherStructLike>(
        OtherStructSchema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // OtherStruct(fields: OtherStructLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


/**
 * Helper class for generating UplcData for variants of the ***SomeKindaEnum*** enum type.
 * @public
 * @remarks
 * this class is not intended to be used directly.  Its methods are available through automatic accesors in the parent struct, contract-datum- or contract-activity-bridges. */
export class SomeKindaEnumHelper extends EnumBridge<JustAnEnum> {
    /*mkEnumHelperClass*/
    /**
            * @internal
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<SomeKindaEnum, SomeKindaEnumLike>(
        SomeKindaEnumSchema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

/**
 * (property getter): UplcData for ***"StructDatumTester::SomeKindaEnum.case1"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#0***
 */
    get case1() {
        const uplc = this.mkUplcData({ case1: {} }, 
            "StructDatumTester::SomeKindaEnum.case1");
        return uplc;
    } /* tagOnly variant accessor */

    /**
     * generates  UplcData for ***"StructDatumTester::SomeKindaEnum.case2"***
     */
    case2(
        f1: IntLike
    ) : UplcData {
        const uplc = this.mkUplcData({ 
           case2: f1
        }, "StructDatumTester::SomeKindaEnum.case2"); /*singleField enum variant*/
       return uplc;
    }
}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for the struct ***DatumStruct*** type.
 * @public
 */
export class DatumStructHelper extends DataBridge {
    isCallable = true
   /**
            * @internal
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<DatumStruct, DatumStructLike>(
        DatumStructSchema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // DatumStruct(fields: DatumStructLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


export const struct3Schema : StructTypeSchema = {
    "kind": "struct",
    "format": "singleton",
    "id": "__module__StructDatumTester__struct3[]",
    "name": "struct3",
    "fieldTypes": [
        {
            "name": "thirdLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        }
    ]
};

export const OtherStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__OtherStruct[]",
    "name": "OtherStruct",
    "fieldTypes": [
        {
            "name": "secondLevelF1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "secondLevelF2",
            "type": {
                "kind": "struct",
                "format": "singleton",
                "id": "__module__StructDatumTester__struct3[]",
                "name": "struct3",
                "fieldTypes": [
                    {
                        "name": "thirdLevelF1",
                        "type": {
                            "kind": "internal",
                            "name": "Int"
                        }
                    }
                ]
            }
        }
    ]
};

export const SomeKindaEnumSchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "SomeKindaEnum",
    "id": "__module__StructDatumTester__SomeKindaEnum[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__StructDatumTester__SomeKindaEnum[]__case1",
            "name": "case1",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__StructDatumTester__SomeKindaEnum[]__case2",
            "name": "case2",
            "fieldTypes": [
                {
                    "name": "f1",
                    "type": {
                        "kind": "internal",
                        "name": "Int"
                    }
                }
            ]
        }
    ]
};

export const DatumStructSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__StructDatumTester__DatumStruct[]",
    "name": "DatumStruct",
    "fieldTypes": [
        {
            "name": "field1",
            "type": {
                "kind": "internal",
                "name": "Int"
            }
        },
        {
            "name": "field2",
            "type": {
                "kind": "internal",
                "name": "String"
            }
        },
        {
            "name": "field3",
            "type": {
                "kind": "map",
                "keyType": {
                    "kind": "internal",
                    "name": "String"
                },
                "valueType": {
                    "kind": "struct",
                    "format": "list",
                    "id": "__module__StructDatumTester__OtherStruct[]",
                    "name": "OtherStruct",
                    "fieldTypes": [
                        {
                            "name": "secondLevelF1",
                            "type": {
                                "kind": "internal",
                                "name": "Int"
                            }
                        },
                        {
                            "name": "secondLevelF2",
                            "type": {
                                "kind": "struct",
                                "format": "singleton",
                                "id": "__module__StructDatumTester__struct3[]",
                                "name": "struct3",
                                "fieldTypes": [
                                    {
                                        "name": "thirdLevelF1",
                                        "type": {
                                            "kind": "internal",
                                            "name": "Int"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "field4",
            "type": {
                "kind": "enum",
                "name": "SomeKindaEnum",
                "id": "__module__StructDatumTester__SomeKindaEnum[]",
                "variantTypes": [
                    {
                        "kind": "variant",
                        "tag": 0,
                        "id": "__module__StructDatumTester__SomeKindaEnum[]__case1",
                        "name": "case1",
                        "fieldTypes": []
                    },
                    {
                        "kind": "variant",
                        "tag": 1,
                        "id": "__module__StructDatumTester__SomeKindaEnum[]__case2",
                        "name": "case2",
                        "fieldTypes": [
                            {
                                "name": "f1",
                                "type": {
                                    "kind": "internal",
                                    "name": "Int"
                                }
                            }
                        ]
                    }
                ]
            }
        }
    ]
};
// }
