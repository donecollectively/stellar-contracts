minting CapoMinter

import {
    tx, 
    get_current_input,
    get_current_validator_hash,
    get_current_minting_policy_hash,
    get_cont_outputs
} from ScriptContext

import { 
    hasSeedUtxo, 
    mkUutTnFactory,
    requiresMintDelegateApproval,
    validateUutMinting, 
    MinterActivity
} from CapoMintHelpers

import {
    CapoDatum,
    CapoActivity,
    getRefCharterUtxo,
    mkCapoCtx
} from CapoHelpers

import {
    DgTknDisposition as DgTkn,
    RelativeDelegateLink
} from CapoDelegateHelpers

import {
    mustFindInputRedeemer,
    TRACE,
    REQT,
    TODO,
    mkTv,
    outputAndDatum,
    tvCharter
} from StellarHeliosHelpers

// seed parameters provide uniqueness for the script validator hash:
const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42
const rev : Int = 1

func hasContractSeedUtxo(tx: Tx) -> Bool {
    REQT("verifies that the provided seed utxo is being spent, providing uniqueness assurances for the minting-script's seed parameters");

    hasSeedUtxo(tx, TxOutputId::new(seedTxn, seedIndex))
}

func main(r : MinterActivity) -> Bool {
    mph: MintingPolicyHash = get_current_minting_policy_hash();
    value_minted: Value = tx.minted;
    assert(true || (/* never evaluated */ rev.serialize() == rev.serialize()), "no");
    assert(true || (/* never evaluated */ seedTxn.serialize() == seedTxn.serialize()), "no");
    print(" 🚥❓ Capo minter");
    print("  -- minter policy id: " + get_current_minting_policy_hash().show());

    ok : Bool = r.switch {
        charter: mintingCharter => {
            charterVal : Value = mkTv(mph: mph, tn: "charter");

            // these must be sorted BY LENGTH FIRST, then lexicographically
            //   (actually byte-wise, but ~same diff)
            // settingsTnBase: String = "set";
            authTnBase : String = "capoGov";
            mintDgtTnBase : String = "mintDgt";
            spendDgtTnBase: String = "spendDgt";
            purposes = []String{
                // settingsTnBase,
                authTnBase, 
                mintDgtTnBase, 
                spendDgtTnBase
            };
            // settingsDgtTnBase: String = "settingsDgt"
            // if (charter.withSettings) purposes = purposes + []String{ settingsDgtTnBase, "settings" }

            TRACE("cm2".encode_utf8(), "  -- creating Capo charter");
            REQT("must mint the charter token");
            assert(value_minted >= charterVal,
                "charter token not minted");

            hasSeed: Bool = hasContractSeedUtxo(tx);
            minterSeed: TxOutputId = TxOutputId::new(seedTxn, seedIndex);
            mkUutName: (String) -> String = mkUutTnFactory(
                minterSeed  
            );
            TRACE("cm3".encode_utf8(), "validateUutMinting");
            REQT("must mint uuts for mintDgt, spendDgt, and govAuth using the same seed");
            mintsUuts: Bool = validateUutMinting(
                mph: mph,
                seed: minterSeed,
                purposes: purposes, 
                mkTokenName: mkUutName,
                bootstrapCharter: charterVal
            );
            TRACE("cm4".encode_utf8(), "output to expected address");
            REQT("must deposit the charter token to the new Capo address");
            charterOutput: TxOutput = tx.outputs.find( (output: TxOutput) -> Bool {
                output.address == charter.owner &&
                    output.value.contains(charterVal)
            });
            // ^^ fails if there's no charter output to the right address

            // print("defaultMinter @C");
            rawCharterData : Data = charterOutput.datum.inline;
            charterData = CapoDatum::CharterData::from_data(rawCharterData);
            CharterData{
                spendDgt, 
                spendInvariants,
                namedDelegates,
                mintDgt, 
                mintInvariants, 
                authDgt,
                manifest,
                pendingDelegates
            } = charterData;
            // settings are not essential to a Capo.
            // ... some Capos could use settings, and it would be
            // ... up to its mint/spend delegate to enforce their presence.
            // Also, their verification by other delegates, in case of updating
            // the settings.  This gives settings a slightly special role,
            // but much less than the special status they had when Settings
            // were a separate datum type.

            TRACE("cm5".encode_utf8(), "validate charter data");
            REQT("the new charter must not have any mint invariants, spend invariants, manifest entry or pending-delegate-actions");
            // once we have burned down the test backlog a bit, we can add these in:
            assert(mintInvariants.length == 0, "no mint invariants allowed at charter creation");
            assert(spendInvariants.length == 0, "no spend invariants allowed at charter creation");
            assert(manifest.length == 0, "no UUTs allowed at charter creation");
            assert(pendingDelegates.length == 0, "no pending delegates allowed at charter creation");

            REQT("the new charter must have mintDgt, spendDgt, and authDgt tokens, each deposited to their separate script addresses");
            TRACE("cm6".encode_utf8(), "  -- checking for required delegates\n");
            hasGoodDelegates : Bool = true &&
                authDgt.hasValidOutput(mph, true, DgTkn::Created) &&
                mintDgt.hasValidOutput(mph, true, DgTkn::Created) &&
                spendDgt.hasValidOutput(mph, true, DgTkn::Created) &&
                true;

                // if (charter.withSettings) {
                //     REQT("when 'withSettings' is true, there must be a settings-policy delegate created");
                //     assert(namedDelegates.length == 1, "only settingsDgt allowed at charter creation");
                    
                //     settingsDgt = namedDelegates.get_safe("settingsPolicy").switch {
                //         None => error("missing required named delegate 'settingsPolicy'"),
                //         Some{dgt} => dgt
                //     };
                //     settingsDgt.hasValidOutput(mph, true, DgTkn::Created)

                //     REQT("with settings, there must be a settings datum stored in the Capo");
                //     cctx = mkCapoCtx(mph).nowMinting(charter.owner, charterOutput);
                //     foundSettingsOutput : TxOutput = cctx.delegatedOutputData(
                //         mkUutName(settingsTnBase)
                //     );
                
                //     // tx.outputs.find_safe( (output: TxOutput) -> Bool {
                //     //     output.address == charter.owner &&
                //     //         output.value.contains(mkTv(mph: mph, tn: mkUutName(settingsTnBase))
                //     // }).switch {
                //     //     None => error("missing required settings data"),
                //     //     Some{output} => output
                //     // };
                                    
                //     outputAndDatum[CapoDatum::DelegatedData] = 
                //         charterData.mustFindSettingsOutput(mph: mph, inAddr: charter.owner);
                //     assert(foundSettings == foundSettings, "no way, no");

                //     true
                // } else { 
                //     assert(namedDelegates.length == 0, "no named delegates allowed at charter creation");
                //     true
                //  };

            TRACE("cm7".encode_utf8(), "");
            assert(namedDelegates.length == 0, "no named delegates allowed at charter creation");

            TRACE("cm8".encode_utf8(), "finishing");
            print("\n  -- hasSeed: " + hasSeed.show());
            print("\n  -- mintsUuts: " + mintsUuts.show());
            print("\n  -- hasGoodDelegates: " + hasGoodDelegates.show());
        
            true
            && hasGoodDelegates 
            && mintsUuts 
            && hasSeed
        },

        // ------------------------- MOST MINTING ACTIVITIES USE THIS CODE PATH --------------------
        mintWithDelegateAuthorizing => {
            print("mintWithDelegateAuthorizing\n");
            requiresMintDelegateApproval(mph)
            // -------------------------  ^^^ deferring to the Capo's current minting delegate --------------------
        },
        _ => {
            cctx = mkCapoCtx(mph).withCharterInput();
            r.switch {
                mintingCharter => error("unreachable"),
                mintWithDelegateAuthorizing => error("unreachable"),
                addingMintInvariant{_seed} => {
                    print("checking for addingMintInvariant\n");
                    assert(false, "should be handled by the mintDelegate!");
                    false
                },

                addingSpendInvariant{_seed} => {
                    print("checking for addingSpendInvariant\n");
                    assert(false, "should be handled by the mintDelegate!");
                    false
                },

                forcingNewMintDelegate{seed} => {
                    print("checking for forcingNewMintDelegate\n");
                    badCharterActivity = "when forcingNewMintDelegate, capo charter must be spent with its capoLifecycleActivity.forcingNewMintDelegate activity";
                    REQT("Ensures the Capo charter is also forcingNewMintDelegate");
                    cctx.getCharterRedeemer().switch {
                        capoLifecycleActivity{activity} => activity.switch {
                            forcingNewMintDelegate{seedToCapo, purpose} => {
                                print("WARNING: capo lifecycle activity is forcing a new mint-delegate with its Escape-hatch activity");
                                print("NOTE: the normal lifecycle is to use minter:mintWithDelegateAuthorizing, \n"+
                                    "  ... which defers to the Capo's current minting delegate and allows \n"+
                                    "  ... queuePendingChange(role: MintDgt) to queue the new mint delegate for installation"
                                );
                                REQT("Ensures the new mintDgt-* uut is minted with a seed");
                                assert(seed == seedToCapo, "seed mismatch:"+
                                    "\n  - Capo activity seed: "+seedToCapo.show()+
                                    "\n  - Minter seed: "+seed.show()
                                );
                                assert("mintDgt" == purpose, "wrong Capo purpose '"+purpose+"'; should be 'mintDgt'");
                                validateUutMinting(
                                    mph: mph,
                                    seed: seed,
                                    purposes: []String{purpose},
                                    // forcing the new dgt; don't involve the current mintDgt
                                    needsMintDelegateApproval: false 
                                )
                            }, 
                            _ => error(badCharterActivity)
                            
                            // queuePendingChange{capoActivitySeed, purpose, role, name} => {
                            //     assert(purpose == "mintDgt", "wrong purpose");
                            //     role.switch {
                            //         MintDgt => {
                            //             print("ok: capo lifecycle activity is adding a (pending) mint-delegate");
                            //             true
                            //         }, 
                            //         _ => error("wrong role in capo lifecycle activity")
                            //     }
                            // }
                        },
                        _ => error(badCharterActivity)
                    }
                },

                CreatingNewSpendDelegate{seed, replaceExisting} => {
                    print("checking for CreatingNewSpendDelegate\n");

                    needsCapoForcedInstall = replaceExisting.switch {
                        Some => false,
                        None => true
                    };

                    otherMintedValue : Value = replaceExisting.switch {
                        Some{oldTokenName} => {
                            BURNED: Int = -1;
                            Value::new(
                                AssetClass::new(mph, oldTokenName), 
                                BURNED
                            )
                        },
                        None => Value::ZERO
                    };
                    mkTokenName = mkUutTnFactory(seed);
                    spendDgtTn = mkTokenName("spendDgt");

                    hasCapoApproval = if (!needsCapoForcedInstall) {
                        cctx.getCharterRedeemer().switch {
                            updatingCharter => {
                                TODO("the minter should see that the new spend delegate is QUEUED for installation by the Capo");
                                TODO("this essential logic vvvv will move to the installation moment");
                                REQT("the updated charter must reference the new spend delegate");
                                RelativeDelegateLink{uutName, _dvh, _config} = cctx.getNextCharterData().spendDelegateLink;
                                print("expected uutName: "+uutName);
                                print("spendDgtTn in charter: "+spendDgtTn);
                                assert(uutName == spendDgtTn, "new spend delegate not referenced in updated charter");
                                
                                REQT("EXPECTS the Capo to validate that only the one thing is updated, and that the new UUT is deposited where it's expected");
                                true
                            },
                            // capoLifecycleActivity{activity} => activity.switch {                                
                            // queuePendingChange{capoActivitySeed, purpose, role, name} => {
                            //     assert(!replaceExisting, "queuePendingChange can't use replaceExisting option");

                            //     assert(purpose == "spendDgt", "wrong purpose");
                            //     role.switch {
                            //         SpendDgt => {
                            //             print("ok: capo lifecycle activity is adding a (pending) spend-delegate");
                            //             true
                            //         }, 
                            //         _ => error("wrong role in capo lifecycle activity")
                            //     }
                            // },
                            _ => error("capo charter must be spent with its updatingCharter activity")
                        }
                    } else {
                        REQT("When the old dgTkn isn't replaced, it ensures the Capo charter is also forcingNewSpendDelegate");
                        badCharterActivity = "when forcingNewSpendDelegate, capo charter must be spent with its capoLifecycleActivity.forcingNewSpendDelegate activity";
                        cctx.getCharterRedeemer().switch {
                            capoLifecycleActivity{activity} => activity.switch {
                                forcingNewSpendDelegate{seedToCapo, purpose} => {
                                    print("WARNING: capo lifecycle activity is forcing a spend-delegate with its Escape-hatch activity");
                                    print("NOTE: the normal lifecycle is to use minter:mintWithDelegateAuthorizing, \n"+
                                        "  ... which defers to the Capo's current minting delegate and allows \n"+
                                        "  ... queuePendingChange(role: SpendDgt) to queue the new spend delegate for installation"
                                    );

                                    REQT("Ensures the Capo activity's seed matches the minter's seed");
                                    assert(seed == seedToCapo, "seed mismatch: "
                                        + "\n  - Capo activity seed: " + seedToCapo.show()
                                        + "\n  - Minter seed: " + seed.show()
                                    );
                                    assert("spendDgt" == purpose, "wrong Capo purpose '"+purpose+"'; should be 'spendDgt'");
                                    true
                                },
                                _ => error(badCharterActivity)
                            },
                            _ => error(badCharterActivity)
                        }
                    };

                    REQT("Ensures the new spendDgt-* uut is uniquely minted using the seed");
                    didMintUuts = validateUutMinting(
                        mph: mph,
                        seed: seed,
                        purposes: []String{ "spendDgt" },
                        mkTokenName: mkTokenName,
                        otherMintedValue: otherMintedValue,
                        // forcing the new dgt; don't involve the current mintDgt
                        needsMintDelegateApproval: false 
                    );

                    didMintUuts && hasCapoApproval
                }        
            }
            // _ => true // don't catch other variants, for complete coverage above.
        }
    };

    // print("defaultMinter: minting value: " + value_minted.show());
    print("\n\n🚥🟢 Capo minter: ok!\n");
    // assert(false, "barfola");
    ok
}

