// generated by Stellar Contracts dataBridgeGenerator
// based on types defined in CapoMinter (src/minting/CapoMinter.hl)
// recommended: CHECK THIS FILE INTO YOUR VERSION CONTROL SYSTEM
//   ... and keep checking in the changes as your on-chain types evolve.
//
// NOTE: this file is auto-generated; do not edit directly

import { makeCast, type Cast } from "@helios-lang/contract-utils"
import type { UplcData, ConstrData } from "@helios-lang/uplc";
import type { 
    IntLike,
 } from "@helios-lang/codec-utils";
import type {
    Address,
    AssetClass,
    DatumHash,
    MintingPolicyHash,
    PubKey,
    PubKeyHash,
    ScriptHash,
    SpendingCredential,
    StakingCredential,
    StakingValidatorHash,
    TimeRange,
    TxId,
    TxInput,
    TxOutput,
    TxOutputId,
    ValidatorHash,
    Value,
} from "@helios-lang/ledger";
 import { makeInlineTxOutputDatum, type InlineTxOutputDatum, type TxOutputDatum } from "@helios-lang/ledger";
import type { EnumTypeSchema, StructTypeSchema } from "@helios-lang/type-utils";


import { 
    DataBridge, 
    ContractDataBridge, 
    DataBridgeReaderClass,
    type callWith,
} from "../helios/dataBridge/DataBridge.js"
import { 
    EnumBridge,
    type JustAnEnum,
} from "../helios/dataBridge/EnumBridge.js"
import type { tagOnly } from "../helios/HeliosMetaTypes.js"
import type { IntersectedEnum } from "../helios/typeUtils.js"
import { 
    impliedSeedActivityMaker, SeedActivity, type hasSeed, type isActivity, 
    type funcWithImpliedSeed, type SeedAttrs
} from "../ActivityTypes.js"


/**
 * @public
 */
export type TimeLike = IntLike;


import type {
    MinterActivity$CreatingNewSpendDelegate, MinterActivity$Ergo$CreatingNewSpendDelegate, MinterActivity$CreatingNewSpendDelegateLike,
    MinterActivity, ErgoMinterActivity, MinterActivityLike,
    RelativeDelegateLink, ErgoRelativeDelegateLink, RelativeDelegateLinkLike
} from "./CapoMinter.typeInfo.js";

export type * as types from "./CapoMinter.typeInfo.js";
import type * as types from "./CapoMinter.typeInfo.js";



/**
 * GENERATED data bridge for **CapoMinter** script (defined in class ***CapoMinterBundle***)
 * main: **src/minting/CapoMinter.hl**, project: **stellar-contracts**
 * @remarks
* This class doesn't need to be used directly.  Its methods are available through the ***contract's methods***:
*  - `get mkDatum` - returns the datum-building bridge for the contract's datum type
*  - `get activity` - returns an activity-building bridge for the contract's activity type
*  - `get reader` - (advanced) returns a data-reader bridge for parsing CBOR/UPLC-encoded data of specific types
*  - `get onchain` - (advanced) returns a data-encoding bridge for types defined in the contract's script
* The advanced methods are not typically needed - mkDatum and activity should normally provide all the
* type-safe data-encoding needed for the contract.  For reading on-chain data, the Capo's `findDelegatedDataUtxos()` 
* method is the normal way to locate and decode on-chain data without needing to explicitly use the data-bridge helper classes.
* 
* ##### customizing the bridge class name
* Note that you may override `get bridgeClassName() { return "..." }` to customize the name of this bridge class
* @public
 */
export class CapoMinterDataBridge extends ContractDataBridge {
    static isAbstract = false as const;
    isAbstract = false as const;
datum = undefined // no datum type defined for this bundle (minter / rewards script)


    /**
     * generates UplcData for the activity type (***MinterActivity***) for the `CapoMinter` script
     */
    activity : MinterActivityHelper= new MinterActivityHelper({isMainnet: this.isMainnet, isActivity: true}); // activityAccessor/enum
        MinterActivity: MinterActivityHelper = this.activity;

    reader = new CapoMinterDataBridgeReader(this, this.isMainnet);

    /**
     * accessors for all the types defined in the `CapoMinter` script
     * @remarks - these accessors are used to generate UplcData for each type
     */
    types = {
      /**
       * generates UplcData for the enum type ***MinterActivity*** for the `CapoMinter` script
       */
        MinterActivity: new MinterActivityHelper({isMainnet: this.isMainnet}),

      /**
       * generates UplcData for the enum type ***RelativeDelegateLink*** for the `CapoMinter` script
       */
        RelativeDelegateLink: (fields: RelativeDelegateLinkLike | {
    uutName: /*minStructField*/ string
    delegateValidatorHash: /*minStructField*/ ValidatorHash | string | number[] | undefined
    config: /*minStructField*/ number[]
}
) => {
        return this.ᱺᱺRelativeDelegateLinkCast.toUplcData(fields);
    },    }    

    /**
                * uses unicode U+1c7a - sorts to the end */
    ᱺᱺRelativeDelegateLinkCast = makeCast<RelativeDelegateLink, RelativeDelegateLinkLike>(
        RelativeDelegateLinkSchema,
        { isMainnet: true, unwrapSingleFieldEnumVariants: true }
    );


}
export default CapoMinterDataBridge;

/**
 * @public
 */
export class CapoMinterDataBridgeReader extends DataBridgeReaderClass {
    constructor(public bridge: CapoMinterDataBridge, isMainnet: boolean) {
        super();
    }
    /**
        * reads UplcData *known to fit the **MinterActivity*** enum type,
        * for the CapoMinter script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the enum type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    MinterActivity(d : UplcData) { 
        const typeHelper = this.bridge.types.MinterActivity;
        const cast = typeHelper.ᱺᱺcast;  

        return cast.fromUplcData(d) as ErgoMinterActivity;        
    } /* enumReader helper */

    /**
        * reads UplcData *known to fit the **RelativeDelegateLink*** struct type,
        * for the CapoMinter script.
        * #### Standard WARNING
        * 
        * This is a low-level data-reader for use in ***advanced development scenarios***.
        * 
        * Used correctly with data that matches the type, this reader
        * returns strongly-typed data - your code using these types will be safe.
        * 
        * On the other hand, reading non-matching data will not give you a valid result.  
        * It may throw an error, or it may throw no error, but return a value that
        * causes some error later on in your code, when you try to use it.
        */
    RelativeDelegateLink(d: UplcData) {
        const cast = this.bridge.ᱺᱺRelativeDelegateLinkCast;
        return cast.fromUplcData(d) //??? as ErgoRelativeDelegateLink;
    } /* structReader helper */

}

/**
 * Helper class for generating UplcData for variants of the ***MinterActivity*** enum type.
 * @public
 * @remarks
 * this class is not intended to be used directly.  Its methods are available through automatic accesors in the parent struct, contract-datum- or contract-activity-bridges. */
export class MinterActivityHelper extends EnumBridge<isActivity> {
    /*mkEnumHelperClass*/
    /**
            * @internal
            *  uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<MinterActivity, MinterActivityLike>(
        MinterActivitySchema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.mintingCharter"***
     */
    mintingCharter(
        owner: Address | string
    ) : isActivity {
        const uplc = this.mkUplcData({ 
           mintingCharter: owner
        }, "CapoMintHelpers::MinterActivity.mintingCharter"); /*singleField enum variant*/
       return uplc;
    }

/**
 * (property getter): UplcData for ***"CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing"***
 * @remarks - ***tagOnly*** variant accessor returns an empty ***constrData#1***
 */
    get mintWithDelegateAuthorizing() {
        const uplc = this.mkUplcData({ mintWithDelegateAuthorizing: {} }, 
            "CapoMintHelpers::MinterActivity.mintWithDelegateAuthorizing");
        return uplc;
    } /* tagOnly variant accessor */

    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingMintInvariant"***, 
    * given a transaction-context (or direct arg) with a ***seed utxo*** 
    * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
    *  - to get a transaction context having the seed needed for this argument, 
    *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
    * - or see Stellar Contracts' `hasSeed` type for other ways to feed it with a TxOutputId.
    *  - in a context providing an implicit seed utxo, use 
    *    the `$seeded$addingMintInvariant}` variant of this activity instead
    *
     */
    addingMintInvariant(thingWithSeed: hasSeed | TxOutputId | string) 
    : isActivity {
        const seedTxOutputId = this.getSeed(thingWithSeed);
        const uplc = this.mkUplcData({ 
           addingMintInvariant: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.addingMintInvariant");  
        return uplc;
    }  /*singleField/seeded enum variant*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingMintInvariant"***
     * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ##### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     * #### Usage
     * Access the activity-creator as a getter: `$seeded$addingMintInvariant`
     *
     * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
     * `mkTxnCreateRecord({activity, ...})` method.
     */
    get $seeded$addingMintInvariant() {
        return impliedSeedActivityMaker(this,this.addingMintInvariant)() // called with no args needed
    } /* coda: seeded helper in same singleField/seeded enum variant*/


    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingSpendInvariant"***, 
    * given a transaction-context (or direct arg) with a ***seed utxo*** 
    * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
    *  - to get a transaction context having the seed needed for this argument, 
    *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
    * - or see Stellar Contracts' `hasSeed` type for other ways to feed it with a TxOutputId.
    *  - in a context providing an implicit seed utxo, use 
    *    the `$seeded$addingSpendInvariant}` variant of this activity instead
    *
     */
    addingSpendInvariant(thingWithSeed: hasSeed | TxOutputId | string) 
    : isActivity {
        const seedTxOutputId = this.getSeed(thingWithSeed);
        const uplc = this.mkUplcData({ 
           addingSpendInvariant: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.addingSpendInvariant");  
        return uplc;
    }  /*singleField/seeded enum variant*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.addingSpendInvariant"***
     * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ##### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     * #### Usage
     * Access the activity-creator as a getter: `$seeded$addingSpendInvariant`
     *
     * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
     * `mkTxnCreateRecord({activity, ...})` method.
     */
    get $seeded$addingSpendInvariant() {
        return impliedSeedActivityMaker(this,this.addingSpendInvariant)() // called with no args needed
    } /* coda: seeded helper in same singleField/seeded enum variant*/


    /**
    * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.forcingNewMintDelegate"***, 
    * given a transaction-context (or direct arg) with a ***seed utxo*** 
    * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
    *  - to get a transaction context having the seed needed for this argument, 
    *    see the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass.
    * - or see Stellar Contracts' `hasSeed` type for other ways to feed it with a TxOutputId.
    *  - in a context providing an implicit seed utxo, use 
    *    the `$seeded$forcingNewMintDelegate}` variant of this activity instead
    *
     */
    forcingNewMintDelegate(thingWithSeed: hasSeed | TxOutputId | string) 
    : isActivity {
        const seedTxOutputId = this.getSeed(thingWithSeed);
        const uplc = this.mkUplcData({ 
           forcingNewMintDelegate: seedTxOutputId
        },"CapoMintHelpers::MinterActivity.forcingNewMintDelegate");  
        return uplc;
    }  /*singleField/seeded enum variant*/

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.forcingNewMintDelegate"***
     * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ##### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     * #### Usage
     * Access the activity-creator as a getter: `$seeded$forcingNewMintDelegate`
     *
     * Use the resulting activity-creator in a seed-providing context, such as the delegated-data-controller's
     * `mkTxnCreateRecord({activity, ...})` method.
     */
    get $seeded$forcingNewMintDelegate() {
        return impliedSeedActivityMaker(this,this.forcingNewMintDelegate)() // called with no args needed
    } /* coda: seeded helper in same singleField/seeded enum variant*/


    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"***, 
     * given a transaction-context ***with a seed utxo*** and other field details
     * @remarks
     * See the `tcxWithSeedUtxo()` method in your contract's off-chain StellarContracts subclass 
     * to create a context satisfying `hasSeed`.
     * See `$seeded$CreatingNewSpendDelegate}` for use in a context
     * providing an implicit seed utxo. 
     */
    CreatingNewSpendDelegate(value: hasSeed, fields: { 
        replacingUut: number[] | undefined 
    } ) : isActivity
    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"*** 
     * with raw seed details included in fields.
     */
    CreatingNewSpendDelegate(fields: MinterActivity$CreatingNewSpendDelegateLike | {
            seed: TxOutputId | string,
            replacingUut: number[] | undefined
    } ): isActivity
    CreatingNewSpendDelegate(
        seedOrUf: hasSeed | MinterActivity$CreatingNewSpendDelegateLike, 
        filteredFields?: { 
            replacingUut: number[] | undefined
    }) : isActivity {
        if (filteredFields) {
            const seedTxOutputId = this.getSeed(seedOrUf as hasSeed);
            const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: { seed: seedTxOutputId, ...filteredFields } 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        } else {
            const fields = seedOrUf as MinterActivity$CreatingNewSpendDelegateLike; 
           const uplc = this.mkUplcData({
                CreatingNewSpendDelegate: fields 
            }, "CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate");
           return uplc;
        }
    } /*multiFieldVariant/seeded enum accessor*/ 

    /**
     * generates isActivity/redeemer wrapper with UplcData for ***"CapoMintHelpers::MinterActivity.CreatingNewSpendDelegate"***, 
     * @param fields - \{ replacingUut: number[] | undefined \}
     * @remarks
    * ##### Seeded activity
    * This activity  uses the pattern of spending a utxo to provide a uniqueness seed.
     * ##### Activity contains implied seed
     * Creates a SeedActivity based on the provided args, reserving space for a seed to be 
     * provided implicitly by a SeedActivity-supporting library function. 
     *
     * #### Usage
     *   1. Call the `$seeded$CreatingNewSpendDelegate({ replacingUut })`
      *       method with the indicated (non-seed) details.
     *   2. Use the resulting activity in a seed-providing context, such as the delegated-data-controller's
     *       `mkTxnCreateRecord({activity})` method.
     */
    $seeded$CreatingNewSpendDelegate = impliedSeedActivityMaker(this, 
        this.CreatingNewSpendDelegate as (value: hasSeed, fields: { 
            replacingUut: number[] | undefined 
        } ) => isActivity
    )
    /* coda: seeded helper in same multiFieldVariant/seeded */

}/*mkEnumHelperClass*/


/**
 * Helper class for generating UplcData for the struct ***RelativeDelegateLink*** type.
 * @public
 */
export class RelativeDelegateLinkHelper extends DataBridge {
    isCallable = true
   /**
            * @internal
            * uses unicode U+1c7a - sorts to the end */
    ᱺᱺcast = makeCast<RelativeDelegateLink, RelativeDelegateLinkLike>(
        RelativeDelegateLinkSchema,
        { isMainnet: this.isMainnet, unwrapSingleFieldEnumVariants: true }
    );

    // You might expect a function as follows.  We provide this interface and result, 
    // using a proxy in the inheritance chain.
    // see the callableDataBridge type on the 'datum' property in the contract bridge.
    //
    //Also: if you're reading this, ask in our discord server about a 🎁 for curiosity-seekers! 
    //
    // RelativeDelegateLink(fields: RelativeDelegateLinkLike) {
    //    return this.ᱺᱺcast.toUplcData(fields);
    //}
} //mkStructHelperClass 


export const MinterActivitySchema : EnumTypeSchema = {
    "kind": "enum",
    "name": "MinterActivity",
    "id": "__module__CapoMintHelpers__MinterActivity[]",
    "variantTypes": [
        {
            "kind": "variant",
            "tag": 0,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintingCharter",
            "name": "mintingCharter",
            "fieldTypes": [
                {
                    "name": "owner",
                    "type": {
                        "kind": "internal",
                        "name": "Address"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 1,
            "id": "__module__CapoMintHelpers__MinterActivity[]__mintWithDelegateAuthorizing",
            "name": "mintWithDelegateAuthorizing",
            "fieldTypes": []
        },
        {
            "kind": "variant",
            "tag": 2,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingMintInvariant",
            "name": "addingMintInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 3,
            "id": "__module__CapoMintHelpers__MinterActivity[]__addingSpendInvariant",
            "name": "addingSpendInvariant",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 4,
            "id": "__module__CapoMintHelpers__MinterActivity[]__forcingNewMintDelegate",
            "name": "forcingNewMintDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                }
            ]
        },
        {
            "kind": "variant",
            "tag": 5,
            "id": "__module__CapoMintHelpers__MinterActivity[]__CreatingNewSpendDelegate",
            "name": "CreatingNewSpendDelegate",
            "fieldTypes": [
                {
                    "name": "seed",
                    "type": {
                        "kind": "internal",
                        "name": "TxOutputId"
                    }
                },
                {
                    "name": "replacingUut",
                    "type": {
                        "kind": "option",
                        "someType": {
                            "kind": "internal",
                            "name": "ByteArray"
                        }
                    }
                }
            ]
        }
    ]
};

export const RelativeDelegateLinkSchema : StructTypeSchema = {
    "kind": "struct",
    "format": "list",
    "id": "__module__CapoDelegateHelpers__RelativeDelegateLink[]",
    "name": "RelativeDelegateLink",
    "fieldTypes": [
        {
            "name": "uutName",
            "type": {
                "kind": "internal",
                "name": "String"
            }
        },
        {
            "name": "delegateValidatorHash",
            "type": {
                "kind": "option",
                "someType": {
                    "kind": "internal",
                    "name": "ValidatorHash"
                }
            }
        },
        {
            "name": "config",
            "type": {
                "kind": "internal",
                "name": "ByteArray"
            }
        }
    ]
};
// }
